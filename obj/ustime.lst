   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"ustime.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.get_us_time,"ax",%progbits
  20              		.align	2
  21              		.global	get_us_time
  22              		.thumb
  23              		.thumb_func
  25              	get_us_time:
  26              	.LFB110:
  27              		.file 1 "src/ustime.c"
   1:src/ustime.c  **** #include "ustime.h"
   2:src/ustime.c  **** #include <FreeRTOS.h>
   3:src/ustime.c  **** #include "stm32f4xx.h"
   4:src/ustime.c  **** 
   5:src/ustime.c  **** /**
   6:src/ustime.c  ****  * Get time count in microseconds.
   7:src/ustime.c  ****  *
   8:src/ustime.c  ****  * \note
   9:src/ustime.c  ****  *   this function must be called at least
  10:src/ustime.c  ****  *   once every 65ms to work correctly.
  11:src/ustime.c  ****  *
  12:src/ustime.c  ****  */
  13:src/ustime.c  **** uint64_t get_us_time()
  14:src/ustime.c  **** {
  28              		.loc 1 14 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 14, -4
  36              		.cfi_offset 7, -8
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  15:src/ustime.c  ****     static uint16_t t0;
  16:src/ustime.c  ****     static uint64_t tickcount;
  17:src/ustime.c  **** 
  18:src/ustime.c  ****     vPortEnterCritical();
  43              		.loc 1 18 0
  44 0006 FFF7FEFF 		bl	vPortEnterCritical
  19:src/ustime.c  **** 
  20:src/ustime.c  ****     int t = TIM7->CNT;
  45              		.loc 1 20 0
  46 000a 4FF4A053 		mov	r3, #5120
  47 000e C4F20003 		movt	r3, 16384
  48 0012 5B6A     		ldr	r3, [r3, #36]
  49 0014 7B60     		str	r3, [r7, #4]
  21:src/ustime.c  ****     if (t < t0)
  50              		.loc 1 21 0
  51 0016 40F20003 		movw	r3, #:lower16:t0.7203
  52 001a C0F20003 		movt	r3, #:upper16:t0.7203
  53 001e 1B88     		ldrh	r3, [r3, #0]
  54 0020 1A46     		mov	r2, r3
  55 0022 7B68     		ldr	r3, [r7, #4]
  56 0024 9A42     		cmp	r2, r3
  57 0026 03DD     		ble	.L2
  22:src/ustime.c  ****         t += 0x10000;
  58              		.loc 1 22 0
  59 0028 7B68     		ldr	r3, [r7, #4]
  60 002a 03F58033 		add	r3, r3, #65536
  61 002e 7B60     		str	r3, [r7, #4]
  62              	.L2:
  23:src/ustime.c  **** 
  24:src/ustime.c  ****     tickcount += t - t0;
  63              		.loc 1 24 0
  64 0030 40F20003 		movw	r3, #:lower16:t0.7203
  65 0034 C0F20003 		movt	r3, #:upper16:t0.7203
  66 0038 1B88     		ldrh	r3, [r3, #0]
  67 003a 7A68     		ldr	r2, [r7, #4]
  68 003c D11A     		subs	r1, r2, r3
  69 003e 0A46     		mov	r2, r1
  70 0040 4FEAE273 		asr	r3, r2, #31
  71 0044 40F20001 		movw	r1, #:lower16:tickcount.7204
  72 0048 C0F20001 		movt	r1, #:upper16:tickcount.7204
  73 004c D1E90001 		ldrd	r0, [r1]
  74 0050 8018     		adds	r0, r0, r2
  75 0052 41EB0301 		adc	r1, r1, r3
  76 0056 40F20003 		movw	r3, #:lower16:tickcount.7204
  77 005a C0F20003 		movt	r3, #:upper16:tickcount.7204
  78 005e C3E90001 		strd	r0, [r3]
  25:src/ustime.c  ****     t0 = t;
  79              		.loc 1 25 0
  80 0062 7B68     		ldr	r3, [r7, #4]
  81 0064 9AB2     		uxth	r2, r3
  82 0066 40F20003 		movw	r3, #:lower16:t0.7203
  83 006a C0F20003 		movt	r3, #:upper16:t0.7203
  84 006e 1A80     		strh	r2, [r3, #0]	@ movhi
  26:src/ustime.c  **** 
  27:src/ustime.c  ****     vPortExitCritical();
  85              		.loc 1 27 0
  86 0070 FFF7FEFF 		bl	vPortExitCritical
  28:src/ustime.c  **** 
  29:src/ustime.c  ****     return tickcount;
  87              		.loc 1 29 0
  88 0074 40F20003 		movw	r3, #:lower16:tickcount.7204
  89 0078 C0F20003 		movt	r3, #:upper16:tickcount.7204
  90 007c D3E90023 		ldrd	r2, [r3]
  30:src/ustime.c  **** }
  91              		.loc 1 30 0
  92 0080 1046     		mov	r0, r2
  93 0082 1946     		mov	r1, r3
  94 0084 07F10807 		add	r7, r7, #8
  95 0088 BD46     		mov	sp, r7
  96 008a 80BD     		pop	{r7, pc}
  97              		.cfi_endproc
  98              	.LFE110:
 100              		.section	.text.delay_us,"ax",%progbits
 101              		.align	2
 102              		.global	delay_us
 103              		.thumb
 104              		.thumb_func
 106              	delay_us:
 107              	.LFB111:
  31:src/ustime.c  **** 
  32:src/ustime.c  **** 
  33:src/ustime.c  **** /**
  34:src/ustime.c  ****  * Perform a microsecond delay
  35:src/ustime.c  ****  *
  36:src/ustime.c  ****  * \param  us  number of microseconds to wait.
  37:src/ustime.c  ****  * \note   The actual delay will last between us and (us-1) microseconds.
  38:src/ustime.c  ****  *         To wait _at_least_ 1 us, you should use delay_us(2).
  39:src/ustime.c  ****  */
  40:src/ustime.c  **** void delay_us(unsigned long us)
  41:src/ustime.c  **** {
 108              		.loc 1 41 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 16
 111              		@ frame_needed = 1, uses_anonymous_args = 0
 112              		@ link register save eliminated.
 113 0000 80B4     		push	{r7}
 114              	.LCFI3:
 115              		.cfi_def_cfa_offset 4
 116              		.cfi_offset 7, -4
 117 0002 85B0     		sub	sp, sp, #20
 118              	.LCFI4:
 119              		.cfi_def_cfa_offset 24
 120 0004 00AF     		add	r7, sp, #0
 121              	.LCFI5:
 122              		.cfi_def_cfa_register 7
 123 0006 7860     		str	r0, [r7, #4]
  42:src/ustime.c  ****     uint16_t  t0 = TIM7->CNT;
 124              		.loc 1 42 0
 125 0008 4FF4A053 		mov	r3, #5120
 126 000c C4F20003 		movt	r3, 16384
 127 0010 5B6A     		ldr	r3, [r3, #36]
 128 0012 FB81     		strh	r3, [r7, #14]	@ movhi
 129              	.L6:
 130              	.LBB2:
  43:src/ustime.c  ****     for (;;) {
  44:src/ustime.c  ****         int  t = TIM7->CNT;
 131              		.loc 1 44 0
 132 0014 4FF4A053 		mov	r3, #5120
 133 0018 C4F20003 		movt	r3, 16384
 134 001c 5B6A     		ldr	r3, [r3, #36]
 135 001e BB60     		str	r3, [r7, #8]
  45:src/ustime.c  ****         if (t < t0)
 136              		.loc 1 45 0
 137 0020 FA89     		ldrh	r2, [r7, #14]
 138 0022 BB68     		ldr	r3, [r7, #8]
 139 0024 9A42     		cmp	r2, r3
 140 0026 03DD     		ble	.L4
  46:src/ustime.c  ****             t += 0x10000;
 141              		.loc 1 46 0
 142 0028 BB68     		ldr	r3, [r7, #8]
 143 002a 03F58033 		add	r3, r3, #65536
 144 002e BB60     		str	r3, [r7, #8]
 145              	.L4:
  47:src/ustime.c  **** 
  48:src/ustime.c  ****         if (us < t - t0)
 146              		.loc 1 48 0
 147 0030 FB89     		ldrh	r3, [r7, #14]
 148 0032 BA68     		ldr	r2, [r7, #8]
 149 0034 D31A     		subs	r3, r2, r3
 150 0036 1A46     		mov	r2, r3
 151 0038 7B68     		ldr	r3, [r7, #4]
 152 003a 9A42     		cmp	r2, r3
 153 003c 08D8     		bhi	.L8
 154              	.L5:
  49:src/ustime.c  ****             return;
  50:src/ustime.c  **** 
  51:src/ustime.c  ****         us -= t - t0;
 155              		.loc 1 51 0
 156 003e FA89     		ldrh	r2, [r7, #14]
 157 0040 BB68     		ldr	r3, [r7, #8]
 158 0042 D31A     		subs	r3, r2, r3
 159 0044 7A68     		ldr	r2, [r7, #4]
 160 0046 D318     		adds	r3, r2, r3
 161 0048 7B60     		str	r3, [r7, #4]
  52:src/ustime.c  ****         t0  = t;
 162              		.loc 1 52 0
 163 004a BB68     		ldr	r3, [r7, #8]
 164 004c FB81     		strh	r3, [r7, #14]	@ movhi
 165              	.LBE2:
  53:src/ustime.c  ****     }
 166              		.loc 1 53 0
 167 004e E1E7     		b	.L6
 168              	.L8:
 169              	.LBB3:
  49:src/ustime.c  ****             return;
 170              		.loc 1 49 0
 171 0050 00BF     		nop
 172              	.L7:
 173              	.LBE3:
  54:src/ustime.c  **** }
 174              		.loc 1 54 0
 175 0052 07F11407 		add	r7, r7, #20
 176 0056 BD46     		mov	sp, r7
 177 0058 80BC     		pop	{r7}
 178 005a 7047     		bx	lr
 179              		.cfi_endproc
 180              	.LFE111:
 182              		.section	.text.delay_ms,"ax",%progbits
 183              		.align	2
 184              		.global	delay_ms
 185              		.thumb
 186              		.thumb_func
 188              	delay_ms:
 189              	.LFB112:
  55:src/ustime.c  **** 
  56:src/ustime.c  **** 
  57:src/ustime.c  **** /**
  58:src/ustime.c  ****  * Perform a millisecond delay
  59:src/ustime.c  ****  *
  60:src/ustime.c  ****  * \param  ms  number of milliseconds to wait.
  61:src/ustime.c  ****  */
  62:src/ustime.c  **** void delay_ms(unsigned long ms)
  63:src/ustime.c  **** {
 190              		.loc 1 63 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 8
 193              		@ frame_needed = 1, uses_anonymous_args = 0
 194 0000 80B5     		push	{r7, lr}
 195              	.LCFI6:
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 14, -4
 198              		.cfi_offset 7, -8
 199 0002 82B0     		sub	sp, sp, #8
 200              	.LCFI7:
 201              		.cfi_def_cfa_offset 16
 202 0004 00AF     		add	r7, sp, #0
 203              	.LCFI8:
 204              		.cfi_def_cfa_register 7
 205 0006 7860     		str	r0, [r7, #4]
  64:src/ustime.c  ****     delay_us(ms * 1000);
 206              		.loc 1 64 0
 207 0008 7B68     		ldr	r3, [r7, #4]
 208 000a 4FF47A72 		mov	r2, #1000
 209 000e 02FB03F3 		mul	r3, r2, r3
 210 0012 1846     		mov	r0, r3
 211 0014 FFF7FEFF 		bl	delay_us
  65:src/ustime.c  **** }
 212              		.loc 1 65 0
 213 0018 07F10807 		add	r7, r7, #8
 214 001c BD46     		mov	sp, r7
 215 001e 80BD     		pop	{r7, pc}
 216              		.cfi_endproc
 217              	.LFE112:
 219              		.section	.text.init_us_timer,"ax",%progbits
 220              		.align	2
 221              		.global	init_us_timer
 222              		.thumb
 223              		.thumb_func
 225              	init_us_timer:
 226              	.LFB113:
  66:src/ustime.c  **** 
  67:src/ustime.c  **** 
  68:src/ustime.c  **** /**
  69:src/ustime.c  ****  * Set up TIM7 as a 16bit, microsecond-timer.
  70:src/ustime.c  ****  *
  71:src/ustime.c  ****  */
  72:src/ustime.c  **** void init_us_timer()
  73:src/ustime.c  **** {
 227              		.loc 1 73 0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 16
 230              		@ frame_needed = 1, uses_anonymous_args = 0
 231 0000 80B5     		push	{r7, lr}
 232              	.LCFI9:
 233              		.cfi_def_cfa_offset 8
 234              		.cfi_offset 14, -4
 235              		.cfi_offset 7, -8
 236 0002 84B0     		sub	sp, sp, #16
 237              	.LCFI10:
 238              		.cfi_def_cfa_offset 24
 239 0004 00AF     		add	r7, sp, #0
 240              	.LCFI11:
 241              		.cfi_def_cfa_register 7
  74:src/ustime.c  ****     RCC_ClocksTypeDef RCC_Clocks;
  75:src/ustime.c  ****     RCC_GetClocksFreq(&RCC_Clocks);
 242              		.loc 1 75 0
 243 0006 3B46     		mov	r3, r7
 244 0008 1846     		mov	r0, r3
 245 000a FFF7FEFF 		bl	RCC_GetClocksFreq
  76:src/ustime.c  **** 
  77:src/ustime.c  ****     RCC->APB1ENR |= RCC_APB1Periph_TIM7;
 246              		.loc 1 77 0
 247 000e 4FF46053 		mov	r3, #14336
 248 0012 C4F20203 		movt	r3, 16386
 249 0016 4FF46052 		mov	r2, #14336
 250 001a C4F20202 		movt	r2, 16386
 251 001e 126C     		ldr	r2, [r2, #64]
 252 0020 42F02002 		orr	r2, r2, #32
 253 0024 1A64     		str	r2, [r3, #64]
  78:src/ustime.c  ****     TIM7->PSC = (RCC_Clocks.PCLK2_Frequency / 1000000) - 1;
 254              		.loc 1 78 0
 255 0026 4FF4A053 		mov	r3, #5120
 256 002a C4F20003 		movt	r3, 16384
 257 002e F968     		ldr	r1, [r7, #12]
 258 0030 4DF68362 		movw	r2, #56963
 259 0034 C4F21B32 		movt	r2, 17179
 260 0038 A2FB0102 		umull	r0, r2, r2, r1
 261 003c 4FEA9242 		lsr	r2, r2, #18
 262 0040 92B2     		uxth	r2, r2
 263 0042 02F1FF32 		add	r2, r2, #-1
 264 0046 92B2     		uxth	r2, r2
 265 0048 1A85     		strh	r2, [r3, #40]	@ movhi
  79:src/ustime.c  ****     TIM7->ARR = 0xFFFF;
 266              		.loc 1 79 0
 267 004a 4FF4A053 		mov	r3, #5120
 268 004e C4F20003 		movt	r3, 16384
 269 0052 4FF6FF72 		movw	r2, #65535
 270 0056 DA62     		str	r2, [r3, #44]
  80:src/ustime.c  ****     TIM7->CR1 = TIM_CR1_CEN;
 271              		.loc 1 80 0
 272 0058 4FF4A053 		mov	r3, #5120
 273 005c C4F20003 		movt	r3, 16384
 274 0060 4FF00102 		mov	r2, #1
 275 0064 1A80     		strh	r2, [r3, #0]	@ movhi
  81:src/ustime.c  **** }
 276              		.loc 1 81 0
 277 0066 07F11007 		add	r7, r7, #16
 278 006a BD46     		mov	sp, r7
 279 006c 80BD     		pop	{r7, pc}
 280              		.cfi_endproc
 281              	.LFE113:
 283 006e 00BF     		.section	.bss.t0.7203,"aw",%nobits
 284              		.align	1
 287              	t0.7203:
 288 0000 0000     		.space	2
 289              		.section	.bss.tickcount.7204,"aw",%nobits
 290              		.align	3
 293              	tickcount.7204:
 294 0000 00000000 		.space	8
 294      00000000 
 295              		.text
 296              	.Letext0:
 297              		.file 2 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/i
 298              		.file 3 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 299              		.file 4 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 300              		.file 5 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ustime.c
     /tmp/ccOHjcsd.s:20     .text.get_us_time:00000000 $t
     /tmp/ccOHjcsd.s:25     .text.get_us_time:00000000 get_us_time
     /tmp/ccOHjcsd.s:287    .bss.t0.7203:00000000 t0.7203
     /tmp/ccOHjcsd.s:293    .bss.tickcount.7204:00000000 tickcount.7204
     /tmp/ccOHjcsd.s:101    .text.delay_us:00000000 $t
     /tmp/ccOHjcsd.s:106    .text.delay_us:00000000 delay_us
     /tmp/ccOHjcsd.s:183    .text.delay_ms:00000000 $t
     /tmp/ccOHjcsd.s:188    .text.delay_ms:00000000 delay_ms
     /tmp/ccOHjcsd.s:220    .text.init_us_timer:00000000 $t
     /tmp/ccOHjcsd.s:225    .text.init_us_timer:00000000 init_us_timer
     /tmp/ccOHjcsd.s:284    .bss.t0.7203:00000000 $d
     /tmp/ccOHjcsd.s:290    .bss.tickcount.7204:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
RCC_GetClocksFreq
