   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"croutine.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.pxReadyCoRoutineLists,"aw",%nobits
  20              		.align	2
  23              	pxReadyCoRoutineLists:
  24 0000 00000000 		.space	40
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25              		.section	.bss.xDelayedCoRoutineList1,"aw",%nobits
  26              		.align	2
  29              	xDelayedCoRoutineList1:
  30 0000 00000000 		.space	20
  30      00000000 
  30      00000000 
  30      00000000 
  30      00000000 
  31              		.section	.bss.xDelayedCoRoutineList2,"aw",%nobits
  32              		.align	2
  35              	xDelayedCoRoutineList2:
  36 0000 00000000 		.space	20
  36      00000000 
  36      00000000 
  36      00000000 
  36      00000000 
  37              		.section	.bss.pxDelayedCoRoutineList,"aw",%nobits
  38              		.align	2
  41              	pxDelayedCoRoutineList:
  42 0000 00000000 		.space	4
  43              		.section	.bss.pxOverflowDelayedCoRoutineList,"aw",%nobits
  44              		.align	2
  47              	pxOverflowDelayedCoRoutineList:
  48 0000 00000000 		.space	4
  49              		.section	.bss.xPendingReadyCoRoutineList,"aw",%nobits
  50              		.align	2
  53              	xPendingReadyCoRoutineList:
  54 0000 00000000 		.space	20
  54      00000000 
  54      00000000 
  54      00000000 
  54      00000000 
  55              		.global	pxCurrentCoRoutine
  56              		.section	.bss.pxCurrentCoRoutine,"aw",%nobits
  57              		.align	2
  60              	pxCurrentCoRoutine:
  61 0000 00000000 		.space	4
  62              		.section	.bss.uxTopCoRoutineReadyPriority,"aw",%nobits
  63              		.align	2
  66              	uxTopCoRoutineReadyPriority:
  67 0000 00000000 		.space	4
  68              		.section	.bss.xCoRoutineTickCount,"aw",%nobits
  69              		.align	2
  72              	xCoRoutineTickCount:
  73 0000 00000000 		.space	4
  74              		.section	.bss.xLastTickCount,"aw",%nobits
  75              		.align	2
  78              	xLastTickCount:
  79 0000 00000000 		.space	4
  80              		.section	.bss.xPassedTicks,"aw",%nobits
  81              		.align	2
  84              	xPassedTicks:
  85 0000 00000000 		.space	4
  86              		.section	.text.xCoRoutineCreate,"ax",%progbits
  87              		.align	2
  88              		.global	xCoRoutineCreate
  89              		.thumb
  90              		.thumb_func
  92              	xCoRoutineCreate:
  93              	.LFB110:
  94              		.file 1 "FreeRTOS/Source/croutine.c"
   1:FreeRTOS/Source/croutine.c **** /*
   2:FreeRTOS/Source/croutine.c ****     FreeRTOS V7.0.2 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:FreeRTOS/Source/croutine.c **** 
   4:FreeRTOS/Source/croutine.c **** 
   5:FreeRTOS/Source/croutine.c ****     ***************************************************************************
   6:FreeRTOS/Source/croutine.c ****      *                                                                       *
   7:FreeRTOS/Source/croutine.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:FreeRTOS/Source/croutine.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:FreeRTOS/Source/croutine.c ****      *    available.                                                         *
  10:FreeRTOS/Source/croutine.c ****      *                                                                       *
  11:FreeRTOS/Source/croutine.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:FreeRTOS/Source/croutine.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:FreeRTOS/Source/croutine.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:FreeRTOS/Source/croutine.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:FreeRTOS/Source/croutine.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:FreeRTOS/Source/croutine.c ****      *    for microcontrollers - completely free of charge!                  *
  17:FreeRTOS/Source/croutine.c ****      *                                                                       *
  18:FreeRTOS/Source/croutine.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:FreeRTOS/Source/croutine.c ****      *                                                                       *
  20:FreeRTOS/Source/croutine.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:FreeRTOS/Source/croutine.c ****      *                                                                       *
  22:FreeRTOS/Source/croutine.c ****     ***************************************************************************
  23:FreeRTOS/Source/croutine.c **** 
  24:FreeRTOS/Source/croutine.c **** 
  25:FreeRTOS/Source/croutine.c ****     This file is part of the FreeRTOS distribution.
  26:FreeRTOS/Source/croutine.c **** 
  27:FreeRTOS/Source/croutine.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:FreeRTOS/Source/croutine.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:FreeRTOS/Source/croutine.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:FreeRTOS/Source/croutine.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:FreeRTOS/Source/croutine.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:FreeRTOS/Source/croutine.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:FreeRTOS/Source/croutine.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:FreeRTOS/Source/croutine.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:FreeRTOS/Source/croutine.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:FreeRTOS/Source/croutine.c ****     more details. You should have received a copy of the GNU General Public
  37:FreeRTOS/Source/croutine.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:FreeRTOS/Source/croutine.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:FreeRTOS/Source/croutine.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:FreeRTOS/Source/croutine.c ****     FreeRTOS WEB site.
  41:FreeRTOS/Source/croutine.c **** 
  42:FreeRTOS/Source/croutine.c ****     1 tab == 4 spaces!
  43:FreeRTOS/Source/croutine.c **** 
  44:FreeRTOS/Source/croutine.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:FreeRTOS/Source/croutine.c ****     contact details.
  46:FreeRTOS/Source/croutine.c **** 
  47:FreeRTOS/Source/croutine.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:FreeRTOS/Source/croutine.c ****     critical systems.
  49:FreeRTOS/Source/croutine.c **** 
  50:FreeRTOS/Source/croutine.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:FreeRTOS/Source/croutine.c ****     licensing and training services.
  52:FreeRTOS/Source/croutine.c **** */
  53:FreeRTOS/Source/croutine.c **** 
  54:FreeRTOS/Source/croutine.c **** #include "FreeRTOS.h"
  55:FreeRTOS/Source/croutine.c **** #include "task.h"
  56:FreeRTOS/Source/croutine.c **** #include "croutine.h"
  57:FreeRTOS/Source/croutine.c **** 
  58:FreeRTOS/Source/croutine.c **** /*
  59:FreeRTOS/Source/croutine.c ****  * Some kernel aware debuggers require data to be viewed to be global, rather
  60:FreeRTOS/Source/croutine.c ****  * than file scope.
  61:FreeRTOS/Source/croutine.c ****  */
  62:FreeRTOS/Source/croutine.c **** #ifdef portREMOVE_STATIC_QUALIFIER
  63:FreeRTOS/Source/croutine.c **** 	#define static
  64:FreeRTOS/Source/croutine.c **** #endif
  65:FreeRTOS/Source/croutine.c **** 
  66:FreeRTOS/Source/croutine.c **** 
  67:FreeRTOS/Source/croutine.c **** /* Lists for ready and blocked co-routines. --------------------*/
  68:FreeRTOS/Source/croutine.c **** static xList pxReadyCoRoutineLists[ configMAX_CO_ROUTINE_PRIORITIES ];	/*< Prioritised ready co-rou
  69:FreeRTOS/Source/croutine.c **** static xList xDelayedCoRoutineList1;									/*< Delayed co-routines. */
  70:FreeRTOS/Source/croutine.c **** static xList xDelayedCoRoutineList2;									/*< Delayed co-routines (two lists are used - one for 
  71:FreeRTOS/Source/croutine.c **** static xList * pxDelayedCoRoutineList;									/*< Points to the delayed co-routine list currently 
  72:FreeRTOS/Source/croutine.c **** static xList * pxOverflowDelayedCoRoutineList;							/*< Points to the delayed co-routine list curr
  73:FreeRTOS/Source/croutine.c **** static xList xPendingReadyCoRoutineList;											/*< Holds co-routines that have been readied by 
  74:FreeRTOS/Source/croutine.c **** 
  75:FreeRTOS/Source/croutine.c **** /* Other file private variables. --------------------------------*/
  76:FreeRTOS/Source/croutine.c **** corCRCB * pxCurrentCoRoutine = NULL;
  77:FreeRTOS/Source/croutine.c **** static unsigned portBASE_TYPE uxTopCoRoutineReadyPriority = 0;
  78:FreeRTOS/Source/croutine.c **** static portTickType xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;
  79:FreeRTOS/Source/croutine.c **** 
  80:FreeRTOS/Source/croutine.c **** /* The initial state of the co-routine when it is created. */
  81:FreeRTOS/Source/croutine.c **** #define corINITIAL_STATE	( 0 )
  82:FreeRTOS/Source/croutine.c **** 
  83:FreeRTOS/Source/croutine.c **** /*
  84:FreeRTOS/Source/croutine.c ****  * Place the co-routine represented by pxCRCB into the appropriate ready queue
  85:FreeRTOS/Source/croutine.c ****  * for the priority.  It is inserted at the end of the list.
  86:FreeRTOS/Source/croutine.c ****  *
  87:FreeRTOS/Source/croutine.c ****  * This macro accesses the co-routine ready lists and therefore must not be
  88:FreeRTOS/Source/croutine.c ****  * used from within an ISR.
  89:FreeRTOS/Source/croutine.c ****  */
  90:FreeRTOS/Source/croutine.c **** #define prvAddCoRoutineToReadyQueue( pxCRCB )																		\
  91:FreeRTOS/Source/croutine.c **** {																													\
  92:FreeRTOS/Source/croutine.c **** 	if( pxCRCB->uxPriority > uxTopCoRoutineReadyPriority )															\
  93:FreeRTOS/Source/croutine.c **** 	{																												\
  94:FreeRTOS/Source/croutine.c **** 		uxTopCoRoutineReadyPriority = pxCRCB->uxPriority;															\
  95:FreeRTOS/Source/croutine.c **** 	}																												\
  96:FreeRTOS/Source/croutine.c **** 	vListInsertEnd( ( xList * ) &( pxReadyCoRoutineLists[ pxCRCB->uxPriority ] ), &( pxCRCB->xGenericL
  97:FreeRTOS/Source/croutine.c **** }	
  98:FreeRTOS/Source/croutine.c **** 
  99:FreeRTOS/Source/croutine.c **** /*
 100:FreeRTOS/Source/croutine.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 101:FreeRTOS/Source/croutine.c ****  * automatically upon the creation of the first co-routine.
 102:FreeRTOS/Source/croutine.c ****  */
 103:FreeRTOS/Source/croutine.c **** static void prvInitialiseCoRoutineLists( void );
 104:FreeRTOS/Source/croutine.c **** 
 105:FreeRTOS/Source/croutine.c **** /*
 106:FreeRTOS/Source/croutine.c ****  * Co-routines that are readied by an interrupt cannot be placed directly into
 107:FreeRTOS/Source/croutine.c ****  * the ready lists (there is no mutual exclusion).  Instead they are placed in
 108:FreeRTOS/Source/croutine.c ****  * in the pending ready list in order that they can later be moved to the ready
 109:FreeRTOS/Source/croutine.c ****  * list by the co-routine scheduler.
 110:FreeRTOS/Source/croutine.c ****  */
 111:FreeRTOS/Source/croutine.c **** static void prvCheckPendingReadyList( void );
 112:FreeRTOS/Source/croutine.c **** 
 113:FreeRTOS/Source/croutine.c **** /*
 114:FreeRTOS/Source/croutine.c ****  * Macro that looks at the list of co-routines that are currently delayed to
 115:FreeRTOS/Source/croutine.c ****  * see if any require waking.
 116:FreeRTOS/Source/croutine.c ****  *
 117:FreeRTOS/Source/croutine.c ****  * Co-routines are stored in the queue in the order of their wake time -
 118:FreeRTOS/Source/croutine.c ****  * meaning once one co-routine has been found whose timer has not expired
 119:FreeRTOS/Source/croutine.c ****  * we need not look any further down the list.
 120:FreeRTOS/Source/croutine.c ****  */
 121:FreeRTOS/Source/croutine.c **** static void prvCheckDelayedList( void );
 122:FreeRTOS/Source/croutine.c **** 
 123:FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 124:FreeRTOS/Source/croutine.c **** 
 125:FreeRTOS/Source/croutine.c **** signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxP
 126:FreeRTOS/Source/croutine.c **** {
  95              		.loc 1 126 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 24
  98              		@ frame_needed = 1, uses_anonymous_args = 0
  99 0000 80B5     		push	{r7, lr}
 100              	.LCFI0:
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 14, -4
 103              		.cfi_offset 7, -8
 104 0002 86B0     		sub	sp, sp, #24
 105              	.LCFI1:
 106              		.cfi_def_cfa_offset 32
 107 0004 00AF     		add	r7, sp, #0
 108              	.LCFI2:
 109              		.cfi_def_cfa_register 7
 110 0006 F860     		str	r0, [r7, #12]
 111 0008 B960     		str	r1, [r7, #8]
 112 000a 7A60     		str	r2, [r7, #4]
 127:FreeRTOS/Source/croutine.c **** signed portBASE_TYPE xReturn;
 128:FreeRTOS/Source/croutine.c **** corCRCB *pxCoRoutine;
 129:FreeRTOS/Source/croutine.c **** 
 130:FreeRTOS/Source/croutine.c **** 	/* Allocate the memory that will store the co-routine control block. */
 131:FreeRTOS/Source/croutine.c **** 	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
 113              		.loc 1 131 0
 114 000c 4FF03800 		mov	r0, #56
 115 0010 FFF7FEFF 		bl	malloc
 116 0014 0346     		mov	r3, r0
 117 0016 3B61     		str	r3, [r7, #16]
 132:FreeRTOS/Source/croutine.c **** 	if( pxCoRoutine )
 118              		.loc 1 132 0
 119 0018 3B69     		ldr	r3, [r7, #16]
 120 001a 002B     		cmp	r3, #0
 121 001c 61D0     		beq	.L2
 133:FreeRTOS/Source/croutine.c **** 	{
 134:FreeRTOS/Source/croutine.c **** 		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
 135:FreeRTOS/Source/croutine.c **** 		be created and the co-routine data structures need initialising. */
 136:FreeRTOS/Source/croutine.c **** 		if( pxCurrentCoRoutine == NULL )
 122              		.loc 1 136 0
 123 001e 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 124 0022 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 125 0026 1B68     		ldr	r3, [r3, #0]
 126 0028 002B     		cmp	r3, #0
 127 002a 07D1     		bne	.L3
 137:FreeRTOS/Source/croutine.c **** 		{
 138:FreeRTOS/Source/croutine.c **** 			pxCurrentCoRoutine = pxCoRoutine;
 128              		.loc 1 138 0
 129 002c 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 130 0030 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 131 0034 3A69     		ldr	r2, [r7, #16]
 132 0036 1A60     		str	r2, [r3, #0]
 139:FreeRTOS/Source/croutine.c **** 			prvInitialiseCoRoutineLists();
 133              		.loc 1 139 0
 134 0038 FFF7FEFF 		bl	prvInitialiseCoRoutineLists
 135              	.L3:
 140:FreeRTOS/Source/croutine.c **** 		}
 141:FreeRTOS/Source/croutine.c **** 
 142:FreeRTOS/Source/croutine.c **** 		/* Check the priority is within limits. */
 143:FreeRTOS/Source/croutine.c **** 		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
 136              		.loc 1 143 0
 137 003c BB68     		ldr	r3, [r7, #8]
 138 003e 012B     		cmp	r3, #1
 139 0040 02D9     		bls	.L4
 144:FreeRTOS/Source/croutine.c **** 		{
 145:FreeRTOS/Source/croutine.c **** 			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
 140              		.loc 1 145 0
 141 0042 4FF00103 		mov	r3, #1
 142 0046 BB60     		str	r3, [r7, #8]
 143              	.L4:
 146:FreeRTOS/Source/croutine.c **** 		}
 147:FreeRTOS/Source/croutine.c **** 
 148:FreeRTOS/Source/croutine.c **** 		/* Fill out the co-routine control block from the function parameters. */
 149:FreeRTOS/Source/croutine.c **** 		pxCoRoutine->uxState = corINITIAL_STATE;
 144              		.loc 1 149 0
 145 0048 3B69     		ldr	r3, [r7, #16]
 146 004a 4FF00002 		mov	r2, #0
 147 004e 9A86     		strh	r2, [r3, #52]	@ movhi
 150:FreeRTOS/Source/croutine.c **** 		pxCoRoutine->uxPriority = uxPriority;
 148              		.loc 1 150 0
 149 0050 3B69     		ldr	r3, [r7, #16]
 150 0052 BA68     		ldr	r2, [r7, #8]
 151 0054 DA62     		str	r2, [r3, #44]
 151:FreeRTOS/Source/croutine.c **** 		pxCoRoutine->uxIndex = uxIndex;
 152              		.loc 1 151 0
 153 0056 3B69     		ldr	r3, [r7, #16]
 154 0058 7A68     		ldr	r2, [r7, #4]
 155 005a 1A63     		str	r2, [r3, #48]
 152:FreeRTOS/Source/croutine.c **** 		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
 156              		.loc 1 152 0
 157 005c 3B69     		ldr	r3, [r7, #16]
 158 005e FA68     		ldr	r2, [r7, #12]
 159 0060 1A60     		str	r2, [r3, #0]
 153:FreeRTOS/Source/croutine.c **** 
 154:FreeRTOS/Source/croutine.c **** 		/* Initialise all the other co-routine control block parameters. */
 155:FreeRTOS/Source/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
 160              		.loc 1 155 0
 161 0062 3B69     		ldr	r3, [r7, #16]
 162 0064 03F10403 		add	r3, r3, #4
 163 0068 1846     		mov	r0, r3
 164 006a FFF7FEFF 		bl	vListInitialiseItem
 156:FreeRTOS/Source/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
 165              		.loc 1 156 0
 166 006e 3B69     		ldr	r3, [r7, #16]
 167 0070 03F11803 		add	r3, r3, #24
 168 0074 1846     		mov	r0, r3
 169 0076 FFF7FEFF 		bl	vListInitialiseItem
 157:FreeRTOS/Source/croutine.c **** 
 158:FreeRTOS/Source/croutine.c **** 		/* Set the co-routine control block as a link back from the xListItem.
 159:FreeRTOS/Source/croutine.c **** 		This is so we can get back to the containing CRCB from a generic item
 160:FreeRTOS/Source/croutine.c **** 		in a list. */
 161:FreeRTOS/Source/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
 170              		.loc 1 161 0
 171 007a 3B69     		ldr	r3, [r7, #16]
 172 007c 3A69     		ldr	r2, [r7, #16]
 173 007e 1A61     		str	r2, [r3, #16]
 162:FreeRTOS/Source/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
 174              		.loc 1 162 0
 175 0080 3B69     		ldr	r3, [r7, #16]
 176 0082 3A69     		ldr	r2, [r7, #16]
 177 0084 5A62     		str	r2, [r3, #36]
 163:FreeRTOS/Source/croutine.c **** 	
 164:FreeRTOS/Source/croutine.c **** 		/* Event lists are always in priority order. */
 165:FreeRTOS/Source/croutine.c **** 		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType 
 178              		.loc 1 165 0
 179 0086 BB68     		ldr	r3, [r7, #8]
 180 0088 C3F10502 		rsb	r2, r3, #5
 181 008c 3B69     		ldr	r3, [r7, #16]
 182 008e 9A61     		str	r2, [r3, #24]
 166:FreeRTOS/Source/croutine.c **** 		
 167:FreeRTOS/Source/croutine.c **** 		/* Now the co-routine has been initialised it can be added to the ready
 168:FreeRTOS/Source/croutine.c **** 		list at the correct priority. */
 169:FreeRTOS/Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 183              		.loc 1 169 0
 184 0090 3B69     		ldr	r3, [r7, #16]
 185 0092 DA6A     		ldr	r2, [r3, #44]
 186 0094 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 187 0098 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 188 009c 1B68     		ldr	r3, [r3, #0]
 189 009e 9A42     		cmp	r2, r3
 190 00a0 06D9     		bls	.L5
 191              		.loc 1 169 0 is_stmt 0 discriminator 1
 192 00a2 3B69     		ldr	r3, [r7, #16]
 193 00a4 DA6A     		ldr	r2, [r3, #44]
 194 00a6 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 195 00aa C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 196 00ae 1A60     		str	r2, [r3, #0]
 197              	.L5:
 198              		.loc 1 169 0 discriminator 2
 199 00b0 3B69     		ldr	r3, [r7, #16]
 200 00b2 DA6A     		ldr	r2, [r3, #44]
 201 00b4 1346     		mov	r3, r2
 202 00b6 4FEA8303 		lsl	r3, r3, #2
 203 00ba 9B18     		adds	r3, r3, r2
 204 00bc 4FEA8303 		lsl	r3, r3, #2
 205 00c0 1A46     		mov	r2, r3
 206 00c2 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 207 00c6 C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 208 00ca D218     		adds	r2, r2, r3
 209 00cc 3B69     		ldr	r3, [r7, #16]
 210 00ce 03F10403 		add	r3, r3, #4
 211 00d2 1046     		mov	r0, r2
 212 00d4 1946     		mov	r1, r3
 213 00d6 FFF7FEFF 		bl	vListInsertEnd
 170:FreeRTOS/Source/croutine.c **** 
 171:FreeRTOS/Source/croutine.c **** 		xReturn = pdPASS;
 214              		.loc 1 171 0 is_stmt 1 discriminator 2
 215 00da 4FF00103 		mov	r3, #1
 216 00de 7B61     		str	r3, [r7, #20]
 217 00e0 02E0     		b	.L6
 218              	.L2:
 172:FreeRTOS/Source/croutine.c **** 	}
 173:FreeRTOS/Source/croutine.c **** 	else
 174:FreeRTOS/Source/croutine.c **** 	{		
 175:FreeRTOS/Source/croutine.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 219              		.loc 1 175 0
 220 00e2 4FF0FF33 		mov	r3, #-1
 221 00e6 7B61     		str	r3, [r7, #20]
 222              	.L6:
 176:FreeRTOS/Source/croutine.c **** 	}
 177:FreeRTOS/Source/croutine.c **** 	
 178:FreeRTOS/Source/croutine.c **** 	return xReturn;	
 223              		.loc 1 178 0
 224 00e8 7B69     		ldr	r3, [r7, #20]
 179:FreeRTOS/Source/croutine.c **** }
 225              		.loc 1 179 0
 226 00ea 1846     		mov	r0, r3
 227 00ec 07F11807 		add	r7, r7, #24
 228 00f0 BD46     		mov	sp, r7
 229 00f2 80BD     		pop	{r7, pc}
 230              		.cfi_endproc
 231              	.LFE110:
 233              		.section	.text.vCoRoutineAddToDelayedList,"ax",%progbits
 234              		.align	2
 235              		.global	vCoRoutineAddToDelayedList
 236              		.thumb
 237              		.thumb_func
 239              	vCoRoutineAddToDelayedList:
 240              	.LFB111:
 180:FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 181:FreeRTOS/Source/croutine.c **** 
 182:FreeRTOS/Source/croutine.c **** void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
 183:FreeRTOS/Source/croutine.c **** {
 241              		.loc 1 183 0
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 16
 244              		@ frame_needed = 1, uses_anonymous_args = 0
 245 0000 80B5     		push	{r7, lr}
 246              	.LCFI3:
 247              		.cfi_def_cfa_offset 8
 248              		.cfi_offset 14, -4
 249              		.cfi_offset 7, -8
 250 0002 84B0     		sub	sp, sp, #16
 251              	.LCFI4:
 252              		.cfi_def_cfa_offset 24
 253 0004 00AF     		add	r7, sp, #0
 254              	.LCFI5:
 255              		.cfi_def_cfa_register 7
 256 0006 7860     		str	r0, [r7, #4]
 257 0008 3960     		str	r1, [r7, #0]
 184:FreeRTOS/Source/croutine.c **** portTickType xTimeToWake;
 185:FreeRTOS/Source/croutine.c **** 
 186:FreeRTOS/Source/croutine.c **** 	/* Calculate the time to wake - this may overflow but this is
 187:FreeRTOS/Source/croutine.c **** 	not a problem. */
 188:FreeRTOS/Source/croutine.c **** 	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 258              		.loc 1 188 0
 259 000a 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 260 000e C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 261 0012 1A68     		ldr	r2, [r3, #0]
 262 0014 7B68     		ldr	r3, [r7, #4]
 263 0016 D318     		adds	r3, r2, r3
 264 0018 FB60     		str	r3, [r7, #12]
 189:FreeRTOS/Source/croutine.c **** 
 190:FreeRTOS/Source/croutine.c **** 	/* We must remove ourselves from the ready list before adding
 191:FreeRTOS/Source/croutine.c **** 	ourselves to the blocked list as the same list item is used for
 192:FreeRTOS/Source/croutine.c **** 	both lists. */
 193:FreeRTOS/Source/croutine.c **** 	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 265              		.loc 1 193 0
 266 001a 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 267 001e C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 268 0022 1B68     		ldr	r3, [r3, #0]
 269 0024 03F10403 		add	r3, r3, #4
 270 0028 1846     		mov	r0, r3
 271 002a FFF7FEFF 		bl	vListRemove
 194:FreeRTOS/Source/croutine.c **** 
 195:FreeRTOS/Source/croutine.c **** 	/* The list item will be inserted in wake time order. */
 196:FreeRTOS/Source/croutine.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
 272              		.loc 1 196 0
 273 002e 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 274 0032 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 275 0036 1B68     		ldr	r3, [r3, #0]
 276 0038 FA68     		ldr	r2, [r7, #12]
 277 003a 5A60     		str	r2, [r3, #4]
 197:FreeRTOS/Source/croutine.c **** 
 198:FreeRTOS/Source/croutine.c **** 	if( xTimeToWake < xCoRoutineTickCount )
 278              		.loc 1 198 0
 279 003c 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 280 0040 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 281 0044 1B68     		ldr	r3, [r3, #0]
 282 0046 FA68     		ldr	r2, [r7, #12]
 283 0048 9A42     		cmp	r2, r3
 284 004a 10D2     		bcs	.L8
 199:FreeRTOS/Source/croutine.c **** 	{
 200:FreeRTOS/Source/croutine.c **** 		/* Wake time has overflowed.  Place this item in the
 201:FreeRTOS/Source/croutine.c **** 		overflow list. */
 202:FreeRTOS/Source/croutine.c **** 		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->x
 285              		.loc 1 202 0
 286 004c 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 287 0050 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 288 0054 1A68     		ldr	r2, [r3, #0]
 289 0056 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 290 005a C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 291 005e 1B68     		ldr	r3, [r3, #0]
 292 0060 03F10403 		add	r3, r3, #4
 293 0064 1046     		mov	r0, r2
 294 0066 1946     		mov	r1, r3
 295 0068 FFF7FEFF 		bl	vListInsert
 296 006c 0FE0     		b	.L9
 297              	.L8:
 203:FreeRTOS/Source/croutine.c **** 	}
 204:FreeRTOS/Source/croutine.c **** 	else
 205:FreeRTOS/Source/croutine.c **** 	{
 206:FreeRTOS/Source/croutine.c **** 		/* The wake time has not overflowed, so we can use the
 207:FreeRTOS/Source/croutine.c **** 		current block list. */
 208:FreeRTOS/Source/croutine.c **** 		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericL
 298              		.loc 1 208 0
 299 006e 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 300 0072 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 301 0076 1A68     		ldr	r2, [r3, #0]
 302 0078 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 303 007c C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 304 0080 1B68     		ldr	r3, [r3, #0]
 305 0082 03F10403 		add	r3, r3, #4
 306 0086 1046     		mov	r0, r2
 307 0088 1946     		mov	r1, r3
 308 008a FFF7FEFF 		bl	vListInsert
 309              	.L9:
 209:FreeRTOS/Source/croutine.c **** 	}
 210:FreeRTOS/Source/croutine.c **** 
 211:FreeRTOS/Source/croutine.c **** 	if( pxEventList )
 310              		.loc 1 211 0
 311 008e 3B68     		ldr	r3, [r7, #0]
 312 0090 002B     		cmp	r3, #0
 313 0092 0AD0     		beq	.L7
 212:FreeRTOS/Source/croutine.c **** 	{
 213:FreeRTOS/Source/croutine.c **** 		/* Also add the co-routine to an event list.  If this is done then the
 214:FreeRTOS/Source/croutine.c **** 		function must be called with interrupts disabled. */
 215:FreeRTOS/Source/croutine.c **** 		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
 314              		.loc 1 215 0
 315 0094 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 316 0098 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 317 009c 1B68     		ldr	r3, [r3, #0]
 318 009e 03F11803 		add	r3, r3, #24
 319 00a2 3868     		ldr	r0, [r7, #0]
 320 00a4 1946     		mov	r1, r3
 321 00a6 FFF7FEFF 		bl	vListInsert
 322              	.L7:
 216:FreeRTOS/Source/croutine.c **** 	}
 217:FreeRTOS/Source/croutine.c **** }
 323              		.loc 1 217 0
 324 00aa 07F11007 		add	r7, r7, #16
 325 00ae BD46     		mov	sp, r7
 326 00b0 80BD     		pop	{r7, pc}
 327              		.cfi_endproc
 328              	.LFE111:
 330 00b2 00BF     		.section	.text.prvCheckPendingReadyList,"ax",%progbits
 331              		.align	2
 332              		.thumb
 333              		.thumb_func
 335              	prvCheckPendingReadyList:
 336              	.LFB112:
 218:FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 219:FreeRTOS/Source/croutine.c **** 
 220:FreeRTOS/Source/croutine.c **** static void prvCheckPendingReadyList( void )
 221:FreeRTOS/Source/croutine.c **** {
 337              		.loc 1 221 0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 8
 340              		@ frame_needed = 1, uses_anonymous_args = 0
 341 0000 80B5     		push	{r7, lr}
 342              	.LCFI6:
 343              		.cfi_def_cfa_offset 8
 344              		.cfi_offset 14, -4
 345              		.cfi_offset 7, -8
 346 0002 82B0     		sub	sp, sp, #8
 347              	.LCFI7:
 348              		.cfi_def_cfa_offset 16
 349 0004 00AF     		add	r7, sp, #0
 350              	.LCFI8:
 351              		.cfi_def_cfa_register 7
 222:FreeRTOS/Source/croutine.c **** 	/* Are there any co-routines waiting to get moved to the ready list?  These
 223:FreeRTOS/Source/croutine.c **** 	are co-routines that have been readied by an ISR.  The ISR cannot access
 224:FreeRTOS/Source/croutine.c **** 	the	ready lists itself. */
 225:FreeRTOS/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 352              		.loc 1 225 0
 353 0006 3FE0     		b	.L12
 354              	.L14:
 355              	.LBB2:
 226:FreeRTOS/Source/croutine.c **** 	{
 227:FreeRTOS/Source/croutine.c **** 		corCRCB *pxUnblockedCRCB;
 228:FreeRTOS/Source/croutine.c **** 
 229:FreeRTOS/Source/croutine.c **** 		/* The pending ready list can be accessed by an ISR. */
 230:FreeRTOS/Source/croutine.c **** 		portDISABLE_INTERRUPTS();
 356              		.loc 1 230 0
 357              	@ 230 "FreeRTOS/Source/croutine.c" 1
 358 0008 4FF0BF00 			mov r0, #191								
 359 000c 80F31188 		msr basepri, r0							
 360              	
 361              	@ 0 "" 2
 231:FreeRTOS/Source/croutine.c **** 		{	
 232:FreeRTOS/Source/croutine.c **** 			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
 362              		.loc 1 232 0
 363              		.thumb
 364 0010 40F20003 		movw	r3, #:lower16:xPendingReadyCoRoutineList
 365 0014 C0F20003 		movt	r3, #:upper16:xPendingReadyCoRoutineList
 366 0018 DB68     		ldr	r3, [r3, #12]
 367 001a DB68     		ldr	r3, [r3, #12]
 368 001c 7B60     		str	r3, [r7, #4]
 233:FreeRTOS/Source/croutine.c **** 			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 369              		.loc 1 233 0
 370 001e 7B68     		ldr	r3, [r7, #4]
 371 0020 03F11803 		add	r3, r3, #24
 372 0024 1846     		mov	r0, r3
 373 0026 FFF7FEFF 		bl	vListRemove
 234:FreeRTOS/Source/croutine.c **** 		}
 235:FreeRTOS/Source/croutine.c **** 		portENABLE_INTERRUPTS();
 374              		.loc 1 235 0
 375              	@ 235 "FreeRTOS/Source/croutine.c" 1
 376 002a 4FF00000 			mov r0, #0					
 377 002e 80F31188 		msr basepri, r0				
 378              	
 379              	@ 0 "" 2
 236:FreeRTOS/Source/croutine.c **** 
 237:FreeRTOS/Source/croutine.c **** 		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
 380              		.loc 1 237 0
 381              		.thumb
 382 0032 7B68     		ldr	r3, [r7, #4]
 383 0034 03F10403 		add	r3, r3, #4
 384 0038 1846     		mov	r0, r3
 385 003a FFF7FEFF 		bl	vListRemove
 238:FreeRTOS/Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
 386              		.loc 1 238 0
 387 003e 7B68     		ldr	r3, [r7, #4]
 388 0040 DA6A     		ldr	r2, [r3, #44]
 389 0042 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 390 0046 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 391 004a 1B68     		ldr	r3, [r3, #0]
 392 004c 9A42     		cmp	r2, r3
 393 004e 06D9     		bls	.L13
 394              		.loc 1 238 0 is_stmt 0 discriminator 1
 395 0050 7B68     		ldr	r3, [r7, #4]
 396 0052 DA6A     		ldr	r2, [r3, #44]
 397 0054 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 398 0058 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 399 005c 1A60     		str	r2, [r3, #0]
 400              	.L13:
 401              		.loc 1 238 0 discriminator 2
 402 005e 7B68     		ldr	r3, [r7, #4]
 403 0060 DA6A     		ldr	r2, [r3, #44]
 404 0062 1346     		mov	r3, r2
 405 0064 4FEA8303 		lsl	r3, r3, #2
 406 0068 9B18     		adds	r3, r3, r2
 407 006a 4FEA8303 		lsl	r3, r3, #2
 408 006e 1A46     		mov	r2, r3
 409 0070 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 410 0074 C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 411 0078 D218     		adds	r2, r2, r3
 412 007a 7B68     		ldr	r3, [r7, #4]
 413 007c 03F10403 		add	r3, r3, #4
 414 0080 1046     		mov	r0, r2
 415 0082 1946     		mov	r1, r3
 416 0084 FFF7FEFF 		bl	vListInsertEnd
 417              	.L12:
 418              	.LBE2:
 225:FreeRTOS/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 419              		.loc 1 225 0 is_stmt 1 discriminator 1
 420 0088 40F20003 		movw	r3, #:lower16:xPendingReadyCoRoutineList
 421 008c C0F20003 		movt	r3, #:upper16:xPendingReadyCoRoutineList
 422 0090 1B68     		ldr	r3, [r3, #0]
 423 0092 002B     		cmp	r3, #0
 424 0094 B8D1     		bne	.L14
 239:FreeRTOS/Source/croutine.c **** 	}
 240:FreeRTOS/Source/croutine.c **** }
 425              		.loc 1 240 0
 426 0096 07F10807 		add	r7, r7, #8
 427 009a BD46     		mov	sp, r7
 428 009c 80BD     		pop	{r7, pc}
 429              		.cfi_endproc
 430              	.LFE112:
 432 009e 00BF     		.section	.text.prvCheckDelayedList,"ax",%progbits
 433              		.align	2
 434              		.thumb
 435              		.thumb_func
 437              	prvCheckDelayedList:
 438              	.LFB113:
 241:FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 242:FreeRTOS/Source/croutine.c **** 
 243:FreeRTOS/Source/croutine.c **** static void prvCheckDelayedList( void )
 244:FreeRTOS/Source/croutine.c **** {
 439              		.loc 1 244 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 8
 442              		@ frame_needed = 1, uses_anonymous_args = 0
 443 0000 80B5     		push	{r7, lr}
 444              	.LCFI9:
 445              		.cfi_def_cfa_offset 8
 446              		.cfi_offset 14, -4
 447              		.cfi_offset 7, -8
 448 0002 82B0     		sub	sp, sp, #8
 449              	.LCFI10:
 450              		.cfi_def_cfa_offset 16
 451 0004 00AF     		add	r7, sp, #0
 452              	.LCFI11:
 453              		.cfi_def_cfa_register 7
 245:FreeRTOS/Source/croutine.c **** corCRCB *pxCRCB;
 246:FreeRTOS/Source/croutine.c **** 
 247:FreeRTOS/Source/croutine.c **** 	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
 454              		.loc 1 247 0
 455 0006 FFF7FEFF 		bl	xTaskGetTickCount
 456 000a 0246     		mov	r2, r0
 457 000c 40F20003 		movw	r3, #:lower16:xLastTickCount
 458 0010 C0F20003 		movt	r3, #:upper16:xLastTickCount
 459 0014 1B68     		ldr	r3, [r3, #0]
 460 0016 D21A     		subs	r2, r2, r3
 461 0018 40F20003 		movw	r3, #:lower16:xPassedTicks
 462 001c C0F20003 		movt	r3, #:upper16:xPassedTicks
 463 0020 1A60     		str	r2, [r3, #0]
 248:FreeRTOS/Source/croutine.c **** 	while( xPassedTicks )
 464              		.loc 1 248 0
 465 0022 8FE0     		b	.L16
 466              	.L23:
 249:FreeRTOS/Source/croutine.c **** 	{
 250:FreeRTOS/Source/croutine.c **** 		xCoRoutineTickCount++;
 467              		.loc 1 250 0
 468 0024 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 469 0028 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 470 002c 1B68     		ldr	r3, [r3, #0]
 471 002e 03F10102 		add	r2, r3, #1
 472 0032 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 473 0036 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 474 003a 1A60     		str	r2, [r3, #0]
 251:FreeRTOS/Source/croutine.c **** 		xPassedTicks--;
 475              		.loc 1 251 0
 476 003c 40F20003 		movw	r3, #:lower16:xPassedTicks
 477 0040 C0F20003 		movt	r3, #:upper16:xPassedTicks
 478 0044 1B68     		ldr	r3, [r3, #0]
 479 0046 03F1FF32 		add	r2, r3, #-1
 480 004a 40F20003 		movw	r3, #:lower16:xPassedTicks
 481 004e C0F20003 		movt	r3, #:upper16:xPassedTicks
 482 0052 1A60     		str	r2, [r3, #0]
 252:FreeRTOS/Source/croutine.c **** 
 253:FreeRTOS/Source/croutine.c **** 		/* If the tick count has overflowed we need to swap the ready lists. */
 254:FreeRTOS/Source/croutine.c **** 		if( xCoRoutineTickCount == 0 )
 483              		.loc 1 254 0
 484 0054 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 485 0058 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 486 005c 1B68     		ldr	r3, [r3, #0]
 487 005e 002B     		cmp	r3, #0
 488 0060 65D1     		bne	.L24
 489              	.LBB3:
 255:FreeRTOS/Source/croutine.c **** 		{
 256:FreeRTOS/Source/croutine.c **** 			xList * pxTemp;
 257:FreeRTOS/Source/croutine.c **** 
 258:FreeRTOS/Source/croutine.c **** 			/* Tick count has overflowed so we need to swap the delay lists.  If there are
 259:FreeRTOS/Source/croutine.c **** 			any items in pxDelayedCoRoutineList here then there is an error! */
 260:FreeRTOS/Source/croutine.c **** 			pxTemp = pxDelayedCoRoutineList;
 490              		.loc 1 260 0
 491 0062 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 492 0066 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 493 006a 1B68     		ldr	r3, [r3, #0]
 494 006c 7B60     		str	r3, [r7, #4]
 261:FreeRTOS/Source/croutine.c **** 			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 495              		.loc 1 261 0
 496 006e 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 497 0072 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 498 0076 1A68     		ldr	r2, [r3, #0]
 499 0078 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 500 007c C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 501 0080 1A60     		str	r2, [r3, #0]
 262:FreeRTOS/Source/croutine.c **** 			pxOverflowDelayedCoRoutineList = pxTemp;
 502              		.loc 1 262 0
 503 0082 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 504 0086 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 505 008a 7A68     		ldr	r2, [r7, #4]
 506 008c 1A60     		str	r2, [r3, #0]
 507              	.LBE3:
 263:FreeRTOS/Source/croutine.c **** 		}
 264:FreeRTOS/Source/croutine.c **** 
 265:FreeRTOS/Source/croutine.c **** 		/* See if this tick has made a timeout expire. */
 266:FreeRTOS/Source/croutine.c **** 		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 508              		.loc 1 266 0
 509 008e 4EE0     		b	.L24
 510              	.L22:
 267:FreeRTOS/Source/croutine.c **** 		{
 268:FreeRTOS/Source/croutine.c **** 			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
 511              		.loc 1 268 0
 512 0090 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 513 0094 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 514 0098 1B68     		ldr	r3, [r3, #0]
 515 009a DB68     		ldr	r3, [r3, #12]
 516 009c DB68     		ldr	r3, [r3, #12]
 517 009e 3B60     		str	r3, [r7, #0]
 269:FreeRTOS/Source/croutine.c **** 
 270:FreeRTOS/Source/croutine.c **** 			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
 518              		.loc 1 270 0
 519 00a0 3B68     		ldr	r3, [r7, #0]
 520 00a2 5A68     		ldr	r2, [r3, #4]
 521 00a4 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 522 00a8 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 523 00ac 1B68     		ldr	r3, [r3, #0]
 524 00ae 9A42     		cmp	r2, r3
 525 00b0 47D8     		bhi	.L25
 526              	.L19:
 271:FreeRTOS/Source/croutine.c **** 			{			
 272:FreeRTOS/Source/croutine.c **** 				/* Timeout not yet expired. */																			
 273:FreeRTOS/Source/croutine.c **** 				break;																				
 274:FreeRTOS/Source/croutine.c **** 			}																						
 275:FreeRTOS/Source/croutine.c **** 
 276:FreeRTOS/Source/croutine.c **** 			portDISABLE_INTERRUPTS();
 527              		.loc 1 276 0
 528              	@ 276 "FreeRTOS/Source/croutine.c" 1
 529 00b2 4FF0BF00 			mov r0, #191								
 530 00b6 80F31188 		msr basepri, r0							
 531              	
 532              	@ 0 "" 2
 277:FreeRTOS/Source/croutine.c **** 			{
 278:FreeRTOS/Source/croutine.c **** 				/* The event could have occurred just before this critical
 279:FreeRTOS/Source/croutine.c **** 				section.  If this is the case then the generic list item will
 280:FreeRTOS/Source/croutine.c **** 				have been moved to the pending ready list and the following
 281:FreeRTOS/Source/croutine.c **** 				line is still valid.  Also the pvContainer parameter will have
 282:FreeRTOS/Source/croutine.c **** 				been set to NULL so the following lines are also valid. */
 283:FreeRTOS/Source/croutine.c **** 				vListRemove( &( pxCRCB->xGenericListItem ) );											
 533              		.loc 1 283 0
 534              		.thumb
 535 00ba 3B68     		ldr	r3, [r7, #0]
 536 00bc 03F10403 		add	r3, r3, #4
 537 00c0 1846     		mov	r0, r3
 538 00c2 FFF7FEFF 		bl	vListRemove
 284:FreeRTOS/Source/croutine.c **** 
 285:FreeRTOS/Source/croutine.c **** 				/* Is the co-routine waiting on an event also? */												
 286:FreeRTOS/Source/croutine.c **** 				if( pxCRCB->xEventListItem.pvContainer )													
 539              		.loc 1 286 0
 540 00c6 3B68     		ldr	r3, [r7, #0]
 541 00c8 9B6A     		ldr	r3, [r3, #40]
 542 00ca 002B     		cmp	r3, #0
 543 00cc 05D0     		beq	.L20
 287:FreeRTOS/Source/croutine.c **** 				{															
 288:FreeRTOS/Source/croutine.c **** 					vListRemove( &( pxCRCB->xEventListItem ) );											
 544              		.loc 1 288 0
 545 00ce 3B68     		ldr	r3, [r7, #0]
 546 00d0 03F11803 		add	r3, r3, #24
 547 00d4 1846     		mov	r0, r3
 548 00d6 FFF7FEFF 		bl	vListRemove
 549              	.L20:
 289:FreeRTOS/Source/croutine.c **** 				}
 290:FreeRTOS/Source/croutine.c **** 			}
 291:FreeRTOS/Source/croutine.c **** 			portENABLE_INTERRUPTS();
 550              		.loc 1 291 0
 551              	@ 291 "FreeRTOS/Source/croutine.c" 1
 552 00da 4FF00000 			mov r0, #0					
 553 00de 80F31188 		msr basepri, r0				
 554              	
 555              	@ 0 "" 2
 292:FreeRTOS/Source/croutine.c **** 
 293:FreeRTOS/Source/croutine.c **** 			prvAddCoRoutineToReadyQueue( pxCRCB );													
 556              		.loc 1 293 0
 557              		.thumb
 558 00e2 3B68     		ldr	r3, [r7, #0]
 559 00e4 DA6A     		ldr	r2, [r3, #44]
 560 00e6 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 561 00ea C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 562 00ee 1B68     		ldr	r3, [r3, #0]
 563 00f0 9A42     		cmp	r2, r3
 564 00f2 06D9     		bls	.L21
 565              		.loc 1 293 0 is_stmt 0 discriminator 1
 566 00f4 3B68     		ldr	r3, [r7, #0]
 567 00f6 DA6A     		ldr	r2, [r3, #44]
 568 00f8 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 569 00fc C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 570 0100 1A60     		str	r2, [r3, #0]
 571              	.L21:
 572              		.loc 1 293 0 discriminator 2
 573 0102 3B68     		ldr	r3, [r7, #0]
 574 0104 DA6A     		ldr	r2, [r3, #44]
 575 0106 1346     		mov	r3, r2
 576 0108 4FEA8303 		lsl	r3, r3, #2
 577 010c 9B18     		adds	r3, r3, r2
 578 010e 4FEA8303 		lsl	r3, r3, #2
 579 0112 1A46     		mov	r2, r3
 580 0114 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 581 0118 C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 582 011c D218     		adds	r2, r2, r3
 583 011e 3B68     		ldr	r3, [r7, #0]
 584 0120 03F10403 		add	r3, r3, #4
 585 0124 1046     		mov	r0, r2
 586 0126 1946     		mov	r1, r3
 587 0128 FFF7FEFF 		bl	vListInsertEnd
 588 012c 00E0     		b	.L18
 589              	.L24:
 266:FreeRTOS/Source/croutine.c **** 		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 590              		.loc 1 266 0 is_stmt 1
 591 012e 00BF     		nop
 592              	.L18:
 266:FreeRTOS/Source/croutine.c **** 		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 593              		.loc 1 266 0 is_stmt 0 discriminator 1
 594 0130 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 595 0134 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 596 0138 1B68     		ldr	r3, [r3, #0]
 597 013a 1B68     		ldr	r3, [r3, #0]
 598 013c 002B     		cmp	r3, #0
 599 013e A7D1     		bne	.L22
 600 0140 00E0     		b	.L16
 601              	.L25:
 273:FreeRTOS/Source/croutine.c **** 				break;																				
 602              		.loc 1 273 0 is_stmt 1
 603 0142 00BF     		nop
 604              	.L16:
 248:FreeRTOS/Source/croutine.c **** 	while( xPassedTicks )
 605              		.loc 1 248 0 discriminator 1
 606 0144 40F20003 		movw	r3, #:lower16:xPassedTicks
 607 0148 C0F20003 		movt	r3, #:upper16:xPassedTicks
 608 014c 1B68     		ldr	r3, [r3, #0]
 609 014e 002B     		cmp	r3, #0
 610 0150 7FF468AF 		bne	.L23
 294:FreeRTOS/Source/croutine.c **** 		}																									
 295:FreeRTOS/Source/croutine.c **** 	}
 296:FreeRTOS/Source/croutine.c **** 
 297:FreeRTOS/Source/croutine.c **** 	xLastTickCount = xCoRoutineTickCount;
 611              		.loc 1 297 0
 612 0154 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 613 0158 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 614 015c 1A68     		ldr	r2, [r3, #0]
 615 015e 40F20003 		movw	r3, #:lower16:xLastTickCount
 616 0162 C0F20003 		movt	r3, #:upper16:xLastTickCount
 617 0166 1A60     		str	r2, [r3, #0]
 298:FreeRTOS/Source/croutine.c **** }
 618              		.loc 1 298 0
 619 0168 07F10807 		add	r7, r7, #8
 620 016c BD46     		mov	sp, r7
 621 016e 80BD     		pop	{r7, pc}
 622              		.cfi_endproc
 623              	.LFE113:
 625              		.section	.text.vCoRoutineSchedule,"ax",%progbits
 626              		.align	2
 627              		.global	vCoRoutineSchedule
 628              		.thumb
 629              		.thumb_func
 631              	vCoRoutineSchedule:
 632              	.LFB114:
 299:FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 300:FreeRTOS/Source/croutine.c **** 
 301:FreeRTOS/Source/croutine.c **** void vCoRoutineSchedule( void )
 302:FreeRTOS/Source/croutine.c **** {
 633              		.loc 1 302 0
 634              		.cfi_startproc
 635              		@ args = 0, pretend = 0, frame = 8
 636              		@ frame_needed = 1, uses_anonymous_args = 0
 637 0000 80B5     		push	{r7, lr}
 638              	.LCFI12:
 639              		.cfi_def_cfa_offset 8
 640              		.cfi_offset 14, -4
 641              		.cfi_offset 7, -8
 642 0002 82B0     		sub	sp, sp, #8
 643              	.LCFI13:
 644              		.cfi_def_cfa_offset 16
 645 0004 00AF     		add	r7, sp, #0
 646              	.LCFI14:
 647              		.cfi_def_cfa_register 7
 303:FreeRTOS/Source/croutine.c **** 	/* See if any co-routines readied by events need moving to the ready lists. */
 304:FreeRTOS/Source/croutine.c **** 	prvCheckPendingReadyList();
 648              		.loc 1 304 0
 649 0006 FFF7FEFF 		bl	prvCheckPendingReadyList
 305:FreeRTOS/Source/croutine.c **** 
 306:FreeRTOS/Source/croutine.c **** 	/* See if any delayed co-routines have timed out. */
 307:FreeRTOS/Source/croutine.c **** 	prvCheckDelayedList();
 650              		.loc 1 307 0
 651 000a FFF7FEFF 		bl	prvCheckDelayedList
 308:FreeRTOS/Source/croutine.c **** 
 309:FreeRTOS/Source/croutine.c **** 	/* Find the highest priority queue that contains ready co-routines. */
 310:FreeRTOS/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 652              		.loc 1 310 0
 653 000e 12E0     		b	.L27
 654              	.L30:
 311:FreeRTOS/Source/croutine.c **** 	{
 312:FreeRTOS/Source/croutine.c **** 		if( uxTopCoRoutineReadyPriority == 0 )
 655              		.loc 1 312 0
 656 0010 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 657 0014 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 658 0018 1B68     		ldr	r3, [r3, #0]
 659 001a 002B     		cmp	r3, #0
 660 001c 60D0     		beq	.L32
 661              	.L28:
 313:FreeRTOS/Source/croutine.c **** 		{
 314:FreeRTOS/Source/croutine.c **** 			/* No more co-routines to check. */
 315:FreeRTOS/Source/croutine.c **** 			return;
 316:FreeRTOS/Source/croutine.c **** 		}
 317:FreeRTOS/Source/croutine.c **** 		--uxTopCoRoutineReadyPriority;
 662              		.loc 1 317 0
 663 001e 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 664 0022 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 665 0026 1B68     		ldr	r3, [r3, #0]
 666 0028 03F1FF32 		add	r2, r3, #-1
 667 002c 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 668 0030 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 669 0034 1A60     		str	r2, [r3, #0]
 670              	.L27:
 310:FreeRTOS/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 671              		.loc 1 310 0 discriminator 1
 672 0036 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 673 003a C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 674 003e 1A68     		ldr	r2, [r3, #0]
 675 0040 1346     		mov	r3, r2
 676 0042 4FEA8303 		lsl	r3, r3, #2
 677 0046 9B18     		adds	r3, r3, r2
 678 0048 4FEA8303 		lsl	r3, r3, #2
 679 004c 1A46     		mov	r2, r3
 680 004e 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 681 0052 C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 682 0056 D318     		adds	r3, r2, r3
 683 0058 1B68     		ldr	r3, [r3, #0]
 684 005a 002B     		cmp	r3, #0
 685 005c D8D0     		beq	.L30
 686              	.LBB4:
 318:FreeRTOS/Source/croutine.c **** 	}
 319:FreeRTOS/Source/croutine.c **** 
 320:FreeRTOS/Source/croutine.c **** 	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
 321:FreeRTOS/Source/croutine.c **** 	 of the	same priority get an equal share of the processor time. */
 322:FreeRTOS/Source/croutine.c **** 	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPrio
 687              		.loc 1 322 0
 688 005e 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 689 0062 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 690 0066 1A68     		ldr	r2, [r3, #0]
 691 0068 1346     		mov	r3, r2
 692 006a 4FEA8303 		lsl	r3, r3, #2
 693 006e 9B18     		adds	r3, r3, r2
 694 0070 4FEA8303 		lsl	r3, r3, #2
 695 0074 1A46     		mov	r2, r3
 696 0076 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 697 007a C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 698 007e D318     		adds	r3, r2, r3
 699 0080 7B60     		str	r3, [r7, #4]
 700 0082 7B68     		ldr	r3, [r7, #4]
 701 0084 5B68     		ldr	r3, [r3, #4]
 702 0086 5A68     		ldr	r2, [r3, #4]
 703 0088 7B68     		ldr	r3, [r7, #4]
 704 008a 5A60     		str	r2, [r3, #4]
 705 008c 7B68     		ldr	r3, [r7, #4]
 706 008e 5A68     		ldr	r2, [r3, #4]
 707 0090 7B68     		ldr	r3, [r7, #4]
 708 0092 03F10803 		add	r3, r3, #8
 709 0096 9A42     		cmp	r2, r3
 710 0098 04D1     		bne	.L31
 711              		.loc 1 322 0 is_stmt 0 discriminator 1
 712 009a 7B68     		ldr	r3, [r7, #4]
 713 009c 5B68     		ldr	r3, [r3, #4]
 714 009e 5A68     		ldr	r2, [r3, #4]
 715 00a0 7B68     		ldr	r3, [r7, #4]
 716 00a2 5A60     		str	r2, [r3, #4]
 717              	.L31:
 718              		.loc 1 322 0 discriminator 2
 719 00a4 7B68     		ldr	r3, [r7, #4]
 720 00a6 5B68     		ldr	r3, [r3, #4]
 721 00a8 DA68     		ldr	r2, [r3, #12]
 722 00aa 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 723 00ae C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 724 00b2 1A60     		str	r2, [r3, #0]
 725              	.LBE4:
 323:FreeRTOS/Source/croutine.c **** 
 324:FreeRTOS/Source/croutine.c **** 	/* Call the co-routine. */
 325:FreeRTOS/Source/croutine.c **** 	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
 726              		.loc 1 325 0 is_stmt 1 discriminator 2
 727 00b4 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 728 00b8 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 729 00bc 1B68     		ldr	r3, [r3, #0]
 730 00be 1A68     		ldr	r2, [r3, #0]
 731 00c0 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 732 00c4 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 733 00c8 1968     		ldr	r1, [r3, #0]
 734 00ca 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 735 00ce C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 736 00d2 1B68     		ldr	r3, [r3, #0]
 737 00d4 1B6B     		ldr	r3, [r3, #48]
 738 00d6 0846     		mov	r0, r1
 739 00d8 1946     		mov	r1, r3
 740 00da 9047     		blx	r2
 326:FreeRTOS/Source/croutine.c **** 
 327:FreeRTOS/Source/croutine.c **** 	return;
 741              		.loc 1 327 0 discriminator 2
 742 00dc 00BF     		nop
 743 00de 00E0     		b	.L26
 744              	.L32:
 315:FreeRTOS/Source/croutine.c **** 			return;
 745              		.loc 1 315 0
 746 00e0 00BF     		nop
 747              	.L26:
 328:FreeRTOS/Source/croutine.c **** }
 748              		.loc 1 328 0
 749 00e2 07F10807 		add	r7, r7, #8
 750 00e6 BD46     		mov	sp, r7
 751 00e8 80BD     		pop	{r7, pc}
 752              		.cfi_endproc
 753              	.LFE114:
 755 00ea 00BF     		.section	.text.prvInitialiseCoRoutineLists,"ax",%progbits
 756              		.align	2
 757              		.thumb
 758              		.thumb_func
 760              	prvInitialiseCoRoutineLists:
 761              	.LFB115:
 329:FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 330:FreeRTOS/Source/croutine.c **** 
 331:FreeRTOS/Source/croutine.c **** static void prvInitialiseCoRoutineLists( void )
 332:FreeRTOS/Source/croutine.c **** {
 762              		.loc 1 332 0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 8
 765              		@ frame_needed = 1, uses_anonymous_args = 0
 766 0000 80B5     		push	{r7, lr}
 767              	.LCFI15:
 768              		.cfi_def_cfa_offset 8
 769              		.cfi_offset 14, -4
 770              		.cfi_offset 7, -8
 771 0002 82B0     		sub	sp, sp, #8
 772              	.LCFI16:
 773              		.cfi_def_cfa_offset 16
 774 0004 00AF     		add	r7, sp, #0
 775              	.LCFI17:
 776              		.cfi_def_cfa_register 7
 333:FreeRTOS/Source/croutine.c **** unsigned portBASE_TYPE uxPriority;
 334:FreeRTOS/Source/croutine.c **** 
 335:FreeRTOS/Source/croutine.c **** 	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
 777              		.loc 1 335 0
 778 0006 4FF00003 		mov	r3, #0
 779 000a 7B60     		str	r3, [r7, #4]
 780 000c 13E0     		b	.L34
 781              	.L35:
 336:FreeRTOS/Source/croutine.c **** 	{
 337:FreeRTOS/Source/croutine.c **** 		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
 782              		.loc 1 337 0 discriminator 2
 783 000e 7A68     		ldr	r2, [r7, #4]
 784 0010 1346     		mov	r3, r2
 785 0012 4FEA8303 		lsl	r3, r3, #2
 786 0016 9B18     		adds	r3, r3, r2
 787 0018 4FEA8303 		lsl	r3, r3, #2
 788 001c 1A46     		mov	r2, r3
 789 001e 40F20003 		movw	r3, #:lower16:pxReadyCoRoutineLists
 790 0022 C0F20003 		movt	r3, #:upper16:pxReadyCoRoutineLists
 791 0026 D318     		adds	r3, r2, r3
 792 0028 1846     		mov	r0, r3
 793 002a FFF7FEFF 		bl	vListInitialise
 335:FreeRTOS/Source/croutine.c **** 	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
 794              		.loc 1 335 0 discriminator 2
 795 002e 7B68     		ldr	r3, [r7, #4]
 796 0030 03F10103 		add	r3, r3, #1
 797 0034 7B60     		str	r3, [r7, #4]
 798              	.L34:
 335:FreeRTOS/Source/croutine.c **** 	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
 799              		.loc 1 335 0 is_stmt 0 discriminator 1
 800 0036 7B68     		ldr	r3, [r7, #4]
 801 0038 012B     		cmp	r3, #1
 802 003a E8D9     		bls	.L35
 338:FreeRTOS/Source/croutine.c **** 	}
 339:FreeRTOS/Source/croutine.c **** 
 340:FreeRTOS/Source/croutine.c **** 	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
 803              		.loc 1 340 0 is_stmt 1
 804 003c 40F20000 		movw	r0, #:lower16:xDelayedCoRoutineList1
 805 0040 C0F20000 		movt	r0, #:upper16:xDelayedCoRoutineList1
 806 0044 FFF7FEFF 		bl	vListInitialise
 341:FreeRTOS/Source/croutine.c **** 	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
 807              		.loc 1 341 0
 808 0048 40F20000 		movw	r0, #:lower16:xDelayedCoRoutineList2
 809 004c C0F20000 		movt	r0, #:upper16:xDelayedCoRoutineList2
 810 0050 FFF7FEFF 		bl	vListInitialise
 342:FreeRTOS/Source/croutine.c **** 	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
 811              		.loc 1 342 0
 812 0054 40F20000 		movw	r0, #:lower16:xPendingReadyCoRoutineList
 813 0058 C0F20000 		movt	r0, #:upper16:xPendingReadyCoRoutineList
 814 005c FFF7FEFF 		bl	vListInitialise
 343:FreeRTOS/Source/croutine.c **** 
 344:FreeRTOS/Source/croutine.c **** 	/* Start with pxDelayedCoRoutineList using list1 and the
 345:FreeRTOS/Source/croutine.c **** 	pxOverflowDelayedCoRoutineList using list2. */
 346:FreeRTOS/Source/croutine.c **** 	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
 815              		.loc 1 346 0
 816 0060 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 817 0064 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 818 0068 40F20002 		movw	r2, #:lower16:xDelayedCoRoutineList1
 819 006c C0F20002 		movt	r2, #:upper16:xDelayedCoRoutineList1
 820 0070 1A60     		str	r2, [r3, #0]
 347:FreeRTOS/Source/croutine.c **** 	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
 821              		.loc 1 347 0
 822 0072 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 823 0076 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 824 007a 40F20002 		movw	r2, #:lower16:xDelayedCoRoutineList2
 825 007e C0F20002 		movt	r2, #:upper16:xDelayedCoRoutineList2
 826 0082 1A60     		str	r2, [r3, #0]
 348:FreeRTOS/Source/croutine.c **** }
 827              		.loc 1 348 0
 828 0084 07F10807 		add	r7, r7, #8
 829 0088 BD46     		mov	sp, r7
 830 008a 80BD     		pop	{r7, pc}
 831              		.cfi_endproc
 832              	.LFE115:
 834              		.section	.text.xCoRoutineRemoveFromEventList,"ax",%progbits
 835              		.align	2
 836              		.global	xCoRoutineRemoveFromEventList
 837              		.thumb
 838              		.thumb_func
 840              	xCoRoutineRemoveFromEventList:
 841              	.LFB116:
 349:FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 350:FreeRTOS/Source/croutine.c **** 
 351:FreeRTOS/Source/croutine.c **** signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
 352:FreeRTOS/Source/croutine.c **** {
 842              		.loc 1 352 0
 843              		.cfi_startproc
 844              		@ args = 0, pretend = 0, frame = 16
 845              		@ frame_needed = 1, uses_anonymous_args = 0
 846 0000 80B5     		push	{r7, lr}
 847              	.LCFI18:
 848              		.cfi_def_cfa_offset 8
 849              		.cfi_offset 14, -4
 850              		.cfi_offset 7, -8
 851 0002 84B0     		sub	sp, sp, #16
 852              	.LCFI19:
 853              		.cfi_def_cfa_offset 24
 854 0004 00AF     		add	r7, sp, #0
 855              	.LCFI20:
 856              		.cfi_def_cfa_register 7
 857 0006 7860     		str	r0, [r7, #4]
 353:FreeRTOS/Source/croutine.c **** corCRCB *pxUnblockedCRCB;
 354:FreeRTOS/Source/croutine.c **** signed portBASE_TYPE xReturn;
 355:FreeRTOS/Source/croutine.c **** 
 356:FreeRTOS/Source/croutine.c **** 	/* This function is called from within an interrupt.  It can only access
 357:FreeRTOS/Source/croutine.c **** 	event lists and the pending ready list.  This function assumes that a
 358:FreeRTOS/Source/croutine.c **** 	check has already been made to ensure pxEventList is not empty. */
 359:FreeRTOS/Source/croutine.c **** 	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 858              		.loc 1 359 0
 859 0008 7B68     		ldr	r3, [r7, #4]
 860 000a DB68     		ldr	r3, [r3, #12]
 861 000c DB68     		ldr	r3, [r3, #12]
 862 000e BB60     		str	r3, [r7, #8]
 360:FreeRTOS/Source/croutine.c **** 	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 863              		.loc 1 360 0
 864 0010 BB68     		ldr	r3, [r7, #8]
 865 0012 03F11803 		add	r3, r3, #24
 866 0016 1846     		mov	r0, r3
 867 0018 FFF7FEFF 		bl	vListRemove
 361:FreeRTOS/Source/croutine.c **** 	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) 
 868              		.loc 1 361 0
 869 001c BB68     		ldr	r3, [r7, #8]
 870 001e 03F11803 		add	r3, r3, #24
 871 0022 40F20000 		movw	r0, #:lower16:xPendingReadyCoRoutineList
 872 0026 C0F20000 		movt	r0, #:upper16:xPendingReadyCoRoutineList
 873 002a 1946     		mov	r1, r3
 874 002c FFF7FEFF 		bl	vListInsertEnd
 362:FreeRTOS/Source/croutine.c **** 
 363:FreeRTOS/Source/croutine.c **** 	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
 875              		.loc 1 363 0
 876 0030 BB68     		ldr	r3, [r7, #8]
 877 0032 DA6A     		ldr	r2, [r3, #44]
 878 0034 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 879 0038 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 880 003c 1B68     		ldr	r3, [r3, #0]
 881 003e DB6A     		ldr	r3, [r3, #44]
 882 0040 9A42     		cmp	r2, r3
 883 0042 03D3     		bcc	.L37
 364:FreeRTOS/Source/croutine.c **** 	{
 365:FreeRTOS/Source/croutine.c **** 		xReturn = pdTRUE;
 884              		.loc 1 365 0
 885 0044 4FF00103 		mov	r3, #1
 886 0048 FB60     		str	r3, [r7, #12]
 887 004a 02E0     		b	.L38
 888              	.L37:
 366:FreeRTOS/Source/croutine.c **** 	}
 367:FreeRTOS/Source/croutine.c **** 	else
 368:FreeRTOS/Source/croutine.c **** 	{
 369:FreeRTOS/Source/croutine.c **** 		xReturn = pdFALSE;
 889              		.loc 1 369 0
 890 004c 4FF00003 		mov	r3, #0
 891 0050 FB60     		str	r3, [r7, #12]
 892              	.L38:
 370:FreeRTOS/Source/croutine.c **** 	}
 371:FreeRTOS/Source/croutine.c **** 
 372:FreeRTOS/Source/croutine.c **** 	return xReturn;
 893              		.loc 1 372 0
 894 0052 FB68     		ldr	r3, [r7, #12]
 373:FreeRTOS/Source/croutine.c **** }
 895              		.loc 1 373 0
 896 0054 1846     		mov	r0, r3
 897 0056 07F11007 		add	r7, r7, #16
 898 005a BD46     		mov	sp, r7
 899 005c 80BD     		pop	{r7, pc}
 900              		.cfi_endproc
 901              	.LFE116:
 903 005e 00BF     		.text
 904              	.Letext0:
 905              		.file 2 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/i
 906              		.file 3 "FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM4F/portmacro.h"
 907              		.file 4 "FreeRTOS/Source/include/list.h"
 908              		.file 5 "FreeRTOS/Source/include/croutine.h"
 909              		.file 6 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 croutine.c
     /tmp/ccrPFcnB.s:20     .bss.pxReadyCoRoutineLists:00000000 $d
     /tmp/ccrPFcnB.s:23     .bss.pxReadyCoRoutineLists:00000000 pxReadyCoRoutineLists
     /tmp/ccrPFcnB.s:26     .bss.xDelayedCoRoutineList1:00000000 $d
     /tmp/ccrPFcnB.s:29     .bss.xDelayedCoRoutineList1:00000000 xDelayedCoRoutineList1
     /tmp/ccrPFcnB.s:32     .bss.xDelayedCoRoutineList2:00000000 $d
     /tmp/ccrPFcnB.s:35     .bss.xDelayedCoRoutineList2:00000000 xDelayedCoRoutineList2
     /tmp/ccrPFcnB.s:38     .bss.pxDelayedCoRoutineList:00000000 $d
     /tmp/ccrPFcnB.s:41     .bss.pxDelayedCoRoutineList:00000000 pxDelayedCoRoutineList
     /tmp/ccrPFcnB.s:44     .bss.pxOverflowDelayedCoRoutineList:00000000 $d
     /tmp/ccrPFcnB.s:47     .bss.pxOverflowDelayedCoRoutineList:00000000 pxOverflowDelayedCoRoutineList
     /tmp/ccrPFcnB.s:50     .bss.xPendingReadyCoRoutineList:00000000 $d
     /tmp/ccrPFcnB.s:53     .bss.xPendingReadyCoRoutineList:00000000 xPendingReadyCoRoutineList
     /tmp/ccrPFcnB.s:60     .bss.pxCurrentCoRoutine:00000000 pxCurrentCoRoutine
     /tmp/ccrPFcnB.s:57     .bss.pxCurrentCoRoutine:00000000 $d
     /tmp/ccrPFcnB.s:63     .bss.uxTopCoRoutineReadyPriority:00000000 $d
     /tmp/ccrPFcnB.s:66     .bss.uxTopCoRoutineReadyPriority:00000000 uxTopCoRoutineReadyPriority
     /tmp/ccrPFcnB.s:69     .bss.xCoRoutineTickCount:00000000 $d
     /tmp/ccrPFcnB.s:72     .bss.xCoRoutineTickCount:00000000 xCoRoutineTickCount
     /tmp/ccrPFcnB.s:75     .bss.xLastTickCount:00000000 $d
     /tmp/ccrPFcnB.s:78     .bss.xLastTickCount:00000000 xLastTickCount
     /tmp/ccrPFcnB.s:81     .bss.xPassedTicks:00000000 $d
     /tmp/ccrPFcnB.s:84     .bss.xPassedTicks:00000000 xPassedTicks
     /tmp/ccrPFcnB.s:87     .text.xCoRoutineCreate:00000000 $t
     /tmp/ccrPFcnB.s:92     .text.xCoRoutineCreate:00000000 xCoRoutineCreate
     /tmp/ccrPFcnB.s:760    .text.prvInitialiseCoRoutineLists:00000000 prvInitialiseCoRoutineLists
     /tmp/ccrPFcnB.s:234    .text.vCoRoutineAddToDelayedList:00000000 $t
     /tmp/ccrPFcnB.s:239    .text.vCoRoutineAddToDelayedList:00000000 vCoRoutineAddToDelayedList
     /tmp/ccrPFcnB.s:331    .text.prvCheckPendingReadyList:00000000 $t
     /tmp/ccrPFcnB.s:335    .text.prvCheckPendingReadyList:00000000 prvCheckPendingReadyList
     /tmp/ccrPFcnB.s:433    .text.prvCheckDelayedList:00000000 $t
     /tmp/ccrPFcnB.s:437    .text.prvCheckDelayedList:00000000 prvCheckDelayedList
     /tmp/ccrPFcnB.s:626    .text.vCoRoutineSchedule:00000000 $t
     /tmp/ccrPFcnB.s:631    .text.vCoRoutineSchedule:00000000 vCoRoutineSchedule
     /tmp/ccrPFcnB.s:756    .text.prvInitialiseCoRoutineLists:00000000 $t
     /tmp/ccrPFcnB.s:835    .text.xCoRoutineRemoveFromEventList:00000000 $t
     /tmp/ccrPFcnB.s:840    .text.xCoRoutineRemoveFromEventList:00000000 xCoRoutineRemoveFromEventList
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
malloc
vListInitialiseItem
vListInsertEnd
vListRemove
vListInsert
xTaskGetTickCount
vListInitialise
