   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_cryp_des.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.CRYP_DES_ECB,"ax",%progbits
  20              		.align	2
  21              		.global	CRYP_DES_ECB
  22              		.thumb
  23              		.thumb_func
  25              	CRYP_DES_ECB:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @file    stm32f4xx_cryp_des.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          input message using DES in ECB/CBC modes.
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          peripheral.
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *  @verbatim
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          ===================================================================
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *                                   How to use this driver
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          ===================================================================
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          1. Enable The CRYP controller clock using 
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          2. Encrypt and decrypt using DES in ECB Mode using CRYP_DES_ECB()
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *             function.
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          3. Encrypt and decrypt using DES in CBC Mode using CRYP_DES_CBC()
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *             function.
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *  @endverbatim
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ******************************************************************************
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @attention
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ******************************************************************************
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Includes ------------------------------------------------------------------*/
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** #include "stm32f4xx_cryp.h"
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @{
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP 
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @brief CRYP driver modules
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @{
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private typedef -----------------------------------------------------------*/
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private define ------------------------------------------------------------*/
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** #define DESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private macro -------------------------------------------------------------*/
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private variables ---------------------------------------------------------*/
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private function prototypes -----------------------------------------------*/
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private functions ---------------------------------------------------------*/
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP_Private_Functions
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @{
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */ 
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP_Group8 High Level DES functions
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****  *  @brief   High Level DES functions 
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****  *
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** @verbatim   
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****  ===============================================================================
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****                           High Level DES functions
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****  ===============================================================================
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** @endverbatim
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @{
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /**
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @brief  Encrypt and decrypt using DES in ECB Mode
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Mode: encryption or decryption Mode.
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *           This parameter can be one of the following values:
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_ENCRYPT: Encryption
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_DECRYPT: Decryption
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Key: Key used for DES algorithm.
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Input: pointer to the Input buffer.
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Output: pointer to the returned buffer.
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @retval An ErrorStatus enumeration value:
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          - SUCCESS: Operation done
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          - ERROR: Operation failed
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****                          uint32_t Ilength, uint8_t *Output)
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** {
  28              		.loc 1 96 0
  29              		.cfi_startproc
  30              		@ args = 4, pretend = 0, frame = 104
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 90B5     		push	{r4, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 14, -4
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 4, -12
  38 0002 9BB0     		sub	sp, sp, #108
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 120
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 B960     		str	r1, [r7, #8]
  45 0008 7A60     		str	r2, [r7, #4]
  46 000a 3B60     		str	r3, [r7, #0]
  47 000c 0346     		mov	r3, r0
  48 000e FB73     		strb	r3, [r7, #15]
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_InitTypeDef DES_CRYP_InitStructure;
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   __IO uint32_t counter = 0;
  49              		.loc 1 99 0
  50 0010 4FF00003 		mov	r3, #0
  51 0014 7B61     		str	r3, [r7, #20]
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t busystatus = 0;
  52              		.loc 1 100 0
  53 0016 4FF00003 		mov	r3, #0
  54 001a 7B65     		str	r3, [r7, #84]
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
  55              		.loc 1 101 0
  56 001c 4FF00103 		mov	r3, #1
  57 0020 87F86730 		strb	r3, [r7, #103]
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t keyaddr    = (uint32_t)Key;
  58              		.loc 1 102 0
  59 0024 BB68     		ldr	r3, [r7, #8]
  60 0026 3B65     		str	r3, [r7, #80]
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t inputaddr  = (uint32_t)Input;
  61              		.loc 1 103 0
  62 0028 7B68     		ldr	r3, [r7, #4]
  63 002a 3B66     		str	r3, [r7, #96]
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
  64              		.loc 1 104 0
  65 002c BB6F     		ldr	r3, [r7, #120]
  66 002e FB65     		str	r3, [r7, #92]
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t i = 0;
  67              		.loc 1 105 0
  68 0030 4FF00003 		mov	r3, #0
  69 0034 BB65     		str	r3, [r7, #88]
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Crypto structures initialisation*/
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
  70              		.loc 1 108 0
  71 0036 07F11803 		add	r3, r7, #24
  72 003a 1846     		mov	r0, r3
  73 003c FFF7FEFF 		bl	CRYP_KeyStructInit
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Crypto Init for Encryption process */
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   if( Mode == MODE_ENCRYPT ) /* DES encryption */
  74              		.loc 1 111 0
  75 0040 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
  76 0042 012B     		cmp	r3, #1
  77 0044 03D1     		bne	.L2
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  78              		.loc 1 113 0
  79 0046 4FF00003 		mov	r3, #0
  80 004a 3B87     		strh	r3, [r7, #56]	@ movhi
  81 004c 02E0     		b	.L3
  82              	.L2:
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {      
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
  83              		.loc 1 117 0
  84 004e 4FF00403 		mov	r3, #4
  85 0052 3B87     		strh	r3, [r7, #56]	@ movhi
  86              	.L3:
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
  87              		.loc 1 120 0
  88 0054 4FF01003 		mov	r3, #16
  89 0058 7B87     		strh	r3, [r7, #58]	@ movhi
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  90              		.loc 1 121 0
  91 005a 4FF08003 		mov	r3, #128
  92 005e BB87     		strh	r3, [r7, #60]	@ movhi
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Init(&DES_CRYP_InitStructure);
  93              		.loc 1 122 0
  94 0060 07F13803 		add	r3, r7, #56
  95 0064 1846     		mov	r0, r3
  96 0066 FFF7FEFF 		bl	CRYP_Init
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Key Initialisation */
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  97              		.loc 1 125 0
  98 006a 3B6D     		ldr	r3, [r7, #80]
  99 006c 1B68     		ldr	r3, [r3, #0]
 100 006e FB64     		str	r3, [r7, #76]
 101              	.LBB14:
 102              	.LBB15:
 103              		.file 2 "libs/CMSIS/Include/core_cmInstr.h"
   1:libs/CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
   2:libs/CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:libs/CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:libs/CMSIS/Include/core_cmInstr.h ****  * @version  V2.10
   5:libs/CMSIS/Include/core_cmInstr.h ****  * @date     19. July 2011
   6:libs/CMSIS/Include/core_cmInstr.h ****  *
   7:libs/CMSIS/Include/core_cmInstr.h ****  * @note
   8:libs/CMSIS/Include/core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:libs/CMSIS/Include/core_cmInstr.h ****  *
  10:libs/CMSIS/Include/core_cmInstr.h ****  * @par
  11:libs/CMSIS/Include/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:libs/CMSIS/Include/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:libs/CMSIS/Include/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:libs/CMSIS/Include/core_cmInstr.h ****  *
  15:libs/CMSIS/Include/core_cmInstr.h ****  * @par
  16:libs/CMSIS/Include/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:libs/CMSIS/Include/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:libs/CMSIS/Include/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:libs/CMSIS/Include/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:libs/CMSIS/Include/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:libs/CMSIS/Include/core_cmInstr.h ****  *
  22:libs/CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  23:libs/CMSIS/Include/core_cmInstr.h **** 
  24:libs/CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:libs/CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:libs/CMSIS/Include/core_cmInstr.h **** 
  27:libs/CMSIS/Include/core_cmInstr.h **** 
  28:libs/CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:libs/CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:libs/CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
  31:libs/CMSIS/Include/core_cmInstr.h ****   @{
  32:libs/CMSIS/Include/core_cmInstr.h **** */
  33:libs/CMSIS/Include/core_cmInstr.h **** 
  34:libs/CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:libs/CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  36:libs/CMSIS/Include/core_cmInstr.h **** 
  37:libs/CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:libs/CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:libs/CMSIS/Include/core_cmInstr.h **** #endif
  40:libs/CMSIS/Include/core_cmInstr.h **** 
  41:libs/CMSIS/Include/core_cmInstr.h **** 
  42:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  43:libs/CMSIS/Include/core_cmInstr.h **** 
  44:libs/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:libs/CMSIS/Include/core_cmInstr.h ****  */
  46:libs/CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  47:libs/CMSIS/Include/core_cmInstr.h **** 
  48:libs/CMSIS/Include/core_cmInstr.h **** 
  49:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:libs/CMSIS/Include/core_cmInstr.h **** 
  51:libs/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:libs/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  53:libs/CMSIS/Include/core_cmInstr.h ****  */
  54:libs/CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  55:libs/CMSIS/Include/core_cmInstr.h **** 
  56:libs/CMSIS/Include/core_cmInstr.h **** 
  57:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  58:libs/CMSIS/Include/core_cmInstr.h **** 
  59:libs/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:libs/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:libs/CMSIS/Include/core_cmInstr.h ****  */
  62:libs/CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  63:libs/CMSIS/Include/core_cmInstr.h **** 
  64:libs/CMSIS/Include/core_cmInstr.h **** 
  65:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  66:libs/CMSIS/Include/core_cmInstr.h **** 
  67:libs/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:libs/CMSIS/Include/core_cmInstr.h ****  */
  69:libs/CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  70:libs/CMSIS/Include/core_cmInstr.h **** 
  71:libs/CMSIS/Include/core_cmInstr.h **** 
  72:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:libs/CMSIS/Include/core_cmInstr.h **** 
  74:libs/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:libs/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:libs/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:libs/CMSIS/Include/core_cmInstr.h ****  */
  78:libs/CMSIS/Include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:libs/CMSIS/Include/core_cmInstr.h **** 
  80:libs/CMSIS/Include/core_cmInstr.h **** 
  81:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:libs/CMSIS/Include/core_cmInstr.h **** 
  83:libs/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:libs/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:libs/CMSIS/Include/core_cmInstr.h ****  */
  86:libs/CMSIS/Include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:libs/CMSIS/Include/core_cmInstr.h **** 
  88:libs/CMSIS/Include/core_cmInstr.h **** 
  89:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:libs/CMSIS/Include/core_cmInstr.h **** 
  91:libs/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:libs/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:libs/CMSIS/Include/core_cmInstr.h ****  */
  94:libs/CMSIS/Include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:libs/CMSIS/Include/core_cmInstr.h **** 
  96:libs/CMSIS/Include/core_cmInstr.h **** 
  97:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:libs/CMSIS/Include/core_cmInstr.h **** 
  99:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:libs/CMSIS/Include/core_cmInstr.h **** 
 101:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 103:libs/CMSIS/Include/core_cmInstr.h ****  */
 104:libs/CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 105:libs/CMSIS/Include/core_cmInstr.h **** 
 106:libs/CMSIS/Include/core_cmInstr.h **** 
 107:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:libs/CMSIS/Include/core_cmInstr.h **** 
 109:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:libs/CMSIS/Include/core_cmInstr.h **** 
 111:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 113:libs/CMSIS/Include/core_cmInstr.h ****  */
 114:libs/CMSIS/Include/core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:libs/CMSIS/Include/core_cmInstr.h **** {
 116:libs/CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 117:libs/CMSIS/Include/core_cmInstr.h ****   bx lr
 118:libs/CMSIS/Include/core_cmInstr.h **** }
 119:libs/CMSIS/Include/core_cmInstr.h **** 
 120:libs/CMSIS/Include/core_cmInstr.h **** 
 121:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:libs/CMSIS/Include/core_cmInstr.h **** 
 123:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:libs/CMSIS/Include/core_cmInstr.h **** 
 125:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 127:libs/CMSIS/Include/core_cmInstr.h ****  */
 128:libs/CMSIS/Include/core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:libs/CMSIS/Include/core_cmInstr.h **** {
 130:libs/CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 131:libs/CMSIS/Include/core_cmInstr.h ****   bx lr
 132:libs/CMSIS/Include/core_cmInstr.h **** }
 133:libs/CMSIS/Include/core_cmInstr.h **** 
 134:libs/CMSIS/Include/core_cmInstr.h **** 
 135:libs/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:libs/CMSIS/Include/core_cmInstr.h **** 
 137:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:libs/CMSIS/Include/core_cmInstr.h **** 
 139:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:libs/CMSIS/Include/core_cmInstr.h **** 
 141:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 143:libs/CMSIS/Include/core_cmInstr.h ****  */
 144:libs/CMSIS/Include/core_cmInstr.h **** #define __RBIT                            __rbit
 145:libs/CMSIS/Include/core_cmInstr.h **** 
 146:libs/CMSIS/Include/core_cmInstr.h **** 
 147:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:libs/CMSIS/Include/core_cmInstr.h **** 
 149:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:libs/CMSIS/Include/core_cmInstr.h **** 
 151:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:libs/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:libs/CMSIS/Include/core_cmInstr.h ****  */
 154:libs/CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:libs/CMSIS/Include/core_cmInstr.h **** 
 156:libs/CMSIS/Include/core_cmInstr.h **** 
 157:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:libs/CMSIS/Include/core_cmInstr.h **** 
 159:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:libs/CMSIS/Include/core_cmInstr.h **** 
 161:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:libs/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:libs/CMSIS/Include/core_cmInstr.h ****  */
 164:libs/CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:libs/CMSIS/Include/core_cmInstr.h **** 
 166:libs/CMSIS/Include/core_cmInstr.h **** 
 167:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:libs/CMSIS/Include/core_cmInstr.h **** 
 169:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:libs/CMSIS/Include/core_cmInstr.h **** 
 171:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:libs/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:libs/CMSIS/Include/core_cmInstr.h ****  */
 174:libs/CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:libs/CMSIS/Include/core_cmInstr.h **** 
 176:libs/CMSIS/Include/core_cmInstr.h **** 
 177:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:libs/CMSIS/Include/core_cmInstr.h **** 
 179:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:libs/CMSIS/Include/core_cmInstr.h **** 
 181:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 182:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:libs/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 184:libs/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 185:libs/CMSIS/Include/core_cmInstr.h ****  */
 186:libs/CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:libs/CMSIS/Include/core_cmInstr.h **** 
 188:libs/CMSIS/Include/core_cmInstr.h **** 
 189:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:libs/CMSIS/Include/core_cmInstr.h **** 
 191:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:libs/CMSIS/Include/core_cmInstr.h **** 
 193:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 194:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:libs/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 196:libs/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 197:libs/CMSIS/Include/core_cmInstr.h ****  */
 198:libs/CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:libs/CMSIS/Include/core_cmInstr.h **** 
 200:libs/CMSIS/Include/core_cmInstr.h **** 
 201:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:libs/CMSIS/Include/core_cmInstr.h **** 
 203:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:libs/CMSIS/Include/core_cmInstr.h **** 
 205:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 206:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:libs/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 208:libs/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 209:libs/CMSIS/Include/core_cmInstr.h ****  */
 210:libs/CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:libs/CMSIS/Include/core_cmInstr.h **** 
 212:libs/CMSIS/Include/core_cmInstr.h **** 
 213:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:libs/CMSIS/Include/core_cmInstr.h **** 
 215:libs/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:libs/CMSIS/Include/core_cmInstr.h **** 
 217:libs/CMSIS/Include/core_cmInstr.h ****  */
 218:libs/CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 219:libs/CMSIS/Include/core_cmInstr.h **** 
 220:libs/CMSIS/Include/core_cmInstr.h **** 
 221:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 222:libs/CMSIS/Include/core_cmInstr.h **** 
 223:libs/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 224:libs/CMSIS/Include/core_cmInstr.h **** 
 225:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:libs/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 228:libs/CMSIS/Include/core_cmInstr.h ****  */
 229:libs/CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 230:libs/CMSIS/Include/core_cmInstr.h **** 
 231:libs/CMSIS/Include/core_cmInstr.h **** 
 232:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:libs/CMSIS/Include/core_cmInstr.h **** 
 234:libs/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 235:libs/CMSIS/Include/core_cmInstr.h **** 
 236:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:libs/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 239:libs/CMSIS/Include/core_cmInstr.h ****  */
 240:libs/CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 241:libs/CMSIS/Include/core_cmInstr.h **** 
 242:libs/CMSIS/Include/core_cmInstr.h **** 
 243:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 244:libs/CMSIS/Include/core_cmInstr.h **** 
 245:libs/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:libs/CMSIS/Include/core_cmInstr.h **** 
 247:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:libs/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 249:libs/CMSIS/Include/core_cmInstr.h ****  */
 250:libs/CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz 
 251:libs/CMSIS/Include/core_cmInstr.h **** 
 252:libs/CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:libs/CMSIS/Include/core_cmInstr.h **** 
 254:libs/CMSIS/Include/core_cmInstr.h **** 
 255:libs/CMSIS/Include/core_cmInstr.h **** 
 256:libs/CMSIS/Include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:libs/CMSIS/Include/core_cmInstr.h **** /* IAR iccarm specific functions */
 258:libs/CMSIS/Include/core_cmInstr.h **** 
 259:libs/CMSIS/Include/core_cmInstr.h **** #include <cmsis_iar.h>
 260:libs/CMSIS/Include/core_cmInstr.h **** 
 261:libs/CMSIS/Include/core_cmInstr.h **** 
 262:libs/CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:libs/CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
 264:libs/CMSIS/Include/core_cmInstr.h **** 
 265:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 266:libs/CMSIS/Include/core_cmInstr.h **** 
 267:libs/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:libs/CMSIS/Include/core_cmInstr.h ****  */
 269:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:libs/CMSIS/Include/core_cmInstr.h **** {
 271:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
 272:libs/CMSIS/Include/core_cmInstr.h **** }
 273:libs/CMSIS/Include/core_cmInstr.h **** 
 274:libs/CMSIS/Include/core_cmInstr.h **** 
 275:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:libs/CMSIS/Include/core_cmInstr.h **** 
 277:libs/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:libs/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 279:libs/CMSIS/Include/core_cmInstr.h ****  */
 280:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:libs/CMSIS/Include/core_cmInstr.h **** {
 282:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 283:libs/CMSIS/Include/core_cmInstr.h **** }
 284:libs/CMSIS/Include/core_cmInstr.h **** 
 285:libs/CMSIS/Include/core_cmInstr.h **** 
 286:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
 287:libs/CMSIS/Include/core_cmInstr.h **** 
 288:libs/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:libs/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:libs/CMSIS/Include/core_cmInstr.h ****  */
 291:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:libs/CMSIS/Include/core_cmInstr.h **** {
 293:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfe");
 294:libs/CMSIS/Include/core_cmInstr.h **** }
 295:libs/CMSIS/Include/core_cmInstr.h **** 
 296:libs/CMSIS/Include/core_cmInstr.h **** 
 297:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
 298:libs/CMSIS/Include/core_cmInstr.h **** 
 299:libs/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 300:libs/CMSIS/Include/core_cmInstr.h ****  */
 301:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __SEV(void)
 302:libs/CMSIS/Include/core_cmInstr.h **** {
 303:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("sev");
 304:libs/CMSIS/Include/core_cmInstr.h **** }
 305:libs/CMSIS/Include/core_cmInstr.h **** 
 306:libs/CMSIS/Include/core_cmInstr.h **** 
 307:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 308:libs/CMSIS/Include/core_cmInstr.h **** 
 309:libs/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
 310:libs/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
 311:libs/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
 312:libs/CMSIS/Include/core_cmInstr.h ****  */
 313:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __ISB(void)
 314:libs/CMSIS/Include/core_cmInstr.h **** {
 315:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("isb");
 316:libs/CMSIS/Include/core_cmInstr.h **** }
 317:libs/CMSIS/Include/core_cmInstr.h **** 
 318:libs/CMSIS/Include/core_cmInstr.h **** 
 319:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 320:libs/CMSIS/Include/core_cmInstr.h **** 
 321:libs/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
 322:libs/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 323:libs/CMSIS/Include/core_cmInstr.h ****  */
 324:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DSB(void)
 325:libs/CMSIS/Include/core_cmInstr.h **** {
 326:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dsb");
 327:libs/CMSIS/Include/core_cmInstr.h **** }
 328:libs/CMSIS/Include/core_cmInstr.h **** 
 329:libs/CMSIS/Include/core_cmInstr.h **** 
 330:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 331:libs/CMSIS/Include/core_cmInstr.h **** 
 332:libs/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
 333:libs/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 334:libs/CMSIS/Include/core_cmInstr.h ****  */
 335:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DMB(void)
 336:libs/CMSIS/Include/core_cmInstr.h **** {
 337:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dmb");
 338:libs/CMSIS/Include/core_cmInstr.h **** }
 339:libs/CMSIS/Include/core_cmInstr.h **** 
 340:libs/CMSIS/Include/core_cmInstr.h **** 
 341:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 342:libs/CMSIS/Include/core_cmInstr.h **** 
 343:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 344:libs/CMSIS/Include/core_cmInstr.h **** 
 345:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 346:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 347:libs/CMSIS/Include/core_cmInstr.h ****  */
 348:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
 349:libs/CMSIS/Include/core_cmInstr.h **** {
 350:libs/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 351:libs/CMSIS/Include/core_cmInstr.h ****   
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 104              		.loc 2 352 0
 105 0070 FB6C     		ldr	r3, [r7, #76]
 106              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 107 0072 1CBA     		rev r4, r3
 108              	@ 0 "" 2
 109              		.thumb
 110 0074 BC64     		str	r4, [r7, #72]
 353:libs/CMSIS/Include/core_cmInstr.h ****   return(result);
 111              		.loc 2 353 0
 112 0076 BB6C     		ldr	r3, [r7, #72]
 113              	.LBE15:
 114              	.LBE14:
 115              		.loc 1 125 0
 116 0078 3B62     		str	r3, [r7, #32]
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   keyaddr+=4;
 117              		.loc 1 126 0
 118 007a 3B6D     		ldr	r3, [r7, #80]
 119 007c 03F10403 		add	r3, r3, #4
 120 0080 3B65     		str	r3, [r7, #80]
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 121              		.loc 1 127 0
 122 0082 3B6D     		ldr	r3, [r7, #80]
 123 0084 1B68     		ldr	r3, [r3, #0]
 124 0086 7B64     		str	r3, [r7, #68]
 125              	.LBB16:
 126              	.LBB17:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 127              		.loc 2 352 0
 128 0088 7B6C     		ldr	r3, [r7, #68]
 129              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 130 008a 1CBA     		rev r4, r3
 131              	@ 0 "" 2
 132              		.thumb
 133 008c 3C64     		str	r4, [r7, #64]
 134              		.loc 2 353 0
 135 008e 3B6C     		ldr	r3, [r7, #64]
 136              	.LBE17:
 137              	.LBE16:
 138              		.loc 1 127 0
 139 0090 7B62     		str	r3, [r7, #36]
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 140              		.loc 1 128 0
 141 0092 07F11803 		add	r3, r7, #24
 142 0096 1846     		mov	r0, r3
 143 0098 FFF7FEFF 		bl	CRYP_KeyInit
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Flush IN/OUT FIFO */
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_FIFOFlush();
 144              		.loc 1 131 0
 145 009c FFF7FEFF 		bl	CRYP_FIFOFlush
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Enable Crypto processor */
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(ENABLE);
 146              		.loc 1 134 0
 147 00a0 4FF00100 		mov	r0, #1
 148 00a4 FFF7FEFF 		bl	CRYP_Cmd
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 149              		.loc 1 136 0
 150 00a8 4FF00003 		mov	r3, #0
 151 00ac BB65     		str	r3, [r7, #88]
 152 00ae 43E0     		b	.L4
 153              	.L10:
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     /* Write the Input block in the Input FIFO */
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 154              		.loc 1 140 0
 155 00b0 3B6E     		ldr	r3, [r7, #96]
 156 00b2 1B68     		ldr	r3, [r3, #0]
 157 00b4 1846     		mov	r0, r3
 158 00b6 FFF7FEFF 		bl	CRYP_DataIn
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     inputaddr+=4;
 159              		.loc 1 141 0
 160 00ba 3B6E     		ldr	r3, [r7, #96]
 161 00bc 03F10403 		add	r3, r3, #4
 162 00c0 3B66     		str	r3, [r7, #96]
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 163              		.loc 1 142 0
 164 00c2 3B6E     		ldr	r3, [r7, #96]
 165 00c4 1B68     		ldr	r3, [r3, #0]
 166 00c6 1846     		mov	r0, r3
 167 00c8 FFF7FEFF 		bl	CRYP_DataIn
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     inputaddr+=4;
 168              		.loc 1 143 0
 169 00cc 3B6E     		ldr	r3, [r7, #96]
 170 00ce 03F10403 		add	r3, r3, #4
 171 00d2 3B66     		str	r3, [r7, #96]
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Wait until the complete message has been processed */
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     counter = 0;
 172              		.loc 1 146 0
 173 00d4 4FF00003 		mov	r3, #0
 174 00d8 7B61     		str	r3, [r7, #20]
 175              	.L6:
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     do
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     {
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 176              		.loc 1 149 0 discriminator 1
 177 00da 4FF01000 		mov	r0, #16
 178 00de FFF7FEFF 		bl	CRYP_GetFlagStatus
 179 00e2 0346     		mov	r3, r0
 180 00e4 7B65     		str	r3, [r7, #84]
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       counter++;
 181              		.loc 1 150 0 discriminator 1
 182 00e6 7B69     		ldr	r3, [r7, #20]
 183 00e8 03F10103 		add	r3, r3, #1
 184 00ec 7B61     		str	r3, [r7, #20]
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 185              		.loc 1 151 0 discriminator 1
 186 00ee 7B69     		ldr	r3, [r7, #20]
 187 00f0 B3F5803F 		cmp	r3, #65536
 188 00f4 02D0     		beq	.L5
 189 00f6 7B6D     		ldr	r3, [r7, #84]
 190 00f8 002B     		cmp	r3, #0
 191 00fa EED1     		bne	.L6
 192              	.L5:
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     if (busystatus != RESET)
 193              		.loc 1 153 0
 194 00fc 7B6D     		ldr	r3, [r7, #84]
 195 00fe 002B     		cmp	r3, #0
 196 0100 04D0     		beq	.L7
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****    {
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****        status = ERROR;
 197              		.loc 1 155 0
 198 0102 4FF00003 		mov	r3, #0
 199 0106 87F86730 		strb	r3, [r7, #103]
 200 010a 11E0     		b	.L8
 201              	.L7:
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     else
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     {
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       /* Read the Output block from the Output FIFO */
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 202              		.loc 1 161 0
 203 010c FC6D     		ldr	r4, [r7, #92]
 204 010e FFF7FEFF 		bl	CRYP_DataOut
 205 0112 0346     		mov	r3, r0
 206 0114 2360     		str	r3, [r4, #0]
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       outputaddr+=4;
 207              		.loc 1 162 0
 208 0116 FB6D     		ldr	r3, [r7, #92]
 209 0118 03F10403 		add	r3, r3, #4
 210 011c FB65     		str	r3, [r7, #92]
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 211              		.loc 1 163 0
 212 011e FC6D     		ldr	r4, [r7, #92]
 213 0120 FFF7FEFF 		bl	CRYP_DataOut
 214 0124 0346     		mov	r3, r0
 215 0126 2360     		str	r3, [r4, #0]
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       outputaddr+=4;
 216              		.loc 1 164 0
 217 0128 FB6D     		ldr	r3, [r7, #92]
 218 012a 03F10403 		add	r3, r3, #4
 219 012e FB65     		str	r3, [r7, #92]
 220              	.L8:
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 221              		.loc 1 136 0
 222 0130 BB6D     		ldr	r3, [r7, #88]
 223 0132 03F10803 		add	r3, r3, #8
 224 0136 BB65     		str	r3, [r7, #88]
 225              	.L4:
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 226              		.loc 1 136 0 is_stmt 0 discriminator 1
 227 0138 BA6D     		ldr	r2, [r7, #88]
 228 013a 3B68     		ldr	r3, [r7, #0]
 229 013c 9A42     		cmp	r2, r3
 230 013e 03D2     		bcs	.L9
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 231              		.loc 1 136 0 discriminator 2
 232 0140 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 233 0144 002B     		cmp	r3, #0
 234 0146 B3D1     		bne	.L10
 235              	.L9:
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Disable Crypto */
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(DISABLE);
 236              		.loc 1 169 0 is_stmt 1
 237 0148 4FF00000 		mov	r0, #0
 238 014c FFF7FEFF 		bl	CRYP_Cmd
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   return status; 
 239              		.loc 1 171 0
 240 0150 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** }
 241              		.loc 1 172 0
 242 0154 1846     		mov	r0, r3
 243 0156 07F16C07 		add	r7, r7, #108
 244 015a BD46     		mov	sp, r7
 245 015c 90BD     		pop	{r4, r7, pc}
 246              		.cfi_endproc
 247              	.LFE110:
 249              		.section	.text.CRYP_DES_CBC,"ax",%progbits
 250              		.align	2
 251              		.global	CRYP_DES_CBC
 252              		.thumb
 253              		.thumb_func
 255              	CRYP_DES_CBC:
 256              	.LFB111:
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /**
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @brief  Encrypt and decrypt using DES in CBC Mode
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Mode: encryption or decryption Mode.
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          This parameter can be one of the following values:
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_ENCRYPT: Encryption
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_DECRYPT: Decryption
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Key: Key used for DES algorithm.
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  InitVectors: Initialisation Vectors used for DES algorithm.
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Input: pointer to the Input buffer.
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Output: pointer to the returned buffer.
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @retval An ErrorStatus enumeration value:
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          - SUCCESS: Operation done
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          - ERROR: Operation failed
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** {
 257              		.loc 1 191 0
 258              		.cfi_startproc
 259              		@ args = 8, pretend = 0, frame = 136
 260              		@ frame_needed = 1, uses_anonymous_args = 0
 261 0000 90B5     		push	{r4, r7, lr}
 262              	.LCFI3:
 263              		.cfi_def_cfa_offset 12
 264              		.cfi_offset 14, -4
 265              		.cfi_offset 7, -8
 266              		.cfi_offset 4, -12
 267 0002 A3B0     		sub	sp, sp, #140
 268              	.LCFI4:
 269              		.cfi_def_cfa_offset 152
 270 0004 00AF     		add	r7, sp, #0
 271              	.LCFI5:
 272              		.cfi_def_cfa_register 7
 273 0006 B960     		str	r1, [r7, #8]
 274 0008 7A60     		str	r2, [r7, #4]
 275 000a 3B60     		str	r3, [r7, #0]
 276 000c 0346     		mov	r3, r0
 277 000e FB73     		strb	r3, [r7, #15]
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_InitTypeDef DES_CRYP_InitStructure;
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   __IO uint32_t counter = 0;
 278              		.loc 1 195 0
 279 0010 4FF00003 		mov	r3, #0
 280 0014 3B61     		str	r3, [r7, #16]
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t busystatus = 0;
 281              		.loc 1 196 0
 282 0016 4FF00003 		mov	r3, #0
 283 001a 7B67     		str	r3, [r7, #116]
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
 284              		.loc 1 197 0
 285 001c 4FF00103 		mov	r3, #1
 286 0020 87F88730 		strb	r3, [r7, #135]
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t keyaddr    = (uint32_t)Key;
 287              		.loc 1 198 0
 288 0024 BB68     		ldr	r3, [r7, #8]
 289 0026 3B67     		str	r3, [r7, #112]
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t inputaddr  = (uint32_t)Input;
 290              		.loc 1 199 0
 291 0028 3B68     		ldr	r3, [r7, #0]
 292 002a C7F88030 		str	r3, [r7, #128]
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
 293              		.loc 1 200 0
 294 002e D7F89C30 		ldr	r3, [r7, #156]
 295 0032 FB67     		str	r3, [r7, #124]
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 296              		.loc 1 201 0
 297 0034 7B68     		ldr	r3, [r7, #4]
 298 0036 FB66     		str	r3, [r7, #108]
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t i = 0;
 299              		.loc 1 202 0
 300 0038 4FF00003 		mov	r3, #0
 301 003c BB67     		str	r3, [r7, #120]
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Crypto structures initialisation*/
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 302              		.loc 1 205 0
 303 003e 07F12403 		add	r3, r7, #36
 304 0042 1846     		mov	r0, r3
 305 0044 FFF7FEFF 		bl	CRYP_KeyStructInit
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Crypto Init for Encryption process */
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   if(Mode == MODE_ENCRYPT) /* DES encryption */
 306              		.loc 1 208 0
 307 0048 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 308 004a 012B     		cmp	r3, #1
 309 004c 04D1     		bne	.L12
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 310              		.loc 1 210 0
 311 004e 4FF00003 		mov	r3, #0
 312 0052 A7F84430 		strh	r3, [r7, #68]	@ movhi
 313 0056 03E0     		b	.L13
 314              	.L12:
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 315              		.loc 1 214 0
 316 0058 4FF00403 		mov	r3, #4
 317 005c A7F84430 		strh	r3, [r7, #68]	@ movhi
 318              	.L13:
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 319              		.loc 1 217 0
 320 0060 4FF01803 		mov	r3, #24
 321 0064 A7F84630 		strh	r3, [r7, #70]	@ movhi
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 322              		.loc 1 218 0
 323 0068 4FF08003 		mov	r3, #128
 324 006c A7F84830 		strh	r3, [r7, #72]	@ movhi
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Init(&DES_CRYP_InitStructure);
 325              		.loc 1 219 0
 326 0070 07F14403 		add	r3, r7, #68
 327 0074 1846     		mov	r0, r3
 328 0076 FFF7FEFF 		bl	CRYP_Init
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Key Initialisation */
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 329              		.loc 1 222 0
 330 007a 3B6F     		ldr	r3, [r7, #112]
 331 007c 1B68     		ldr	r3, [r3, #0]
 332 007e BB66     		str	r3, [r7, #104]
 333              	.LBB18:
 334              	.LBB19:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 335              		.loc 2 352 0
 336 0080 BB6E     		ldr	r3, [r7, #104]
 337              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 338 0082 1CBA     		rev r4, r3
 339              	@ 0 "" 2
 340              		.thumb
 341 0084 7C66     		str	r4, [r7, #100]
 342              		.loc 2 353 0
 343 0086 7B6E     		ldr	r3, [r7, #100]
 344              	.LBE19:
 345              	.LBE18:
 346              		.loc 1 222 0
 347 0088 FB62     		str	r3, [r7, #44]
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   keyaddr+=4;
 348              		.loc 1 223 0
 349 008a 3B6F     		ldr	r3, [r7, #112]
 350 008c 03F10403 		add	r3, r3, #4
 351 0090 3B67     		str	r3, [r7, #112]
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 352              		.loc 1 224 0
 353 0092 3B6F     		ldr	r3, [r7, #112]
 354 0094 1B68     		ldr	r3, [r3, #0]
 355 0096 3B66     		str	r3, [r7, #96]
 356              	.LBB20:
 357              	.LBB21:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 358              		.loc 2 352 0
 359 0098 3B6E     		ldr	r3, [r7, #96]
 360              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 361 009a 1CBA     		rev r4, r3
 362              	@ 0 "" 2
 363              		.thumb
 364 009c FC65     		str	r4, [r7, #92]
 365              		.loc 2 353 0
 366 009e FB6D     		ldr	r3, [r7, #92]
 367              	.LBE21:
 368              	.LBE20:
 369              		.loc 1 224 0
 370 00a0 3B63     		str	r3, [r7, #48]
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 371              		.loc 1 225 0
 372 00a2 07F12403 		add	r3, r7, #36
 373 00a6 1846     		mov	r0, r3
 374 00a8 FFF7FEFF 		bl	CRYP_KeyInit
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Initialization Vectors */
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 375              		.loc 1 228 0
 376 00ac FB6E     		ldr	r3, [r7, #108]
 377 00ae 1B68     		ldr	r3, [r3, #0]
 378 00b0 BB65     		str	r3, [r7, #88]
 379              	.LBB22:
 380              	.LBB23:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 381              		.loc 2 352 0
 382 00b2 BB6D     		ldr	r3, [r7, #88]
 383              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 384 00b4 1CBA     		rev r4, r3
 385              	@ 0 "" 2
 386              		.thumb
 387 00b6 7C65     		str	r4, [r7, #84]
 388              		.loc 2 353 0
 389 00b8 7B6D     		ldr	r3, [r7, #84]
 390              	.LBE23:
 391              	.LBE22:
 392              		.loc 1 228 0
 393 00ba 7B61     		str	r3, [r7, #20]
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ivaddr+=4;
 394              		.loc 1 229 0
 395 00bc FB6E     		ldr	r3, [r7, #108]
 396 00be 03F10403 		add	r3, r3, #4
 397 00c2 FB66     		str	r3, [r7, #108]
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 398              		.loc 1 230 0
 399 00c4 FB6E     		ldr	r3, [r7, #108]
 400 00c6 1B68     		ldr	r3, [r3, #0]
 401 00c8 3B65     		str	r3, [r7, #80]
 402              	.LBB24:
 403              	.LBB25:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 404              		.loc 2 352 0
 405 00ca 3B6D     		ldr	r3, [r7, #80]
 406              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 407 00cc 1CBA     		rev r4, r3
 408              	@ 0 "" 2
 409              		.thumb
 410 00ce FC64     		str	r4, [r7, #76]
 411              		.loc 2 353 0
 412 00d0 FB6C     		ldr	r3, [r7, #76]
 413              	.LBE25:
 414              	.LBE24:
 415              		.loc 1 230 0
 416 00d2 BB61     		str	r3, [r7, #24]
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_IVInit(&DES_CRYP_IVInitStructure);
 417              		.loc 1 231 0
 418 00d4 07F11403 		add	r3, r7, #20
 419 00d8 1846     		mov	r0, r3
 420 00da FFF7FEFF 		bl	CRYP_IVInit
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Flush IN/OUT FIFO */
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_FIFOFlush();
 421              		.loc 1 234 0
 422 00de FFF7FEFF 		bl	CRYP_FIFOFlush
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Enable Crypto processor */
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(ENABLE);
 423              		.loc 1 237 0
 424 00e2 4FF00100 		mov	r0, #1
 425 00e6 FFF7FEFF 		bl	CRYP_Cmd
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 426              		.loc 1 239 0
 427 00ea 4FF00003 		mov	r3, #0
 428 00ee BB67     		str	r3, [r7, #120]
 429 00f0 49E0     		b	.L14
 430              	.L20:
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     /* Write the Input block in the Input FIFO */
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 431              		.loc 1 242 0
 432 00f2 D7F88030 		ldr	r3, [r7, #128]
 433 00f6 1B68     		ldr	r3, [r3, #0]
 434 00f8 1846     		mov	r0, r3
 435 00fa FFF7FEFF 		bl	CRYP_DataIn
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     inputaddr+=4;
 436              		.loc 1 243 0
 437 00fe D7F88030 		ldr	r3, [r7, #128]
 438 0102 03F10403 		add	r3, r3, #4
 439 0106 C7F88030 		str	r3, [r7, #128]
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 440              		.loc 1 244 0
 441 010a D7F88030 		ldr	r3, [r7, #128]
 442 010e 1B68     		ldr	r3, [r3, #0]
 443 0110 1846     		mov	r0, r3
 444 0112 FFF7FEFF 		bl	CRYP_DataIn
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     inputaddr+=4;
 445              		.loc 1 245 0
 446 0116 D7F88030 		ldr	r3, [r7, #128]
 447 011a 03F10403 		add	r3, r3, #4
 448 011e C7F88030 		str	r3, [r7, #128]
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     /* Wait until the complete message has been processed */
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     counter = 0;
 449              		.loc 1 248 0
 450 0122 4FF00003 		mov	r3, #0
 451 0126 3B61     		str	r3, [r7, #16]
 452              	.L16:
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     do
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     {
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 453              		.loc 1 251 0 discriminator 1
 454 0128 4FF01000 		mov	r0, #16
 455 012c FFF7FEFF 		bl	CRYP_GetFlagStatus
 456 0130 0346     		mov	r3, r0
 457 0132 7B67     		str	r3, [r7, #116]
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       counter++;
 458              		.loc 1 252 0 discriminator 1
 459 0134 3B69     		ldr	r3, [r7, #16]
 460 0136 03F10103 		add	r3, r3, #1
 461 013a 3B61     		str	r3, [r7, #16]
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 462              		.loc 1 253 0 discriminator 1
 463 013c 3B69     		ldr	r3, [r7, #16]
 464 013e B3F5803F 		cmp	r3, #65536
 465 0142 02D0     		beq	.L15
 466 0144 7B6F     		ldr	r3, [r7, #116]
 467 0146 002B     		cmp	r3, #0
 468 0148 EED1     		bne	.L16
 469              	.L15:
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     if (busystatus != RESET)
 470              		.loc 1 255 0
 471 014a 7B6F     		ldr	r3, [r7, #116]
 472 014c 002B     		cmp	r3, #0
 473 014e 04D0     		beq	.L17
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****    {
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****        status = ERROR;
 474              		.loc 1 257 0
 475 0150 4FF00003 		mov	r3, #0
 476 0154 87F88730 		strb	r3, [r7, #135]
 477 0158 11E0     		b	.L18
 478              	.L17:
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     else
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     {
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       /* Read the Output block from the Output FIFO */
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 479              		.loc 1 262 0
 480 015a FC6F     		ldr	r4, [r7, #124]
 481 015c FFF7FEFF 		bl	CRYP_DataOut
 482 0160 0346     		mov	r3, r0
 483 0162 2360     		str	r3, [r4, #0]
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       outputaddr+=4;
 484              		.loc 1 263 0
 485 0164 FB6F     		ldr	r3, [r7, #124]
 486 0166 03F10403 		add	r3, r3, #4
 487 016a FB67     		str	r3, [r7, #124]
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 488              		.loc 1 264 0
 489 016c FC6F     		ldr	r4, [r7, #124]
 490 016e FFF7FEFF 		bl	CRYP_DataOut
 491 0172 0346     		mov	r3, r0
 492 0174 2360     		str	r3, [r4, #0]
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       outputaddr+=4;
 493              		.loc 1 265 0
 494 0176 FB6F     		ldr	r3, [r7, #124]
 495 0178 03F10403 		add	r3, r3, #4
 496 017c FB67     		str	r3, [r7, #124]
 497              	.L18:
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 498              		.loc 1 239 0
 499 017e BB6F     		ldr	r3, [r7, #120]
 500 0180 03F10803 		add	r3, r3, #8
 501 0184 BB67     		str	r3, [r7, #120]
 502              	.L14:
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 503              		.loc 1 239 0 is_stmt 0 discriminator 1
 504 0186 BA6F     		ldr	r2, [r7, #120]
 505 0188 D7F89830 		ldr	r3, [r7, #152]
 506 018c 9A42     		cmp	r2, r3
 507 018e 03D2     		bcs	.L19
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 508              		.loc 1 239 0 discriminator 2
 509 0190 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 510 0194 002B     		cmp	r3, #0
 511 0196 ACD1     		bne	.L20
 512              	.L19:
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Disable Crypto */
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(DISABLE);
 513              		.loc 1 270 0 is_stmt 1
 514 0198 4FF00000 		mov	r0, #0
 515 019c FFF7FEFF 		bl	CRYP_Cmd
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   return status; 
 516              		.loc 1 272 0
 517 01a0 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** }
 518              		.loc 1 273 0
 519 01a4 1846     		mov	r0, r3
 520 01a6 07F18C07 		add	r7, r7, #140
 521 01aa BD46     		mov	sp, r7
 522 01ac 90BD     		pop	{r4, r7, pc}
 523              		.cfi_endproc
 524              	.LFE111:
 526 01ae 00BF     		.text
 527              	.Letext0:
 528              		.file 3 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/i
 529              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 530              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_cryp.h"
 531              		.file 6 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_cryp_des.c
     /tmp/ccDjKVba.s:20     .text.CRYP_DES_ECB:00000000 $t
     /tmp/ccDjKVba.s:25     .text.CRYP_DES_ECB:00000000 CRYP_DES_ECB
     /tmp/ccDjKVba.s:250    .text.CRYP_DES_CBC:00000000 $t
     /tmp/ccDjKVba.s:255    .text.CRYP_DES_CBC:00000000 CRYP_DES_CBC
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_Init
CRYP_KeyInit
CRYP_FIFOFlush
CRYP_Cmd
CRYP_DataIn
CRYP_GetFlagStatus
CRYP_DataOut
CRYP_IVInit
