   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_spi.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.SPI_I2S_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	SPI_I2S_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	SPI_I2S_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @file    stm32f4xx_spi.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          functionalities of the Serial peripheral interface (SPI):           
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Initialization and Configuration
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Data transfers functions
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Hardware CRC Calculation
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - DMA transfers management
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Interrupts and flags management 
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  @verbatim
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                    
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ===================================================================
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                                 How to use this driver
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ===================================================================        
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *    
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          1. Enable peripheral clock using the following functions 
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE) for SPI1
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE) for SPI2
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI3.
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          2. Enable SCK, MOSI, MISO and NSS GPIO clocks using RCC_AHB1PeriphClockCmd()
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             function.
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             In I2S mode, if an external clock source is used then the I2S CKIN pin GPIO
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             clock should also be enabled.
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          3. Peripherals alternate function: 
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Configure the desired pin in alternate function by:
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Call GPIO_Init() function
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              In I2S mode, if an external clock source is used then the I2S CKIN pin
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              should be also configured in Alternate function Push-pull pull-up mode. 
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *        
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          4. Program the Polarity, Phase, First Data, Baud Rate Prescaler, Slave 
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             function.
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             In I2S mode, program the Mode, Standard, Data Format, MCLK Output, Audio 
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             frequency and Polarity using I2S_Init() function.
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             For I2S mode, make sure that either:
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - I2S PLL is configured using the functions RCC_I2SCLKConfig(RCC_I2S2CLKSource_PLL
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                RCC_PLLI2SCmd(ENABLE) and RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY).
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              or 
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - External clock source is configured using the function 
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                RCC_I2SCLKConfig(RCC_I2S2CLKSource_Ext) and after setting correctly the define c
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                I2S_EXTERNAL_CLOCK_VAL in the stm32f4xx_conf.h file. 
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             SPI_ITConfig() if you need to use interrupt mode. 
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          6. When using the DMA mode 
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   - Configure the DMA using DMA_Init() function
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   - Active the needed channel Request using SPI_I2S_DMACmd() function
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          7. Enable the SPI using the SPI_Cmd() function or enable the I2S using
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             I2S_Cmd().
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          8. Enable the DMA using the DMA_Cmd() function when using DMA mode. 
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          9. Optionally, you can enable/configure the following parameters without
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             re-initialization (i.e there is no need to call again SPI_Init() function):
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - When bidirectional mode (SPI_Direction_1Line_Rx or SPI_Direction_1Line_Tx)
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                is programmed as Data direction parameter using the SPI_Init() function
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                it can be possible to switch between SPI_Direction_Tx or SPI_Direction_Rx
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                using the SPI_BiDirectionalLineConfig() function.
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - When SPI_NSS_Soft is selected as Slave Select Management parameter 
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                using the SPI_Init() function it can be possible to manage the 
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                NSS internal signal using the SPI_NSSInternalSoftwareConfig() function.
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - Reconfigure the data size using the SPI_DataSizeConfig() function  
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - Enable or disable the SS output using the SPI_SSOutputCmd() function  
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          10. To use the CRC Hardware calculation feature refer to the Peripheral 
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              CRC hardware Calculation subsection.
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          It is possible to use SPI in I2S full duplex mode, in this case, each SPI 
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          peripheral is able to manage sending and receiving data simultaneously
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          using two data lines. Each SPI peripheral has an extended block called I2Sxext
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          (ie. I2S2ext for SPI2 and I2S3ext for SPI3).
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          The extension block is not a full SPI IP, it is used only as I2S slave to
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          implement full duplex mode. The extension block uses the same clock sources
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          as its master.          
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          To configure I2S full duplex you have to:
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          1. Configure SPIx in I2S mode (I2S_Init() function) as described above. 
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          2. Call the I2S_FullDuplexConfig() function using the same strucutre passed to  
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             I2S_Init() function.
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          3. Call I2S_Cmd() for SPIx then for its extended block.
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          4. To configure interrupts or DMA requests and to get/clear flag status, 
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             use I2Sxext instance for the extension block.
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          Functions that can be called with I2Sxext instances are:
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(), I2S_FullDuplexConfig(), SPI_I2S_ReceiveData(), SPI_I2S_SendData(), 
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_DMACmd(), SPI_I2S_ITConfig(), SPI_I2S_GetFlagStatus(), SPI_I2S_ClearFlag(),
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_GetITStatus() and SPI_I2S_ClearITPendingBit().
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          Example: To use SPI3 in Full duplex mode (SPI3 is Master Tx, I2S3ext is Slave Rx):
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);   
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_StructInit(&I2SInitStruct);
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2SInitStruct.Mode = I2S_Mode_MasterTx;     
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Init(SPI3, &I2SInitStruct);
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_FullDuplexConfig(SPI3ext, &I2SInitStruct)
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(SPI3, ENABLE);
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(SPI3ext, ENABLE);
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          while (SPI_I2S_GetFlagStatus(SPI2, SPI_FLAG_TXE) == RESET)
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          {}
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_SendData(SPI3, txdata[i]);
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...  
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          while (SPI_I2S_GetFlagStatus(I2S3ext, SPI_FLAG_RXNE) == RESET)
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          {}
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          rxdata[i] = SPI_I2S_ReceiveData(I2S3ext);
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...          
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *       
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *    
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    This driver supports only the I2S clock scheme available in Silicon
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          RevisionB and RevisionY.
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *     
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    In I2S mode: if an external clock is used as source clock for the I2S,  
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          then the define I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should 
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          be enabled and set to the value of the source clock frequency (in Hz).
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    In SPI mode: To use the SPI TI mode, call the function SPI_TIModeCmd() 
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          just after calling the function SPI_Init().
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  @endverbatim  
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                                  
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @attention
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************  
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */ 
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Includes ------------------------------------------------------------------*/
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #include "stm32f4xx_spi.h"
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #include "stm32f4xx_rcc.h"
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI 
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief SPI driver modules
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */ 
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private typedef -----------------------------------------------------------*/
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private define ------------------------------------------------------------*/
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* SPI registers Masks */
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define CR1_CLEAR_MASK            ((uint16_t)0x3040)
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define I2SCFGR_CLEAR_MASK        ((uint16_t)0xF040)
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* RCC PLLs masks */
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLR_MASK         ((uint32_t)0x70000000)
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLN_MASK         ((uint32_t)0x00007FC0)
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define SPI_CR2_FRF               ((uint16_t)0x0010)
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define SPI_SR_TIFRFE             ((uint16_t)0x0100)
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private macro -------------------------------------------------------------*/
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private variables ---------------------------------------------------------*/
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private function prototypes -----------------------------------------------*/
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private functions ---------------------------------------------------------*/
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Private_Functions
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group1 Initialization and Configuration functions
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Initialization and Configuration functions 
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   Initialization and Configuration functions
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to initialize the SPI Direction,
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI Mode, SPI Data Size, SPI Polarity, SPI Phase, SPI NSS Management, SPI Baud
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Rate Prescaler, SPI First Bit and SPI CRC Polynomial.
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The SPI_Init() function follows the SPI configuration procedures for Master mode
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   and Slave mode (details for these procedures are available in reference manual
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   (RM0090)).
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Deinitialize the SPIx peripheral registers to their default reset values.
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode.   
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The extended I2S blocks (ie. I2S2ext and I2S3ext blocks) are deinitialized
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         when the relative I2S peripheral is deinitialized (the extended block's clock
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         is managed by the I2S peripheral clock).
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
  28              		.loc 1 223 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 14, -4
  36              		.cfi_offset 7, -8
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPIx == SPI1)
  44              		.loc 1 227 0
  45 0008 7A68     		ldr	r2, [r7, #4]
  46 000a 4FF44053 		mov	r3, #12288
  47 000e C4F20103 		movt	r3, 16385
  48 0012 9A42     		cmp	r2, r3
  49 0014 0CD1     		bne	.L2
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI1 reset state */
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
  50              		.loc 1 230 0
  51 0016 4FF48050 		mov	r0, #4096
  52 001a 4FF00101 		mov	r1, #1
  53 001e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI1 from reset state */
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  54              		.loc 1 232 0
  55 0022 4FF48050 		mov	r0, #4096
  56 0026 4FF00001 		mov	r1, #0
  57 002a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  58 002e 26E0     		b	.L1
  59              	.L2:
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else if (SPIx == SPI2)
  60              		.loc 1 234 0
  61 0030 7A68     		ldr	r2, [r7, #4]
  62 0032 4FF46053 		mov	r3, #14336
  63 0036 C4F20003 		movt	r3, 16384
  64 003a 9A42     		cmp	r2, r3
  65 003c 0CD1     		bne	.L4
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI2 reset state */
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
  66              		.loc 1 237 0
  67 003e 4FF48040 		mov	r0, #16384
  68 0042 4FF00101 		mov	r1, #1
  69 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI2 from reset state */
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  70              		.loc 1 239 0
  71 004a 4FF48040 		mov	r0, #16384
  72 004e 4FF00001 		mov	r1, #0
  73 0052 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  74 0056 12E0     		b	.L1
  75              	.L4:
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if (SPIx == SPI3)
  76              		.loc 1 243 0
  77 0058 7A68     		ldr	r2, [r7, #4]
  78 005a 4FF47053 		mov	r3, #15360
  79 005e C4F20003 		movt	r3, 16384
  80 0062 9A42     		cmp	r2, r3
  81 0064 0BD1     		bne	.L1
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Enable SPI3 reset state */
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
  82              		.loc 1 246 0
  83 0066 4FF40040 		mov	r0, #32768
  84 006a 4FF00101 		mov	r1, #1
  85 006e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Release SPI3 from reset state */
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  86              		.loc 1 248 0
  87 0072 4FF40040 		mov	r0, #32768
  88 0076 4FF00001 		mov	r1, #0
  89 007a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  90              	.L1:
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
  91              		.loc 1 251 0
  92 007e 07F10807 		add	r7, r7, #8
  93 0082 BD46     		mov	sp, r7
  94 0084 80BD     		pop	{r7, pc}
  95              		.cfi_endproc
  96              	.LFE110:
  98 0086 00BF     		.section	.text.SPI_Init,"ax",%progbits
  99              		.align	2
 100              		.global	SPI_Init
 101              		.thumb
 102              		.thumb_func
 104              	SPI_Init:
 105              	.LFB111:
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         parameters in the SPI_InitStruct.
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral.
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 106              		.loc 1 262 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 16
 109              		@ frame_needed = 1, uses_anonymous_args = 0
 110              		@ link register save eliminated.
 111 0000 80B4     		push	{r7}
 112              	.LCFI3:
 113              		.cfi_def_cfa_offset 4
 114              		.cfi_offset 7, -4
 115 0002 85B0     		sub	sp, sp, #20
 116              	.LCFI4:
 117              		.cfi_def_cfa_offset 24
 118 0004 00AF     		add	r7, sp, #0
 119              	.LCFI5:
 120              		.cfi_def_cfa_register 7
 121 0006 7860     		str	r0, [r7, #4]
 122 0008 3960     		str	r1, [r7, #0]
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0;
 123              		.loc 1 263 0
 124 000a 4FF00003 		mov	r3, #0
 125 000e FB81     		strh	r3, [r7, #14]	@ movhi
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* check the parameters */
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the SPI parameters */
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CR1 Configuration ------------------------*/
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPIx CR1 value */
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = SPIx->CR1;
 126              		.loc 1 281 0
 127 0010 7B68     		ldr	r3, [r7, #4]
 128 0012 1B88     		ldrh	r3, [r3, #0]	@ movhi
 129 0014 FB81     		strh	r3, [r7, #14]	@ movhi
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK;
 130              		.loc 1 283 0
 131 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 132 0018 03F44153 		and	r3, r3, #12352
 133 001c FB81     		strh	r3, [r7, #14]	@ movhi
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      master/salve mode, CPOL and CPHA */
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set LSBFirst bit according to SPI_FirstBit value */
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set BR bits according to SPI_BaudRatePrescaler value */
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set CPOL bit according to SPI_CPOL value */
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set CPHA bit according to SPI_CPHA value */
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 134              		.loc 1 292 0
 135 001e 3B68     		ldr	r3, [r7, #0]
 136 0020 1A88     		ldrh	r2, [r3, #0]
 137 0022 3B68     		ldr	r3, [r7, #0]
 138 0024 5B88     		ldrh	r3, [r3, #2]
 139 0026 1343     		orrs	r3, r3, r2
 140 0028 9AB2     		uxth	r2, r3
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 141              		.loc 1 293 0
 142 002a 3B68     		ldr	r3, [r7, #0]
 143 002c 9B88     		ldrh	r3, [r3, #4]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 144              		.loc 1 292 0
 145 002e 1343     		orrs	r3, r3, r2
 146 0030 9AB2     		uxth	r2, r3
 147              		.loc 1 293 0
 148 0032 3B68     		ldr	r3, [r7, #0]
 149 0034 DB88     		ldrh	r3, [r3, #6]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 150              		.loc 1 292 0
 151 0036 1343     		orrs	r3, r3, r2
 152 0038 9AB2     		uxth	r2, r3
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 153              		.loc 1 294 0
 154 003a 3B68     		ldr	r3, [r7, #0]
 155 003c 1B89     		ldrh	r3, [r3, #8]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 156              		.loc 1 292 0
 157 003e 1343     		orrs	r3, r3, r2
 158 0040 9AB2     		uxth	r2, r3
 159              		.loc 1 294 0
 160 0042 3B68     		ldr	r3, [r7, #0]
 161 0044 5B89     		ldrh	r3, [r3, #10]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 162              		.loc 1 292 0
 163 0046 1343     		orrs	r3, r3, r2
 164 0048 9AB2     		uxth	r2, r3
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 165              		.loc 1 295 0
 166 004a 3B68     		ldr	r3, [r7, #0]
 167 004c 9B89     		ldrh	r3, [r3, #12]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 168              		.loc 1 292 0
 169 004e 1343     		orrs	r3, r3, r2
 170 0050 9AB2     		uxth	r2, r3
 171              		.loc 1 295 0
 172 0052 3B68     		ldr	r3, [r7, #0]
 173 0054 DB89     		ldrh	r3, [r3, #14]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 174              		.loc 1 292 0
 175 0056 1343     		orrs	r3, r3, r2
 176 0058 9AB2     		uxth	r2, r3
 177 005a FB89     		ldrh	r3, [r7, #14]	@ movhi
 178 005c 1343     		orrs	r3, r3, r2
 179 005e FB81     		strh	r3, [r7, #14]	@ movhi
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx CR1 */
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 = tmpreg;
 180              		.loc 1 297 0
 181 0060 7B68     		ldr	r3, [r7, #4]
 182 0062 FA89     		ldrh	r2, [r7, #14]	@ movhi
 183 0064 1A80     		strh	r2, [r3, #0]	@ movhi
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 184              		.loc 1 300 0
 185 0066 7B68     		ldr	r3, [r7, #4]
 186 0068 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 187 006a 9BB2     		uxth	r3, r3
 188 006c 23F40063 		bic	r3, r3, #2048
 189 0070 9AB2     		uxth	r2, r3
 190 0072 7B68     		ldr	r3, [r7, #4]
 191 0074 9A83     		strh	r2, [r3, #28]	@ movhi
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx CRCPOLY */
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 192              		.loc 1 303 0
 193 0076 3B68     		ldr	r3, [r7, #0]
 194 0078 1A8A     		ldrh	r2, [r3, #16]
 195 007a 7B68     		ldr	r3, [r7, #4]
 196 007c 1A82     		strh	r2, [r3, #16]	@ movhi
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 197              		.loc 1 304 0
 198 007e 07F11407 		add	r7, r7, #20
 199 0082 BD46     		mov	sp, r7
 200 0084 80BC     		pop	{r7}
 201 0086 7047     		bx	lr
 202              		.cfi_endproc
 203              	.LFE111:
 205              		.section	.text.I2S_Init,"ax",%progbits
 206              		.align	2
 207              		.global	I2S_Init
 208              		.thumb
 209              		.thumb_func
 211              	I2S_Init:
 212              	.LFB112:
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         parameters in the I2S_InitStruct.
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be  2 or 3 to select the SPI peripheral (configured in I2S mode).
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         configured in I2S mode.
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The function calculates the optimal prescaler needed to obtain the most 
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         accurate audio frequency (depending on the I2S clock source, the PLL values 
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         and the product configuration). But in case the prescaler value is greater 
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         than 511, the default value (0x02) will be configured instead.    
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   if an external clock is used as source clock for the I2S, then the define
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should be enabled and set
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         to the value of the the source clock frequency (in Hz).
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 213              		.loc 1 326 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 40
 216              		@ frame_needed = 1, uses_anonymous_args = 0
 217              		@ link register save eliminated.
 218 0000 80B4     		push	{r7}
 219              	.LCFI6:
 220              		.cfi_def_cfa_offset 4
 221              		.cfi_offset 7, -4
 222 0002 8BB0     		sub	sp, sp, #44
 223              	.LCFI7:
 224              		.cfi_def_cfa_offset 48
 225 0004 00AF     		add	r7, sp, #0
 226              	.LCFI8:
 227              		.cfi_def_cfa_register 7
 228 0006 7860     		str	r0, [r7, #4]
 229 0008 3960     		str	r1, [r7, #0]
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 230              		.loc 1 327 0
 231 000a 4FF00003 		mov	r3, #0
 232 000e 7B83     		strh	r3, [r7, #26]	@ movhi
 233 0010 4FF00203 		mov	r3, #2
 234 0014 FB84     		strh	r3, [r7, #38]	@ movhi
 235 0016 4FF00003 		mov	r3, #0
 236 001a BB84     		strh	r3, [r7, #36]	@ movhi
 237 001c 4FF00103 		mov	r3, #1
 238 0020 7B84     		strh	r3, [r7, #34]	@ movhi
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint32_t tmp = 0, i2sclk = 0;
 239              		.loc 1 328 0
 240 0022 4FF00003 		mov	r3, #0
 241 0026 FB61     		str	r3, [r7, #28]
 242 0028 4FF00003 		mov	r3, #0
 243 002c 7B61     		str	r3, [r7, #20]
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #ifndef I2S_EXTERNAL_CLOCK_VAL
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint32_t pllm = 0, plln = 0, pllr = 0;
 244              		.loc 1 330 0
 245 002e 4FF00003 		mov	r3, #0
 246 0032 3B61     		str	r3, [r7, #16]
 247 0034 4FF00003 		mov	r3, #0
 248 0038 FB60     		str	r3, [r7, #12]
 249 003a 4FF00003 		mov	r3, #0
 250 003e BB60     		str	r3, [r7, #8]
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #endif /* I2S_EXTERNAL_CLOCK_VAL */
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 251              		.loc 1 344 0
 252 0040 7B68     		ldr	r3, [r7, #4]
 253 0042 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 254 0044 9BB2     		uxth	r3, r3
 255 0046 23F47A63 		bic	r3, r3, #4000
 256 004a 23F01F03 		bic	r3, r3, #31
 257 004e 9AB2     		uxth	r2, r3
 258 0050 7B68     		ldr	r3, [r7, #4]
 259 0052 9A83     		strh	r2, [r3, #28]	@ movhi
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = 0x0002;
 260              		.loc 1 345 0
 261 0054 7B68     		ldr	r3, [r7, #4]
 262 0056 4FF00202 		mov	r2, #2
 263 005a 1A84     		strh	r2, [r3, #32]	@ movhi
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = SPIx->I2SCFGR;
 264              		.loc 1 348 0
 265 005c 7B68     		ldr	r3, [r7, #4]
 266 005e 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 267 0060 7B83     		strh	r3, [r7, #26]	@ movhi
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 268              		.loc 1 351 0
 269 0062 3B68     		ldr	r3, [r7, #0]
 270 0064 9B68     		ldr	r3, [r3, #8]
 271 0066 022B     		cmp	r3, #2
 272 0068 06D1     		bne	.L7
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)0;
 273              		.loc 1 353 0
 274 006a 4FF00003 		mov	r3, #0
 275 006e BB84     		strh	r3, [r7, #36]	@ movhi
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)2;   
 276              		.loc 1 354 0
 277 0070 4FF00203 		mov	r3, #2
 278 0074 FB84     		strh	r3, [r7, #38]	@ movhi
 279 0076 9AE0     		b	.L8
 280              	.L7:
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Check the frame length (For the Prescaler computing) *******************/
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 281              		.loc 1 360 0
 282 0078 3B68     		ldr	r3, [r7, #0]
 283 007a 9B88     		ldrh	r3, [r3, #4]
 284 007c 002B     		cmp	r3, #0
 285 007e 03D1     		bne	.L9
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Packet length is 16 bits */
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       packetlength = 1;
 286              		.loc 1 363 0
 287 0080 4FF00103 		mov	r3, #1
 288 0084 7B84     		strh	r3, [r7, #34]	@ movhi
 289 0086 02E0     		b	.L10
 290              	.L9:
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     else
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Packet length is 32 bits */
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       packetlength = 2;
 291              		.loc 1 368 0
 292 0088 4FF00203 		mov	r3, #2
 293 008c 7B84     		strh	r3, [r7, #34]	@ movhi
 294              	.L10:
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get I2S source Clock frequency (only in Silicon RevisionB and RevisionY) */
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* If an external I2S clock has to be used, this define should be set  
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        in the project configuration or in the stm32f4xx_conf.h file */
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #ifdef I2S_EXTERNAL_CLOCK_VAL     
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set external clock as I2S clock source */
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) == 0)
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC->CFGR |= (uint32_t)RCC_CFGR_I2SSRC;
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the I2S clock to the external clock  value */
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sclk = I2S_EXTERNAL_CLOCK_VAL;
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #else /* There is no define for External I2S clock source */
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set PLLI2S as I2S clock source */
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 295              		.loc 1 387 0
 296 008e 4FF46053 		mov	r3, #14336
 297 0092 C4F20203 		movt	r3, 16386
 298 0096 9B68     		ldr	r3, [r3, #8]
 299 0098 03F40003 		and	r3, r3, #8388608
 300 009c 002B     		cmp	r3, #0
 301 009e 0BD0     		beq	.L11
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 302              		.loc 1 389 0
 303 00a0 4FF46053 		mov	r3, #14336
 304 00a4 C4F20203 		movt	r3, 16386
 305 00a8 4FF46052 		mov	r2, #14336
 306 00ac C4F20202 		movt	r2, 16386
 307 00b0 9268     		ldr	r2, [r2, #8]
 308 00b2 22F40002 		bic	r2, r2, #8388608
 309 00b6 9A60     		str	r2, [r3, #8]
 310              	.L11:
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }    
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLI2SN value */
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 311              		.loc 1 393 0
 312 00b8 4FF46053 		mov	r3, #14336
 313 00bc C4F20203 		movt	r3, 16386
 314 00c0 D3F88420 		ldr	r2, [r3, #132]
 315 00c4 47F6C073 		movw	r3, #32704
 316 00c8 1340     		ands	r3, r3, r2
 317 00ca 4FEA9313 		lsr	r3, r3, #6
 318 00ce 4FEAC353 		lsl	r3, r3, #23
 319 00d2 4FEAD353 		lsr	r3, r3, #23
 320 00d6 FB60     		str	r3, [r7, #12]
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SN >> 6));
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLI2SR value */
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 321              		.loc 1 397 0
 322 00d8 4FF46053 		mov	r3, #14336
 323 00dc C4F20203 		movt	r3, 16386
 324 00e0 D3F88430 		ldr	r3, [r3, #132]
 325 00e4 03F0E043 		and	r3, r3, #1879048192
 326 00e8 4FEA1373 		lsr	r3, r3, #28
 327 00ec 03F00703 		and	r3, r3, #7
 328 00f0 BB60     		str	r3, [r7, #8]
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SR >> 28));
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLM value */
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 329              		.loc 1 401 0
 330 00f2 4FF46053 		mov	r3, #14336
 331 00f6 C4F20203 		movt	r3, 16386
 332 00fa 5B68     		ldr	r3, [r3, #4]
 333 00fc 03F03F03 		and	r3, r3, #63
 334 0100 3B61     		str	r3, [r7, #16]
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the I2S source clock value */
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 335              		.loc 1 404 0
 336 0102 4FF49053 		mov	r3, #4608
 337 0106 C0F27A03 		movt	r3, 122
 338 010a 3A69     		ldr	r2, [r7, #16]
 339 010c B3FBF2F3 		udiv	r3, r3, r2
 340 0110 FA68     		ldr	r2, [r7, #12]
 341 0112 02FB03F2 		mul	r2, r2, r3
 342 0116 BB68     		ldr	r3, [r7, #8]
 343 0118 B2FBF3F3 		udiv	r3, r2, r3
 344 011c 7B61     		str	r3, [r7, #20]
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #endif /* I2S_EXTERNAL_CLOCK_VAL */
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Compute the Real divider depending on the MCLK output state, with a floating point */
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 345              		.loc 1 408 0
 346 011e 3B68     		ldr	r3, [r7, #0]
 347 0120 DB88     		ldrh	r3, [r3, #6]
 348 0122 B3F5007F 		cmp	r3, #512
 349 0126 13D1     		bne	.L12
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* MCLK output is enabled */
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 350              		.loc 1 411 0
 351 0128 7B69     		ldr	r3, [r7, #20]
 352 012a 4FEA1322 		lsr	r2, r3, #8
 353 012e 1346     		mov	r3, r2
 354 0130 4FEA8303 		lsl	r3, r3, #2
 355 0134 9B18     		adds	r3, r3, r2
 356 0136 4FEA4303 		lsl	r3, r3, #1
 357 013a 1A46     		mov	r2, r3
 358 013c 3B68     		ldr	r3, [r7, #0]
 359 013e 9B68     		ldr	r3, [r3, #8]
 360 0140 B2FBF3F3 		udiv	r3, r2, r3
 361 0144 9BB2     		uxth	r3, r3
 362 0146 03F10503 		add	r3, r3, #5
 363 014a 9BB2     		uxth	r3, r3
 364 014c FB61     		str	r3, [r7, #28]
 365 014e 15E0     		b	.L13
 366              	.L12:
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     else
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* MCLK output is disabled */
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 
 367              		.loc 1 416 0
 368 0150 7B8C     		ldrh	r3, [r7, #34]
 369 0152 4FEA4313 		lsl	r3, r3, #5
 370 0156 7A69     		ldr	r2, [r7, #20]
 371 0158 B2FBF3F2 		udiv	r2, r2, r3
 372 015c 1346     		mov	r3, r2
 373 015e 4FEA8303 		lsl	r3, r3, #2
 374 0162 9B18     		adds	r3, r3, r2
 375 0164 4FEA4303 		lsl	r3, r3, #1
 376 0168 1A46     		mov	r2, r3
 377 016a 3B68     		ldr	r3, [r7, #0]
 378 016c 9B68     		ldr	r3, [r3, #8]
 379 016e B2FBF3F3 		udiv	r3, r2, r3
 380 0172 9BB2     		uxth	r3, r3
 381 0174 03F10503 		add	r3, r3, #5
 382 0178 9BB2     		uxth	r3, r3
 383 017a FB61     		str	r3, [r7, #28]
 384              	.L13:
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Remove the flatting point */
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     tmp = tmp / 10;  
 385              		.loc 1 420 0
 386 017c FA69     		ldr	r2, [r7, #28]
 387 017e 4CF6CD43 		movw	r3, #52429
 388 0182 CCF6CC43 		movt	r3, 52428
 389 0186 A3FB0213 		umull	r1, r3, r3, r2
 390 018a 4FEAD303 		lsr	r3, r3, #3
 391 018e FB61     		str	r3, [r7, #28]
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Check the parity of the divider */
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 392              		.loc 1 423 0
 393 0190 FB69     		ldr	r3, [r7, #28]
 394 0192 9BB2     		uxth	r3, r3
 395 0194 03F00103 		and	r3, r3, #1
 396 0198 BB84     		strh	r3, [r7, #36]	@ movhi
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Compute the i2sdiv prescaler */
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 397              		.loc 1 426 0
 398 019a BB8C     		ldrh	r3, [r7, #36]
 399 019c FA69     		ldr	r2, [r7, #28]
 400 019e D31A     		subs	r3, r2, r3
 401 01a0 4FEA5303 		lsr	r3, r3, #1
 402 01a4 FB84     		strh	r3, [r7, #38]	@ movhi
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 403              		.loc 1 429 0
 404 01a6 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 405 01a8 4FEA0323 		lsl	r3, r3, #8
 406 01ac BB84     		strh	r3, [r7, #36]	@ movhi
 407              	.L8:
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 408              		.loc 1 433 0
 409 01ae FB8C     		ldrh	r3, [r7, #38]
 410 01b0 012B     		cmp	r3, #1
 411 01b2 02D9     		bls	.L14
 412              		.loc 1 433 0 is_stmt 0 discriminator 1
 413 01b4 FB8C     		ldrh	r3, [r7, #38]
 414 01b6 FF2B     		cmp	r3, #255
 415 01b8 05D9     		bls	.L15
 416              	.L14:
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the default values */
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = 2;
 417              		.loc 1 436 0 is_stmt 1
 418 01ba 4FF00203 		mov	r3, #2
 419 01be FB84     		strh	r3, [r7, #38]	@ movhi
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = 0;
 420              		.loc 1 437 0
 421 01c0 4FF00003 		mov	r3, #0
 422 01c4 BB84     		strh	r3, [r7, #36]	@ movhi
 423              	.L15:
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SPR register the computed value */
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCL
 424              		.loc 1 441 0
 425 01c6 3B68     		ldr	r3, [r7, #0]
 426 01c8 DA88     		ldrh	r2, [r3, #6]
 427 01ca BB8C     		ldrh	r3, [r7, #36]	@ movhi
 428 01cc 1343     		orrs	r3, r3, r2
 429 01ce 9AB2     		uxth	r2, r3
 430 01d0 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 431 01d2 1343     		orrs	r3, r3, r2
 432 01d4 9AB2     		uxth	r2, r3
 433 01d6 7B68     		ldr	r3, [r7, #4]
 434 01d8 1A84     		strh	r2, [r3, #32]	@ movhi
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 435              		.loc 1 444 0
 436 01da 3B68     		ldr	r3, [r7, #0]
 437 01dc 1A88     		ldrh	r2, [r3, #0]
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 438              		.loc 1 445 0
 439 01de 3B68     		ldr	r3, [r7, #0]
 440 01e0 5988     		ldrh	r1, [r3, #2]
 441 01e2 3B68     		ldr	r3, [r7, #0]
 442 01e4 9888     		ldrh	r0, [r3, #4]
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 443              		.loc 1 446 0
 444 01e6 3B68     		ldr	r3, [r7, #0]
 445 01e8 9B89     		ldrh	r3, [r3, #12]
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 446              		.loc 1 445 0
 447 01ea 0343     		orrs	r3, r3, r0
 448 01ec 9BB2     		uxth	r3, r3
 449 01ee 0B43     		orrs	r3, r3, r1
 450 01f0 9BB2     		uxth	r3, r3
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 451              		.loc 1 444 0
 452 01f2 1343     		orrs	r3, r3, r2
 453 01f4 9AB2     		uxth	r2, r3
 454 01f6 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 455 01f8 1343     		orrs	r3, r3, r2
 456 01fa 9BB2     		uxth	r3, r3
 457 01fc 43F40063 		orr	r3, r3, #2048
 458 0200 7B83     		strh	r3, [r7, #26]	@ movhi
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR = tmpreg;
 459              		.loc 1 449 0
 460 0202 7B68     		ldr	r3, [r7, #4]
 461 0204 7A8B     		ldrh	r2, [r7, #26]	@ movhi
 462 0206 9A83     		strh	r2, [r3, #28]	@ movhi
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 463              		.loc 1 450 0
 464 0208 07F12C07 		add	r7, r7, #44
 465 020c BD46     		mov	sp, r7
 466 020e 80BC     		pop	{r7}
 467 0210 7047     		bx	lr
 468              		.cfi_endproc
 469              	.LFE112:
 471 0212 00BF     		.section	.text.SPI_StructInit,"ax",%progbits
 472              		.align	2
 473              		.global	SPI_StructInit
 474              		.thumb
 475              		.thumb_func
 477              	SPI_StructInit:
 478              	.LFB113:
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Fills each SPI_InitStruct member with its default value.
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 479              		.loc 1 458 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 8
 482              		@ frame_needed = 1, uses_anonymous_args = 0
 483              		@ link register save eliminated.
 484 0000 80B4     		push	{r7}
 485              	.LCFI9:
 486              		.cfi_def_cfa_offset 4
 487              		.cfi_offset 7, -4
 488 0002 83B0     		sub	sp, sp, #12
 489              	.LCFI10:
 490              		.cfi_def_cfa_offset 16
 491 0004 00AF     		add	r7, sp, #0
 492              	.LCFI11:
 493              		.cfi_def_cfa_register 7
 494 0006 7860     		str	r0, [r7, #4]
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*--------------- Reset SPI init structure parameters values -----------------*/
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_Direction member */
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 495              		.loc 1 461 0
 496 0008 7B68     		ldr	r3, [r7, #4]
 497 000a 4FF00002 		mov	r2, #0
 498 000e 1A80     		strh	r2, [r3, #0]	@ movhi
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* initialize the SPI_Mode member */
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 499              		.loc 1 463 0
 500 0010 7B68     		ldr	r3, [r7, #4]
 501 0012 4FF00002 		mov	r2, #0
 502 0016 5A80     		strh	r2, [r3, #2]	@ movhi
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* initialize the SPI_DataSize member */
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 503              		.loc 1 465 0
 504 0018 7B68     		ldr	r3, [r7, #4]
 505 001a 4FF00002 		mov	r2, #0
 506 001e 9A80     		strh	r2, [r3, #4]	@ movhi
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPOL member */
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 507              		.loc 1 467 0
 508 0020 7B68     		ldr	r3, [r7, #4]
 509 0022 4FF00002 		mov	r2, #0
 510 0026 DA80     		strh	r2, [r3, #6]	@ movhi
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPHA member */
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 511              		.loc 1 469 0
 512 0028 7B68     		ldr	r3, [r7, #4]
 513 002a 4FF00002 		mov	r2, #0
 514 002e 1A81     		strh	r2, [r3, #8]	@ movhi
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_NSS member */
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 515              		.loc 1 471 0
 516 0030 7B68     		ldr	r3, [r7, #4]
 517 0032 4FF00002 		mov	r2, #0
 518 0036 5A81     		strh	r2, [r3, #10]	@ movhi
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 519              		.loc 1 473 0
 520 0038 7B68     		ldr	r3, [r7, #4]
 521 003a 4FF00002 		mov	r2, #0
 522 003e 9A81     		strh	r2, [r3, #12]	@ movhi
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_FirstBit member */
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 523              		.loc 1 475 0
 524 0040 7B68     		ldr	r3, [r7, #4]
 525 0042 4FF00002 		mov	r2, #0
 526 0046 DA81     		strh	r2, [r3, #14]	@ movhi
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CRCPolynomial = 7;
 527              		.loc 1 477 0
 528 0048 7B68     		ldr	r3, [r7, #4]
 529 004a 4FF00702 		mov	r2, #7
 530 004e 1A82     		strh	r2, [r3, #16]	@ movhi
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 531              		.loc 1 478 0
 532 0050 07F10C07 		add	r7, r7, #12
 533 0054 BD46     		mov	sp, r7
 534 0056 80BC     		pop	{r7}
 535 0058 7047     		bx	lr
 536              		.cfi_endproc
 537              	.LFE113:
 539 005a 00BF     		.section	.text.I2S_StructInit,"ax",%progbits
 540              		.align	2
 541              		.global	I2S_StructInit
 542              		.thumb
 543              		.thumb_func
 545              	I2S_StructInit:
 546              	.LFB114:
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Fills each I2S_InitStruct member with its default value.
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 547              		.loc 1 486 0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 8
 550              		@ frame_needed = 1, uses_anonymous_args = 0
 551              		@ link register save eliminated.
 552 0000 80B4     		push	{r7}
 553              	.LCFI12:
 554              		.cfi_def_cfa_offset 4
 555              		.cfi_offset 7, -4
 556 0002 83B0     		sub	sp, sp, #12
 557              	.LCFI13:
 558              		.cfi_def_cfa_offset 16
 559 0004 00AF     		add	r7, sp, #0
 560              	.LCFI14:
 561              		.cfi_def_cfa_register 7
 562 0006 7860     		str	r0, [r7, #4]
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*--------------- Reset I2S init structure parameters values -----------------*/
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Mode member */
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 563              		.loc 1 489 0
 564 0008 7B68     		ldr	r3, [r7, #4]
 565 000a 4FF00002 		mov	r2, #0
 566 000e 1A80     		strh	r2, [r3, #0]	@ movhi
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Standard member */
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 567              		.loc 1 492 0
 568 0010 7B68     		ldr	r3, [r7, #4]
 569 0012 4FF00002 		mov	r2, #0
 570 0016 5A80     		strh	r2, [r3, #2]	@ movhi
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_DataFormat member */
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 571              		.loc 1 495 0
 572 0018 7B68     		ldr	r3, [r7, #4]
 573 001a 4FF00002 		mov	r2, #0
 574 001e 9A80     		strh	r2, [r3, #4]	@ movhi
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_MCLKOutput member */
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 575              		.loc 1 498 0
 576 0020 7B68     		ldr	r3, [r7, #4]
 577 0022 4FF00002 		mov	r2, #0
 578 0026 DA80     		strh	r2, [r3, #6]	@ movhi
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_AudioFreq member */
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 579              		.loc 1 501 0
 580 0028 7B68     		ldr	r3, [r7, #4]
 581 002a 4FF00202 		mov	r2, #2
 582 002e 9A60     		str	r2, [r3, #8]
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_CPOL member */
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 583              		.loc 1 504 0
 584 0030 7B68     		ldr	r3, [r7, #4]
 585 0032 4FF00002 		mov	r2, #0
 586 0036 9A81     		strh	r2, [r3, #12]	@ movhi
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 587              		.loc 1 505 0
 588 0038 07F10C07 		add	r7, r7, #12
 589 003c BD46     		mov	sp, r7
 590 003e 80BC     		pop	{r7}
 591 0040 7047     		bx	lr
 592              		.cfi_endproc
 593              	.LFE114:
 595 0042 00BF     		.section	.text.SPI_Cmd,"ax",%progbits
 596              		.align	2
 597              		.global	SPI_Cmd
 598              		.thumb
 599              		.thumb_func
 601              	SPI_Cmd:
 602              	.LFB115:
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral.
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 603              		.loc 1 515 0
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 8
 606              		@ frame_needed = 1, uses_anonymous_args = 0
 607              		@ link register save eliminated.
 608 0000 80B4     		push	{r7}
 609              	.LCFI15:
 610              		.cfi_def_cfa_offset 4
 611              		.cfi_offset 7, -4
 612 0002 83B0     		sub	sp, sp, #12
 613              	.LCFI16:
 614              		.cfi_def_cfa_offset 16
 615 0004 00AF     		add	r7, sp, #0
 616              	.LCFI17:
 617              		.cfi_def_cfa_register 7
 618 0006 7860     		str	r0, [r7, #4]
 619 0008 0B46     		mov	r3, r1
 620 000a FB70     		strb	r3, [r7, #3]
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 621              		.loc 1 519 0
 622 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 623 000e 002B     		cmp	r3, #0
 624 0010 08D0     		beq	.L19
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral */
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_SPE;
 625              		.loc 1 522 0
 626 0012 7B68     		ldr	r3, [r7, #4]
 627 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 628 0016 9BB2     		uxth	r3, r3
 629 0018 43F04003 		orr	r3, r3, #64
 630 001c 9AB2     		uxth	r2, r3
 631 001e 7B68     		ldr	r3, [r7, #4]
 632 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 633 0022 07E0     		b	.L18
 634              	.L19:
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral */
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 635              		.loc 1 527 0
 636 0024 7B68     		ldr	r3, [r7, #4]
 637 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 638 0028 9BB2     		uxth	r3, r3
 639 002a 23F04003 		bic	r3, r3, #64
 640 002e 9AB2     		uxth	r2, r3
 641 0030 7B68     		ldr	r3, [r7, #4]
 642 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 643              	.L18:
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 644              		.loc 1 529 0
 645 0034 07F10C07 		add	r7, r7, #12
 646 0038 BD46     		mov	sp, r7
 647 003a 80BC     		pop	{r7}
 648 003c 7047     		bx	lr
 649              		.cfi_endproc
 650              	.LFE115:
 652 003e 00BF     		.section	.text.I2S_Cmd,"ax",%progbits
 653              		.align	2
 654              		.global	I2S_Cmd
 655              		.thumb
 656              		.thumb_func
 658              	I2S_Cmd:
 659              	.LFB116:
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 2 or 3 to select the SPI peripheral (or I2Sxext 
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         for full duplex mode).
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 660              		.loc 1 540 0
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 8
 663              		@ frame_needed = 1, uses_anonymous_args = 0
 664              		@ link register save eliminated.
 665 0000 80B4     		push	{r7}
 666              	.LCFI18:
 667              		.cfi_def_cfa_offset 4
 668              		.cfi_offset 7, -4
 669 0002 83B0     		sub	sp, sp, #12
 670              	.LCFI19:
 671              		.cfi_def_cfa_offset 16
 672 0004 00AF     		add	r7, sp, #0
 673              	.LCFI20:
 674              		.cfi_def_cfa_register 7
 675 0006 7860     		str	r0, [r7, #4]
 676 0008 0B46     		mov	r3, r1
 677 000a FB70     		strb	r3, [r7, #3]
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 678              		.loc 1 545 0
 679 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 680 000e 002B     		cmp	r3, #0
 681 0010 08D0     		beq	.L22
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral (in I2S mode) */
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 682              		.loc 1 548 0
 683 0012 7B68     		ldr	r3, [r7, #4]
 684 0014 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 685 0016 9BB2     		uxth	r3, r3
 686 0018 43F48063 		orr	r3, r3, #1024
 687 001c 9AB2     		uxth	r2, r3
 688 001e 7B68     		ldr	r3, [r7, #4]
 689 0020 9A83     		strh	r2, [r3, #28]	@ movhi
 690 0022 07E0     		b	.L21
 691              	.L22:
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral in I2S mode */
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 692              		.loc 1 553 0
 693 0024 7B68     		ldr	r3, [r7, #4]
 694 0026 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 695 0028 9BB2     		uxth	r3, r3
 696 002a 23F48063 		bic	r3, r3, #1024
 697 002e 9AB2     		uxth	r2, r3
 698 0030 7B68     		ldr	r3, [r7, #4]
 699 0032 9A83     		strh	r2, [r3, #28]	@ movhi
 700              	.L21:
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 701              		.loc 1 555 0
 702 0034 07F10C07 		add	r7, r7, #12
 703 0038 BD46     		mov	sp, r7
 704 003a 80BC     		pop	{r7}
 705 003c 7047     		bx	lr
 706              		.cfi_endproc
 707              	.LFE116:
 709 003e 00BF     		.section	.text.SPI_DataSizeConfig,"ax",%progbits
 710              		.align	2
 711              		.global	SPI_DataSizeConfig
 712              		.thumb
 713              		.thumb_func
 715              	SPI_DataSizeConfig:
 716              	.LFB117:
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures the data size for the selected SPI.
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_DataSize: specifies the SPI data size.
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_16b: Set data frame format to 16bit
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_8b: Set data frame format to 8bit
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 717              		.loc 1 567 0
 718              		.cfi_startproc
 719              		@ args = 0, pretend = 0, frame = 8
 720              		@ frame_needed = 1, uses_anonymous_args = 0
 721              		@ link register save eliminated.
 722 0000 80B4     		push	{r7}
 723              	.LCFI21:
 724              		.cfi_def_cfa_offset 4
 725              		.cfi_offset 7, -4
 726 0002 83B0     		sub	sp, sp, #12
 727              	.LCFI22:
 728              		.cfi_def_cfa_offset 16
 729 0004 00AF     		add	r7, sp, #0
 730              	.LCFI23:
 731              		.cfi_def_cfa_register 7
 732 0006 7860     		str	r0, [r7, #4]
 733 0008 0B46     		mov	r3, r1
 734 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_DataSize));
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear DFF bit */
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 735              		.loc 1 572 0
 736 000c 7B68     		ldr	r3, [r7, #4]
 737 000e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 738 0010 9BB2     		uxth	r3, r3
 739 0012 23F40063 		bic	r3, r3, #2048
 740 0016 9AB2     		uxth	r2, r3
 741 0018 7B68     		ldr	r3, [r7, #4]
 742 001a 1A80     		strh	r2, [r3, #0]	@ movhi
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set new DFF bit value */
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_DataSize;
 743              		.loc 1 574 0
 744 001c 7B68     		ldr	r3, [r7, #4]
 745 001e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 746 0020 9AB2     		uxth	r2, r3
 747 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 748 0024 1343     		orrs	r3, r3, r2
 749 0026 9AB2     		uxth	r2, r3
 750 0028 7B68     		ldr	r3, [r7, #4]
 751 002a 1A80     		strh	r2, [r3, #0]	@ movhi
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 752              		.loc 1 575 0
 753 002c 07F10C07 		add	r7, r7, #12
 754 0030 BD46     		mov	sp, r7
 755 0032 80BC     		pop	{r7}
 756 0034 7047     		bx	lr
 757              		.cfi_endproc
 758              	.LFE117:
 760 0036 00BF     		.section	.text.SPI_BiDirectionalLineConfig,"ax",%progbits
 761              		.align	2
 762              		.global	SPI_BiDirectionalLineConfig
 763              		.thumb
 764              		.thumb_func
 766              	SPI_BiDirectionalLineConfig:
 767              	.LFB118:
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Selects the data transfer direction in bidirectional mode for the specified SPI.
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_Direction: specifies the data transfer direction in bidirectional mode. 
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Tx: Selects Tx transmission direction
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Rx: Selects Rx receive direction
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 768              		.loc 1 587 0
 769              		.cfi_startproc
 770              		@ args = 0, pretend = 0, frame = 8
 771              		@ frame_needed = 1, uses_anonymous_args = 0
 772              		@ link register save eliminated.
 773 0000 80B4     		push	{r7}
 774              	.LCFI24:
 775              		.cfi_def_cfa_offset 4
 776              		.cfi_offset 7, -4
 777 0002 83B0     		sub	sp, sp, #12
 778              	.LCFI25:
 779              		.cfi_def_cfa_offset 16
 780 0004 00AF     		add	r7, sp, #0
 781              	.LCFI26:
 782              		.cfi_def_cfa_register 7
 783 0006 7860     		str	r0, [r7, #4]
 784 0008 0B46     		mov	r3, r1
 785 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION(SPI_Direction));
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_Direction == SPI_Direction_Tx)
 786              		.loc 1 591 0
 787 000c 7B88     		ldrh	r3, [r7, #2]
 788 000e B3F5804F 		cmp	r3, #16384
 789 0012 08D1     		bne	.L26
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the Tx only mode */
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_Direction_Tx;
 790              		.loc 1 594 0
 791 0014 7B68     		ldr	r3, [r7, #4]
 792 0016 1B88     		ldrh	r3, [r3, #0]	@ movhi
 793 0018 9BB2     		uxth	r3, r3
 794 001a 43F48043 		orr	r3, r3, #16384
 795 001e 9AB2     		uxth	r2, r3
 796 0020 7B68     		ldr	r3, [r7, #4]
 797 0022 1A80     		strh	r2, [r3, #0]	@ movhi
 798 0024 07E0     		b	.L25
 799              	.L26:
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the Rx only mode */
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_Direction_Rx;
 800              		.loc 1 599 0
 801 0026 7B68     		ldr	r3, [r7, #4]
 802 0028 1B88     		ldrh	r3, [r3, #0]	@ movhi
 803 002a 9BB2     		uxth	r3, r3
 804 002c 23F48043 		bic	r3, r3, #16384
 805 0030 9AB2     		uxth	r2, r3
 806 0032 7B68     		ldr	r3, [r7, #4]
 807 0034 1A80     		strh	r2, [r3, #0]	@ movhi
 808              	.L25:
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 809              		.loc 1 601 0
 810 0036 07F10C07 		add	r7, r7, #12
 811 003a BD46     		mov	sp, r7
 812 003c 80BC     		pop	{r7}
 813 003e 7047     		bx	lr
 814              		.cfi_endproc
 815              	.LFE118:
 817              		.section	.text.SPI_NSSInternalSoftwareConfig,"ax",%progbits
 818              		.align	2
 819              		.global	SPI_NSSInternalSoftwareConfig
 820              		.thumb
 821              		.thumb_func
 823              	SPI_NSSInternalSoftwareConfig:
 824              	.LFB119:
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures internally by software the NSS pin for the selected SPI.
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 825              		.loc 1 613 0
 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 8
 828              		@ frame_needed = 1, uses_anonymous_args = 0
 829              		@ link register save eliminated.
 830 0000 80B4     		push	{r7}
 831              	.LCFI27:
 832              		.cfi_def_cfa_offset 4
 833              		.cfi_offset 7, -4
 834 0002 83B0     		sub	sp, sp, #12
 835              	.LCFI28:
 836              		.cfi_def_cfa_offset 16
 837 0004 00AF     		add	r7, sp, #0
 838              	.LCFI29:
 839              		.cfi_def_cfa_register 7
 840 0006 7860     		str	r0, [r7, #4]
 841 0008 0B46     		mov	r3, r1
 842 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 843              		.loc 1 617 0
 844 000c 7A88     		ldrh	r2, [r7, #2]
 845 000e 4FF6FF63 		movw	r3, #65279
 846 0012 9A42     		cmp	r2, r3
 847 0014 08D0     		beq	.L29
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set NSS pin internally by software */
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 848              		.loc 1 620 0
 849 0016 7B68     		ldr	r3, [r7, #4]
 850 0018 1B88     		ldrh	r3, [r3, #0]	@ movhi
 851 001a 9BB2     		uxth	r3, r3
 852 001c 43F48073 		orr	r3, r3, #256
 853 0020 9AB2     		uxth	r2, r3
 854 0022 7B68     		ldr	r3, [r7, #4]
 855 0024 1A80     		strh	r2, [r3, #0]	@ movhi
 856 0026 07E0     		b	.L28
 857              	.L29:
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Reset NSS pin internally by software */
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 858              		.loc 1 625 0
 859 0028 7B68     		ldr	r3, [r7, #4]
 860 002a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 861 002c 9BB2     		uxth	r3, r3
 862 002e 23F48073 		bic	r3, r3, #256
 863 0032 9AB2     		uxth	r2, r3
 864 0034 7B68     		ldr	r3, [r7, #4]
 865 0036 1A80     		strh	r2, [r3, #0]	@ movhi
 866              	.L28:
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 867              		.loc 1 627 0
 868 0038 07F10C07 		add	r7, r7, #12
 869 003c BD46     		mov	sp, r7
 870 003e 80BC     		pop	{r7}
 871 0040 7047     		bx	lr
 872              		.cfi_endproc
 873              	.LFE119:
 875 0042 00BF     		.section	.text.SPI_SSOutputCmd,"ax",%progbits
 876              		.align	2
 877              		.global	SPI_SSOutputCmd
 878              		.thumb
 879              		.thumb_func
 881              	SPI_SSOutputCmd:
 882              	.LFB120:
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SS output for the selected SPI.
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx SS output. 
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 883              		.loc 1 637 0
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 8
 886              		@ frame_needed = 1, uses_anonymous_args = 0
 887              		@ link register save eliminated.
 888 0000 80B4     		push	{r7}
 889              	.LCFI30:
 890              		.cfi_def_cfa_offset 4
 891              		.cfi_offset 7, -4
 892 0002 83B0     		sub	sp, sp, #12
 893              	.LCFI31:
 894              		.cfi_def_cfa_offset 16
 895 0004 00AF     		add	r7, sp, #0
 896              	.LCFI32:
 897              		.cfi_def_cfa_register 7
 898 0006 7860     		str	r0, [r7, #4]
 899 0008 0B46     		mov	r3, r1
 900 000a FB70     		strb	r3, [r7, #3]
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 901              		.loc 1 641 0
 902 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 903 000e 002B     		cmp	r3, #0
 904 0010 08D0     		beq	.L32
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI SS output */
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 905              		.loc 1 644 0
 906 0012 7B68     		ldr	r3, [r7, #4]
 907 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 908 0016 9BB2     		uxth	r3, r3
 909 0018 43F00403 		orr	r3, r3, #4
 910 001c 9AB2     		uxth	r2, r3
 911 001e 7B68     		ldr	r3, [r7, #4]
 912 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 913 0022 07E0     		b	.L31
 914              	.L32:
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI SS output */
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 915              		.loc 1 649 0
 916 0024 7B68     		ldr	r3, [r7, #4]
 917 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 918 0028 9BB2     		uxth	r3, r3
 919 002a 23F00403 		bic	r3, r3, #4
 920 002e 9AB2     		uxth	r2, r3
 921 0030 7B68     		ldr	r3, [r7, #4]
 922 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 923              	.L31:
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 924              		.loc 1 651 0
 925 0034 07F10C07 		add	r7, r7, #12
 926 0038 BD46     		mov	sp, r7
 927 003a 80BC     		pop	{r7}
 928 003c 7047     		bx	lr
 929              		.cfi_endproc
 930              	.LFE120:
 932 003e 00BF     		.section	.text.SPI_TIModeCmd,"ax",%progbits
 933              		.align	2
 934              		.global	SPI_TIModeCmd
 935              		.thumb
 936              		.thumb_func
 938              	SPI_TIModeCmd:
 939              	.LFB121:
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         been called. 
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   When TI mode is selected, the control bits SSM, SSI, CPOL and CPHA 
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         are not taken into consideration and are configured by hardware
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         respectively to the TI mode requirements.  
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI TI communication mode.
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 940              		.loc 1 668 0
 941              		.cfi_startproc
 942              		@ args = 0, pretend = 0, frame = 8
 943              		@ frame_needed = 1, uses_anonymous_args = 0
 944              		@ link register save eliminated.
 945 0000 80B4     		push	{r7}
 946              	.LCFI33:
 947              		.cfi_def_cfa_offset 4
 948              		.cfi_offset 7, -4
 949 0002 83B0     		sub	sp, sp, #12
 950              	.LCFI34:
 951              		.cfi_def_cfa_offset 16
 952 0004 00AF     		add	r7, sp, #0
 953              	.LCFI35:
 954              		.cfi_def_cfa_register 7
 955 0006 7860     		str	r0, [r7, #4]
 956 0008 0B46     		mov	r3, r1
 957 000a FB70     		strb	r3, [r7, #3]
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 958              		.loc 1 673 0
 959 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 960 000e 002B     		cmp	r3, #0
 961 0010 08D0     		beq	.L35
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the TI mode for the selected SPI peripheral */
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_CR2_FRF;
 962              		.loc 1 676 0
 963 0012 7B68     		ldr	r3, [r7, #4]
 964 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 965 0016 9BB2     		uxth	r3, r3
 966 0018 43F01003 		orr	r3, r3, #16
 967 001c 9AB2     		uxth	r2, r3
 968 001e 7B68     		ldr	r3, [r7, #4]
 969 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 970 0022 07E0     		b	.L34
 971              	.L35:
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the TI mode for the selected SPI peripheral */
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 972              		.loc 1 681 0
 973 0024 7B68     		ldr	r3, [r7, #4]
 974 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 975 0028 9BB2     		uxth	r3, r3
 976 002a 23F01003 		bic	r3, r3, #16
 977 002e 9AB2     		uxth	r2, r3
 978 0030 7B68     		ldr	r3, [r7, #4]
 979 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 980              	.L34:
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 981              		.loc 1 683 0
 982 0034 07F10C07 		add	r7, r7, #12
 983 0038 BD46     		mov	sp, r7
 984 003a 80BC     		pop	{r7}
 985 003c 7047     		bx	lr
 986              		.cfi_endproc
 987              	.LFE121:
 989 003e 00BF     		.section	.text.I2S_FullDuplexConfig,"ax",%progbits
 990              		.align	2
 991              		.global	I2S_FullDuplexConfig
 992              		.thumb
 993              		.thumb_func
 995              	I2S_FullDuplexConfig:
 996              	.LFB122:
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures the full duplex mode for the I2Sx peripheral using its
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         extension I2Sxext according to the specified parameters in the 
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         I2S_InitStruct.
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2Sxext: where x can be  2 or 3 to select the I2S peripheral extension block.
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified I2S peripheral
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         extension.
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The structure pointed by I2S_InitStruct parameter should be the same
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         used for the master I2S peripheral. In this case, if the master is 
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         configured as transmitter, the slave will be receiver and vice versa.
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         Or you can force a different mode by modifying the field I2S_Mode to the
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         value I2S_SlaveRx or I2S_SlaveTx indepedently of the master configuration.    
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The I2S full duplex extension can be configured in slave mode only.    
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 997              		.loc 1 705 0
 998              		.cfi_startproc
 999              		@ args = 0, pretend = 0, frame = 16
 1000              		@ frame_needed = 1, uses_anonymous_args = 0
 1001              		@ link register save eliminated.
 1002 0000 80B4     		push	{r7}
 1003              	.LCFI36:
 1004              		.cfi_def_cfa_offset 4
 1005              		.cfi_offset 7, -4
 1006 0002 85B0     		sub	sp, sp, #20
 1007              	.LCFI37:
 1008              		.cfi_def_cfa_offset 24
 1009 0004 00AF     		add	r7, sp, #0
 1010              	.LCFI38:
 1011              		.cfi_def_cfa_register 7
 1012 0006 7860     		str	r0, [r7, #4]
 1013 0008 3960     		str	r1, [r7, #0]
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, tmp = 0;
 1014              		.loc 1 706 0
 1015 000a 4FF00003 		mov	r3, #0
 1016 000e BB81     		strh	r3, [r7, #12]	@ movhi
 1017 0010 4FF00003 		mov	r3, #0
 1018 0014 FB81     		strh	r3, [r7, #14]	@ movhi
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_EXT_PERIPH(I2Sxext));
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 1019              		.loc 1 717 0
 1020 0016 7B68     		ldr	r3, [r7, #4]
 1021 0018 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1022 001a 9BB2     		uxth	r3, r3
 1023 001c 23F47A63 		bic	r3, r3, #4000
 1024 0020 23F01F03 		bic	r3, r3, #31
 1025 0024 9AB2     		uxth	r2, r3
 1026 0026 7B68     		ldr	r3, [r7, #4]
 1027 0028 9A83     		strh	r2, [r3, #28]	@ movhi
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SPR = 0x0002;
 1028              		.loc 1 718 0
 1029 002a 7B68     		ldr	r3, [r7, #4]
 1030 002c 4FF00202 		mov	r2, #2
 1031 0030 1A84     		strh	r2, [r3, #32]	@ movhi
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = I2Sxext->I2SCFGR;
 1032              		.loc 1 721 0
 1033 0032 7B68     		ldr	r3, [r7, #4]
 1034 0034 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1035 0036 BB81     		strh	r3, [r7, #12]	@ movhi
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the mode to be configured for the extended I2S */
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Slav
 1036              		.loc 1 724 0
 1037 0038 3B68     		ldr	r3, [r7, #0]
 1038 003a 1B88     		ldrh	r3, [r3, #0]
 1039 003c B3F5007F 		cmp	r3, #512
 1040 0040 03D0     		beq	.L38
 1041              		.loc 1 724 0 is_stmt 0 discriminator 1
 1042 0042 3B68     		ldr	r3, [r7, #0]
 1043 0044 1B88     		ldrh	r3, [r3, #0]
 1044 0046 002B     		cmp	r3, #0
 1045 0048 03D1     		bne	.L39
 1046              	.L38:
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     tmp = I2S_Mode_SlaveRx;
 1047              		.loc 1 726 0 is_stmt 1
 1048 004a 4FF48073 		mov	r3, #256
 1049 004e FB81     		strh	r3, [r7, #14]	@ movhi
 1050 0050 0CE0     		b	.L40
 1051              	.L39:
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Sl
 1052              		.loc 1 730 0
 1053 0052 3B68     		ldr	r3, [r7, #0]
 1054 0054 1B88     		ldrh	r3, [r3, #0]
 1055 0056 B3F5407F 		cmp	r3, #768
 1056 005a 04D0     		beq	.L41
 1057              		.loc 1 730 0 is_stmt 0 discriminator 1
 1058 005c 3B68     		ldr	r3, [r7, #0]
 1059 005e 1B88     		ldrh	r3, [r3, #0]
 1060 0060 B3F5807F 		cmp	r3, #256
 1061 0064 02D1     		bne	.L40
 1062              	.L41:
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = I2S_Mode_SlaveTx;
 1063              		.loc 1 732 0 is_stmt 1
 1064 0066 4FF00003 		mov	r3, #0
 1065 006a FB81     		strh	r3, [r7, #14]	@ movhi
 1066              	.L40:
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 1067              		.loc 1 739 0
 1068 006c 3B68     		ldr	r3, [r7, #0]
 1069 006e 5A88     		ldrh	r2, [r3, #2]
 1070 0070 3B68     		ldr	r3, [r7, #0]
 1071 0072 9988     		ldrh	r1, [r3, #4]
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 1072              		.loc 1 740 0
 1073 0074 3B68     		ldr	r3, [r7, #0]
 1074 0076 9B89     		ldrh	r3, [r3, #12]
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 1075              		.loc 1 739 0
 1076 0078 0B43     		orrs	r3, r3, r1
 1077 007a 9BB2     		uxth	r3, r3
 1078 007c 1343     		orrs	r3, r3, r2
 1079 007e 9AB2     		uxth	r2, r3
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 1080              		.loc 1 738 0
 1081 0080 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1082 0082 1343     		orrs	r3, r3, r2
 1083 0084 9AB2     		uxth	r2, r3
 1084 0086 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1085 0088 1343     		orrs	r3, r3, r2
 1086 008a 9BB2     		uxth	r3, r3
 1087 008c 43F40063 		orr	r3, r3, #2048
 1088 0090 BB81     		strh	r3, [r7, #12]	@ movhi
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR = tmpreg;
 1089              		.loc 1 743 0
 1090 0092 7B68     		ldr	r3, [r7, #4]
 1091 0094 BA89     		ldrh	r2, [r7, #12]	@ movhi
 1092 0096 9A83     		strh	r2, [r3, #28]	@ movhi
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1093              		.loc 1 744 0
 1094 0098 07F11407 		add	r7, r7, #20
 1095 009c BD46     		mov	sp, r7
 1096 009e 80BC     		pop	{r7}
 1097 00a0 7047     		bx	lr
 1098              		.cfi_endproc
 1099              	.LFE122:
 1101 00a2 00BF     		.section	.text.SPI_I2S_ReceiveData,"ax",%progbits
 1102              		.align	2
 1103              		.global	SPI_I2S_ReceiveData
 1104              		.thumb
 1105              		.thumb_func
 1107              	SPI_I2S_ReceiveData:
 1108              	.LFB123:
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group2 Data transfers functions
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Data transfers functions
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Data transfers functions
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to manage the SPI data transfers
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In reception, data are received and then stored into an internal Rx buffer while 
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In transmission, data are first stored into an internal Tx buffer before being 
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   transmitted.
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The read access of the SPI_DR register can be done using the SPI_I2S_ReceiveData()
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   function and returns the Rx buffered value. Whereas a write access to the SPI_DR 
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   can be done using SPI_I2S_SendData() function and stores the written data into 
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Tx buffer.
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the most recent received data by the SPIx/I2Sx peripheral. 
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The value of the received data.
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1109              		.loc 1 780 0
 1110              		.cfi_startproc
 1111              		@ args = 0, pretend = 0, frame = 8
 1112              		@ frame_needed = 1, uses_anonymous_args = 0
 1113              		@ link register save eliminated.
 1114 0000 80B4     		push	{r7}
 1115              	.LCFI39:
 1116              		.cfi_def_cfa_offset 4
 1117              		.cfi_offset 7, -4
 1118 0002 83B0     		sub	sp, sp, #12
 1119              	.LCFI40:
 1120              		.cfi_def_cfa_offset 16
 1121 0004 00AF     		add	r7, sp, #0
 1122              	.LCFI41:
 1123              		.cfi_def_cfa_register 7
 1124 0006 7860     		str	r0, [r7, #4]
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the data in the DR register */
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return SPIx->DR;
 1125              		.loc 1 785 0
 1126 0008 7B68     		ldr	r3, [r7, #4]
 1127 000a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1128 000c 9BB2     		uxth	r3, r3
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1129              		.loc 1 786 0
 1130 000e 1846     		mov	r0, r3
 1131 0010 07F10C07 		add	r7, r7, #12
 1132 0014 BD46     		mov	sp, r7
 1133 0016 80BC     		pop	{r7}
 1134 0018 7047     		bx	lr
 1135              		.cfi_endproc
 1136              	.LFE123:
 1138 001a 00BF     		.section	.text.SPI_I2S_SendData,"ax",%progbits
 1139              		.align	2
 1140              		.global	SPI_I2S_SendData
 1141              		.thumb
 1142              		.thumb_func
 1144              	SPI_I2S_SendData:
 1145              	.LFB124:
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  Data: Data to be transmitted.
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1146              		.loc 1 796 0
 1147              		.cfi_startproc
 1148              		@ args = 0, pretend = 0, frame = 8
 1149              		@ frame_needed = 1, uses_anonymous_args = 0
 1150              		@ link register save eliminated.
 1151 0000 80B4     		push	{r7}
 1152              	.LCFI42:
 1153              		.cfi_def_cfa_offset 4
 1154              		.cfi_offset 7, -4
 1155 0002 83B0     		sub	sp, sp, #12
 1156              	.LCFI43:
 1157              		.cfi_def_cfa_offset 16
 1158 0004 00AF     		add	r7, sp, #0
 1159              	.LCFI44:
 1160              		.cfi_def_cfa_register 7
 1161 0006 7860     		str	r0, [r7, #4]
 1162 0008 0B46     		mov	r3, r1
 1163 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write in the DR register the data to be sent */
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->DR = Data;
 1164              		.loc 1 801 0
 1165 000c 7B68     		ldr	r3, [r7, #4]
 1166 000e 7A88     		ldrh	r2, [r7, #2]	@ movhi
 1167 0010 9A81     		strh	r2, [r3, #12]	@ movhi
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1168              		.loc 1 802 0
 1169 0012 07F10C07 		add	r7, r7, #12
 1170 0016 BD46     		mov	sp, r7
 1171 0018 80BC     		pop	{r7}
 1172 001a 7047     		bx	lr
 1173              		.cfi_endproc
 1174              	.LFE124:
 1176              		.section	.text.SPI_CalculateCRC,"ax",%progbits
 1177              		.align	2
 1178              		.global	SPI_CalculateCRC
 1179              		.thumb
 1180              		.thumb_func
 1182              	SPI_CalculateCRC:
 1183              	.LFB125:
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group3 Hardware CRC Calculation functions
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Hardware CRC Calculation functions
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Hardware CRC Calculation functions
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to manage the SPI CRC hardware 
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   calculation
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI communication using CRC is possible through the following procedure:
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. Program the Data direction, Polarity, Phase, First Data, Baud Rate Prescaler, 
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         Slave Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         function.
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. Enable the CRC calculation using the SPI_CalculateCRC() function.
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. Enable the SPI using the SPI_Cmd() function
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. Before writing the last data to the TX buffer, set the CRCNext bit using the 
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       SPI_TransmitCRC() function to indicate that after transmission of the last 
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       data, the CRC should be transmitted.
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. After transmitting the last data, the SPI transmits the CRC. The SPI_CR1_CRCNEXT
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         bit is reset. The CRC is also received and compared against the SPI_RXCRCR 
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         value. 
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         If the value does not match, the SPI_FLAG_CRCERR flag is set and an interrupt
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         can be generated when the SPI_I2S_IT_ERR interrupt is enabled.
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note It is advised not to read the calculated CRC values during the communication.
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the SPI is in slave mode, be careful to enable CRC calculation only 
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       when the clock is stable, that is, when the clock is in the steady state. 
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       If not, a wrong CRC calculation may be done. In fact, the CRC is sensitive 
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       to the SCK slave input clock as soon as CRCEN is set, and this, whatever 
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       the value of the SPE bit.
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note With high bitrate frequencies, be careful when transmitting the CRC.
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       As the number of used CPU cycles has to be as low as possible in the CRC 
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       transfer phase, it is forbidden to call software functions in the CRC 
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       transmission sequence to avoid errors in the last data and CRC reception. 
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       In fact, CRCNEXT bit has to be written before the end of the transmission/reception 
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       of the last data.
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note For high bit rate frequencies, it is advised to use the DMA mode to avoid the
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       degradation of the SPI speed performance due to CPU accesses impacting the 
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       SPI bandwidth.
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the STM32F4xx is configured as slave and the NSS hardware mode is 
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       used, the NSS pin needs to be kept low between the data phase and the CRC 
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       phase.
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the SPI is configured in slave mode with the CRC feature enabled, CRC
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       calculation takes place even if a high level is applied on the NSS pin. 
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       This may happen for example in case of a multi-slave environment where the 
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       communication master addresses slaves alternately.
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note Between a slave de-selection (high level on NSS) and a new slave selection 
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       (low level on NSS), the CRC value should be cleared on both master and slave
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       sides in order to resynchronize the master and slave for their respective 
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       CRC calculation.
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note To clear the CRC, follow the procedure below:
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         1. Disable SPI using the SPI_Cmd() function
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         2. Disable the CRC calculation using the SPI_CalculateCRC() function.
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         3. Enable the CRC calculation using the SPI_CalculateCRC() function.
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         4. Enable SPI using the SPI_Cmd() function.
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the CRC value calculation of the transferred bytes.
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx CRC value calculation.
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1184              		.loc 1 885 0
 1185              		.cfi_startproc
 1186              		@ args = 0, pretend = 0, frame = 8
 1187              		@ frame_needed = 1, uses_anonymous_args = 0
 1188              		@ link register save eliminated.
 1189 0000 80B4     		push	{r7}
 1190              	.LCFI45:
 1191              		.cfi_def_cfa_offset 4
 1192              		.cfi_offset 7, -4
 1193 0002 83B0     		sub	sp, sp, #12
 1194              	.LCFI46:
 1195              		.cfi_def_cfa_offset 16
 1196 0004 00AF     		add	r7, sp, #0
 1197              	.LCFI47:
 1198              		.cfi_def_cfa_register 7
 1199 0006 7860     		str	r0, [r7, #4]
 1200 0008 0B46     		mov	r3, r1
 1201 000a FB70     		strb	r3, [r7, #3]
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1202              		.loc 1 889 0
 1203 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1204 000e 002B     		cmp	r3, #0
 1205 0010 08D0     		beq	.L45
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI CRC calculation */
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_CRCEN;
 1206              		.loc 1 892 0
 1207 0012 7B68     		ldr	r3, [r7, #4]
 1208 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1209 0016 9BB2     		uxth	r3, r3
 1210 0018 43F40053 		orr	r3, r3, #8192
 1211 001c 9AB2     		uxth	r2, r3
 1212 001e 7B68     		ldr	r3, [r7, #4]
 1213 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 1214 0022 07E0     		b	.L44
 1215              	.L45:
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI CRC calculation */
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 1216              		.loc 1 897 0
 1217 0024 7B68     		ldr	r3, [r7, #4]
 1218 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1219 0028 9BB2     		uxth	r3, r3
 1220 002a 23F40053 		bic	r3, r3, #8192
 1221 002e 9AB2     		uxth	r2, r3
 1222 0030 7B68     		ldr	r3, [r7, #4]
 1223 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 1224              	.L44:
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1225              		.loc 1 899 0
 1226 0034 07F10C07 		add	r7, r7, #12
 1227 0038 BD46     		mov	sp, r7
 1228 003a 80BC     		pop	{r7}
 1229 003c 7047     		bx	lr
 1230              		.cfi_endproc
 1231              	.LFE125:
 1233 003e 00BF     		.section	.text.SPI_TransmitCRC,"ax",%progbits
 1234              		.align	2
 1235              		.global	SPI_TransmitCRC
 1236              		.thumb
 1237              		.thumb_func
 1239              	SPI_TransmitCRC:
 1240              	.LFB126:
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Transmit the SPIx CRC value.
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_TransmitCRC(SPI_TypeDef* SPIx)
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1241              		.loc 1 907 0
 1242              		.cfi_startproc
 1243              		@ args = 0, pretend = 0, frame = 8
 1244              		@ frame_needed = 1, uses_anonymous_args = 0
 1245              		@ link register save eliminated.
 1246 0000 80B4     		push	{r7}
 1247              	.LCFI48:
 1248              		.cfi_def_cfa_offset 4
 1249              		.cfi_offset 7, -4
 1250 0002 83B0     		sub	sp, sp, #12
 1251              	.LCFI49:
 1252              		.cfi_def_cfa_offset 16
 1253 0004 00AF     		add	r7, sp, #0
 1254              	.LCFI50:
 1255              		.cfi_def_cfa_register 7
 1256 0006 7860     		str	r0, [r7, #4]
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Enable the selected SPI CRC transmission */
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_CR1_CRCNEXT;
 1257              		.loc 1 912 0
 1258 0008 7B68     		ldr	r3, [r7, #4]
 1259 000a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1260 000c 9BB2     		uxth	r3, r3
 1261 000e 43F48053 		orr	r3, r3, #4096
 1262 0012 9AB2     		uxth	r2, r3
 1263 0014 7B68     		ldr	r3, [r7, #4]
 1264 0016 1A80     		strh	r2, [r3, #0]	@ movhi
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1265              		.loc 1 913 0
 1266 0018 07F10C07 		add	r7, r7, #12
 1267 001c BD46     		mov	sp, r7
 1268 001e 80BC     		pop	{r7}
 1269 0020 7047     		bx	lr
 1270              		.cfi_endproc
 1271              	.LFE126:
 1273 0022 00BF     		.section	.text.SPI_GetCRC,"ax",%progbits
 1274              		.align	2
 1275              		.global	SPI_GetCRC
 1276              		.thumb
 1277              		.thumb_func
 1279              	SPI_GetCRC:
 1280              	.LFB127:
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_CRC: specifies the CRC register to be read.
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Tx: Selects Tx CRC register
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Rx: Selects Rx CRC register
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The selected CRC register value..
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1281              		.loc 1 925 0
 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 16
 1284              		@ frame_needed = 1, uses_anonymous_args = 0
 1285              		@ link register save eliminated.
 1286 0000 80B4     		push	{r7}
 1287              	.LCFI51:
 1288              		.cfi_def_cfa_offset 4
 1289              		.cfi_offset 7, -4
 1290 0002 85B0     		sub	sp, sp, #20
 1291              	.LCFI52:
 1292              		.cfi_def_cfa_offset 24
 1293 0004 00AF     		add	r7, sp, #0
 1294              	.LCFI53:
 1295              		.cfi_def_cfa_register 7
 1296 0006 7860     		str	r0, [r7, #4]
 1297 0008 0B46     		mov	r3, r1
 1298 000a FB70     		strb	r3, [r7, #3]
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t crcreg = 0;
 1299              		.loc 1 926 0
 1300 000c 4FF00003 		mov	r3, #0
 1301 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC(SPI_CRC));
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_CRC != SPI_CRC_Rx)
 1302              		.loc 1 930 0
 1303 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1304 0014 012B     		cmp	r3, #1
 1305 0016 03D0     		beq	.L49
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Tx CRC register */
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     crcreg = SPIx->TXCRCR;
 1306              		.loc 1 933 0
 1307 0018 7B68     		ldr	r3, [r7, #4]
 1308 001a 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1309 001c FB81     		strh	r3, [r7, #14]	@ movhi
 1310 001e 02E0     		b	.L50
 1311              	.L49:
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Rx CRC register */
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     crcreg = SPIx->RXCRCR;
 1312              		.loc 1 938 0
 1313 0020 7B68     		ldr	r3, [r7, #4]
 1314 0022 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1315 0024 FB81     		strh	r3, [r7, #14]	@ movhi
 1316              	.L50:
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the selected CRC register */
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return crcreg;
 1317              		.loc 1 941 0
 1318 0026 FB89     		ldrh	r3, [r7, #14]
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1319              		.loc 1 942 0
 1320 0028 1846     		mov	r0, r3
 1321 002a 07F11407 		add	r7, r7, #20
 1322 002e BD46     		mov	sp, r7
 1323 0030 80BC     		pop	{r7}
 1324 0032 7047     		bx	lr
 1325              		.cfi_endproc
 1326              	.LFE127:
 1328              		.section	.text.SPI_GetCRCPolynomial,"ax",%progbits
 1329              		.align	2
 1330              		.global	SPI_GetCRCPolynomial
 1331              		.thumb
 1332              		.thumb_func
 1334              	SPI_GetCRCPolynomial:
 1335              	.LFB128:
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the CRC Polynomial register value for the specified SPI.
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The CRC Polynomial register value.
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1336              		.loc 1 950 0
 1337              		.cfi_startproc
 1338              		@ args = 0, pretend = 0, frame = 8
 1339              		@ frame_needed = 1, uses_anonymous_args = 0
 1340              		@ link register save eliminated.
 1341 0000 80B4     		push	{r7}
 1342              	.LCFI54:
 1343              		.cfi_def_cfa_offset 4
 1344              		.cfi_offset 7, -4
 1345 0002 83B0     		sub	sp, sp, #12
 1346              	.LCFI55:
 1347              		.cfi_def_cfa_offset 16
 1348 0004 00AF     		add	r7, sp, #0
 1349              	.LCFI56:
 1350              		.cfi_def_cfa_register 7
 1351 0006 7860     		str	r0, [r7, #4]
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the CRC polynomial register */
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return SPIx->CRCPR;
 1352              		.loc 1 955 0
 1353 0008 7B68     		ldr	r3, [r7, #4]
 1354 000a 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1355 000c 9BB2     		uxth	r3, r3
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1356              		.loc 1 956 0
 1357 000e 1846     		mov	r0, r3
 1358 0010 07F10C07 		add	r7, r7, #12
 1359 0014 BD46     		mov	sp, r7
 1360 0016 80BC     		pop	{r7}
 1361 0018 7047     		bx	lr
 1362              		.cfi_endproc
 1363              	.LFE128:
 1365 001a 00BF     		.section	.text.SPI_I2S_DMACmd,"ax",%progbits
 1366              		.align	2
 1367              		.global	SPI_I2S_DMACmd
 1368              		.thumb
 1369              		.thumb_func
 1371              	SPI_I2S_DMACmd:
 1372              	.LFB129:
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group4 DMA transfers management functions
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   DMA transfers management functions
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          DMA transfers management functions
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_DMAReq: specifies the SPI DMA transfer request to be enabled or disabled. 
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be any combination of the following values:
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI DMA transfer request.
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1373              		.loc 1 987 0
 1374              		.cfi_startproc
 1375              		@ args = 0, pretend = 0, frame = 8
 1376              		@ frame_needed = 1, uses_anonymous_args = 0
 1377              		@ link register save eliminated.
 1378 0000 80B4     		push	{r7}
 1379              	.LCFI57:
 1380              		.cfi_def_cfa_offset 4
 1381              		.cfi_offset 7, -4
 1382 0002 83B0     		sub	sp, sp, #12
 1383              	.LCFI58:
 1384              		.cfi_def_cfa_offset 16
 1385 0004 00AF     		add	r7, sp, #0
 1386              	.LCFI59:
 1387              		.cfi_def_cfa_register 7
 1388 0006 7860     		str	r0, [r7, #4]
 1389 0008 1346     		mov	r3, r2
 1390 000a 0A46     		mov	r2, r1	@ movhi
 1391 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 1392 000e 7B70     		strb	r3, [r7, #1]
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1393              		.loc 1 993 0
 1394 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1395 0012 002B     		cmp	r3, #0
 1396 0014 08D0     		beq	.L53
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI DMA requests */
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_I2S_DMAReq;
 1397              		.loc 1 996 0
 1398 0016 7B68     		ldr	r3, [r7, #4]
 1399 0018 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1400 001a 9AB2     		uxth	r2, r3
 1401 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1402 001e 1343     		orrs	r3, r3, r2
 1403 0020 9AB2     		uxth	r2, r3
 1404 0022 7B68     		ldr	r3, [r7, #4]
 1405 0024 9A80     		strh	r2, [r3, #4]	@ movhi
 1406 0026 0AE0     		b	.L52
 1407              	.L53:
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI DMA requests */
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 1408              		.loc 1 1001 0
 1409 0028 7B68     		ldr	r3, [r7, #4]
 1410 002a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1411 002c 9AB2     		uxth	r2, r3
 1412 002e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1413 0030 6FEA0303 		mvn	r3, r3
 1414 0034 9BB2     		uxth	r3, r3
 1415 0036 1340     		ands	r3, r3, r2
 1416 0038 9AB2     		uxth	r2, r3
 1417 003a 7B68     		ldr	r3, [r7, #4]
 1418 003c 9A80     		strh	r2, [r3, #4]	@ movhi
 1419              	.L52:
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1420              		.loc 1 1003 0
 1421 003e 07F10C07 		add	r7, r7, #12
 1422 0042 BD46     		mov	sp, r7
 1423 0044 80BC     		pop	{r7}
 1424 0046 7047     		bx	lr
 1425              		.cfi_endproc
 1426              	.LFE129:
 1428              		.section	.text.SPI_I2S_ITConfig,"ax",%progbits
 1429              		.align	2
 1430              		.global	SPI_I2S_ITConfig
 1431              		.thumb
 1432              		.thumb_func
 1434              	SPI_I2S_ITConfig:
 1435              	.LFB130:
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group5 Interrupts and flags management functions
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Interrupts and flags management functions
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Interrupts and flags management functions
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to configure the SPI Interrupts 
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   sources and check or clear the flags or pending bits status.
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The user should identify which mode will be used in his application to manage 
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Polling Mode
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   =============
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In Polling Mode, the SPI/I2S communication can be managed by 9 flags:
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_FLAG_TXE : to indicate the status of the transmit buffer register
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_FLAG_RXNE : to indicate the status of the receive buffer register
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_I2S_FLAG_BSY : to indicate the state of the communication layer of the SPI.
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. SPI_FLAG_CRCERR : to indicate if a CRC Calculation error occur              
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. SPI_FLAG_MODF : to indicate if a Mode Fault error occur
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      6. SPI_I2S_FLAG_OVR : to indicate if an Overrun error occur
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      7. I2S_FLAG_TIFRFE: to indicate a Frame Format error occurs.
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      8. I2S_FLAG_UDR: to indicate an Underrun error occurs.
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      9. I2S_FLAG_CHSIDE: to indicate Channel Side.
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note Do not use the BSY flag to handle each data transmission or reception.  It is
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       better to use the TXE and RXNE flags instead.
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following functions:
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Interrupt Mode
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ===============
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In Interrupt Mode, the SPI communication can be managed by 3 interrupt sources
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   and 7 pending bits: 
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Pending Bits:
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ------------- 
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_IT_TXE : to indicate the status of the transmit buffer register
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_IT_RXNE : to indicate the status of the receive buffer register
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_IT_CRCERR : to indicate if a CRC Calculation error occur (available in SPI mode only)  
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. SPI_IT_MODF : to indicate if a Mode Fault error occur (available in SPI mode only)
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. SPI_I2S_IT_OVR : to indicate if an Overrun error occur
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      6. I2S_IT_UDR : to indicate an Underrun Error occurs (available in I2S mode only).
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      7. I2S_FLAG_TIFRFE : to indicate a Frame Format error occurs (available in TI mode only).
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Interrupt Source:
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   -----------------
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_IT_TXE: specifies the interrupt source for the Tx buffer empty 
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                         interrupt.  
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                           empty interrupt.
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_I2S_IT_ERR : specifies the interrupt source for the errors interrupt.
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following functions:
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState);
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   DMA Mode
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ========
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In DMA Mode, the SPI communication can be managed by 2 DMA Channel requests:
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following function:
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     - void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState);
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI/I2S interrupts.
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to be enabled or disabled. 
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_ERR: Error interrupt mask
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the specified SPI interrupt.
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1436              		.loc 1 1096 0
 1437              		.cfi_startproc
 1438              		@ args = 0, pretend = 0, frame = 16
 1439              		@ frame_needed = 1, uses_anonymous_args = 0
 1440              		@ link register save eliminated.
 1441 0000 80B4     		push	{r7}
 1442              	.LCFI60:
 1443              		.cfi_def_cfa_offset 4
 1444              		.cfi_offset 7, -4
 1445 0002 85B0     		sub	sp, sp, #20
 1446              	.LCFI61:
 1447              		.cfi_def_cfa_offset 24
 1448 0004 00AF     		add	r7, sp, #0
 1449              	.LCFI62:
 1450              		.cfi_def_cfa_register 7
 1451 0006 7860     		str	r0, [r7, #4]
 1452 0008 1346     		mov	r3, r2
 1453 000a 0A46     		mov	r2, r1
 1454 000c FA70     		strb	r2, [r7, #3]
 1455 000e BB70     		strb	r3, [r7, #2]
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0 ;
 1456              		.loc 1 1097 0
 1457 0010 4FF00003 		mov	r3, #0
 1458 0014 FB81     		strh	r3, [r7, #14]	@ movhi
 1459 0016 4FF00003 		mov	r3, #0
 1460 001a BB81     		strh	r3, [r7, #12]	@ movhi
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI IT index */
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = SPI_I2S_IT >> 4;
 1461              		.loc 1 1105 0
 1462 001c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1463 001e 4FEA1313 		lsr	r3, r3, #4
 1464 0022 DBB2     		uxtb	r3, r3
 1465 0024 FB81     		strh	r3, [r7, #14]	@ movhi
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = (uint16_t)1 << (uint16_t)itpos;
 1466              		.loc 1 1108 0
 1467 0026 FB89     		ldrh	r3, [r7, #14]
 1468 0028 4FF00102 		mov	r2, #1
 1469 002c 02FA03F3 		lsl	r3, r2, r3
 1470 0030 BB81     		strh	r3, [r7, #12]	@ movhi
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1471              		.loc 1 1110 0
 1472 0032 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1473 0034 002B     		cmp	r3, #0
 1474 0036 08D0     		beq	.L56
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI interrupt */
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= itmask;
 1475              		.loc 1 1113 0
 1476 0038 7B68     		ldr	r3, [r7, #4]
 1477 003a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1478 003c 9AB2     		uxth	r2, r3
 1479 003e BB89     		ldrh	r3, [r7, #12]	@ movhi
 1480 0040 1343     		orrs	r3, r3, r2
 1481 0042 9AB2     		uxth	r2, r3
 1482 0044 7B68     		ldr	r3, [r7, #4]
 1483 0046 9A80     		strh	r2, [r3, #4]	@ movhi
 1484 0048 0AE0     		b	.L55
 1485              	.L56:
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI interrupt */
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~itmask;
 1486              		.loc 1 1118 0
 1487 004a 7B68     		ldr	r3, [r7, #4]
 1488 004c 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1489 004e 9AB2     		uxth	r2, r3
 1490 0050 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1491 0052 6FEA0303 		mvn	r3, r3
 1492 0056 9BB2     		uxth	r3, r3
 1493 0058 1340     		ands	r3, r3, r2
 1494 005a 9AB2     		uxth	r2, r3
 1495 005c 7B68     		ldr	r3, [r7, #4]
 1496 005e 9A80     		strh	r2, [r3, #4]	@ movhi
 1497              	.L55:
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1498              		.loc 1 1120 0
 1499 0060 07F11407 		add	r7, r7, #20
 1500 0064 BD46     		mov	sp, r7
 1501 0066 80BC     		pop	{r7}
 1502 0068 7047     		bx	lr
 1503              		.cfi_endproc
 1504              	.LFE130:
 1506 006a 00BF     		.section	.text.SPI_I2S_GetFlagStatus,"ax",%progbits
 1507              		.align	2
 1508              		.global	SPI_I2S_GetFlagStatus
 1509              		.thumb
 1510              		.thumb_func
 1512              	SPI_I2S_GetFlagStatus:
 1513              	.LFB131:
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx flag is set or not.
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to check. 
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_BSY: Busy flag.
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_OVR: Overrun flag.
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_MODF: Mode Fault flag.
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TIFRFE: Format Error.
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_UDR: Underrun Error flag.
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_FLAG (SET or RESET).
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1514              		.loc 1 1140 0
 1515              		.cfi_startproc
 1516              		@ args = 0, pretend = 0, frame = 16
 1517              		@ frame_needed = 1, uses_anonymous_args = 0
 1518              		@ link register save eliminated.
 1519 0000 80B4     		push	{r7}
 1520              	.LCFI63:
 1521              		.cfi_def_cfa_offset 4
 1522              		.cfi_offset 7, -4
 1523 0002 85B0     		sub	sp, sp, #20
 1524              	.LCFI64:
 1525              		.cfi_def_cfa_offset 24
 1526 0004 00AF     		add	r7, sp, #0
 1527              	.LCFI65:
 1528              		.cfi_def_cfa_register 7
 1529 0006 7860     		str	r0, [r7, #4]
 1530 0008 0B46     		mov	r3, r1
 1531 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   FlagStatus bitstatus = RESET;
 1532              		.loc 1 1141 0
 1533 000c 4FF00003 		mov	r3, #0
 1534 0010 FB73     		strb	r3, [r7, #15]
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI flag */
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 1535              		.loc 1 1147 0
 1536 0012 7B68     		ldr	r3, [r7, #4]
 1537 0014 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1538 0016 9AB2     		uxth	r2, r3
 1539 0018 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1540 001a 1340     		ands	r3, r3, r2
 1541 001c 9BB2     		uxth	r3, r3
 1542 001e 002B     		cmp	r3, #0
 1543 0020 03D0     		beq	.L59
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is set */
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = SET;
 1544              		.loc 1 1150 0
 1545 0022 4FF00103 		mov	r3, #1
 1546 0026 FB73     		strb	r3, [r7, #15]
 1547 0028 02E0     		b	.L60
 1548              	.L59:
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is reset */
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 1549              		.loc 1 1155 0
 1550 002a 4FF00003 		mov	r3, #0
 1551 002e FB73     		strb	r3, [r7, #15]
 1552              	.L60:
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_FLAG status */
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return  bitstatus;
 1553              		.loc 1 1158 0
 1554 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1555              		.loc 1 1159 0
 1556 0032 1846     		mov	r0, r3
 1557 0034 07F11407 		add	r7, r7, #20
 1558 0038 BD46     		mov	sp, r7
 1559 003a 80BC     		pop	{r7}
 1560 003c 7047     		bx	lr
 1561              		.cfi_endproc
 1562              	.LFE131:
 1564 003e 00BF     		.section	.text.SPI_I2S_ClearFlag,"ax",%progbits
 1565              		.align	2
 1566              		.global	SPI_I2S_ClearFlag
 1567              		.thumb
 1568              		.thumb_func
 1570              	SPI_I2S_ClearFlag:
 1571              	.LFB132:
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This function clears only CRCERR flag.
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.  
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun error) flag is cleared by software sequence: a read 
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by a read 
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun error) flag is cleared by a read operation to 
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_SR register (SPI_I2S_GetFlagStatus()).   
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) flag is cleared by software sequence: a read/write 
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1572              		.loc 1 1181 0
 1573              		.cfi_startproc
 1574              		@ args = 0, pretend = 0, frame = 8
 1575              		@ frame_needed = 1, uses_anonymous_args = 0
 1576              		@ link register save eliminated.
 1577 0000 80B4     		push	{r7}
 1578              	.LCFI66:
 1579              		.cfi_def_cfa_offset 4
 1580              		.cfi_offset 7, -4
 1581 0002 83B0     		sub	sp, sp, #12
 1582              	.LCFI67:
 1583              		.cfi_def_cfa_offset 16
 1584 0004 00AF     		add	r7, sp, #0
 1585              	.LCFI68:
 1586              		.cfi_def_cfa_register 7
 1587 0006 7860     		str	r0, [r7, #4]
 1588 0008 0B46     		mov	r3, r1
 1589 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) flag */
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 1590              		.loc 1 1187 0
 1591 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1592 000e 6FEA0303 		mvn	r3, r3
 1593 0012 9AB2     		uxth	r2, r3
 1594 0014 7B68     		ldr	r3, [r7, #4]
 1595 0016 1A81     		strh	r2, [r3, #8]	@ movhi
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1596              		.loc 1 1188 0
 1597 0018 07F10C07 		add	r7, r7, #12
 1598 001c BD46     		mov	sp, r7
 1599 001e 80BC     		pop	{r7}
 1600 0020 7047     		bx	lr
 1601              		.cfi_endproc
 1602              	.LFE132:
 1604 0022 00BF     		.section	.text.SPI_I2S_GetITStatus,"ax",%progbits
 1605              		.align	2
 1606              		.global	SPI_I2S_GetITStatus
 1607              		.thumb
 1608              		.thumb_func
 1610              	SPI_I2S_GetITStatus:
 1611              	.LFB133:
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx interrupt has occurred or not.
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to check. 
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_OVR: Overrun interrupt.
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_MODF: Mode Fault interrupt.
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_IT_UDR: Underrun interrupt.  
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_IT (SET or RESET).
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1612              		.loc 1 1206 0
 1613              		.cfi_startproc
 1614              		@ args = 0, pretend = 0, frame = 16
 1615              		@ frame_needed = 1, uses_anonymous_args = 0
 1616              		@ link register save eliminated.
 1617 0000 80B4     		push	{r7}
 1618              	.LCFI69:
 1619              		.cfi_def_cfa_offset 4
 1620              		.cfi_offset 7, -4
 1621 0002 85B0     		sub	sp, sp, #20
 1622              	.LCFI70:
 1623              		.cfi_def_cfa_offset 24
 1624 0004 00AF     		add	r7, sp, #0
 1625              	.LCFI71:
 1626              		.cfi_def_cfa_register 7
 1627 0006 7860     		str	r0, [r7, #4]
 1628 0008 0B46     		mov	r3, r1
 1629 000a FB70     		strb	r3, [r7, #3]
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ITStatus bitstatus = RESET;
 1630              		.loc 1 1207 0
 1631 000c 4FF00003 		mov	r3, #0
 1632 0010 FB73     		strb	r3, [r7, #15]
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 1633              		.loc 1 1208 0
 1634 0012 4FF00003 		mov	r3, #0
 1635 0016 BB81     		strh	r3, [r7, #12]	@ movhi
 1636 0018 4FF00003 		mov	r3, #0
 1637 001c 7B81     		strh	r3, [r7, #10]	@ movhi
 1638 001e 4FF00003 		mov	r3, #0
 1639 0022 3B81     		strh	r3, [r7, #8]	@ movhi
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT index */
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1640              		.loc 1 1215 0
 1641 0024 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1642 0026 03F00F03 		and	r3, r3, #15
 1643 002a 4FF00102 		mov	r2, #1
 1644 002e 02FA03F3 		lsl	r3, r2, r3
 1645 0032 BB81     		strh	r3, [r7, #12]	@ movhi
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT IT mask */
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = SPI_I2S_IT >> 4;
 1646              		.loc 1 1218 0
 1647 0034 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1648 0036 4FEA1313 		lsr	r3, r3, #4
 1649 003a DBB2     		uxtb	r3, r3
 1650 003c 7B81     		strh	r3, [r7, #10]	@ movhi
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = 0x01 << itmask;
 1651              		.loc 1 1221 0
 1652 003e 7B89     		ldrh	r3, [r7, #10]
 1653 0040 4FF00102 		mov	r2, #1
 1654 0044 02FA03F3 		lsl	r3, r2, r3
 1655 0048 7B81     		strh	r3, [r7, #10]	@ movhi
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT enable bit status */
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   enablestatus = (SPIx->CR2 & itmask) ;
 1656              		.loc 1 1224 0
 1657 004a 7B68     		ldr	r3, [r7, #4]
 1658 004c 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1659 004e 9AB2     		uxth	r2, r3
 1660 0050 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1661 0052 1340     		ands	r3, r3, r2
 1662 0054 3B81     		strh	r3, [r7, #8]	@ movhi
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI interrupt */
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 1663              		.loc 1 1227 0
 1664 0056 7B68     		ldr	r3, [r7, #4]
 1665 0058 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1666 005a 9AB2     		uxth	r2, r3
 1667 005c BB89     		ldrh	r3, [r7, #12]	@ movhi
 1668 005e 1340     		ands	r3, r3, r2
 1669 0060 9BB2     		uxth	r3, r3
 1670 0062 002B     		cmp	r3, #0
 1671 0064 06D0     		beq	.L63
 1672              		.loc 1 1227 0 is_stmt 0 discriminator 1
 1673 0066 3B89     		ldrh	r3, [r7, #8]
 1674 0068 002B     		cmp	r3, #0
 1675 006a 03D0     		beq	.L63
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is set */
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = SET;
 1676              		.loc 1 1230 0 is_stmt 1
 1677 006c 4FF00103 		mov	r3, #1
 1678 0070 FB73     		strb	r3, [r7, #15]
 1679 0072 02E0     		b	.L64
 1680              	.L63:
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is reset */
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 1681              		.loc 1 1235 0
 1682 0074 4FF00003 		mov	r3, #0
 1683 0078 FB73     		strb	r3, [r7, #15]
 1684              	.L64:
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_IT status */
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return bitstatus;
 1685              		.loc 1 1238 0
 1686 007a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1687              		.loc 1 1239 0
 1688 007c 1846     		mov	r0, r3
 1689 007e 07F11407 		add	r7, r7, #20
 1690 0082 BD46     		mov	sp, r7
 1691 0084 80BC     		pop	{r7}
 1692 0086 7047     		bx	lr
 1693              		.cfi_endproc
 1694              	.LFE133:
 1696              		.section	.text.SPI_I2S_ClearITPendingBit,"ax",%progbits
 1697              		.align	2
 1698              		.global	SPI_I2S_ClearITPendingBit
 1699              		.thumb
 1700              		.thumb_func
 1702              	SPI_I2S_ClearITPendingBit:
 1703              	.LFB134:
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) interrupt pending bit.
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt pending bit to clear.
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         This function clears only CRCERR interrupt pending bit.   
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun Error) interrupt pending bit is cleared by software 
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          sequence: a read operation to SPI_DR register (SPI_I2S_ReceiveData()) 
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          followed by a read operation to SPI_SR register (SPI_I2S_GetITStatus()).
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun Error) interrupt pending bit is cleared by a read 
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetITStatus()).   
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) interrupt pending bit is cleared by software sequence:
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          a read/write operation to SPI_SR register (SPI_I2S_GetITStatus()) 
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          the SPI).
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1704              		.loc 1 1261 0
 1705              		.cfi_startproc
 1706              		@ args = 0, pretend = 0, frame = 16
 1707              		@ frame_needed = 1, uses_anonymous_args = 0
 1708              		@ link register save eliminated.
 1709 0000 80B4     		push	{r7}
 1710              	.LCFI72:
 1711              		.cfi_def_cfa_offset 4
 1712              		.cfi_offset 7, -4
 1713 0002 85B0     		sub	sp, sp, #20
 1714              	.LCFI73:
 1715              		.cfi_def_cfa_offset 24
 1716 0004 00AF     		add	r7, sp, #0
 1717              	.LCFI74:
 1718              		.cfi_def_cfa_register 7
 1719 0006 7860     		str	r0, [r7, #4]
 1720 0008 0B46     		mov	r3, r1
 1721 000a FB70     		strb	r3, [r7, #3]
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0;
 1722              		.loc 1 1262 0
 1723 000c 4FF00003 		mov	r3, #0
 1724 0010 FB81     		strh	r3, [r7, #14]	@ movhi
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S IT index */
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1725              		.loc 1 1268 0
 1726 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1727 0014 03F00F03 		and	r3, r3, #15
 1728 0018 4FF00102 		mov	r2, #1
 1729 001c 02FA03F3 		lsl	r3, r2, r3
 1730 0020 FB81     		strh	r3, [r7, #14]	@ movhi
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~itpos;
 1731              		.loc 1 1271 0
 1732 0022 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1733 0024 6FEA0303 		mvn	r3, r3
 1734 0028 9AB2     		uxth	r2, r3
 1735 002a 7B68     		ldr	r3, [r7, #4]
 1736 002c 1A81     		strh	r2, [r3, #8]	@ movhi
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1737              		.loc 1 1272 0
 1738 002e 07F11407 		add	r7, r7, #20
 1739 0032 BD46     		mov	sp, r7
 1740 0034 80BC     		pop	{r7}
 1741 0036 7047     		bx	lr
 1742              		.cfi_endproc
 1743              	.LFE134:
 1745              		.text
 1746              	.Letext0:
 1747              		.file 2 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/i
 1748              		.file 3 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 1749              		.file 4 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_spi.h"
 1750              		.file 5 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_spi.c
     /tmp/ccBNclPm.s:20     .text.SPI_I2S_DeInit:00000000 $t
     /tmp/ccBNclPm.s:25     .text.SPI_I2S_DeInit:00000000 SPI_I2S_DeInit
     /tmp/ccBNclPm.s:99     .text.SPI_Init:00000000 $t
     /tmp/ccBNclPm.s:104    .text.SPI_Init:00000000 SPI_Init
     /tmp/ccBNclPm.s:206    .text.I2S_Init:00000000 $t
     /tmp/ccBNclPm.s:211    .text.I2S_Init:00000000 I2S_Init
     /tmp/ccBNclPm.s:472    .text.SPI_StructInit:00000000 $t
     /tmp/ccBNclPm.s:477    .text.SPI_StructInit:00000000 SPI_StructInit
     /tmp/ccBNclPm.s:540    .text.I2S_StructInit:00000000 $t
     /tmp/ccBNclPm.s:545    .text.I2S_StructInit:00000000 I2S_StructInit
     /tmp/ccBNclPm.s:596    .text.SPI_Cmd:00000000 $t
     /tmp/ccBNclPm.s:601    .text.SPI_Cmd:00000000 SPI_Cmd
     /tmp/ccBNclPm.s:653    .text.I2S_Cmd:00000000 $t
     /tmp/ccBNclPm.s:658    .text.I2S_Cmd:00000000 I2S_Cmd
     /tmp/ccBNclPm.s:710    .text.SPI_DataSizeConfig:00000000 $t
     /tmp/ccBNclPm.s:715    .text.SPI_DataSizeConfig:00000000 SPI_DataSizeConfig
     /tmp/ccBNclPm.s:761    .text.SPI_BiDirectionalLineConfig:00000000 $t
     /tmp/ccBNclPm.s:766    .text.SPI_BiDirectionalLineConfig:00000000 SPI_BiDirectionalLineConfig
     /tmp/ccBNclPm.s:818    .text.SPI_NSSInternalSoftwareConfig:00000000 $t
     /tmp/ccBNclPm.s:823    .text.SPI_NSSInternalSoftwareConfig:00000000 SPI_NSSInternalSoftwareConfig
     /tmp/ccBNclPm.s:876    .text.SPI_SSOutputCmd:00000000 $t
     /tmp/ccBNclPm.s:881    .text.SPI_SSOutputCmd:00000000 SPI_SSOutputCmd
     /tmp/ccBNclPm.s:933    .text.SPI_TIModeCmd:00000000 $t
     /tmp/ccBNclPm.s:938    .text.SPI_TIModeCmd:00000000 SPI_TIModeCmd
     /tmp/ccBNclPm.s:990    .text.I2S_FullDuplexConfig:00000000 $t
     /tmp/ccBNclPm.s:995    .text.I2S_FullDuplexConfig:00000000 I2S_FullDuplexConfig
     /tmp/ccBNclPm.s:1102   .text.SPI_I2S_ReceiveData:00000000 $t
     /tmp/ccBNclPm.s:1107   .text.SPI_I2S_ReceiveData:00000000 SPI_I2S_ReceiveData
     /tmp/ccBNclPm.s:1139   .text.SPI_I2S_SendData:00000000 $t
     /tmp/ccBNclPm.s:1144   .text.SPI_I2S_SendData:00000000 SPI_I2S_SendData
     /tmp/ccBNclPm.s:1177   .text.SPI_CalculateCRC:00000000 $t
     /tmp/ccBNclPm.s:1182   .text.SPI_CalculateCRC:00000000 SPI_CalculateCRC
     /tmp/ccBNclPm.s:1234   .text.SPI_TransmitCRC:00000000 $t
     /tmp/ccBNclPm.s:1239   .text.SPI_TransmitCRC:00000000 SPI_TransmitCRC
     /tmp/ccBNclPm.s:1274   .text.SPI_GetCRC:00000000 $t
     /tmp/ccBNclPm.s:1279   .text.SPI_GetCRC:00000000 SPI_GetCRC
     /tmp/ccBNclPm.s:1329   .text.SPI_GetCRCPolynomial:00000000 $t
     /tmp/ccBNclPm.s:1334   .text.SPI_GetCRCPolynomial:00000000 SPI_GetCRCPolynomial
     /tmp/ccBNclPm.s:1366   .text.SPI_I2S_DMACmd:00000000 $t
     /tmp/ccBNclPm.s:1371   .text.SPI_I2S_DMACmd:00000000 SPI_I2S_DMACmd
     /tmp/ccBNclPm.s:1429   .text.SPI_I2S_ITConfig:00000000 $t
     /tmp/ccBNclPm.s:1434   .text.SPI_I2S_ITConfig:00000000 SPI_I2S_ITConfig
     /tmp/ccBNclPm.s:1507   .text.SPI_I2S_GetFlagStatus:00000000 $t
     /tmp/ccBNclPm.s:1512   .text.SPI_I2S_GetFlagStatus:00000000 SPI_I2S_GetFlagStatus
     /tmp/ccBNclPm.s:1565   .text.SPI_I2S_ClearFlag:00000000 $t
     /tmp/ccBNclPm.s:1570   .text.SPI_I2S_ClearFlag:00000000 SPI_I2S_ClearFlag
     /tmp/ccBNclPm.s:1605   .text.SPI_I2S_GetITStatus:00000000 $t
     /tmp/ccBNclPm.s:1610   .text.SPI_I2S_GetITStatus:00000000 SPI_I2S_GetITStatus
     /tmp/ccBNclPm.s:1697   .text.SPI_I2S_ClearITPendingBit:00000000 $t
     /tmp/ccBNclPm.s:1702   .text.SPI_I2S_ClearITPendingBit:00000000 SPI_I2S_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
