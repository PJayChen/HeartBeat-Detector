   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"modbus.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata.crcHi,"a",%progbits
  20              		.align	2
  23              	crcHi:
  24 0000 00000000 		.word	0
  25 0004 C1000000 		.word	193
  26 0008 81000000 		.word	129
  27 000c 40000000 		.word	64
  28 0010 01000000 		.word	1
  29 0014 C0000000 		.word	192
  30 0018 80000000 		.word	128
  31 001c 41000000 		.word	65
  32 0020 01000000 		.word	1
  33 0024 C0000000 		.word	192
  34 0028 80000000 		.word	128
  35 002c 41000000 		.word	65
  36 0030 00000000 		.word	0
  37 0034 C1000000 		.word	193
  38 0038 81000000 		.word	129
  39 003c 40000000 		.word	64
  40 0040 01000000 		.word	1
  41 0044 C0000000 		.word	192
  42 0048 80000000 		.word	128
  43 004c 41000000 		.word	65
  44 0050 00000000 		.word	0
  45 0054 C1000000 		.word	193
  46 0058 81000000 		.word	129
  47 005c 40000000 		.word	64
  48 0060 00000000 		.word	0
  49 0064 C1000000 		.word	193
  50 0068 81000000 		.word	129
  51 006c 40000000 		.word	64
  52 0070 01000000 		.word	1
  53 0074 C0000000 		.word	192
  54 0078 80000000 		.word	128
  55 007c 41000000 		.word	65
  56 0080 01000000 		.word	1
  57 0084 C0000000 		.word	192
  58 0088 80000000 		.word	128
  59 008c 41000000 		.word	65
  60 0090 00000000 		.word	0
  61 0094 C1000000 		.word	193
  62 0098 81000000 		.word	129
  63 009c 40000000 		.word	64
  64 00a0 00000000 		.word	0
  65 00a4 C1000000 		.word	193
  66 00a8 81000000 		.word	129
  67 00ac 40000000 		.word	64
  68 00b0 01000000 		.word	1
  69 00b4 C0000000 		.word	192
  70 00b8 80000000 		.word	128
  71 00bc 41000000 		.word	65
  72 00c0 00000000 		.word	0
  73 00c4 C1000000 		.word	193
  74 00c8 81000000 		.word	129
  75 00cc 40000000 		.word	64
  76 00d0 01000000 		.word	1
  77 00d4 C0000000 		.word	192
  78 00d8 80000000 		.word	128
  79 00dc 41000000 		.word	65
  80 00e0 01000000 		.word	1
  81 00e4 C0000000 		.word	192
  82 00e8 80000000 		.word	128
  83 00ec 41000000 		.word	65
  84 00f0 00000000 		.word	0
  85 00f4 C1000000 		.word	193
  86 00f8 81000000 		.word	129
  87 00fc 40000000 		.word	64
  88 0100 01000000 		.word	1
  89 0104 C0000000 		.word	192
  90 0108 80000000 		.word	128
  91 010c 41000000 		.word	65
  92 0110 00000000 		.word	0
  93 0114 C1000000 		.word	193
  94 0118 81000000 		.word	129
  95 011c 40000000 		.word	64
  96 0120 00000000 		.word	0
  97 0124 C1000000 		.word	193
  98 0128 81000000 		.word	129
  99 012c 40000000 		.word	64
 100 0130 01000000 		.word	1
 101 0134 C0000000 		.word	192
 102 0138 80000000 		.word	128
 103 013c 41000000 		.word	65
 104 0140 00000000 		.word	0
 105 0144 C1000000 		.word	193
 106 0148 81000000 		.word	129
 107 014c 40000000 		.word	64
 108 0150 01000000 		.word	1
 109 0154 C0000000 		.word	192
 110 0158 80000000 		.word	128
 111 015c 41000000 		.word	65
 112 0160 01000000 		.word	1
 113 0164 C0000000 		.word	192
 114 0168 80000000 		.word	128
 115 016c 41000000 		.word	65
 116 0170 00000000 		.word	0
 117 0174 C1000000 		.word	193
 118 0178 81000000 		.word	129
 119 017c 40000000 		.word	64
 120 0180 00000000 		.word	0
 121 0184 C1000000 		.word	193
 122 0188 81000000 		.word	129
 123 018c 40000000 		.word	64
 124 0190 01000000 		.word	1
 125 0194 C0000000 		.word	192
 126 0198 80000000 		.word	128
 127 019c 41000000 		.word	65
 128 01a0 01000000 		.word	1
 129 01a4 C0000000 		.word	192
 130 01a8 80000000 		.word	128
 131 01ac 41000000 		.word	65
 132 01b0 00000000 		.word	0
 133 01b4 C1000000 		.word	193
 134 01b8 81000000 		.word	129
 135 01bc 40000000 		.word	64
 136 01c0 01000000 		.word	1
 137 01c4 C0000000 		.word	192
 138 01c8 80000000 		.word	128
 139 01cc 41000000 		.word	65
 140 01d0 00000000 		.word	0
 141 01d4 C1000000 		.word	193
 142 01d8 81000000 		.word	129
 143 01dc 40000000 		.word	64
 144 01e0 00000000 		.word	0
 145 01e4 C1000000 		.word	193
 146 01e8 81000000 		.word	129
 147 01ec 40000000 		.word	64
 148 01f0 01000000 		.word	1
 149 01f4 C0000000 		.word	192
 150 01f8 80000000 		.word	128
 151 01fc 41000000 		.word	65
 152 0200 01000000 		.word	1
 153 0204 C0000000 		.word	192
 154 0208 80000000 		.word	128
 155 020c 41000000 		.word	65
 156 0210 00000000 		.word	0
 157 0214 C1000000 		.word	193
 158 0218 81000000 		.word	129
 159 021c 40000000 		.word	64
 160 0220 00000000 		.word	0
 161 0224 C1000000 		.word	193
 162 0228 81000000 		.word	129
 163 022c 40000000 		.word	64
 164 0230 01000000 		.word	1
 165 0234 C0000000 		.word	192
 166 0238 80000000 		.word	128
 167 023c 41000000 		.word	65
 168 0240 00000000 		.word	0
 169 0244 C1000000 		.word	193
 170 0248 81000000 		.word	129
 171 024c 40000000 		.word	64
 172 0250 01000000 		.word	1
 173 0254 C0000000 		.word	192
 174 0258 80000000 		.word	128
 175 025c 41000000 		.word	65
 176 0260 01000000 		.word	1
 177 0264 C0000000 		.word	192
 178 0268 80000000 		.word	128
 179 026c 41000000 		.word	65
 180 0270 00000000 		.word	0
 181 0274 C1000000 		.word	193
 182 0278 81000000 		.word	129
 183 027c 40000000 		.word	64
 184 0280 00000000 		.word	0
 185 0284 C1000000 		.word	193
 186 0288 81000000 		.word	129
 187 028c 40000000 		.word	64
 188 0290 01000000 		.word	1
 189 0294 C0000000 		.word	192
 190 0298 80000000 		.word	128
 191 029c 41000000 		.word	65
 192 02a0 01000000 		.word	1
 193 02a4 C0000000 		.word	192
 194 02a8 80000000 		.word	128
 195 02ac 41000000 		.word	65
 196 02b0 00000000 		.word	0
 197 02b4 C1000000 		.word	193
 198 02b8 81000000 		.word	129
 199 02bc 40000000 		.word	64
 200 02c0 01000000 		.word	1
 201 02c4 C0000000 		.word	192
 202 02c8 80000000 		.word	128
 203 02cc 41000000 		.word	65
 204 02d0 00000000 		.word	0
 205 02d4 C1000000 		.word	193
 206 02d8 81000000 		.word	129
 207 02dc 40000000 		.word	64
 208 02e0 00000000 		.word	0
 209 02e4 C1000000 		.word	193
 210 02e8 81000000 		.word	129
 211 02ec 40000000 		.word	64
 212 02f0 01000000 		.word	1
 213 02f4 C0000000 		.word	192
 214 02f8 80000000 		.word	128
 215 02fc 41000000 		.word	65
 216 0300 00000000 		.word	0
 217 0304 C1000000 		.word	193
 218 0308 81000000 		.word	129
 219 030c 40000000 		.word	64
 220 0310 01000000 		.word	1
 221 0314 C0000000 		.word	192
 222 0318 80000000 		.word	128
 223 031c 41000000 		.word	65
 224 0320 01000000 		.word	1
 225 0324 C0000000 		.word	192
 226 0328 80000000 		.word	128
 227 032c 41000000 		.word	65
 228 0330 00000000 		.word	0
 229 0334 C1000000 		.word	193
 230 0338 81000000 		.word	129
 231 033c 40000000 		.word	64
 232 0340 01000000 		.word	1
 233 0344 C0000000 		.word	192
 234 0348 80000000 		.word	128
 235 034c 41000000 		.word	65
 236 0350 00000000 		.word	0
 237 0354 C1000000 		.word	193
 238 0358 81000000 		.word	129
 239 035c 40000000 		.word	64
 240 0360 00000000 		.word	0
 241 0364 C1000000 		.word	193
 242 0368 81000000 		.word	129
 243 036c 40000000 		.word	64
 244 0370 01000000 		.word	1
 245 0374 C0000000 		.word	192
 246 0378 80000000 		.word	128
 247 037c 41000000 		.word	65
 248 0380 01000000 		.word	1
 249 0384 C0000000 		.word	192
 250 0388 80000000 		.word	128
 251 038c 41000000 		.word	65
 252 0390 00000000 		.word	0
 253 0394 C1000000 		.word	193
 254 0398 81000000 		.word	129
 255 039c 40000000 		.word	64
 256 03a0 00000000 		.word	0
 257 03a4 C1000000 		.word	193
 258 03a8 81000000 		.word	129
 259 03ac 40000000 		.word	64
 260 03b0 01000000 		.word	1
 261 03b4 C0000000 		.word	192
 262 03b8 80000000 		.word	128
 263 03bc 41000000 		.word	65
 264 03c0 00000000 		.word	0
 265 03c4 C1000000 		.word	193
 266 03c8 81000000 		.word	129
 267 03cc 40000000 		.word	64
 268 03d0 01000000 		.word	1
 269 03d4 C0000000 		.word	192
 270 03d8 80000000 		.word	128
 271 03dc 41000000 		.word	65
 272 03e0 01000000 		.word	1
 273 03e4 C0000000 		.word	192
 274 03e8 80000000 		.word	128
 275 03ec 41000000 		.word	65
 276 03f0 00000000 		.word	0
 277 03f4 C1000000 		.word	193
 278 03f8 81000000 		.word	129
 279 03fc 40000000 		.word	64
 280              		.section	.rodata.crcLo,"a",%progbits
 281              		.align	2
 284              	crcLo:
 285 0000 00000000 		.word	0
 286 0004 C0000000 		.word	192
 287 0008 C1000000 		.word	193
 288 000c 01000000 		.word	1
 289 0010 C3000000 		.word	195
 290 0014 03000000 		.word	3
 291 0018 02000000 		.word	2
 292 001c C2000000 		.word	194
 293 0020 C6000000 		.word	198
 294 0024 06000000 		.word	6
 295 0028 07000000 		.word	7
 296 002c C7000000 		.word	199
 297 0030 05000000 		.word	5
 298 0034 C5000000 		.word	197
 299 0038 C4000000 		.word	196
 300 003c 04000000 		.word	4
 301 0040 CC000000 		.word	204
 302 0044 0C000000 		.word	12
 303 0048 0D000000 		.word	13
 304 004c CD000000 		.word	205
 305 0050 0F000000 		.word	15
 306 0054 CF000000 		.word	207
 307 0058 CE000000 		.word	206
 308 005c 0E000000 		.word	14
 309 0060 0A000000 		.word	10
 310 0064 CA000000 		.word	202
 311 0068 CB000000 		.word	203
 312 006c 0B000000 		.word	11
 313 0070 C9000000 		.word	201
 314 0074 09000000 		.word	9
 315 0078 08000000 		.word	8
 316 007c C8000000 		.word	200
 317 0080 D8000000 		.word	216
 318 0084 18000000 		.word	24
 319 0088 19000000 		.word	25
 320 008c D9000000 		.word	217
 321 0090 1B000000 		.word	27
 322 0094 DB000000 		.word	219
 323 0098 DA000000 		.word	218
 324 009c 1A000000 		.word	26
 325 00a0 1E000000 		.word	30
 326 00a4 DE000000 		.word	222
 327 00a8 DF000000 		.word	223
 328 00ac 1F000000 		.word	31
 329 00b0 DD000000 		.word	221
 330 00b4 1D000000 		.word	29
 331 00b8 1C000000 		.word	28
 332 00bc DC000000 		.word	220
 333 00c0 14000000 		.word	20
 334 00c4 D4000000 		.word	212
 335 00c8 D5000000 		.word	213
 336 00cc 15000000 		.word	21
 337 00d0 D7000000 		.word	215
 338 00d4 17000000 		.word	23
 339 00d8 16000000 		.word	22
 340 00dc D6000000 		.word	214
 341 00e0 D2000000 		.word	210
 342 00e4 12000000 		.word	18
 343 00e8 13000000 		.word	19
 344 00ec D3000000 		.word	211
 345 00f0 11000000 		.word	17
 346 00f4 D1000000 		.word	209
 347 00f8 D0000000 		.word	208
 348 00fc 10000000 		.word	16
 349 0100 F0000000 		.word	240
 350 0104 30000000 		.word	48
 351 0108 31000000 		.word	49
 352 010c F1000000 		.word	241
 353 0110 33000000 		.word	51
 354 0114 F3000000 		.word	243
 355 0118 F2000000 		.word	242
 356 011c 32000000 		.word	50
 357 0120 36000000 		.word	54
 358 0124 F6000000 		.word	246
 359 0128 F7000000 		.word	247
 360 012c 37000000 		.word	55
 361 0130 F5000000 		.word	245
 362 0134 35000000 		.word	53
 363 0138 34000000 		.word	52
 364 013c F4000000 		.word	244
 365 0140 3C000000 		.word	60
 366 0144 FC000000 		.word	252
 367 0148 FD000000 		.word	253
 368 014c 3D000000 		.word	61
 369 0150 FF000000 		.word	255
 370 0154 3F000000 		.word	63
 371 0158 3E000000 		.word	62
 372 015c FE000000 		.word	254
 373 0160 FA000000 		.word	250
 374 0164 3A000000 		.word	58
 375 0168 3B000000 		.word	59
 376 016c FB000000 		.word	251
 377 0170 39000000 		.word	57
 378 0174 F9000000 		.word	249
 379 0178 F8000000 		.word	248
 380 017c 38000000 		.word	56
 381 0180 28000000 		.word	40
 382 0184 E8000000 		.word	232
 383 0188 E9000000 		.word	233
 384 018c 29000000 		.word	41
 385 0190 EB000000 		.word	235
 386 0194 2B000000 		.word	43
 387 0198 2A000000 		.word	42
 388 019c EA000000 		.word	234
 389 01a0 EE000000 		.word	238
 390 01a4 2E000000 		.word	46
 391 01a8 2F000000 		.word	47
 392 01ac EF000000 		.word	239
 393 01b0 2D000000 		.word	45
 394 01b4 ED000000 		.word	237
 395 01b8 EC000000 		.word	236
 396 01bc 2C000000 		.word	44
 397 01c0 E4000000 		.word	228
 398 01c4 24000000 		.word	36
 399 01c8 25000000 		.word	37
 400 01cc E5000000 		.word	229
 401 01d0 27000000 		.word	39
 402 01d4 E7000000 		.word	231
 403 01d8 E6000000 		.word	230
 404 01dc 26000000 		.word	38
 405 01e0 22000000 		.word	34
 406 01e4 E2000000 		.word	226
 407 01e8 E3000000 		.word	227
 408 01ec 23000000 		.word	35
 409 01f0 E1000000 		.word	225
 410 01f4 21000000 		.word	33
 411 01f8 20000000 		.word	32
 412 01fc E0000000 		.word	224
 413 0200 A0000000 		.word	160
 414 0204 60000000 		.word	96
 415 0208 61000000 		.word	97
 416 020c A1000000 		.word	161
 417 0210 63000000 		.word	99
 418 0214 A3000000 		.word	163
 419 0218 A2000000 		.word	162
 420 021c 62000000 		.word	98
 421 0220 66000000 		.word	102
 422 0224 A6000000 		.word	166
 423 0228 A7000000 		.word	167
 424 022c 67000000 		.word	103
 425 0230 A5000000 		.word	165
 426 0234 65000000 		.word	101
 427 0238 64000000 		.word	100
 428 023c A4000000 		.word	164
 429 0240 6C000000 		.word	108
 430 0244 AC000000 		.word	172
 431 0248 AD000000 		.word	173
 432 024c 6D000000 		.word	109
 433 0250 AF000000 		.word	175
 434 0254 6F000000 		.word	111
 435 0258 6E000000 		.word	110
 436 025c AE000000 		.word	174
 437 0260 AA000000 		.word	170
 438 0264 6A000000 		.word	106
 439 0268 6B000000 		.word	107
 440 026c AB000000 		.word	171
 441 0270 69000000 		.word	105
 442 0274 A9000000 		.word	169
 443 0278 A8000000 		.word	168
 444 027c 68000000 		.word	104
 445 0280 78000000 		.word	120
 446 0284 B8000000 		.word	184
 447 0288 B9000000 		.word	185
 448 028c 79000000 		.word	121
 449 0290 BB000000 		.word	187
 450 0294 7B000000 		.word	123
 451 0298 7A000000 		.word	122
 452 029c BA000000 		.word	186
 453 02a0 BE000000 		.word	190
 454 02a4 7E000000 		.word	126
 455 02a8 7F000000 		.word	127
 456 02ac BF000000 		.word	191
 457 02b0 7D000000 		.word	125
 458 02b4 BD000000 		.word	189
 459 02b8 BC000000 		.word	188
 460 02bc 7C000000 		.word	124
 461 02c0 B4000000 		.word	180
 462 02c4 74000000 		.word	116
 463 02c8 75000000 		.word	117
 464 02cc B5000000 		.word	181
 465 02d0 77000000 		.word	119
 466 02d4 B7000000 		.word	183
 467 02d8 B6000000 		.word	182
 468 02dc 76000000 		.word	118
 469 02e0 72000000 		.word	114
 470 02e4 B2000000 		.word	178
 471 02e8 B3000000 		.word	179
 472 02ec 73000000 		.word	115
 473 02f0 B1000000 		.word	177
 474 02f4 71000000 		.word	113
 475 02f8 70000000 		.word	112
 476 02fc B0000000 		.word	176
 477 0300 50000000 		.word	80
 478 0304 90000000 		.word	144
 479 0308 91000000 		.word	145
 480 030c 51000000 		.word	81
 481 0310 93000000 		.word	147
 482 0314 53000000 		.word	83
 483 0318 52000000 		.word	82
 484 031c 92000000 		.word	146
 485 0320 96000000 		.word	150
 486 0324 56000000 		.word	86
 487 0328 57000000 		.word	87
 488 032c 97000000 		.word	151
 489 0330 55000000 		.word	85
 490 0334 95000000 		.word	149
 491 0338 94000000 		.word	148
 492 033c 54000000 		.word	84
 493 0340 9C000000 		.word	156
 494 0344 5C000000 		.word	92
 495 0348 5D000000 		.word	93
 496 034c 9D000000 		.word	157
 497 0350 5F000000 		.word	95
 498 0354 9F000000 		.word	159
 499 0358 9E000000 		.word	158
 500 035c 5E000000 		.word	94
 501 0360 5A000000 		.word	90
 502 0364 9A000000 		.word	154
 503 0368 9B000000 		.word	155
 504 036c 5B000000 		.word	91
 505 0370 99000000 		.word	153
 506 0374 59000000 		.word	89
 507 0378 58000000 		.word	88
 508 037c 98000000 		.word	152
 509 0380 88000000 		.word	136
 510 0384 48000000 		.word	72
 511 0388 49000000 		.word	73
 512 038c 89000000 		.word	137
 513 0390 4B000000 		.word	75
 514 0394 8B000000 		.word	139
 515 0398 8A000000 		.word	138
 516 039c 4A000000 		.word	74
 517 03a0 4E000000 		.word	78
 518 03a4 8E000000 		.word	142
 519 03a8 8F000000 		.word	143
 520 03ac 4F000000 		.word	79
 521 03b0 8D000000 		.word	141
 522 03b4 4D000000 		.word	77
 523 03b8 4C000000 		.word	76
 524 03bc 8C000000 		.word	140
 525 03c0 44000000 		.word	68
 526 03c4 84000000 		.word	132
 527 03c8 85000000 		.word	133
 528 03cc 45000000 		.word	69
 529 03d0 87000000 		.word	135
 530 03d4 47000000 		.word	71
 531 03d8 46000000 		.word	70
 532 03dc 86000000 		.word	134
 533 03e0 82000000 		.word	130
 534 03e4 42000000 		.word	66
 535 03e8 43000000 		.word	67
 536 03ec 83000000 		.word	131
 537 03f0 41000000 		.word	65
 538 03f4 81000000 		.word	129
 539 03f8 80000000 		.word	128
 540 03fc 40000000 		.word	64
 541              		.global	firstRequest
 542              		.section	.bss.firstRequest,"aw",%nobits
 543              		.align	2
 546              	firstRequest:
 547 0000 00000000 		.space	4
 548              		.global	totalRequest
 549              		.section	.bss.totalRequest,"aw",%nobits
 550              		.align	2
 553              	totalRequest:
 554 0000 00000000 		.space	4
 555              		.global	writeRequest
 556              		.section	.bss.writeRequest,"aw",%nobits
 557              		.align	2
 560              	writeRequest:
 561 0000 00000000 		.space	4
 562              		.global	arrayResponsePacket
 563              		.section	.bss.arrayResponsePacket,"aw",%nobits
 564              		.align	2
 567              	arrayResponsePacket:
 568 0000 00000000 		.space	200
 568      00000000 
 568      00000000 
 568      00000000 
 568      00000000 
 569              		.global	rPacket
 570              		.section	.data.rPacket,"aw",%progbits
 571              		.align	2
 574              	rPacket:
 575 0000 00000000 		.word	arrayResponsePacket
 576              		.global	users
 577              		.section	.bss.users,"aw",%nobits
 578              		.align	2
 581              	users:
 582 0000 00000000 		.space	4
 583              		.comm	s,4,4
 584              		.section	.text.addData,"ax",%progbits
 585              		.align	2
 586              		.global	addData
 587              		.thumb
 588              		.thumb_func
 590              	addData:
 591              	.LFB0:
 592              		.file 1 "src/modbus.c"
   1:src/modbus.c  **** /*
   2:src/modbus.c  ****  * modbus.h
   3:src/modbus.c  ****  *
   4:src/modbus.c  ****  *  Created on: 29-Nov-2012
   5:src/modbus.c  ****  *  Author: chetanpatil
   6:src/modbus.c  ****  */
   7:src/modbus.c  **** 
   8:src/modbus.c  **** #include "modbus.h"
   9:src/modbus.c  **** 
  10:src/modbus.c  **** uint32_t firstRequest = 0;
  11:src/modbus.c  **** uint32_t totalRequest = 0;
  12:src/modbus.c  **** uint32_t writeRequest = 0;
  13:src/modbus.c  **** 
  14:src/modbus.c  **** // Creating packet to send the data back to Master as requested
  15:src/modbus.c  **** uint32_t arrayResponsePacket[50] = { 0 };
  16:src/modbus.c  **** uint32_t *rPacket = arrayResponsePacket;
  17:src/modbus.c  **** 
  18:src/modbus.c  **** // HASHMAP : Using uthash.h
  19:src/modbus.c  **** struct heapStruct *users = NULL;
  20:src/modbus.c  **** struct heapStruct *s;
  21:src/modbus.c  **** 
  22:src/modbus.c  **** //Add the data in HASH MAP
  23:src/modbus.c  **** void addData(uint32_t keyID, uint32_t *keyValue) {
 593              		.loc 1 23 0
 594              		.cfi_startproc
 595              		@ args = 0, pretend = 0, frame = 80
 596              		@ frame_needed = 1, uses_anonymous_args = 0
 597 0000 90B5     		push	{r4, r7, lr}
 598              	.LCFI0:
 599              		.cfi_def_cfa_offset 12
 600              		.cfi_offset 14, -4
 601              		.cfi_offset 7, -8
 602              		.cfi_offset 4, -12
 603 0002 95B0     		sub	sp, sp, #84
 604              	.LCFI1:
 605              		.cfi_def_cfa_offset 96
 606 0004 00AF     		add	r7, sp, #0
 607              	.LCFI2:
 608              		.cfi_def_cfa_register 7
 609 0006 7860     		str	r0, [r7, #4]
 610 0008 3960     		str	r1, [r7, #0]
 611              	.LBB2:
  24:src/modbus.c  **** 	struct heapStruct *s;
  25:src/modbus.c  **** 
  26:src/modbus.c  **** 	HASH_FIND_INT(users, &keyID, s);
 612              		.loc 1 26 0
 613 000a 4FF00003 		mov	r3, #0
 614 000e FB64     		str	r3, [r7, #76]
 615 0010 40F20003 		movw	r3, #:lower16:users
 616 0014 C0F20003 		movt	r3, #:upper16:users
 617 0018 1B68     		ldr	r3, [r3, #0]
 618 001a 002B     		cmp	r3, #0
 619 001c 00F05682 		beq	.L2
 620              	.LBB3:
 621              		.loc 1 26 0 is_stmt 0 discriminator 1
 622 0020 07F10403 		add	r3, r7, #4
 623 0024 BB63     		str	r3, [r7, #56]
 624 0026 4BF6EF63 		movw	r3, #48879
 625 002a CFF6ED63 		movt	r3, 65261
 626 002e BB64     		str	r3, [r7, #72]
 627 0030 47F6B913 		movw	r3, #31161
 628 0034 C9F63763 		movt	r3, 40503
 629 0038 3B64     		str	r3, [r7, #64]
 630 003a 3B6C     		ldr	r3, [r7, #64]
 631 003c 7B64     		str	r3, [r7, #68]
 632 003e 4FF00403 		mov	r3, #4
 633 0042 FB63     		str	r3, [r7, #60]
 634 0044 DAE0     		b	.L3
 635              	.L4:
 636              		.loc 1 26 0 discriminator 3
 637 0046 BB6B     		ldr	r3, [r7, #56]
 638 0048 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 639 004a 1A46     		mov	r2, r3
 640 004c BB6B     		ldr	r3, [r7, #56]
 641 004e 03F10103 		add	r3, r3, #1
 642 0052 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 643 0054 4FEA0323 		lsl	r3, r3, #8
 644 0058 D218     		adds	r2, r2, r3
 645 005a BB6B     		ldr	r3, [r7, #56]
 646 005c 03F10203 		add	r3, r3, #2
 647 0060 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 648 0062 4FEA0343 		lsl	r3, r3, #16
 649 0066 D218     		adds	r2, r2, r3
 650 0068 BB6B     		ldr	r3, [r7, #56]
 651 006a 03F10303 		add	r3, r3, #3
 652 006e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 653 0070 4FEA0363 		lsl	r3, r3, #24
 654 0074 D318     		adds	r3, r2, r3
 655 0076 7A6C     		ldr	r2, [r7, #68]
 656 0078 D318     		adds	r3, r2, r3
 657 007a 7B64     		str	r3, [r7, #68]
 658 007c BB6B     		ldr	r3, [r7, #56]
 659 007e 03F10403 		add	r3, r3, #4
 660 0082 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 661 0084 1A46     		mov	r2, r3
 662 0086 BB6B     		ldr	r3, [r7, #56]
 663 0088 03F10503 		add	r3, r3, #5
 664 008c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 665 008e 4FEA0323 		lsl	r3, r3, #8
 666 0092 D218     		adds	r2, r2, r3
 667 0094 BB6B     		ldr	r3, [r7, #56]
 668 0096 03F10603 		add	r3, r3, #6
 669 009a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 670 009c 4FEA0343 		lsl	r3, r3, #16
 671 00a0 D218     		adds	r2, r2, r3
 672 00a2 BB6B     		ldr	r3, [r7, #56]
 673 00a4 03F10703 		add	r3, r3, #7
 674 00a8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 675 00aa 4FEA0363 		lsl	r3, r3, #24
 676 00ae D318     		adds	r3, r2, r3
 677 00b0 3A6C     		ldr	r2, [r7, #64]
 678 00b2 D318     		adds	r3, r2, r3
 679 00b4 3B64     		str	r3, [r7, #64]
 680 00b6 BB6B     		ldr	r3, [r7, #56]
 681 00b8 03F10803 		add	r3, r3, #8
 682 00bc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 683 00be 1A46     		mov	r2, r3
 684 00c0 BB6B     		ldr	r3, [r7, #56]
 685 00c2 03F10903 		add	r3, r3, #9
 686 00c6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 687 00c8 4FEA0323 		lsl	r3, r3, #8
 688 00cc D218     		adds	r2, r2, r3
 689 00ce BB6B     		ldr	r3, [r7, #56]
 690 00d0 03F10A03 		add	r3, r3, #10
 691 00d4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 692 00d6 4FEA0343 		lsl	r3, r3, #16
 693 00da D218     		adds	r2, r2, r3
 694 00dc BB6B     		ldr	r3, [r7, #56]
 695 00de 03F10B03 		add	r3, r3, #11
 696 00e2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 697 00e4 4FEA0363 		lsl	r3, r3, #24
 698 00e8 D318     		adds	r3, r2, r3
 699 00ea BA6C     		ldr	r2, [r7, #72]
 700 00ec D318     		adds	r3, r2, r3
 701 00ee BB64     		str	r3, [r7, #72]
 702 00f0 7A6C     		ldr	r2, [r7, #68]
 703 00f2 3B6C     		ldr	r3, [r7, #64]
 704 00f4 D31A     		subs	r3, r2, r3
 705 00f6 7B64     		str	r3, [r7, #68]
 706 00f8 7A6C     		ldr	r2, [r7, #68]
 707 00fa BB6C     		ldr	r3, [r7, #72]
 708 00fc D31A     		subs	r3, r2, r3
 709 00fe 7B64     		str	r3, [r7, #68]
 710 0100 BB6C     		ldr	r3, [r7, #72]
 711 0102 4FEA5333 		lsr	r3, r3, #13
 712 0106 7A6C     		ldr	r2, [r7, #68]
 713 0108 5340     		eors	r3, r3, r2
 714 010a 7B64     		str	r3, [r7, #68]
 715 010c 3A6C     		ldr	r2, [r7, #64]
 716 010e BB6C     		ldr	r3, [r7, #72]
 717 0110 D31A     		subs	r3, r2, r3
 718 0112 3B64     		str	r3, [r7, #64]
 719 0114 3A6C     		ldr	r2, [r7, #64]
 720 0116 7B6C     		ldr	r3, [r7, #68]
 721 0118 D31A     		subs	r3, r2, r3
 722 011a 3B64     		str	r3, [r7, #64]
 723 011c 7B6C     		ldr	r3, [r7, #68]
 724 011e 4FEA0323 		lsl	r3, r3, #8
 725 0122 3A6C     		ldr	r2, [r7, #64]
 726 0124 5340     		eors	r3, r3, r2
 727 0126 3B64     		str	r3, [r7, #64]
 728 0128 BA6C     		ldr	r2, [r7, #72]
 729 012a 7B6C     		ldr	r3, [r7, #68]
 730 012c D31A     		subs	r3, r2, r3
 731 012e BB64     		str	r3, [r7, #72]
 732 0130 BA6C     		ldr	r2, [r7, #72]
 733 0132 3B6C     		ldr	r3, [r7, #64]
 734 0134 D31A     		subs	r3, r2, r3
 735 0136 BB64     		str	r3, [r7, #72]
 736 0138 3B6C     		ldr	r3, [r7, #64]
 737 013a 4FEA5333 		lsr	r3, r3, #13
 738 013e BA6C     		ldr	r2, [r7, #72]
 739 0140 5340     		eors	r3, r3, r2
 740 0142 BB64     		str	r3, [r7, #72]
 741 0144 7A6C     		ldr	r2, [r7, #68]
 742 0146 3B6C     		ldr	r3, [r7, #64]
 743 0148 D31A     		subs	r3, r2, r3
 744 014a 7B64     		str	r3, [r7, #68]
 745 014c 7A6C     		ldr	r2, [r7, #68]
 746 014e BB6C     		ldr	r3, [r7, #72]
 747 0150 D31A     		subs	r3, r2, r3
 748 0152 7B64     		str	r3, [r7, #68]
 749 0154 BB6C     		ldr	r3, [r7, #72]
 750 0156 4FEA1333 		lsr	r3, r3, #12
 751 015a 7A6C     		ldr	r2, [r7, #68]
 752 015c 5340     		eors	r3, r3, r2
 753 015e 7B64     		str	r3, [r7, #68]
 754 0160 3A6C     		ldr	r2, [r7, #64]
 755 0162 BB6C     		ldr	r3, [r7, #72]
 756 0164 D31A     		subs	r3, r2, r3
 757 0166 3B64     		str	r3, [r7, #64]
 758 0168 3A6C     		ldr	r2, [r7, #64]
 759 016a 7B6C     		ldr	r3, [r7, #68]
 760 016c D31A     		subs	r3, r2, r3
 761 016e 3B64     		str	r3, [r7, #64]
 762 0170 7B6C     		ldr	r3, [r7, #68]
 763 0172 4FEA0343 		lsl	r3, r3, #16
 764 0176 3A6C     		ldr	r2, [r7, #64]
 765 0178 5340     		eors	r3, r3, r2
 766 017a 3B64     		str	r3, [r7, #64]
 767 017c BA6C     		ldr	r2, [r7, #72]
 768 017e 7B6C     		ldr	r3, [r7, #68]
 769 0180 D31A     		subs	r3, r2, r3
 770 0182 BB64     		str	r3, [r7, #72]
 771 0184 BA6C     		ldr	r2, [r7, #72]
 772 0186 3B6C     		ldr	r3, [r7, #64]
 773 0188 D31A     		subs	r3, r2, r3
 774 018a BB64     		str	r3, [r7, #72]
 775 018c 3B6C     		ldr	r3, [r7, #64]
 776 018e 4FEA5313 		lsr	r3, r3, #5
 777 0192 BA6C     		ldr	r2, [r7, #72]
 778 0194 5340     		eors	r3, r3, r2
 779 0196 BB64     		str	r3, [r7, #72]
 780 0198 7A6C     		ldr	r2, [r7, #68]
 781 019a 3B6C     		ldr	r3, [r7, #64]
 782 019c D31A     		subs	r3, r2, r3
 783 019e 7B64     		str	r3, [r7, #68]
 784 01a0 7A6C     		ldr	r2, [r7, #68]
 785 01a2 BB6C     		ldr	r3, [r7, #72]
 786 01a4 D31A     		subs	r3, r2, r3
 787 01a6 7B64     		str	r3, [r7, #68]
 788 01a8 BB6C     		ldr	r3, [r7, #72]
 789 01aa 4FEAD303 		lsr	r3, r3, #3
 790 01ae 7A6C     		ldr	r2, [r7, #68]
 791 01b0 5340     		eors	r3, r3, r2
 792 01b2 7B64     		str	r3, [r7, #68]
 793 01b4 3A6C     		ldr	r2, [r7, #64]
 794 01b6 BB6C     		ldr	r3, [r7, #72]
 795 01b8 D31A     		subs	r3, r2, r3
 796 01ba 3B64     		str	r3, [r7, #64]
 797 01bc 3A6C     		ldr	r2, [r7, #64]
 798 01be 7B6C     		ldr	r3, [r7, #68]
 799 01c0 D31A     		subs	r3, r2, r3
 800 01c2 3B64     		str	r3, [r7, #64]
 801 01c4 7B6C     		ldr	r3, [r7, #68]
 802 01c6 4FEA8323 		lsl	r3, r3, #10
 803 01ca 3A6C     		ldr	r2, [r7, #64]
 804 01cc 5340     		eors	r3, r3, r2
 805 01ce 3B64     		str	r3, [r7, #64]
 806 01d0 BA6C     		ldr	r2, [r7, #72]
 807 01d2 7B6C     		ldr	r3, [r7, #68]
 808 01d4 D31A     		subs	r3, r2, r3
 809 01d6 BB64     		str	r3, [r7, #72]
 810 01d8 BA6C     		ldr	r2, [r7, #72]
 811 01da 3B6C     		ldr	r3, [r7, #64]
 812 01dc D31A     		subs	r3, r2, r3
 813 01de BB64     		str	r3, [r7, #72]
 814 01e0 3B6C     		ldr	r3, [r7, #64]
 815 01e2 4FEAD333 		lsr	r3, r3, #15
 816 01e6 BA6C     		ldr	r2, [r7, #72]
 817 01e8 5340     		eors	r3, r3, r2
 818 01ea BB64     		str	r3, [r7, #72]
 819 01ec BB6B     		ldr	r3, [r7, #56]
 820 01ee 03F10C03 		add	r3, r3, #12
 821 01f2 BB63     		str	r3, [r7, #56]
 822 01f4 FB6B     		ldr	r3, [r7, #60]
 823 01f6 A3F10C03 		sub	r3, r3, #12
 824 01fa FB63     		str	r3, [r7, #60]
 825              	.L3:
 826              		.loc 1 26 0 discriminator 2
 827 01fc FB6B     		ldr	r3, [r7, #60]
 828 01fe 0B2B     		cmp	r3, #11
 829 0200 3FF621AF 		bhi	.L4
 830              		.loc 1 26 0 discriminator 4
 831 0204 BB6C     		ldr	r3, [r7, #72]
 832 0206 03F10403 		add	r3, r3, #4
 833 020a BB64     		str	r3, [r7, #72]
 834 020c FB6B     		ldr	r3, [r7, #60]
 835 020e 03F1FF33 		add	r3, r3, #-1
 836 0212 0A2B     		cmp	r3, #10
 837 0214 75D8     		bhi	.L5
 838 0216 01A2     		adr	r2, .L17
 839 0218 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 840              		.align	2
 841              	.L17:
 842 021c F9020000 		.word	.L6+1
 843 0220 E7020000 		.word	.L7+1
 844 0224 D5020000 		.word	.L8+1
 845 0228 C3020000 		.word	.L9+1
 846 022c B5020000 		.word	.L10+1
 847 0230 A3020000 		.word	.L11+1
 848 0234 91020000 		.word	.L12+1
 849 0238 7F020000 		.word	.L13+1
 850 023c 6D020000 		.word	.L14+1
 851 0240 5B020000 		.word	.L15+1
 852 0244 49020000 		.word	.L16+1
 853              	.L16:
 854              		.loc 1 26 0 discriminator 16
 855 0248 BB6B     		ldr	r3, [r7, #56]
 856 024a 03F10A03 		add	r3, r3, #10
 857 024e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 858 0250 4FEA0363 		lsl	r3, r3, #24
 859 0254 BA6C     		ldr	r2, [r7, #72]
 860 0256 D318     		adds	r3, r2, r3
 861 0258 BB64     		str	r3, [r7, #72]
 862              	.L15:
 863              		.loc 1 26 0 discriminator 15
 864 025a BB6B     		ldr	r3, [r7, #56]
 865 025c 03F10903 		add	r3, r3, #9
 866 0260 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 867 0262 4FEA0343 		lsl	r3, r3, #16
 868 0266 BA6C     		ldr	r2, [r7, #72]
 869 0268 D318     		adds	r3, r2, r3
 870 026a BB64     		str	r3, [r7, #72]
 871              	.L14:
 872              		.loc 1 26 0 discriminator 14
 873 026c BB6B     		ldr	r3, [r7, #56]
 874 026e 03F10803 		add	r3, r3, #8
 875 0272 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 876 0274 4FEA0323 		lsl	r3, r3, #8
 877 0278 BA6C     		ldr	r2, [r7, #72]
 878 027a D318     		adds	r3, r2, r3
 879 027c BB64     		str	r3, [r7, #72]
 880              	.L13:
 881              		.loc 1 26 0 discriminator 13
 882 027e BB6B     		ldr	r3, [r7, #56]
 883 0280 03F10703 		add	r3, r3, #7
 884 0284 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 885 0286 4FEA0363 		lsl	r3, r3, #24
 886 028a 3A6C     		ldr	r2, [r7, #64]
 887 028c D318     		adds	r3, r2, r3
 888 028e 3B64     		str	r3, [r7, #64]
 889              	.L12:
 890              		.loc 1 26 0 discriminator 12
 891 0290 BB6B     		ldr	r3, [r7, #56]
 892 0292 03F10603 		add	r3, r3, #6
 893 0296 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 894 0298 4FEA0343 		lsl	r3, r3, #16
 895 029c 3A6C     		ldr	r2, [r7, #64]
 896 029e D318     		adds	r3, r2, r3
 897 02a0 3B64     		str	r3, [r7, #64]
 898              	.L11:
 899              		.loc 1 26 0 discriminator 11
 900 02a2 BB6B     		ldr	r3, [r7, #56]
 901 02a4 03F10503 		add	r3, r3, #5
 902 02a8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 903 02aa 4FEA0323 		lsl	r3, r3, #8
 904 02ae 3A6C     		ldr	r2, [r7, #64]
 905 02b0 D318     		adds	r3, r2, r3
 906 02b2 3B64     		str	r3, [r7, #64]
 907              	.L10:
 908              		.loc 1 26 0 discriminator 10
 909 02b4 BB6B     		ldr	r3, [r7, #56]
 910 02b6 03F10403 		add	r3, r3, #4
 911 02ba 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 912 02bc 3A6C     		ldr	r2, [r7, #64]
 913 02be D318     		adds	r3, r2, r3
 914 02c0 3B64     		str	r3, [r7, #64]
 915              	.L9:
 916              		.loc 1 26 0 discriminator 9
 917 02c2 BB6B     		ldr	r3, [r7, #56]
 918 02c4 03F10303 		add	r3, r3, #3
 919 02c8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 920 02ca 4FEA0363 		lsl	r3, r3, #24
 921 02ce 7A6C     		ldr	r2, [r7, #68]
 922 02d0 D318     		adds	r3, r2, r3
 923 02d2 7B64     		str	r3, [r7, #68]
 924              	.L8:
 925              		.loc 1 26 0 discriminator 8
 926 02d4 BB6B     		ldr	r3, [r7, #56]
 927 02d6 03F10203 		add	r3, r3, #2
 928 02da 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 929 02dc 4FEA0343 		lsl	r3, r3, #16
 930 02e0 7A6C     		ldr	r2, [r7, #68]
 931 02e2 D318     		adds	r3, r2, r3
 932 02e4 7B64     		str	r3, [r7, #68]
 933              	.L7:
 934              		.loc 1 26 0 discriminator 7
 935 02e6 BB6B     		ldr	r3, [r7, #56]
 936 02e8 03F10103 		add	r3, r3, #1
 937 02ec 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 938 02ee 4FEA0323 		lsl	r3, r3, #8
 939 02f2 7A6C     		ldr	r2, [r7, #68]
 940 02f4 D318     		adds	r3, r2, r3
 941 02f6 7B64     		str	r3, [r7, #68]
 942              	.L6:
 943              		.loc 1 26 0 discriminator 6
 944 02f8 BB6B     		ldr	r3, [r7, #56]
 945 02fa 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 946 02fc 7A6C     		ldr	r2, [r7, #68]
 947 02fe D318     		adds	r3, r2, r3
 948 0300 7B64     		str	r3, [r7, #68]
 949              	.L5:
 950              		.loc 1 26 0 discriminator 5
 951 0302 7A6C     		ldr	r2, [r7, #68]
 952 0304 3B6C     		ldr	r3, [r7, #64]
 953 0306 D31A     		subs	r3, r2, r3
 954 0308 7B64     		str	r3, [r7, #68]
 955 030a 7A6C     		ldr	r2, [r7, #68]
 956 030c BB6C     		ldr	r3, [r7, #72]
 957 030e D31A     		subs	r3, r2, r3
 958 0310 7B64     		str	r3, [r7, #68]
 959 0312 BB6C     		ldr	r3, [r7, #72]
 960 0314 4FEA5333 		lsr	r3, r3, #13
 961 0318 7A6C     		ldr	r2, [r7, #68]
 962 031a 5340     		eors	r3, r3, r2
 963 031c 7B64     		str	r3, [r7, #68]
 964 031e 3A6C     		ldr	r2, [r7, #64]
 965 0320 BB6C     		ldr	r3, [r7, #72]
 966 0322 D31A     		subs	r3, r2, r3
 967 0324 3B64     		str	r3, [r7, #64]
 968 0326 3A6C     		ldr	r2, [r7, #64]
 969 0328 7B6C     		ldr	r3, [r7, #68]
 970 032a D31A     		subs	r3, r2, r3
 971 032c 3B64     		str	r3, [r7, #64]
 972 032e 7B6C     		ldr	r3, [r7, #68]
 973 0330 4FEA0323 		lsl	r3, r3, #8
 974 0334 3A6C     		ldr	r2, [r7, #64]
 975 0336 5340     		eors	r3, r3, r2
 976 0338 3B64     		str	r3, [r7, #64]
 977 033a BA6C     		ldr	r2, [r7, #72]
 978 033c 7B6C     		ldr	r3, [r7, #68]
 979 033e D31A     		subs	r3, r2, r3
 980 0340 BB64     		str	r3, [r7, #72]
 981 0342 BA6C     		ldr	r2, [r7, #72]
 982 0344 3B6C     		ldr	r3, [r7, #64]
 983 0346 D31A     		subs	r3, r2, r3
 984 0348 BB64     		str	r3, [r7, #72]
 985 034a 3B6C     		ldr	r3, [r7, #64]
 986 034c 4FEA5333 		lsr	r3, r3, #13
 987 0350 BA6C     		ldr	r2, [r7, #72]
 988 0352 5340     		eors	r3, r3, r2
 989 0354 BB64     		str	r3, [r7, #72]
 990 0356 7A6C     		ldr	r2, [r7, #68]
 991 0358 3B6C     		ldr	r3, [r7, #64]
 992 035a D31A     		subs	r3, r2, r3
 993 035c 7B64     		str	r3, [r7, #68]
 994 035e 7A6C     		ldr	r2, [r7, #68]
 995 0360 BB6C     		ldr	r3, [r7, #72]
 996 0362 D31A     		subs	r3, r2, r3
 997 0364 7B64     		str	r3, [r7, #68]
 998 0366 BB6C     		ldr	r3, [r7, #72]
 999 0368 4FEA1333 		lsr	r3, r3, #12
 1000 036c 7A6C     		ldr	r2, [r7, #68]
 1001 036e 5340     		eors	r3, r3, r2
 1002 0370 7B64     		str	r3, [r7, #68]
 1003 0372 3A6C     		ldr	r2, [r7, #64]
 1004 0374 BB6C     		ldr	r3, [r7, #72]
 1005 0376 D31A     		subs	r3, r2, r3
 1006 0378 3B64     		str	r3, [r7, #64]
 1007 037a 3A6C     		ldr	r2, [r7, #64]
 1008 037c 7B6C     		ldr	r3, [r7, #68]
 1009 037e D31A     		subs	r3, r2, r3
 1010 0380 3B64     		str	r3, [r7, #64]
 1011 0382 7B6C     		ldr	r3, [r7, #68]
 1012 0384 4FEA0343 		lsl	r3, r3, #16
 1013 0388 3A6C     		ldr	r2, [r7, #64]
 1014 038a 5340     		eors	r3, r3, r2
 1015 038c 3B64     		str	r3, [r7, #64]
 1016 038e BA6C     		ldr	r2, [r7, #72]
 1017 0390 7B6C     		ldr	r3, [r7, #68]
 1018 0392 D31A     		subs	r3, r2, r3
 1019 0394 BB64     		str	r3, [r7, #72]
 1020 0396 BA6C     		ldr	r2, [r7, #72]
 1021 0398 3B6C     		ldr	r3, [r7, #64]
 1022 039a D31A     		subs	r3, r2, r3
 1023 039c BB64     		str	r3, [r7, #72]
 1024 039e 3B6C     		ldr	r3, [r7, #64]
 1025 03a0 4FEA5313 		lsr	r3, r3, #5
 1026 03a4 BA6C     		ldr	r2, [r7, #72]
 1027 03a6 5340     		eors	r3, r3, r2
 1028 03a8 BB64     		str	r3, [r7, #72]
 1029 03aa 7A6C     		ldr	r2, [r7, #68]
 1030 03ac 3B6C     		ldr	r3, [r7, #64]
 1031 03ae D31A     		subs	r3, r2, r3
 1032 03b0 7B64     		str	r3, [r7, #68]
 1033 03b2 7A6C     		ldr	r2, [r7, #68]
 1034 03b4 BB6C     		ldr	r3, [r7, #72]
 1035 03b6 D31A     		subs	r3, r2, r3
 1036 03b8 7B64     		str	r3, [r7, #68]
 1037 03ba BB6C     		ldr	r3, [r7, #72]
 1038 03bc 4FEAD303 		lsr	r3, r3, #3
 1039 03c0 7A6C     		ldr	r2, [r7, #68]
 1040 03c2 5340     		eors	r3, r3, r2
 1041 03c4 7B64     		str	r3, [r7, #68]
 1042 03c6 3A6C     		ldr	r2, [r7, #64]
 1043 03c8 BB6C     		ldr	r3, [r7, #72]
 1044 03ca D31A     		subs	r3, r2, r3
 1045 03cc 3B64     		str	r3, [r7, #64]
 1046 03ce 3A6C     		ldr	r2, [r7, #64]
 1047 03d0 7B6C     		ldr	r3, [r7, #68]
 1048 03d2 D31A     		subs	r3, r2, r3
 1049 03d4 3B64     		str	r3, [r7, #64]
 1050 03d6 7B6C     		ldr	r3, [r7, #68]
 1051 03d8 4FEA8323 		lsl	r3, r3, #10
 1052 03dc 3A6C     		ldr	r2, [r7, #64]
 1053 03de 5340     		eors	r3, r3, r2
 1054 03e0 3B64     		str	r3, [r7, #64]
 1055 03e2 BA6C     		ldr	r2, [r7, #72]
 1056 03e4 7B6C     		ldr	r3, [r7, #68]
 1057 03e6 D31A     		subs	r3, r2, r3
 1058 03e8 BB64     		str	r3, [r7, #72]
 1059 03ea BA6C     		ldr	r2, [r7, #72]
 1060 03ec 3B6C     		ldr	r3, [r7, #64]
 1061 03ee D31A     		subs	r3, r2, r3
 1062 03f0 BB64     		str	r3, [r7, #72]
 1063 03f2 3B6C     		ldr	r3, [r7, #64]
 1064 03f4 4FEAD333 		lsr	r3, r3, #15
 1065 03f8 BA6C     		ldr	r2, [r7, #72]
 1066 03fa 5340     		eors	r3, r3, r2
 1067 03fc BB64     		str	r3, [r7, #72]
 1068 03fe 40F20003 		movw	r3, #:lower16:users
 1069 0402 C0F20003 		movt	r3, #:upper16:users
 1070 0406 1B68     		ldr	r3, [r3, #0]
 1071 0408 9B68     		ldr	r3, [r3, #8]
 1072 040a 5B68     		ldr	r3, [r3, #4]
 1073 040c 03F1FF32 		add	r2, r3, #-1
 1074 0410 BB6C     		ldr	r3, [r7, #72]
 1075 0412 1340     		ands	r3, r3, r2
 1076 0414 FB61     		str	r3, [r7, #28]
 1077              	.LBE3:
 1078 0416 40F20003 		movw	r3, #:lower16:users
 1079 041a C0F20003 		movt	r3, #:upper16:users
 1080 041e 1B68     		ldr	r3, [r3, #0]
 1081 0420 9B68     		ldr	r3, [r3, #8]
 1082 0422 1968     		ldr	r1, [r3, #0]
 1083 0424 FA69     		ldr	r2, [r7, #28]
 1084 0426 1346     		mov	r3, r2
 1085 0428 4FEA4303 		lsl	r3, r3, #1
 1086 042c 9B18     		adds	r3, r3, r2
 1087 042e 4FEA8303 		lsl	r3, r3, #2
 1088 0432 CB18     		adds	r3, r1, r3
 1089 0434 1B68     		ldr	r3, [r3, #0]
 1090 0436 002B     		cmp	r3, #0
 1091 0438 1BD0     		beq	.L18
 1092              		.loc 1 26 0 discriminator 18
 1093 043a 40F20003 		movw	r3, #:lower16:users
 1094 043e C0F20003 		movt	r3, #:upper16:users
 1095 0442 1B68     		ldr	r3, [r3, #0]
 1096 0444 9B68     		ldr	r3, [r3, #8]
 1097 0446 1968     		ldr	r1, [r3, #0]
 1098 0448 FA69     		ldr	r2, [r7, #28]
 1099 044a 1346     		mov	r3, r2
 1100 044c 4FEA4303 		lsl	r3, r3, #1
 1101 0450 9B18     		adds	r3, r3, r2
 1102 0452 4FEA8303 		lsl	r3, r3, #2
 1103 0456 CB18     		adds	r3, r1, r3
 1104 0458 1A68     		ldr	r2, [r3, #0]
 1105 045a 40F20003 		movw	r3, #:lower16:users
 1106 045e C0F20003 		movt	r3, #:upper16:users
 1107 0462 1B68     		ldr	r3, [r3, #0]
 1108 0464 9B68     		ldr	r3, [r3, #8]
 1109 0466 5B69     		ldr	r3, [r3, #20]
 1110 0468 C3F10003 		rsb	r3, r3, #0
 1111 046c D318     		adds	r3, r2, r3
 1112 046e FB64     		str	r3, [r7, #76]
 1113 0470 29E0     		b	.L20
 1114              	.L18:
 1115              		.loc 1 26 0 discriminator 19
 1116 0472 4FF00003 		mov	r3, #0
 1117 0476 FB64     		str	r3, [r7, #76]
 1118 0478 25E0     		b	.L20
 1119              	.L23:
 1120              		.loc 1 26 0 discriminator 26
 1121 047a FB6C     		ldr	r3, [r7, #76]
 1122 047c 1B6A     		ldr	r3, [r3, #32]
 1123 047e 042B     		cmp	r3, #4
 1124 0480 0CD1     		bne	.L21
 1125              		.loc 1 26 0 discriminator 22
 1126 0482 FB6C     		ldr	r3, [r7, #76]
 1127 0484 DB69     		ldr	r3, [r3, #28]
 1128 0486 1846     		mov	r0, r3
 1129 0488 07F10403 		add	r3, r7, #4
 1130 048c 1946     		mov	r1, r3
 1131 048e 4FF00402 		mov	r2, #4
 1132 0492 FFF7FEFF 		bl	memcmp
 1133 0496 0346     		mov	r3, r0
 1134 0498 002B     		cmp	r3, #0
 1135 049a 17D0     		beq	.L2
 1136              	.L21:
 1137              		.loc 1 26 0 discriminator 23
 1138 049c FB6C     		ldr	r3, [r7, #76]
 1139 049e 9B69     		ldr	r3, [r3, #24]
 1140 04a0 002B     		cmp	r3, #0
 1141 04a2 0DD0     		beq	.L22
 1142              		.loc 1 26 0 discriminator 24
 1143 04a4 FB6C     		ldr	r3, [r7, #76]
 1144 04a6 9A69     		ldr	r2, [r3, #24]
 1145 04a8 40F20003 		movw	r3, #:lower16:users
 1146 04ac C0F20003 		movt	r3, #:upper16:users
 1147 04b0 1B68     		ldr	r3, [r3, #0]
 1148 04b2 9B68     		ldr	r3, [r3, #8]
 1149 04b4 5B69     		ldr	r3, [r3, #20]
 1150 04b6 C3F10003 		rsb	r3, r3, #0
 1151 04ba D318     		adds	r3, r2, r3
 1152 04bc FB64     		str	r3, [r7, #76]
 1153 04be 02E0     		b	.L20
 1154              	.L22:
 1155              		.loc 1 26 0 discriminator 25
 1156 04c0 4FF00003 		mov	r3, #0
 1157 04c4 FB64     		str	r3, [r7, #76]
 1158              	.L20:
 1159              		.loc 1 26 0 discriminator 21
 1160 04c6 FB6C     		ldr	r3, [r7, #76]
 1161 04c8 002B     		cmp	r3, #0
 1162 04ca D6D1     		bne	.L23
 1163              	.L2:
 1164              	.LBE2:
  27:src/modbus.c  **** 	// id already in the hash?
  28:src/modbus.c  **** 	if (s == NULL) {
 1165              		.loc 1 28 0 is_stmt 1
 1166 04cc FB6C     		ldr	r3, [r7, #76]
 1167 04ce 002B     		cmp	r3, #0
 1168 04d0 40F09F84 		bne	.L24
  29:src/modbus.c  **** 		s = (struct heapStruct*) malloc(sizeof(struct heapStruct));
 1169              		.loc 1 29 0
 1170 04d4 4FF02800 		mov	r0, #40
 1171 04d8 FFF7FEFF 		bl	malloc
 1172 04dc 0346     		mov	r3, r0
 1173 04de FB64     		str	r3, [r7, #76]
  30:src/modbus.c  **** 		s->key = keyID;
 1174              		.loc 1 30 0
 1175 04e0 7B68     		ldr	r3, [r7, #4]
 1176 04e2 1A46     		mov	r2, r3
 1177 04e4 FB6C     		ldr	r3, [r7, #76]
 1178 04e6 1A60     		str	r2, [r3, #0]
 1179              	.LBB4:
  31:src/modbus.c  **** 		HASH_ADD_INT( users, key, s);
 1180              		.loc 1 31 0
 1181 04e8 FB6C     		ldr	r3, [r7, #76]
 1182 04ea 4FF00002 		mov	r2, #0
 1183 04ee 1A61     		str	r2, [r3, #16]
 1184 04f0 FA6C     		ldr	r2, [r7, #76]
 1185 04f2 FB6C     		ldr	r3, [r7, #76]
 1186 04f4 DA61     		str	r2, [r3, #28]
 1187 04f6 FB6C     		ldr	r3, [r7, #76]
 1188 04f8 4FF00402 		mov	r2, #4
 1189 04fc 1A62     		str	r2, [r3, #32]
 1190 04fe 40F20003 		movw	r3, #:lower16:users
 1191 0502 C0F20003 		movt	r3, #:upper16:users
 1192 0506 1B68     		ldr	r3, [r3, #0]
 1193 0508 002B     		cmp	r3, #0
 1194 050a 40F09280 		bne	.L25
 1195              		.loc 1 31 0 is_stmt 0 discriminator 1
 1196 050e 40F20003 		movw	r3, #:lower16:users
 1197 0512 C0F20003 		movt	r3, #:upper16:users
 1198 0516 FA6C     		ldr	r2, [r7, #76]
 1199 0518 1A60     		str	r2, [r3, #0]
 1200 051a 40F20003 		movw	r3, #:lower16:users
 1201 051e C0F20003 		movt	r3, #:upper16:users
 1202 0522 1B68     		ldr	r3, [r3, #0]
 1203 0524 4FF00002 		mov	r2, #0
 1204 0528 DA60     		str	r2, [r3, #12]
 1205 052a 40F20003 		movw	r3, #:lower16:users
 1206 052e C0F20003 		movt	r3, #:upper16:users
 1207 0532 1C68     		ldr	r4, [r3, #0]
 1208 0534 4FF02C00 		mov	r0, #44
 1209 0538 FFF7FEFF 		bl	malloc
 1210 053c 0346     		mov	r3, r0
 1211 053e A360     		str	r3, [r4, #8]
 1212 0540 40F20003 		movw	r3, #:lower16:users
 1213 0544 C0F20003 		movt	r3, #:upper16:users
 1214 0548 1B68     		ldr	r3, [r3, #0]
 1215 054a 9B68     		ldr	r3, [r3, #8]
 1216 054c 002B     		cmp	r3, #0
 1217 054e 03D1     		bne	.L26
 1218              		.loc 1 31 0 discriminator 3
 1219 0550 4FF0FF30 		mov	r0, #-1
 1220 0554 FFF7FEFF 		bl	exit
 1221              	.L26:
 1222              		.loc 1 31 0 discriminator 4
 1223 0558 40F20003 		movw	r3, #:lower16:users
 1224 055c C0F20003 		movt	r3, #:upper16:users
 1225 0560 1B68     		ldr	r3, [r3, #0]
 1226 0562 9B68     		ldr	r3, [r3, #8]
 1227 0564 4FF02C02 		mov	r2, #44
 1228 0568 1846     		mov	r0, r3
 1229 056a 4FF00001 		mov	r1, #0
 1230 056e 1346     		mov	r3, r2
 1231 0570 1A46     		mov	r2, r3
 1232 0572 FFF7FEFF 		bl	memset
 1233 0576 40F20003 		movw	r3, #:lower16:users
 1234 057a C0F20003 		movt	r3, #:upper16:users
 1235 057e 1B68     		ldr	r3, [r3, #0]
 1236 0580 9A68     		ldr	r2, [r3, #8]
 1237 0582 40F20003 		movw	r3, #:lower16:users
 1238 0586 C0F20003 		movt	r3, #:upper16:users
 1239 058a 1B68     		ldr	r3, [r3, #0]
 1240 058c 03F10803 		add	r3, r3, #8
 1241 0590 1361     		str	r3, [r2, #16]
 1242 0592 40F20003 		movw	r3, #:lower16:users
 1243 0596 C0F20003 		movt	r3, #:upper16:users
 1244 059a 1B68     		ldr	r3, [r3, #0]
 1245 059c 9B68     		ldr	r3, [r3, #8]
 1246 059e 4FF02002 		mov	r2, #32
 1247 05a2 5A60     		str	r2, [r3, #4]
 1248 05a4 40F20003 		movw	r3, #:lower16:users
 1249 05a8 C0F20003 		movt	r3, #:upper16:users
 1250 05ac 1B68     		ldr	r3, [r3, #0]
 1251 05ae 9B68     		ldr	r3, [r3, #8]
 1252 05b0 4FF00502 		mov	r2, #5
 1253 05b4 9A60     		str	r2, [r3, #8]
 1254 05b6 40F20003 		movw	r3, #:lower16:users
 1255 05ba C0F20003 		movt	r3, #:upper16:users
 1256 05be 1B68     		ldr	r3, [r3, #0]
 1257 05c0 9B68     		ldr	r3, [r3, #8]
 1258 05c2 4FF00802 		mov	r2, #8
 1259 05c6 5A61     		str	r2, [r3, #20]
 1260 05c8 40F20003 		movw	r3, #:lower16:users
 1261 05cc C0F20003 		movt	r3, #:upper16:users
 1262 05d0 1B68     		ldr	r3, [r3, #0]
 1263 05d2 9C68     		ldr	r4, [r3, #8]
 1264 05d4 4FF4C070 		mov	r0, #384
 1265 05d8 FFF7FEFF 		bl	malloc
 1266 05dc 0346     		mov	r3, r0
 1267 05de 2360     		str	r3, [r4, #0]
 1268 05e0 40F20003 		movw	r3, #:lower16:users
 1269 05e4 C0F20003 		movt	r3, #:upper16:users
 1270 05e8 1B68     		ldr	r3, [r3, #0]
 1271 05ea 9B68     		ldr	r3, [r3, #8]
 1272 05ec 1B68     		ldr	r3, [r3, #0]
 1273 05ee 002B     		cmp	r3, #0
 1274 05f0 03D1     		bne	.L27
 1275              		.loc 1 31 0 discriminator 5
 1276 05f2 4FF0FF30 		mov	r0, #-1
 1277 05f6 FFF7FEFF 		bl	exit
 1278              	.L27:
 1279              		.loc 1 31 0 discriminator 6
 1280 05fa 40F20003 		movw	r3, #:lower16:users
 1281 05fe C0F20003 		movt	r3, #:upper16:users
 1282 0602 1B68     		ldr	r3, [r3, #0]
 1283 0604 9B68     		ldr	r3, [r3, #8]
 1284 0606 1B68     		ldr	r3, [r3, #0]
 1285 0608 4FF4C072 		mov	r2, #384
 1286 060c 1846     		mov	r0, r3
 1287 060e 4FF00001 		mov	r1, #0
 1288 0612 1346     		mov	r3, r2
 1289 0614 1A46     		mov	r2, r3
 1290 0616 FFF7FEFF 		bl	memset
 1291 061a 40F20003 		movw	r3, #:lower16:users
 1292 061e C0F20003 		movt	r3, #:upper16:users
 1293 0622 1B68     		ldr	r3, [r3, #0]
 1294 0624 9A68     		ldr	r2, [r3, #8]
 1295 0626 41F6E173 		movw	r3, #8161
 1296 062a CAF21103 		movt	r3, 40977
 1297 062e 9362     		str	r3, [r2, #40]
 1298 0630 25E0     		b	.L28
 1299              	.L25:
 1300              		.loc 1 31 0 discriminator 2
 1301 0632 40F20003 		movw	r3, #:lower16:users
 1302 0636 C0F20003 		movt	r3, #:upper16:users
 1303 063a 1B68     		ldr	r3, [r3, #0]
 1304 063c 9B68     		ldr	r3, [r3, #8]
 1305 063e 1B69     		ldr	r3, [r3, #16]
 1306 0640 FA6C     		ldr	r2, [r7, #76]
 1307 0642 9A60     		str	r2, [r3, #8]
 1308 0644 40F20003 		movw	r3, #:lower16:users
 1309 0648 C0F20003 		movt	r3, #:upper16:users
 1310 064c 1B68     		ldr	r3, [r3, #0]
 1311 064e 9B68     		ldr	r3, [r3, #8]
 1312 0650 1A69     		ldr	r2, [r3, #16]
 1313 0652 40F20003 		movw	r3, #:lower16:users
 1314 0656 C0F20003 		movt	r3, #:upper16:users
 1315 065a 1B68     		ldr	r3, [r3, #0]
 1316 065c 9B68     		ldr	r3, [r3, #8]
 1317 065e 5B69     		ldr	r3, [r3, #20]
 1318 0660 C3F10003 		rsb	r3, r3, #0
 1319 0664 D218     		adds	r2, r2, r3
 1320 0666 FB6C     		ldr	r3, [r7, #76]
 1321 0668 DA60     		str	r2, [r3, #12]
 1322 066a 40F20003 		movw	r3, #:lower16:users
 1323 066e C0F20003 		movt	r3, #:upper16:users
 1324 0672 1B68     		ldr	r3, [r3, #0]
 1325 0674 9B68     		ldr	r3, [r3, #8]
 1326 0676 FA6C     		ldr	r2, [r7, #76]
 1327 0678 02F10802 		add	r2, r2, #8
 1328 067c 1A61     		str	r2, [r3, #16]
 1329              	.L28:
 1330              		.loc 1 31 0 discriminator 7
 1331 067e 40F20003 		movw	r3, #:lower16:users
 1332 0682 C0F20003 		movt	r3, #:upper16:users
 1333 0686 1B68     		ldr	r3, [r3, #0]
 1334 0688 9B68     		ldr	r3, [r3, #8]
 1335 068a DA68     		ldr	r2, [r3, #12]
 1336 068c 02F10102 		add	r2, r2, #1
 1337 0690 DA60     		str	r2, [r3, #12]
 1338 0692 40F20003 		movw	r3, #:lower16:users
 1339 0696 C0F20003 		movt	r3, #:upper16:users
 1340 069a 1B68     		ldr	r3, [r3, #0]
 1341 069c 9A68     		ldr	r2, [r3, #8]
 1342 069e FB6C     		ldr	r3, [r7, #76]
 1343 06a0 9A60     		str	r2, [r3, #8]
 1344              	.LBB5:
 1345 06a2 FB6C     		ldr	r3, [r7, #76]
 1346 06a4 BB62     		str	r3, [r7, #40]
 1347 06a6 FA6C     		ldr	r2, [r7, #76]
 1348 06a8 4BF6EF63 		movw	r3, #48879
 1349 06ac CFF6ED63 		movt	r3, 65261
 1350 06b0 5362     		str	r3, [r2, #36]
 1351 06b2 47F6B913 		movw	r3, #31161
 1352 06b6 C9F63763 		movt	r3, 40503
 1353 06ba 3B63     		str	r3, [r7, #48]
 1354 06bc 3B6B     		ldr	r3, [r7, #48]
 1355 06be 7B63     		str	r3, [r7, #52]
 1356 06c0 4FF00403 		mov	r3, #4
 1357 06c4 FB62     		str	r3, [r7, #44]
 1358 06c6 F7E0     		b	.L29
 1359              	.L30:
 1360              		.loc 1 31 0 discriminator 9
 1361 06c8 BB6A     		ldr	r3, [r7, #40]
 1362 06ca 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1363 06cc 1A46     		mov	r2, r3
 1364 06ce BB6A     		ldr	r3, [r7, #40]
 1365 06d0 03F10103 		add	r3, r3, #1
 1366 06d4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1367 06d6 4FEA0323 		lsl	r3, r3, #8
 1368 06da D218     		adds	r2, r2, r3
 1369 06dc BB6A     		ldr	r3, [r7, #40]
 1370 06de 03F10203 		add	r3, r3, #2
 1371 06e2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1372 06e4 4FEA0343 		lsl	r3, r3, #16
 1373 06e8 D218     		adds	r2, r2, r3
 1374 06ea BB6A     		ldr	r3, [r7, #40]
 1375 06ec 03F10303 		add	r3, r3, #3
 1376 06f0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1377 06f2 4FEA0363 		lsl	r3, r3, #24
 1378 06f6 D318     		adds	r3, r2, r3
 1379 06f8 7A6B     		ldr	r2, [r7, #52]
 1380 06fa D318     		adds	r3, r2, r3
 1381 06fc 7B63     		str	r3, [r7, #52]
 1382 06fe BB6A     		ldr	r3, [r7, #40]
 1383 0700 03F10403 		add	r3, r3, #4
 1384 0704 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1385 0706 1A46     		mov	r2, r3
 1386 0708 BB6A     		ldr	r3, [r7, #40]
 1387 070a 03F10503 		add	r3, r3, #5
 1388 070e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1389 0710 4FEA0323 		lsl	r3, r3, #8
 1390 0714 D218     		adds	r2, r2, r3
 1391 0716 BB6A     		ldr	r3, [r7, #40]
 1392 0718 03F10603 		add	r3, r3, #6
 1393 071c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1394 071e 4FEA0343 		lsl	r3, r3, #16
 1395 0722 D218     		adds	r2, r2, r3
 1396 0724 BB6A     		ldr	r3, [r7, #40]
 1397 0726 03F10703 		add	r3, r3, #7
 1398 072a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1399 072c 4FEA0363 		lsl	r3, r3, #24
 1400 0730 D318     		adds	r3, r2, r3
 1401 0732 3A6B     		ldr	r2, [r7, #48]
 1402 0734 D318     		adds	r3, r2, r3
 1403 0736 3B63     		str	r3, [r7, #48]
 1404 0738 FB6C     		ldr	r3, [r7, #76]
 1405 073a 5A6A     		ldr	r2, [r3, #36]
 1406 073c BB6A     		ldr	r3, [r7, #40]
 1407 073e 03F10803 		add	r3, r3, #8
 1408 0742 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1409 0744 1946     		mov	r1, r3
 1410 0746 BB6A     		ldr	r3, [r7, #40]
 1411 0748 03F10903 		add	r3, r3, #9
 1412 074c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1413 074e 4FEA0323 		lsl	r3, r3, #8
 1414 0752 C918     		adds	r1, r1, r3
 1415 0754 BB6A     		ldr	r3, [r7, #40]
 1416 0756 03F10A03 		add	r3, r3, #10
 1417 075a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1418 075c 4FEA0343 		lsl	r3, r3, #16
 1419 0760 C918     		adds	r1, r1, r3
 1420 0762 BB6A     		ldr	r3, [r7, #40]
 1421 0764 03F10B03 		add	r3, r3, #11
 1422 0768 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1423 076a 4FEA0363 		lsl	r3, r3, #24
 1424 076e CB18     		adds	r3, r1, r3
 1425 0770 D218     		adds	r2, r2, r3
 1426 0772 FB6C     		ldr	r3, [r7, #76]
 1427 0774 5A62     		str	r2, [r3, #36]
 1428 0776 7A6B     		ldr	r2, [r7, #52]
 1429 0778 3B6B     		ldr	r3, [r7, #48]
 1430 077a D31A     		subs	r3, r2, r3
 1431 077c 7B63     		str	r3, [r7, #52]
 1432 077e FB6C     		ldr	r3, [r7, #76]
 1433 0780 5B6A     		ldr	r3, [r3, #36]
 1434 0782 7A6B     		ldr	r2, [r7, #52]
 1435 0784 D31A     		subs	r3, r2, r3
 1436 0786 7B63     		str	r3, [r7, #52]
 1437 0788 FB6C     		ldr	r3, [r7, #76]
 1438 078a 5B6A     		ldr	r3, [r3, #36]
 1439 078c 4FEA5333 		lsr	r3, r3, #13
 1440 0790 7A6B     		ldr	r2, [r7, #52]
 1441 0792 5340     		eors	r3, r3, r2
 1442 0794 7B63     		str	r3, [r7, #52]
 1443 0796 FB6C     		ldr	r3, [r7, #76]
 1444 0798 5B6A     		ldr	r3, [r3, #36]
 1445 079a 3A6B     		ldr	r2, [r7, #48]
 1446 079c D31A     		subs	r3, r2, r3
 1447 079e 3B63     		str	r3, [r7, #48]
 1448 07a0 3A6B     		ldr	r2, [r7, #48]
 1449 07a2 7B6B     		ldr	r3, [r7, #52]
 1450 07a4 D31A     		subs	r3, r2, r3
 1451 07a6 3B63     		str	r3, [r7, #48]
 1452 07a8 7B6B     		ldr	r3, [r7, #52]
 1453 07aa 4FEA0323 		lsl	r3, r3, #8
 1454 07ae 3A6B     		ldr	r2, [r7, #48]
 1455 07b0 5340     		eors	r3, r3, r2
 1456 07b2 3B63     		str	r3, [r7, #48]
 1457 07b4 FB6C     		ldr	r3, [r7, #76]
 1458 07b6 5A6A     		ldr	r2, [r3, #36]
 1459 07b8 7B6B     		ldr	r3, [r7, #52]
 1460 07ba D21A     		subs	r2, r2, r3
 1461 07bc FB6C     		ldr	r3, [r7, #76]
 1462 07be 5A62     		str	r2, [r3, #36]
 1463 07c0 FB6C     		ldr	r3, [r7, #76]
 1464 07c2 5A6A     		ldr	r2, [r3, #36]
 1465 07c4 3B6B     		ldr	r3, [r7, #48]
 1466 07c6 D21A     		subs	r2, r2, r3
 1467 07c8 FB6C     		ldr	r3, [r7, #76]
 1468 07ca 5A62     		str	r2, [r3, #36]
 1469 07cc FB6C     		ldr	r3, [r7, #76]
 1470 07ce 5A6A     		ldr	r2, [r3, #36]
 1471 07d0 3B6B     		ldr	r3, [r7, #48]
 1472 07d2 4FEA5333 		lsr	r3, r3, #13
 1473 07d6 5A40     		eors	r2, r2, r3
 1474 07d8 FB6C     		ldr	r3, [r7, #76]
 1475 07da 5A62     		str	r2, [r3, #36]
 1476 07dc 7A6B     		ldr	r2, [r7, #52]
 1477 07de 3B6B     		ldr	r3, [r7, #48]
 1478 07e0 D31A     		subs	r3, r2, r3
 1479 07e2 7B63     		str	r3, [r7, #52]
 1480 07e4 FB6C     		ldr	r3, [r7, #76]
 1481 07e6 5B6A     		ldr	r3, [r3, #36]
 1482 07e8 7A6B     		ldr	r2, [r7, #52]
 1483 07ea D31A     		subs	r3, r2, r3
 1484 07ec 7B63     		str	r3, [r7, #52]
 1485 07ee FB6C     		ldr	r3, [r7, #76]
 1486 07f0 5B6A     		ldr	r3, [r3, #36]
 1487 07f2 4FEA1333 		lsr	r3, r3, #12
 1488 07f6 7A6B     		ldr	r2, [r7, #52]
 1489 07f8 5340     		eors	r3, r3, r2
 1490 07fa 7B63     		str	r3, [r7, #52]
 1491 07fc FB6C     		ldr	r3, [r7, #76]
 1492 07fe 5B6A     		ldr	r3, [r3, #36]
 1493 0800 3A6B     		ldr	r2, [r7, #48]
 1494 0802 D31A     		subs	r3, r2, r3
 1495 0804 3B63     		str	r3, [r7, #48]
 1496 0806 3A6B     		ldr	r2, [r7, #48]
 1497 0808 7B6B     		ldr	r3, [r7, #52]
 1498 080a D31A     		subs	r3, r2, r3
 1499 080c 3B63     		str	r3, [r7, #48]
 1500 080e 7B6B     		ldr	r3, [r7, #52]
 1501 0810 4FEA0343 		lsl	r3, r3, #16
 1502 0814 3A6B     		ldr	r2, [r7, #48]
 1503 0816 5340     		eors	r3, r3, r2
 1504 0818 3B63     		str	r3, [r7, #48]
 1505 081a FB6C     		ldr	r3, [r7, #76]
 1506 081c 5A6A     		ldr	r2, [r3, #36]
 1507 081e 7B6B     		ldr	r3, [r7, #52]
 1508 0820 D21A     		subs	r2, r2, r3
 1509 0822 FB6C     		ldr	r3, [r7, #76]
 1510 0824 5A62     		str	r2, [r3, #36]
 1511 0826 FB6C     		ldr	r3, [r7, #76]
 1512 0828 5A6A     		ldr	r2, [r3, #36]
 1513 082a 3B6B     		ldr	r3, [r7, #48]
 1514 082c D21A     		subs	r2, r2, r3
 1515 082e FB6C     		ldr	r3, [r7, #76]
 1516 0830 5A62     		str	r2, [r3, #36]
 1517 0832 FB6C     		ldr	r3, [r7, #76]
 1518 0834 5A6A     		ldr	r2, [r3, #36]
 1519 0836 3B6B     		ldr	r3, [r7, #48]
 1520 0838 4FEA5313 		lsr	r3, r3, #5
 1521 083c 5A40     		eors	r2, r2, r3
 1522 083e FB6C     		ldr	r3, [r7, #76]
 1523 0840 5A62     		str	r2, [r3, #36]
 1524 0842 7A6B     		ldr	r2, [r7, #52]
 1525 0844 3B6B     		ldr	r3, [r7, #48]
 1526 0846 D31A     		subs	r3, r2, r3
 1527 0848 7B63     		str	r3, [r7, #52]
 1528 084a FB6C     		ldr	r3, [r7, #76]
 1529 084c 5B6A     		ldr	r3, [r3, #36]
 1530 084e 7A6B     		ldr	r2, [r7, #52]
 1531 0850 D31A     		subs	r3, r2, r3
 1532 0852 7B63     		str	r3, [r7, #52]
 1533 0854 FB6C     		ldr	r3, [r7, #76]
 1534 0856 5B6A     		ldr	r3, [r3, #36]
 1535 0858 4FEAD303 		lsr	r3, r3, #3
 1536 085c 7A6B     		ldr	r2, [r7, #52]
 1537 085e 5340     		eors	r3, r3, r2
 1538 0860 7B63     		str	r3, [r7, #52]
 1539 0862 FB6C     		ldr	r3, [r7, #76]
 1540 0864 5B6A     		ldr	r3, [r3, #36]
 1541 0866 3A6B     		ldr	r2, [r7, #48]
 1542 0868 D31A     		subs	r3, r2, r3
 1543 086a 3B63     		str	r3, [r7, #48]
 1544 086c 3A6B     		ldr	r2, [r7, #48]
 1545 086e 7B6B     		ldr	r3, [r7, #52]
 1546 0870 D31A     		subs	r3, r2, r3
 1547 0872 3B63     		str	r3, [r7, #48]
 1548 0874 7B6B     		ldr	r3, [r7, #52]
 1549 0876 4FEA8323 		lsl	r3, r3, #10
 1550 087a 3A6B     		ldr	r2, [r7, #48]
 1551 087c 5340     		eors	r3, r3, r2
 1552 087e 3B63     		str	r3, [r7, #48]
 1553 0880 FB6C     		ldr	r3, [r7, #76]
 1554 0882 5A6A     		ldr	r2, [r3, #36]
 1555 0884 7B6B     		ldr	r3, [r7, #52]
 1556 0886 D21A     		subs	r2, r2, r3
 1557 0888 FB6C     		ldr	r3, [r7, #76]
 1558 088a 5A62     		str	r2, [r3, #36]
 1559 088c FB6C     		ldr	r3, [r7, #76]
 1560 088e 5A6A     		ldr	r2, [r3, #36]
 1561 0890 3B6B     		ldr	r3, [r7, #48]
 1562 0892 D21A     		subs	r2, r2, r3
 1563 0894 FB6C     		ldr	r3, [r7, #76]
 1564 0896 5A62     		str	r2, [r3, #36]
 1565 0898 FB6C     		ldr	r3, [r7, #76]
 1566 089a 5A6A     		ldr	r2, [r3, #36]
 1567 089c 3B6B     		ldr	r3, [r7, #48]
 1568 089e 4FEAD333 		lsr	r3, r3, #15
 1569 08a2 5A40     		eors	r2, r2, r3
 1570 08a4 FB6C     		ldr	r3, [r7, #76]
 1571 08a6 5A62     		str	r2, [r3, #36]
 1572 08a8 BB6A     		ldr	r3, [r7, #40]
 1573 08aa 03F10C03 		add	r3, r3, #12
 1574 08ae BB62     		str	r3, [r7, #40]
 1575 08b0 FB6A     		ldr	r3, [r7, #44]
 1576 08b2 A3F10C03 		sub	r3, r3, #12
 1577 08b6 FB62     		str	r3, [r7, #44]
 1578              	.L29:
 1579              		.loc 1 31 0 discriminator 8
 1580 08b8 FB6A     		ldr	r3, [r7, #44]
 1581 08ba 0B2B     		cmp	r3, #11
 1582 08bc 3FF604AF 		bhi	.L30
 1583              		.loc 1 31 0 discriminator 10
 1584 08c0 FB6C     		ldr	r3, [r7, #76]
 1585 08c2 5B6A     		ldr	r3, [r3, #36]
 1586 08c4 03F10402 		add	r2, r3, #4
 1587 08c8 FB6C     		ldr	r3, [r7, #76]
 1588 08ca 5A62     		str	r2, [r3, #36]
 1589 08cc FB6A     		ldr	r3, [r7, #44]
 1590 08ce 03F1FF33 		add	r3, r3, #-1
 1591 08d2 0A2B     		cmp	r3, #10
 1592 08d4 7BD8     		bhi	.L31
 1593 08d6 01A2     		adr	r2, .L43
 1594 08d8 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1595              		.align	2
 1596              	.L43:
 1597 08dc C5090000 		.word	.L32+1
 1598 08e0 B3090000 		.word	.L33+1
 1599 08e4 A1090000 		.word	.L34+1
 1600 08e8 8F090000 		.word	.L35+1
 1601 08ec 81090000 		.word	.L36+1
 1602 08f0 6F090000 		.word	.L37+1
 1603 08f4 5D090000 		.word	.L38+1
 1604 08f8 4B090000 		.word	.L39+1
 1605 08fc 35090000 		.word	.L40+1
 1606 0900 1F090000 		.word	.L41+1
 1607 0904 09090000 		.word	.L42+1
 1608              	.L42:
 1609              		.loc 1 31 0 discriminator 22
 1610 0908 FB6C     		ldr	r3, [r7, #76]
 1611 090a 5A6A     		ldr	r2, [r3, #36]
 1612 090c BB6A     		ldr	r3, [r7, #40]
 1613 090e 03F10A03 		add	r3, r3, #10
 1614 0912 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1615 0914 4FEA0363 		lsl	r3, r3, #24
 1616 0918 D218     		adds	r2, r2, r3
 1617 091a FB6C     		ldr	r3, [r7, #76]
 1618 091c 5A62     		str	r2, [r3, #36]
 1619              	.L41:
 1620              		.loc 1 31 0 discriminator 21
 1621 091e FB6C     		ldr	r3, [r7, #76]
 1622 0920 5A6A     		ldr	r2, [r3, #36]
 1623 0922 BB6A     		ldr	r3, [r7, #40]
 1624 0924 03F10903 		add	r3, r3, #9
 1625 0928 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1626 092a 4FEA0343 		lsl	r3, r3, #16
 1627 092e D218     		adds	r2, r2, r3
 1628 0930 FB6C     		ldr	r3, [r7, #76]
 1629 0932 5A62     		str	r2, [r3, #36]
 1630              	.L40:
 1631              		.loc 1 31 0 discriminator 20
 1632 0934 FB6C     		ldr	r3, [r7, #76]
 1633 0936 5A6A     		ldr	r2, [r3, #36]
 1634 0938 BB6A     		ldr	r3, [r7, #40]
 1635 093a 03F10803 		add	r3, r3, #8
 1636 093e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1637 0940 4FEA0323 		lsl	r3, r3, #8
 1638 0944 D218     		adds	r2, r2, r3
 1639 0946 FB6C     		ldr	r3, [r7, #76]
 1640 0948 5A62     		str	r2, [r3, #36]
 1641              	.L39:
 1642              		.loc 1 31 0 discriminator 19
 1643 094a BB6A     		ldr	r3, [r7, #40]
 1644 094c 03F10703 		add	r3, r3, #7
 1645 0950 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1646 0952 4FEA0363 		lsl	r3, r3, #24
 1647 0956 3A6B     		ldr	r2, [r7, #48]
 1648 0958 D318     		adds	r3, r2, r3
 1649 095a 3B63     		str	r3, [r7, #48]
 1650              	.L38:
 1651              		.loc 1 31 0 discriminator 18
 1652 095c BB6A     		ldr	r3, [r7, #40]
 1653 095e 03F10603 		add	r3, r3, #6
 1654 0962 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1655 0964 4FEA0343 		lsl	r3, r3, #16
 1656 0968 3A6B     		ldr	r2, [r7, #48]
 1657 096a D318     		adds	r3, r2, r3
 1658 096c 3B63     		str	r3, [r7, #48]
 1659              	.L37:
 1660              		.loc 1 31 0 discriminator 17
 1661 096e BB6A     		ldr	r3, [r7, #40]
 1662 0970 03F10503 		add	r3, r3, #5
 1663 0974 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1664 0976 4FEA0323 		lsl	r3, r3, #8
 1665 097a 3A6B     		ldr	r2, [r7, #48]
 1666 097c D318     		adds	r3, r2, r3
 1667 097e 3B63     		str	r3, [r7, #48]
 1668              	.L36:
 1669              		.loc 1 31 0 discriminator 16
 1670 0980 BB6A     		ldr	r3, [r7, #40]
 1671 0982 03F10403 		add	r3, r3, #4
 1672 0986 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1673 0988 3A6B     		ldr	r2, [r7, #48]
 1674 098a D318     		adds	r3, r2, r3
 1675 098c 3B63     		str	r3, [r7, #48]
 1676              	.L35:
 1677              		.loc 1 31 0 discriminator 15
 1678 098e BB6A     		ldr	r3, [r7, #40]
 1679 0990 03F10303 		add	r3, r3, #3
 1680 0994 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1681 0996 4FEA0363 		lsl	r3, r3, #24
 1682 099a 7A6B     		ldr	r2, [r7, #52]
 1683 099c D318     		adds	r3, r2, r3
 1684 099e 7B63     		str	r3, [r7, #52]
 1685              	.L34:
 1686              		.loc 1 31 0 discriminator 14
 1687 09a0 BB6A     		ldr	r3, [r7, #40]
 1688 09a2 03F10203 		add	r3, r3, #2
 1689 09a6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1690 09a8 4FEA0343 		lsl	r3, r3, #16
 1691 09ac 7A6B     		ldr	r2, [r7, #52]
 1692 09ae D318     		adds	r3, r2, r3
 1693 09b0 7B63     		str	r3, [r7, #52]
 1694              	.L33:
 1695              		.loc 1 31 0 discriminator 13
 1696 09b2 BB6A     		ldr	r3, [r7, #40]
 1697 09b4 03F10103 		add	r3, r3, #1
 1698 09b8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1699 09ba 4FEA0323 		lsl	r3, r3, #8
 1700 09be 7A6B     		ldr	r2, [r7, #52]
 1701 09c0 D318     		adds	r3, r2, r3
 1702 09c2 7B63     		str	r3, [r7, #52]
 1703              	.L32:
 1704              		.loc 1 31 0 discriminator 12
 1705 09c4 BB6A     		ldr	r3, [r7, #40]
 1706 09c6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1707 09c8 7A6B     		ldr	r2, [r7, #52]
 1708 09ca D318     		adds	r3, r2, r3
 1709 09cc 7B63     		str	r3, [r7, #52]
 1710              	.L31:
 1711              		.loc 1 31 0 discriminator 11
 1712 09ce 7A6B     		ldr	r2, [r7, #52]
 1713 09d0 3B6B     		ldr	r3, [r7, #48]
 1714 09d2 D31A     		subs	r3, r2, r3
 1715 09d4 7B63     		str	r3, [r7, #52]
 1716 09d6 FB6C     		ldr	r3, [r7, #76]
 1717 09d8 5B6A     		ldr	r3, [r3, #36]
 1718 09da 7A6B     		ldr	r2, [r7, #52]
 1719 09dc D31A     		subs	r3, r2, r3
 1720 09de 7B63     		str	r3, [r7, #52]
 1721 09e0 FB6C     		ldr	r3, [r7, #76]
 1722 09e2 5B6A     		ldr	r3, [r3, #36]
 1723 09e4 4FEA5333 		lsr	r3, r3, #13
 1724 09e8 7A6B     		ldr	r2, [r7, #52]
 1725 09ea 5340     		eors	r3, r3, r2
 1726 09ec 7B63     		str	r3, [r7, #52]
 1727 09ee FB6C     		ldr	r3, [r7, #76]
 1728 09f0 5B6A     		ldr	r3, [r3, #36]
 1729 09f2 3A6B     		ldr	r2, [r7, #48]
 1730 09f4 D31A     		subs	r3, r2, r3
 1731 09f6 3B63     		str	r3, [r7, #48]
 1732 09f8 3A6B     		ldr	r2, [r7, #48]
 1733 09fa 7B6B     		ldr	r3, [r7, #52]
 1734 09fc D31A     		subs	r3, r2, r3
 1735 09fe 3B63     		str	r3, [r7, #48]
 1736 0a00 7B6B     		ldr	r3, [r7, #52]
 1737 0a02 4FEA0323 		lsl	r3, r3, #8
 1738 0a06 3A6B     		ldr	r2, [r7, #48]
 1739 0a08 5340     		eors	r3, r3, r2
 1740 0a0a 3B63     		str	r3, [r7, #48]
 1741 0a0c FB6C     		ldr	r3, [r7, #76]
 1742 0a0e 5A6A     		ldr	r2, [r3, #36]
 1743 0a10 7B6B     		ldr	r3, [r7, #52]
 1744 0a12 D21A     		subs	r2, r2, r3
 1745 0a14 FB6C     		ldr	r3, [r7, #76]
 1746 0a16 5A62     		str	r2, [r3, #36]
 1747 0a18 FB6C     		ldr	r3, [r7, #76]
 1748 0a1a 5A6A     		ldr	r2, [r3, #36]
 1749 0a1c 3B6B     		ldr	r3, [r7, #48]
 1750 0a1e D21A     		subs	r2, r2, r3
 1751 0a20 FB6C     		ldr	r3, [r7, #76]
 1752 0a22 5A62     		str	r2, [r3, #36]
 1753 0a24 FB6C     		ldr	r3, [r7, #76]
 1754 0a26 5A6A     		ldr	r2, [r3, #36]
 1755 0a28 3B6B     		ldr	r3, [r7, #48]
 1756 0a2a 4FEA5333 		lsr	r3, r3, #13
 1757 0a2e 5A40     		eors	r2, r2, r3
 1758 0a30 FB6C     		ldr	r3, [r7, #76]
 1759 0a32 5A62     		str	r2, [r3, #36]
 1760 0a34 7A6B     		ldr	r2, [r7, #52]
 1761 0a36 3B6B     		ldr	r3, [r7, #48]
 1762 0a38 D31A     		subs	r3, r2, r3
 1763 0a3a 7B63     		str	r3, [r7, #52]
 1764 0a3c FB6C     		ldr	r3, [r7, #76]
 1765 0a3e 5B6A     		ldr	r3, [r3, #36]
 1766 0a40 7A6B     		ldr	r2, [r7, #52]
 1767 0a42 D31A     		subs	r3, r2, r3
 1768 0a44 7B63     		str	r3, [r7, #52]
 1769 0a46 FB6C     		ldr	r3, [r7, #76]
 1770 0a48 5B6A     		ldr	r3, [r3, #36]
 1771 0a4a 4FEA1333 		lsr	r3, r3, #12
 1772 0a4e 7A6B     		ldr	r2, [r7, #52]
 1773 0a50 5340     		eors	r3, r3, r2
 1774 0a52 7B63     		str	r3, [r7, #52]
 1775 0a54 FB6C     		ldr	r3, [r7, #76]
 1776 0a56 5B6A     		ldr	r3, [r3, #36]
 1777 0a58 3A6B     		ldr	r2, [r7, #48]
 1778 0a5a D31A     		subs	r3, r2, r3
 1779 0a5c 3B63     		str	r3, [r7, #48]
 1780 0a5e 3A6B     		ldr	r2, [r7, #48]
 1781 0a60 7B6B     		ldr	r3, [r7, #52]
 1782 0a62 D31A     		subs	r3, r2, r3
 1783 0a64 3B63     		str	r3, [r7, #48]
 1784 0a66 7B6B     		ldr	r3, [r7, #52]
 1785 0a68 4FEA0343 		lsl	r3, r3, #16
 1786 0a6c 3A6B     		ldr	r2, [r7, #48]
 1787 0a6e 5340     		eors	r3, r3, r2
 1788 0a70 3B63     		str	r3, [r7, #48]
 1789 0a72 FB6C     		ldr	r3, [r7, #76]
 1790 0a74 5A6A     		ldr	r2, [r3, #36]
 1791 0a76 7B6B     		ldr	r3, [r7, #52]
 1792 0a78 D21A     		subs	r2, r2, r3
 1793 0a7a FB6C     		ldr	r3, [r7, #76]
 1794 0a7c 5A62     		str	r2, [r3, #36]
 1795 0a7e FB6C     		ldr	r3, [r7, #76]
 1796 0a80 5A6A     		ldr	r2, [r3, #36]
 1797 0a82 3B6B     		ldr	r3, [r7, #48]
 1798 0a84 D21A     		subs	r2, r2, r3
 1799 0a86 FB6C     		ldr	r3, [r7, #76]
 1800 0a88 5A62     		str	r2, [r3, #36]
 1801 0a8a FB6C     		ldr	r3, [r7, #76]
 1802 0a8c 5A6A     		ldr	r2, [r3, #36]
 1803 0a8e 3B6B     		ldr	r3, [r7, #48]
 1804 0a90 4FEA5313 		lsr	r3, r3, #5
 1805 0a94 5A40     		eors	r2, r2, r3
 1806 0a96 FB6C     		ldr	r3, [r7, #76]
 1807 0a98 5A62     		str	r2, [r3, #36]
 1808 0a9a 7A6B     		ldr	r2, [r7, #52]
 1809 0a9c 3B6B     		ldr	r3, [r7, #48]
 1810 0a9e D31A     		subs	r3, r2, r3
 1811 0aa0 7B63     		str	r3, [r7, #52]
 1812 0aa2 FB6C     		ldr	r3, [r7, #76]
 1813 0aa4 5B6A     		ldr	r3, [r3, #36]
 1814 0aa6 7A6B     		ldr	r2, [r7, #52]
 1815 0aa8 D31A     		subs	r3, r2, r3
 1816 0aaa 7B63     		str	r3, [r7, #52]
 1817 0aac FB6C     		ldr	r3, [r7, #76]
 1818 0aae 5B6A     		ldr	r3, [r3, #36]
 1819 0ab0 4FEAD303 		lsr	r3, r3, #3
 1820 0ab4 7A6B     		ldr	r2, [r7, #52]
 1821 0ab6 5340     		eors	r3, r3, r2
 1822 0ab8 7B63     		str	r3, [r7, #52]
 1823 0aba FB6C     		ldr	r3, [r7, #76]
 1824 0abc 5B6A     		ldr	r3, [r3, #36]
 1825 0abe 3A6B     		ldr	r2, [r7, #48]
 1826 0ac0 D31A     		subs	r3, r2, r3
 1827 0ac2 3B63     		str	r3, [r7, #48]
 1828 0ac4 3A6B     		ldr	r2, [r7, #48]
 1829 0ac6 7B6B     		ldr	r3, [r7, #52]
 1830 0ac8 D31A     		subs	r3, r2, r3
 1831 0aca 3B63     		str	r3, [r7, #48]
 1832 0acc 7B6B     		ldr	r3, [r7, #52]
 1833 0ace 4FEA8323 		lsl	r3, r3, #10
 1834 0ad2 3A6B     		ldr	r2, [r7, #48]
 1835 0ad4 5340     		eors	r3, r3, r2
 1836 0ad6 3B63     		str	r3, [r7, #48]
 1837 0ad8 FB6C     		ldr	r3, [r7, #76]
 1838 0ada 5A6A     		ldr	r2, [r3, #36]
 1839 0adc 7B6B     		ldr	r3, [r7, #52]
 1840 0ade D21A     		subs	r2, r2, r3
 1841 0ae0 FB6C     		ldr	r3, [r7, #76]
 1842 0ae2 5A62     		str	r2, [r3, #36]
 1843 0ae4 FB6C     		ldr	r3, [r7, #76]
 1844 0ae6 5A6A     		ldr	r2, [r3, #36]
 1845 0ae8 3B6B     		ldr	r3, [r7, #48]
 1846 0aea D21A     		subs	r2, r2, r3
 1847 0aec FB6C     		ldr	r3, [r7, #76]
 1848 0aee 5A62     		str	r2, [r3, #36]
 1849 0af0 FB6C     		ldr	r3, [r7, #76]
 1850 0af2 5A6A     		ldr	r2, [r3, #36]
 1851 0af4 3B6B     		ldr	r3, [r7, #48]
 1852 0af6 4FEAD333 		lsr	r3, r3, #15
 1853 0afa 5A40     		eors	r2, r2, r3
 1854 0afc FB6C     		ldr	r3, [r7, #76]
 1855 0afe 5A62     		str	r2, [r3, #36]
 1856 0b00 FB6C     		ldr	r3, [r7, #76]
 1857 0b02 5A6A     		ldr	r2, [r3, #36]
 1858 0b04 40F20003 		movw	r3, #:lower16:users
 1859 0b08 C0F20003 		movt	r3, #:upper16:users
 1860 0b0c 1B68     		ldr	r3, [r3, #0]
 1861 0b0e 9B68     		ldr	r3, [r3, #8]
 1862 0b10 5B68     		ldr	r3, [r3, #4]
 1863 0b12 03F1FF33 		add	r3, r3, #-1
 1864 0b16 1340     		ands	r3, r3, r2
 1865 0b18 BB61     		str	r3, [r7, #24]
 1866              	.LBE5:
 1867 0b1a 40F20003 		movw	r3, #:lower16:users
 1868 0b1e C0F20003 		movt	r3, #:upper16:users
 1869 0b22 1B68     		ldr	r3, [r3, #0]
 1870 0b24 9B68     		ldr	r3, [r3, #8]
 1871 0b26 1968     		ldr	r1, [r3, #0]
 1872 0b28 BA69     		ldr	r2, [r7, #24]
 1873 0b2a 1346     		mov	r3, r2
 1874 0b2c 4FEA4303 		lsl	r3, r3, #1
 1875 0b30 9B18     		adds	r3, r3, r2
 1876 0b32 4FEA8303 		lsl	r3, r3, #2
 1877 0b36 CB18     		adds	r3, r1, r3
 1878 0b38 5A68     		ldr	r2, [r3, #4]
 1879 0b3a 02F10102 		add	r2, r2, #1
 1880 0b3e 5A60     		str	r2, [r3, #4]
 1881 0b40 40F20003 		movw	r3, #:lower16:users
 1882 0b44 C0F20003 		movt	r3, #:upper16:users
 1883 0b48 1B68     		ldr	r3, [r3, #0]
 1884 0b4a 9B68     		ldr	r3, [r3, #8]
 1885 0b4c 1968     		ldr	r1, [r3, #0]
 1886 0b4e BA69     		ldr	r2, [r7, #24]
 1887 0b50 1346     		mov	r3, r2
 1888 0b52 4FEA4303 		lsl	r3, r3, #1
 1889 0b56 9B18     		adds	r3, r3, r2
 1890 0b58 4FEA8303 		lsl	r3, r3, #2
 1891 0b5c CB18     		adds	r3, r1, r3
 1892 0b5e 1A68     		ldr	r2, [r3, #0]
 1893 0b60 FB6C     		ldr	r3, [r7, #76]
 1894 0b62 9A61     		str	r2, [r3, #24]
 1895 0b64 FB6C     		ldr	r3, [r7, #76]
 1896 0b66 4FF00002 		mov	r2, #0
 1897 0b6a 5A61     		str	r2, [r3, #20]
 1898 0b6c 40F20003 		movw	r3, #:lower16:users
 1899 0b70 C0F20003 		movt	r3, #:upper16:users
 1900 0b74 1B68     		ldr	r3, [r3, #0]
 1901 0b76 9B68     		ldr	r3, [r3, #8]
 1902 0b78 1968     		ldr	r1, [r3, #0]
 1903 0b7a BA69     		ldr	r2, [r7, #24]
 1904 0b7c 1346     		mov	r3, r2
 1905 0b7e 4FEA4303 		lsl	r3, r3, #1
 1906 0b82 9B18     		adds	r3, r3, r2
 1907 0b84 4FEA8303 		lsl	r3, r3, #2
 1908 0b88 CB18     		adds	r3, r1, r3
 1909 0b8a 1B68     		ldr	r3, [r3, #0]
 1910 0b8c 002B     		cmp	r3, #0
 1911 0b8e 13D0     		beq	.L44
 1912              		.loc 1 31 0 discriminator 23
 1913 0b90 40F20003 		movw	r3, #:lower16:users
 1914 0b94 C0F20003 		movt	r3, #:upper16:users
 1915 0b98 1B68     		ldr	r3, [r3, #0]
 1916 0b9a 9B68     		ldr	r3, [r3, #8]
 1917 0b9c 1968     		ldr	r1, [r3, #0]
 1918 0b9e BA69     		ldr	r2, [r7, #24]
 1919 0ba0 1346     		mov	r3, r2
 1920 0ba2 4FEA4303 		lsl	r3, r3, #1
 1921 0ba6 9B18     		adds	r3, r3, r2
 1922 0ba8 4FEA8303 		lsl	r3, r3, #2
 1923 0bac CB18     		adds	r3, r1, r3
 1924 0bae 1B68     		ldr	r3, [r3, #0]
 1925 0bb0 FA6C     		ldr	r2, [r7, #76]
 1926 0bb2 02F10802 		add	r2, r2, #8
 1927 0bb6 DA60     		str	r2, [r3, #12]
 1928              	.L44:
 1929              		.loc 1 31 0 discriminator 24
 1930 0bb8 40F20003 		movw	r3, #:lower16:users
 1931 0bbc C0F20003 		movt	r3, #:upper16:users
 1932 0bc0 1B68     		ldr	r3, [r3, #0]
 1933 0bc2 9B68     		ldr	r3, [r3, #8]
 1934 0bc4 1968     		ldr	r1, [r3, #0]
 1935 0bc6 BA69     		ldr	r2, [r7, #24]
 1936 0bc8 1346     		mov	r3, r2
 1937 0bca 4FEA4303 		lsl	r3, r3, #1
 1938 0bce 9B18     		adds	r3, r3, r2
 1939 0bd0 4FEA8303 		lsl	r3, r3, #2
 1940 0bd4 CB18     		adds	r3, r1, r3
 1941 0bd6 FA6C     		ldr	r2, [r7, #76]
 1942 0bd8 02F10802 		add	r2, r2, #8
 1943 0bdc 1A60     		str	r2, [r3, #0]
 1944 0bde 40F20003 		movw	r3, #:lower16:users
 1945 0be2 C0F20003 		movt	r3, #:upper16:users
 1946 0be6 1B68     		ldr	r3, [r3, #0]
 1947 0be8 9B68     		ldr	r3, [r3, #8]
 1948 0bea 1968     		ldr	r1, [r3, #0]
 1949 0bec BA69     		ldr	r2, [r7, #24]
 1950 0bee 1346     		mov	r3, r2
 1951 0bf0 4FEA4303 		lsl	r3, r3, #1
 1952 0bf4 9B18     		adds	r3, r3, r2
 1953 0bf6 4FEA8303 		lsl	r3, r3, #2
 1954 0bfa CB18     		adds	r3, r1, r3
 1955 0bfc 5968     		ldr	r1, [r3, #4]
 1956 0bfe 40F20003 		movw	r3, #:lower16:users
 1957 0c02 C0F20003 		movt	r3, #:upper16:users
 1958 0c06 1B68     		ldr	r3, [r3, #0]
 1959 0c08 9B68     		ldr	r3, [r3, #8]
 1960 0c0a 1868     		ldr	r0, [r3, #0]
 1961 0c0c BA69     		ldr	r2, [r7, #24]
 1962 0c0e 1346     		mov	r3, r2
 1963 0c10 4FEA4303 		lsl	r3, r3, #1
 1964 0c14 9B18     		adds	r3, r3, r2
 1965 0c16 4FEA8303 		lsl	r3, r3, #2
 1966 0c1a C318     		adds	r3, r0, r3
 1967 0c1c 9B68     		ldr	r3, [r3, #8]
 1968 0c1e 03F10102 		add	r2, r3, #1
 1969 0c22 1346     		mov	r3, r2
 1970 0c24 4FEA8303 		lsl	r3, r3, #2
 1971 0c28 9B18     		adds	r3, r3, r2
 1972 0c2a 4FEA4303 		lsl	r3, r3, #1
 1973 0c2e 9942     		cmp	r1, r3
 1974 0c30 C0F0EF80 		bcc	.L24
 1975              		.loc 1 31 0 discriminator 25
 1976 0c34 FB6C     		ldr	r3, [r7, #76]
 1977 0c36 9B68     		ldr	r3, [r3, #8]
 1978 0c38 5B6A     		ldr	r3, [r3, #36]
 1979 0c3a 012B     		cmp	r3, #1
 1980 0c3c 00F0E980 		beq	.L24
 1981              	.LBB6:
 1982              		.loc 1 31 0 discriminator 26
 1983 0c40 FB6C     		ldr	r3, [r7, #76]
 1984 0c42 9B68     		ldr	r3, [r3, #8]
 1985 0c44 5A68     		ldr	r2, [r3, #4]
 1986 0c46 1346     		mov	r3, r2
 1987 0c48 4FEA4303 		lsl	r3, r3, #1
 1988 0c4c 9B18     		adds	r3, r3, r2
 1989 0c4e 4FEAC303 		lsl	r3, r3, #3
 1990 0c52 1846     		mov	r0, r3
 1991 0c54 FFF7FEFF 		bl	malloc
 1992 0c58 0346     		mov	r3, r0
 1993 0c5a 7B61     		str	r3, [r7, #20]
 1994 0c5c 7B69     		ldr	r3, [r7, #20]
 1995 0c5e 002B     		cmp	r3, #0
 1996 0c60 03D1     		bne	.L45
 1997              		.loc 1 31 0 discriminator 27
 1998 0c62 4FF0FF30 		mov	r0, #-1
 1999 0c66 FFF7FEFF 		bl	exit
 2000              	.L45:
 2001              		.loc 1 31 0 discriminator 28
 2002 0c6a FB6C     		ldr	r3, [r7, #76]
 2003 0c6c 9B68     		ldr	r3, [r3, #8]
 2004 0c6e 5A68     		ldr	r2, [r3, #4]
 2005 0c70 1346     		mov	r3, r2
 2006 0c72 4FEA4303 		lsl	r3, r3, #1
 2007 0c76 9B18     		adds	r3, r3, r2
 2008 0c78 4FEAC303 		lsl	r3, r3, #3
 2009 0c7c 7A69     		ldr	r2, [r7, #20]
 2010 0c7e 1046     		mov	r0, r2
 2011 0c80 4FF00001 		mov	r1, #0
 2012 0c84 1A46     		mov	r2, r3
 2013 0c86 FFF7FEFF 		bl	memset
 2014 0c8a FB6C     		ldr	r3, [r7, #76]
 2015 0c8c 9A68     		ldr	r2, [r3, #8]
 2016 0c8e FB6C     		ldr	r3, [r7, #76]
 2017 0c90 9B68     		ldr	r3, [r3, #8]
 2018 0c92 D968     		ldr	r1, [r3, #12]
 2019 0c94 FB6C     		ldr	r3, [r7, #76]
 2020 0c96 9B68     		ldr	r3, [r3, #8]
 2021 0c98 9B68     		ldr	r3, [r3, #8]
 2022 0c9a 03F10103 		add	r3, r3, #1
 2023 0c9e 21FA03F1 		lsr	r1, r1, r3
 2024 0ca2 FB6C     		ldr	r3, [r7, #76]
 2025 0ca4 9B68     		ldr	r3, [r3, #8]
 2026 0ca6 D868     		ldr	r0, [r3, #12]
 2027 0ca8 FB6C     		ldr	r3, [r7, #76]
 2028 0caa 9B68     		ldr	r3, [r3, #8]
 2029 0cac 5B68     		ldr	r3, [r3, #4]
 2030 0cae 4FEA4303 		lsl	r3, r3, #1
 2031 0cb2 03F1FF33 		add	r3, r3, #-1
 2032 0cb6 0340     		ands	r3, r3, r0
 2033 0cb8 002B     		cmp	r3, #0
 2034 0cba 02D0     		beq	.L46
 2035              		.loc 1 31 0 discriminator 29
 2036 0cbc 4FF00103 		mov	r3, #1
 2037 0cc0 01E0     		b	.L47
 2038              	.L46:
 2039              		.loc 1 31 0 discriminator 30
 2040 0cc2 4FF00003 		mov	r3, #0
 2041              	.L47:
 2042              		.loc 1 31 0 discriminator 31
 2043 0cc6 CB18     		adds	r3, r1, r3
 2044 0cc8 9361     		str	r3, [r2, #24]
 2045 0cca FB6C     		ldr	r3, [r7, #76]
 2046 0ccc 9B68     		ldr	r3, [r3, #8]
 2047 0cce 4FF00002 		mov	r2, #0
 2048 0cd2 DA61     		str	r2, [r3, #28]
 2049 0cd4 4FF00003 		mov	r3, #0
 2050 0cd8 7B62     		str	r3, [r7, #36]
 2051 0cda 5DE0     		b	.L48
 2052              	.L53:
 2053              		.loc 1 31 0 discriminator 40
 2054 0cdc FB6C     		ldr	r3, [r7, #76]
 2055 0cde 9B68     		ldr	r3, [r3, #8]
 2056 0ce0 1968     		ldr	r1, [r3, #0]
 2057 0ce2 7A6A     		ldr	r2, [r7, #36]
 2058 0ce4 1346     		mov	r3, r2
 2059 0ce6 4FEA4303 		lsl	r3, r3, #1
 2060 0cea 9B18     		adds	r3, r3, r2
 2061 0cec 4FEA8303 		lsl	r3, r3, #2
 2062 0cf0 CB18     		adds	r3, r1, r3
 2063 0cf2 1B68     		ldr	r3, [r3, #0]
 2064 0cf4 3B62     		str	r3, [r7, #32]
 2065 0cf6 48E0     		b	.L49
 2066              	.L52:
 2067              		.loc 1 31 0 discriminator 38
 2068 0cf8 3B6A     		ldr	r3, [r7, #32]
 2069 0cfa 1B69     		ldr	r3, [r3, #16]
 2070 0cfc 3B61     		str	r3, [r7, #16]
 2071 0cfe 3B6A     		ldr	r3, [r7, #32]
 2072 0d00 DA69     		ldr	r2, [r3, #28]
 2073 0d02 FB6C     		ldr	r3, [r7, #76]
 2074 0d04 9B68     		ldr	r3, [r3, #8]
 2075 0d06 5B68     		ldr	r3, [r3, #4]
 2076 0d08 4FEA4303 		lsl	r3, r3, #1
 2077 0d0c 03F1FF33 		add	r3, r3, #-1
 2078 0d10 1340     		ands	r3, r3, r2
 2079 0d12 FB60     		str	r3, [r7, #12]
 2080 0d14 FA68     		ldr	r2, [r7, #12]
 2081 0d16 1346     		mov	r3, r2
 2082 0d18 4FEA4303 		lsl	r3, r3, #1
 2083 0d1c 9B18     		adds	r3, r3, r2
 2084 0d1e 4FEA8303 		lsl	r3, r3, #2
 2085 0d22 7A69     		ldr	r2, [r7, #20]
 2086 0d24 D318     		adds	r3, r2, r3
 2087 0d26 BB60     		str	r3, [r7, #8]
 2088 0d28 BB68     		ldr	r3, [r7, #8]
 2089 0d2a 5B68     		ldr	r3, [r3, #4]
 2090 0d2c 03F10102 		add	r2, r3, #1
 2091 0d30 BB68     		ldr	r3, [r7, #8]
 2092 0d32 5A60     		str	r2, [r3, #4]
 2093 0d34 BB68     		ldr	r3, [r7, #8]
 2094 0d36 5A68     		ldr	r2, [r3, #4]
 2095 0d38 FB6C     		ldr	r3, [r7, #76]
 2096 0d3a 9B68     		ldr	r3, [r3, #8]
 2097 0d3c 9B69     		ldr	r3, [r3, #24]
 2098 0d3e 9A42     		cmp	r2, r3
 2099 0d40 0ED9     		bls	.L50
 2100              		.loc 1 31 0 discriminator 34
 2101 0d42 FB6C     		ldr	r3, [r7, #76]
 2102 0d44 9B68     		ldr	r3, [r3, #8]
 2103 0d46 DA69     		ldr	r2, [r3, #28]
 2104 0d48 02F10102 		add	r2, r2, #1
 2105 0d4c DA61     		str	r2, [r3, #28]
 2106 0d4e BB68     		ldr	r3, [r7, #8]
 2107 0d50 5A68     		ldr	r2, [r3, #4]
 2108 0d52 FB6C     		ldr	r3, [r7, #76]
 2109 0d54 9B68     		ldr	r3, [r3, #8]
 2110 0d56 9B69     		ldr	r3, [r3, #24]
 2111 0d58 B2FBF3F2 		udiv	r2, r2, r3
 2112 0d5c BB68     		ldr	r3, [r7, #8]
 2113 0d5e 9A60     		str	r2, [r3, #8]
 2114              	.L50:
 2115              		.loc 1 31 0 discriminator 35
 2116 0d60 3B6A     		ldr	r3, [r7, #32]
 2117 0d62 4FF00002 		mov	r2, #0
 2118 0d66 DA60     		str	r2, [r3, #12]
 2119 0d68 BB68     		ldr	r3, [r7, #8]
 2120 0d6a 1A68     		ldr	r2, [r3, #0]
 2121 0d6c 3B6A     		ldr	r3, [r7, #32]
 2122 0d6e 1A61     		str	r2, [r3, #16]
 2123 0d70 BB68     		ldr	r3, [r7, #8]
 2124 0d72 1B68     		ldr	r3, [r3, #0]
 2125 0d74 002B     		cmp	r3, #0
 2126 0d76 03D0     		beq	.L51
 2127              		.loc 1 31 0 discriminator 36
 2128 0d78 BB68     		ldr	r3, [r7, #8]
 2129 0d7a 1B68     		ldr	r3, [r3, #0]
 2130 0d7c 3A6A     		ldr	r2, [r7, #32]
 2131 0d7e DA60     		str	r2, [r3, #12]
 2132              	.L51:
 2133              		.loc 1 31 0 discriminator 37
 2134 0d80 BB68     		ldr	r3, [r7, #8]
 2135 0d82 3A6A     		ldr	r2, [r7, #32]
 2136 0d84 1A60     		str	r2, [r3, #0]
 2137 0d86 3B69     		ldr	r3, [r7, #16]
 2138 0d88 3B62     		str	r3, [r7, #32]
 2139              	.L49:
 2140              		.loc 1 31 0 discriminator 33
 2141 0d8a 3B6A     		ldr	r3, [r7, #32]
 2142 0d8c 002B     		cmp	r3, #0
 2143 0d8e B3D1     		bne	.L52
 2144              		.loc 1 31 0 discriminator 39
 2145 0d90 7B6A     		ldr	r3, [r7, #36]
 2146 0d92 03F10103 		add	r3, r3, #1
 2147 0d96 7B62     		str	r3, [r7, #36]
 2148              	.L48:
 2149              		.loc 1 31 0 discriminator 32
 2150 0d98 FB6C     		ldr	r3, [r7, #76]
 2151 0d9a 9B68     		ldr	r3, [r3, #8]
 2152 0d9c 5A68     		ldr	r2, [r3, #4]
 2153 0d9e 7B6A     		ldr	r3, [r7, #36]
 2154 0da0 9A42     		cmp	r2, r3
 2155 0da2 9BD8     		bhi	.L53
 2156              		.loc 1 31 0 discriminator 41
 2157 0da4 FB6C     		ldr	r3, [r7, #76]
 2158 0da6 9B68     		ldr	r3, [r3, #8]
 2159 0da8 1B68     		ldr	r3, [r3, #0]
 2160 0daa 1846     		mov	r0, r3
 2161 0dac FFF7FEFF 		bl	free
 2162 0db0 FB6C     		ldr	r3, [r7, #76]
 2163 0db2 9B68     		ldr	r3, [r3, #8]
 2164 0db4 FA6C     		ldr	r2, [r7, #76]
 2165 0db6 9268     		ldr	r2, [r2, #8]
 2166 0db8 5268     		ldr	r2, [r2, #4]
 2167 0dba 4FEA4202 		lsl	r2, r2, #1
 2168 0dbe 5A60     		str	r2, [r3, #4]
 2169 0dc0 FB6C     		ldr	r3, [r7, #76]
 2170 0dc2 9B68     		ldr	r3, [r3, #8]
 2171 0dc4 9A68     		ldr	r2, [r3, #8]
 2172 0dc6 02F10102 		add	r2, r2, #1
 2173 0dca 9A60     		str	r2, [r3, #8]
 2174 0dcc FB6C     		ldr	r3, [r7, #76]
 2175 0dce 9B68     		ldr	r3, [r3, #8]
 2176 0dd0 7A69     		ldr	r2, [r7, #20]
 2177 0dd2 1A60     		str	r2, [r3, #0]
 2178 0dd4 FB6C     		ldr	r3, [r7, #76]
 2179 0dd6 9A68     		ldr	r2, [r3, #8]
 2180 0dd8 FB6C     		ldr	r3, [r7, #76]
 2181 0dda 9B68     		ldr	r3, [r3, #8]
 2182 0ddc D969     		ldr	r1, [r3, #28]
 2183 0dde FB6C     		ldr	r3, [r7, #76]
 2184 0de0 9B68     		ldr	r3, [r3, #8]
 2185 0de2 DB68     		ldr	r3, [r3, #12]
 2186 0de4 4FEA5303 		lsr	r3, r3, #1
 2187 0de8 9942     		cmp	r1, r3
 2188 0dea 05D9     		bls	.L54
 2189              		.loc 1 31 0 discriminator 42
 2190 0dec FB6C     		ldr	r3, [r7, #76]
 2191 0dee 9B68     		ldr	r3, [r3, #8]
 2192 0df0 1B6A     		ldr	r3, [r3, #32]
 2193 0df2 03F10103 		add	r3, r3, #1
 2194 0df6 01E0     		b	.L55
 2195              	.L54:
 2196              		.loc 1 31 0 discriminator 43
 2197 0df8 4FF00003 		mov	r3, #0
 2198              	.L55:
 2199              		.loc 1 31 0 discriminator 44
 2200 0dfc 1362     		str	r3, [r2, #32]
 2201 0dfe FB6C     		ldr	r3, [r7, #76]
 2202 0e00 9B68     		ldr	r3, [r3, #8]
 2203 0e02 1B6A     		ldr	r3, [r3, #32]
 2204 0e04 012B     		cmp	r3, #1
 2205 0e06 04D9     		bls	.L24
 2206              		.loc 1 31 0 discriminator 45
 2207 0e08 FB6C     		ldr	r3, [r7, #76]
 2208 0e0a 9B68     		ldr	r3, [r3, #8]
 2209 0e0c 4FF00102 		mov	r2, #1
 2210 0e10 5A62     		str	r2, [r3, #36]
 2211              	.L24:
 2212              	.LBE6:
 2213              	.LBE4:
  32:src/modbus.c  **** 		// id: name of key field
  33:src/modbus.c  **** 	}
  34:src/modbus.c  **** 
  35:src/modbus.c  **** 	s->value = (int) keyValue;
 2214              		.loc 1 35 0 is_stmt 1
 2215 0e12 3A68     		ldr	r2, [r7, #0]
 2216 0e14 FB6C     		ldr	r3, [r7, #76]
 2217 0e16 5A60     		str	r2, [r3, #4]
  36:src/modbus.c  **** }
 2218              		.loc 1 36 0
 2219 0e18 07F15407 		add	r7, r7, #84
 2220 0e1c BD46     		mov	sp, r7
 2221 0e1e 90BD     		pop	{r4, r7, pc}
 2222              		.cfi_endproc
 2223              	.LFE0:
 2225              		.section	.rodata
 2226              		.align	2
 2227              	.LC0:
 2228 0000 4B657920 		.ascii	"Key 0x%x --> Data 0x%x\012\000"
 2228      30782578 
 2228      202D2D3E 
 2228      20446174 
 2228      61203078 
 2229              		.section	.text.putData,"ax",%progbits
 2230              		.align	2
 2231              		.global	putData
 2232              		.thumb
 2233              		.thumb_func
 2235              	putData:
 2236              	.LFB1:
  37:src/modbus.c  **** 
  38:src/modbus.c  **** //Print the data from HASH MAP
  39:src/modbus.c  **** void putData() {
 2237              		.loc 1 39 0
 2238              		.cfi_startproc
 2239              		@ args = 0, pretend = 0, frame = 8
 2240              		@ frame_needed = 1, uses_anonymous_args = 0
 2241 0000 80B5     		push	{r7, lr}
 2242              	.LCFI3:
 2243              		.cfi_def_cfa_offset 8
 2244              		.cfi_offset 14, -4
 2245              		.cfi_offset 7, -8
 2246 0002 82B0     		sub	sp, sp, #8
 2247              	.LCFI4:
 2248              		.cfi_def_cfa_offset 16
 2249 0004 00AF     		add	r7, sp, #0
 2250              	.LCFI5:
 2251              		.cfi_def_cfa_register 7
  40:src/modbus.c  **** 	struct heapStruct *s;
  41:src/modbus.c  **** 
  42:src/modbus.c  **** 	for (s = users; s != NULL; s = (struct heapStruct*) (s->hh.next)) {
 2252              		.loc 1 42 0
 2253 0006 40F20003 		movw	r3, #:lower16:users
 2254 000a C0F20003 		movt	r3, #:upper16:users
 2255 000e 1B68     		ldr	r3, [r3, #0]
 2256 0010 7B60     		str	r3, [r7, #4]
 2257 0012 0EE0     		b	.L57
 2258              	.L58:
  43:src/modbus.c  **** 		printf("Key 0x%x --> Data 0x%x\n", s->key, s->value);
 2259              		.loc 1 43 0 discriminator 2
 2260 0014 7B68     		ldr	r3, [r7, #4]
 2261 0016 1A68     		ldr	r2, [r3, #0]
 2262 0018 7B68     		ldr	r3, [r7, #4]
 2263 001a 5B68     		ldr	r3, [r3, #4]
 2264 001c 40F20000 		movw	r0, #:lower16:.LC0
 2265 0020 C0F20000 		movt	r0, #:upper16:.LC0
 2266 0024 1146     		mov	r1, r2
 2267 0026 1A46     		mov	r2, r3
 2268 0028 FFF7FEFF 		bl	printf
  42:src/modbus.c  **** 	for (s = users; s != NULL; s = (struct heapStruct*) (s->hh.next)) {
 2269              		.loc 1 42 0 discriminator 2
 2270 002c 7B68     		ldr	r3, [r7, #4]
 2271 002e 1B69     		ldr	r3, [r3, #16]
 2272 0030 7B60     		str	r3, [r7, #4]
 2273              	.L57:
  42:src/modbus.c  **** 	for (s = users; s != NULL; s = (struct heapStruct*) (s->hh.next)) {
 2274              		.loc 1 42 0 is_stmt 0 discriminator 1
 2275 0032 7B68     		ldr	r3, [r7, #4]
 2276 0034 002B     		cmp	r3, #0
 2277 0036 EDD1     		bne	.L58
  44:src/modbus.c  **** 	}
  45:src/modbus.c  **** }
 2278              		.loc 1 45 0 is_stmt 1
 2279 0038 07F10807 		add	r7, r7, #8
 2280 003c BD46     		mov	sp, r7
 2281 003e 80BD     		pop	{r7, pc}
 2282              		.cfi_endproc
 2283              	.LFE1:
 2285              		.section	.text.getData,"ax",%progbits
 2286              		.align	2
 2287              		.global	getData
 2288              		.thumb
 2289              		.thumb_func
 2291              	getData:
 2292              	.LFB2:
  46:src/modbus.c  **** 
  47:src/modbus.c  **** //Fetch the data from HASH MAP
  48:src/modbus.c  **** struct heapStruct *getData(int key) {
 2293              		.loc 1 48 0
 2294              		.cfi_startproc
 2295              		@ args = 0, pretend = 0, frame = 40
 2296              		@ frame_needed = 1, uses_anonymous_args = 0
 2297 0000 80B5     		push	{r7, lr}
 2298              	.LCFI6:
 2299              		.cfi_def_cfa_offset 8
 2300              		.cfi_offset 14, -4
 2301              		.cfi_offset 7, -8
 2302 0002 8AB0     		sub	sp, sp, #40
 2303              	.LCFI7:
 2304              		.cfi_def_cfa_offset 48
 2305 0004 00AF     		add	r7, sp, #0
 2306              	.LCFI8:
 2307              		.cfi_def_cfa_register 7
 2308 0006 7860     		str	r0, [r7, #4]
 2309              	.LBB7:
  49:src/modbus.c  **** 	struct heapStruct *s;
  50:src/modbus.c  **** 	HASH_FIND_INT( users, &key, s);
 2310              		.loc 1 50 0
 2311 0008 4FF00003 		mov	r3, #0
 2312 000c 7B62     		str	r3, [r7, #36]
 2313 000e 40F20003 		movw	r3, #:lower16:users
 2314 0012 C0F20003 		movt	r3, #:upper16:users
 2315 0016 1B68     		ldr	r3, [r3, #0]
 2316 0018 002B     		cmp	r3, #0
 2317 001a 00F05782 		beq	.L60
 2318              	.LBB8:
 2319              		.loc 1 50 0 is_stmt 0 discriminator 1
 2320 001e 07F10403 		add	r3, r7, #4
 2321 0022 3B61     		str	r3, [r7, #16]
 2322 0024 4BF6EF63 		movw	r3, #48879
 2323 0028 CFF6ED63 		movt	r3, 65261
 2324 002c 3B62     		str	r3, [r7, #32]
 2325 002e 47F6B913 		movw	r3, #31161
 2326 0032 C9F63763 		movt	r3, 40503
 2327 0036 BB61     		str	r3, [r7, #24]
 2328 0038 BB69     		ldr	r3, [r7, #24]
 2329 003a FB61     		str	r3, [r7, #28]
 2330 003c 4FF00403 		mov	r3, #4
 2331 0040 7B61     		str	r3, [r7, #20]
 2332 0042 DAE0     		b	.L61
 2333              	.L62:
 2334              		.loc 1 50 0 discriminator 3
 2335 0044 3B69     		ldr	r3, [r7, #16]
 2336 0046 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2337 0048 1A46     		mov	r2, r3
 2338 004a 3B69     		ldr	r3, [r7, #16]
 2339 004c 03F10103 		add	r3, r3, #1
 2340 0050 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2341 0052 4FEA0323 		lsl	r3, r3, #8
 2342 0056 D218     		adds	r2, r2, r3
 2343 0058 3B69     		ldr	r3, [r7, #16]
 2344 005a 03F10203 		add	r3, r3, #2
 2345 005e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2346 0060 4FEA0343 		lsl	r3, r3, #16
 2347 0064 D218     		adds	r2, r2, r3
 2348 0066 3B69     		ldr	r3, [r7, #16]
 2349 0068 03F10303 		add	r3, r3, #3
 2350 006c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2351 006e 4FEA0363 		lsl	r3, r3, #24
 2352 0072 D318     		adds	r3, r2, r3
 2353 0074 FA69     		ldr	r2, [r7, #28]
 2354 0076 D318     		adds	r3, r2, r3
 2355 0078 FB61     		str	r3, [r7, #28]
 2356 007a 3B69     		ldr	r3, [r7, #16]
 2357 007c 03F10403 		add	r3, r3, #4
 2358 0080 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2359 0082 1A46     		mov	r2, r3
 2360 0084 3B69     		ldr	r3, [r7, #16]
 2361 0086 03F10503 		add	r3, r3, #5
 2362 008a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2363 008c 4FEA0323 		lsl	r3, r3, #8
 2364 0090 D218     		adds	r2, r2, r3
 2365 0092 3B69     		ldr	r3, [r7, #16]
 2366 0094 03F10603 		add	r3, r3, #6
 2367 0098 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2368 009a 4FEA0343 		lsl	r3, r3, #16
 2369 009e D218     		adds	r2, r2, r3
 2370 00a0 3B69     		ldr	r3, [r7, #16]
 2371 00a2 03F10703 		add	r3, r3, #7
 2372 00a6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2373 00a8 4FEA0363 		lsl	r3, r3, #24
 2374 00ac D318     		adds	r3, r2, r3
 2375 00ae BA69     		ldr	r2, [r7, #24]
 2376 00b0 D318     		adds	r3, r2, r3
 2377 00b2 BB61     		str	r3, [r7, #24]
 2378 00b4 3B69     		ldr	r3, [r7, #16]
 2379 00b6 03F10803 		add	r3, r3, #8
 2380 00ba 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2381 00bc 1A46     		mov	r2, r3
 2382 00be 3B69     		ldr	r3, [r7, #16]
 2383 00c0 03F10903 		add	r3, r3, #9
 2384 00c4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2385 00c6 4FEA0323 		lsl	r3, r3, #8
 2386 00ca D218     		adds	r2, r2, r3
 2387 00cc 3B69     		ldr	r3, [r7, #16]
 2388 00ce 03F10A03 		add	r3, r3, #10
 2389 00d2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2390 00d4 4FEA0343 		lsl	r3, r3, #16
 2391 00d8 D218     		adds	r2, r2, r3
 2392 00da 3B69     		ldr	r3, [r7, #16]
 2393 00dc 03F10B03 		add	r3, r3, #11
 2394 00e0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2395 00e2 4FEA0363 		lsl	r3, r3, #24
 2396 00e6 D318     		adds	r3, r2, r3
 2397 00e8 3A6A     		ldr	r2, [r7, #32]
 2398 00ea D318     		adds	r3, r2, r3
 2399 00ec 3B62     		str	r3, [r7, #32]
 2400 00ee FA69     		ldr	r2, [r7, #28]
 2401 00f0 BB69     		ldr	r3, [r7, #24]
 2402 00f2 D31A     		subs	r3, r2, r3
 2403 00f4 FB61     		str	r3, [r7, #28]
 2404 00f6 FA69     		ldr	r2, [r7, #28]
 2405 00f8 3B6A     		ldr	r3, [r7, #32]
 2406 00fa D31A     		subs	r3, r2, r3
 2407 00fc FB61     		str	r3, [r7, #28]
 2408 00fe 3B6A     		ldr	r3, [r7, #32]
 2409 0100 4FEA5333 		lsr	r3, r3, #13
 2410 0104 FA69     		ldr	r2, [r7, #28]
 2411 0106 5340     		eors	r3, r3, r2
 2412 0108 FB61     		str	r3, [r7, #28]
 2413 010a BA69     		ldr	r2, [r7, #24]
 2414 010c 3B6A     		ldr	r3, [r7, #32]
 2415 010e D31A     		subs	r3, r2, r3
 2416 0110 BB61     		str	r3, [r7, #24]
 2417 0112 BA69     		ldr	r2, [r7, #24]
 2418 0114 FB69     		ldr	r3, [r7, #28]
 2419 0116 D31A     		subs	r3, r2, r3
 2420 0118 BB61     		str	r3, [r7, #24]
 2421 011a FB69     		ldr	r3, [r7, #28]
 2422 011c 4FEA0323 		lsl	r3, r3, #8
 2423 0120 BA69     		ldr	r2, [r7, #24]
 2424 0122 5340     		eors	r3, r3, r2
 2425 0124 BB61     		str	r3, [r7, #24]
 2426 0126 3A6A     		ldr	r2, [r7, #32]
 2427 0128 FB69     		ldr	r3, [r7, #28]
 2428 012a D31A     		subs	r3, r2, r3
 2429 012c 3B62     		str	r3, [r7, #32]
 2430 012e 3A6A     		ldr	r2, [r7, #32]
 2431 0130 BB69     		ldr	r3, [r7, #24]
 2432 0132 D31A     		subs	r3, r2, r3
 2433 0134 3B62     		str	r3, [r7, #32]
 2434 0136 BB69     		ldr	r3, [r7, #24]
 2435 0138 4FEA5333 		lsr	r3, r3, #13
 2436 013c 3A6A     		ldr	r2, [r7, #32]
 2437 013e 5340     		eors	r3, r3, r2
 2438 0140 3B62     		str	r3, [r7, #32]
 2439 0142 FA69     		ldr	r2, [r7, #28]
 2440 0144 BB69     		ldr	r3, [r7, #24]
 2441 0146 D31A     		subs	r3, r2, r3
 2442 0148 FB61     		str	r3, [r7, #28]
 2443 014a FA69     		ldr	r2, [r7, #28]
 2444 014c 3B6A     		ldr	r3, [r7, #32]
 2445 014e D31A     		subs	r3, r2, r3
 2446 0150 FB61     		str	r3, [r7, #28]
 2447 0152 3B6A     		ldr	r3, [r7, #32]
 2448 0154 4FEA1333 		lsr	r3, r3, #12
 2449 0158 FA69     		ldr	r2, [r7, #28]
 2450 015a 5340     		eors	r3, r3, r2
 2451 015c FB61     		str	r3, [r7, #28]
 2452 015e BA69     		ldr	r2, [r7, #24]
 2453 0160 3B6A     		ldr	r3, [r7, #32]
 2454 0162 D31A     		subs	r3, r2, r3
 2455 0164 BB61     		str	r3, [r7, #24]
 2456 0166 BA69     		ldr	r2, [r7, #24]
 2457 0168 FB69     		ldr	r3, [r7, #28]
 2458 016a D31A     		subs	r3, r2, r3
 2459 016c BB61     		str	r3, [r7, #24]
 2460 016e FB69     		ldr	r3, [r7, #28]
 2461 0170 4FEA0343 		lsl	r3, r3, #16
 2462 0174 BA69     		ldr	r2, [r7, #24]
 2463 0176 5340     		eors	r3, r3, r2
 2464 0178 BB61     		str	r3, [r7, #24]
 2465 017a 3A6A     		ldr	r2, [r7, #32]
 2466 017c FB69     		ldr	r3, [r7, #28]
 2467 017e D31A     		subs	r3, r2, r3
 2468 0180 3B62     		str	r3, [r7, #32]
 2469 0182 3A6A     		ldr	r2, [r7, #32]
 2470 0184 BB69     		ldr	r3, [r7, #24]
 2471 0186 D31A     		subs	r3, r2, r3
 2472 0188 3B62     		str	r3, [r7, #32]
 2473 018a BB69     		ldr	r3, [r7, #24]
 2474 018c 4FEA5313 		lsr	r3, r3, #5
 2475 0190 3A6A     		ldr	r2, [r7, #32]
 2476 0192 5340     		eors	r3, r3, r2
 2477 0194 3B62     		str	r3, [r7, #32]
 2478 0196 FA69     		ldr	r2, [r7, #28]
 2479 0198 BB69     		ldr	r3, [r7, #24]
 2480 019a D31A     		subs	r3, r2, r3
 2481 019c FB61     		str	r3, [r7, #28]
 2482 019e FA69     		ldr	r2, [r7, #28]
 2483 01a0 3B6A     		ldr	r3, [r7, #32]
 2484 01a2 D31A     		subs	r3, r2, r3
 2485 01a4 FB61     		str	r3, [r7, #28]
 2486 01a6 3B6A     		ldr	r3, [r7, #32]
 2487 01a8 4FEAD303 		lsr	r3, r3, #3
 2488 01ac FA69     		ldr	r2, [r7, #28]
 2489 01ae 5340     		eors	r3, r3, r2
 2490 01b0 FB61     		str	r3, [r7, #28]
 2491 01b2 BA69     		ldr	r2, [r7, #24]
 2492 01b4 3B6A     		ldr	r3, [r7, #32]
 2493 01b6 D31A     		subs	r3, r2, r3
 2494 01b8 BB61     		str	r3, [r7, #24]
 2495 01ba BA69     		ldr	r2, [r7, #24]
 2496 01bc FB69     		ldr	r3, [r7, #28]
 2497 01be D31A     		subs	r3, r2, r3
 2498 01c0 BB61     		str	r3, [r7, #24]
 2499 01c2 FB69     		ldr	r3, [r7, #28]
 2500 01c4 4FEA8323 		lsl	r3, r3, #10
 2501 01c8 BA69     		ldr	r2, [r7, #24]
 2502 01ca 5340     		eors	r3, r3, r2
 2503 01cc BB61     		str	r3, [r7, #24]
 2504 01ce 3A6A     		ldr	r2, [r7, #32]
 2505 01d0 FB69     		ldr	r3, [r7, #28]
 2506 01d2 D31A     		subs	r3, r2, r3
 2507 01d4 3B62     		str	r3, [r7, #32]
 2508 01d6 3A6A     		ldr	r2, [r7, #32]
 2509 01d8 BB69     		ldr	r3, [r7, #24]
 2510 01da D31A     		subs	r3, r2, r3
 2511 01dc 3B62     		str	r3, [r7, #32]
 2512 01de BB69     		ldr	r3, [r7, #24]
 2513 01e0 4FEAD333 		lsr	r3, r3, #15
 2514 01e4 3A6A     		ldr	r2, [r7, #32]
 2515 01e6 5340     		eors	r3, r3, r2
 2516 01e8 3B62     		str	r3, [r7, #32]
 2517 01ea 3B69     		ldr	r3, [r7, #16]
 2518 01ec 03F10C03 		add	r3, r3, #12
 2519 01f0 3B61     		str	r3, [r7, #16]
 2520 01f2 7B69     		ldr	r3, [r7, #20]
 2521 01f4 A3F10C03 		sub	r3, r3, #12
 2522 01f8 7B61     		str	r3, [r7, #20]
 2523              	.L61:
 2524              		.loc 1 50 0 discriminator 2
 2525 01fa 7B69     		ldr	r3, [r7, #20]
 2526 01fc 0B2B     		cmp	r3, #11
 2527 01fe 3FF621AF 		bhi	.L62
 2528              		.loc 1 50 0 discriminator 4
 2529 0202 3B6A     		ldr	r3, [r7, #32]
 2530 0204 03F10403 		add	r3, r3, #4
 2531 0208 3B62     		str	r3, [r7, #32]
 2532 020a 7B69     		ldr	r3, [r7, #20]
 2533 020c 03F1FF33 		add	r3, r3, #-1
 2534 0210 0A2B     		cmp	r3, #10
 2535 0212 76D8     		bhi	.L63
 2536 0214 01A2     		adr	r2, .L75
 2537 0216 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2538 021a 00BF     		.align	2
 2539              	.L75:
 2540 021c F9020000 		.word	.L64+1
 2541 0220 E7020000 		.word	.L65+1
 2542 0224 D5020000 		.word	.L66+1
 2543 0228 C3020000 		.word	.L67+1
 2544 022c B5020000 		.word	.L68+1
 2545 0230 A3020000 		.word	.L69+1
 2546 0234 91020000 		.word	.L70+1
 2547 0238 7F020000 		.word	.L71+1
 2548 023c 6D020000 		.word	.L72+1
 2549 0240 5B020000 		.word	.L73+1
 2550 0244 49020000 		.word	.L74+1
 2551              	.L74:
 2552              		.loc 1 50 0 discriminator 16
 2553 0248 3B69     		ldr	r3, [r7, #16]
 2554 024a 03F10A03 		add	r3, r3, #10
 2555 024e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2556 0250 4FEA0363 		lsl	r3, r3, #24
 2557 0254 3A6A     		ldr	r2, [r7, #32]
 2558 0256 D318     		adds	r3, r2, r3
 2559 0258 3B62     		str	r3, [r7, #32]
 2560              	.L73:
 2561              		.loc 1 50 0 discriminator 15
 2562 025a 3B69     		ldr	r3, [r7, #16]
 2563 025c 03F10903 		add	r3, r3, #9
 2564 0260 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2565 0262 4FEA0343 		lsl	r3, r3, #16
 2566 0266 3A6A     		ldr	r2, [r7, #32]
 2567 0268 D318     		adds	r3, r2, r3
 2568 026a 3B62     		str	r3, [r7, #32]
 2569              	.L72:
 2570              		.loc 1 50 0 discriminator 14
 2571 026c 3B69     		ldr	r3, [r7, #16]
 2572 026e 03F10803 		add	r3, r3, #8
 2573 0272 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2574 0274 4FEA0323 		lsl	r3, r3, #8
 2575 0278 3A6A     		ldr	r2, [r7, #32]
 2576 027a D318     		adds	r3, r2, r3
 2577 027c 3B62     		str	r3, [r7, #32]
 2578              	.L71:
 2579              		.loc 1 50 0 discriminator 13
 2580 027e 3B69     		ldr	r3, [r7, #16]
 2581 0280 03F10703 		add	r3, r3, #7
 2582 0284 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2583 0286 4FEA0363 		lsl	r3, r3, #24
 2584 028a BA69     		ldr	r2, [r7, #24]
 2585 028c D318     		adds	r3, r2, r3
 2586 028e BB61     		str	r3, [r7, #24]
 2587              	.L70:
 2588              		.loc 1 50 0 discriminator 12
 2589 0290 3B69     		ldr	r3, [r7, #16]
 2590 0292 03F10603 		add	r3, r3, #6
 2591 0296 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2592 0298 4FEA0343 		lsl	r3, r3, #16
 2593 029c BA69     		ldr	r2, [r7, #24]
 2594 029e D318     		adds	r3, r2, r3
 2595 02a0 BB61     		str	r3, [r7, #24]
 2596              	.L69:
 2597              		.loc 1 50 0 discriminator 11
 2598 02a2 3B69     		ldr	r3, [r7, #16]
 2599 02a4 03F10503 		add	r3, r3, #5
 2600 02a8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2601 02aa 4FEA0323 		lsl	r3, r3, #8
 2602 02ae BA69     		ldr	r2, [r7, #24]
 2603 02b0 D318     		adds	r3, r2, r3
 2604 02b2 BB61     		str	r3, [r7, #24]
 2605              	.L68:
 2606              		.loc 1 50 0 discriminator 10
 2607 02b4 3B69     		ldr	r3, [r7, #16]
 2608 02b6 03F10403 		add	r3, r3, #4
 2609 02ba 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2610 02bc BA69     		ldr	r2, [r7, #24]
 2611 02be D318     		adds	r3, r2, r3
 2612 02c0 BB61     		str	r3, [r7, #24]
 2613              	.L67:
 2614              		.loc 1 50 0 discriminator 9
 2615 02c2 3B69     		ldr	r3, [r7, #16]
 2616 02c4 03F10303 		add	r3, r3, #3
 2617 02c8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2618 02ca 4FEA0363 		lsl	r3, r3, #24
 2619 02ce FA69     		ldr	r2, [r7, #28]
 2620 02d0 D318     		adds	r3, r2, r3
 2621 02d2 FB61     		str	r3, [r7, #28]
 2622              	.L66:
 2623              		.loc 1 50 0 discriminator 8
 2624 02d4 3B69     		ldr	r3, [r7, #16]
 2625 02d6 03F10203 		add	r3, r3, #2
 2626 02da 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2627 02dc 4FEA0343 		lsl	r3, r3, #16
 2628 02e0 FA69     		ldr	r2, [r7, #28]
 2629 02e2 D318     		adds	r3, r2, r3
 2630 02e4 FB61     		str	r3, [r7, #28]
 2631              	.L65:
 2632              		.loc 1 50 0 discriminator 7
 2633 02e6 3B69     		ldr	r3, [r7, #16]
 2634 02e8 03F10103 		add	r3, r3, #1
 2635 02ec 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2636 02ee 4FEA0323 		lsl	r3, r3, #8
 2637 02f2 FA69     		ldr	r2, [r7, #28]
 2638 02f4 D318     		adds	r3, r2, r3
 2639 02f6 FB61     		str	r3, [r7, #28]
 2640              	.L64:
 2641              		.loc 1 50 0 discriminator 6
 2642 02f8 3B69     		ldr	r3, [r7, #16]
 2643 02fa 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2644 02fc FA69     		ldr	r2, [r7, #28]
 2645 02fe D318     		adds	r3, r2, r3
 2646 0300 FB61     		str	r3, [r7, #28]
 2647              	.L63:
 2648              		.loc 1 50 0 discriminator 5
 2649 0302 FA69     		ldr	r2, [r7, #28]
 2650 0304 BB69     		ldr	r3, [r7, #24]
 2651 0306 D31A     		subs	r3, r2, r3
 2652 0308 FB61     		str	r3, [r7, #28]
 2653 030a FA69     		ldr	r2, [r7, #28]
 2654 030c 3B6A     		ldr	r3, [r7, #32]
 2655 030e D31A     		subs	r3, r2, r3
 2656 0310 FB61     		str	r3, [r7, #28]
 2657 0312 3B6A     		ldr	r3, [r7, #32]
 2658 0314 4FEA5333 		lsr	r3, r3, #13
 2659 0318 FA69     		ldr	r2, [r7, #28]
 2660 031a 5340     		eors	r3, r3, r2
 2661 031c FB61     		str	r3, [r7, #28]
 2662 031e BA69     		ldr	r2, [r7, #24]
 2663 0320 3B6A     		ldr	r3, [r7, #32]
 2664 0322 D31A     		subs	r3, r2, r3
 2665 0324 BB61     		str	r3, [r7, #24]
 2666 0326 BA69     		ldr	r2, [r7, #24]
 2667 0328 FB69     		ldr	r3, [r7, #28]
 2668 032a D31A     		subs	r3, r2, r3
 2669 032c BB61     		str	r3, [r7, #24]
 2670 032e FB69     		ldr	r3, [r7, #28]
 2671 0330 4FEA0323 		lsl	r3, r3, #8
 2672 0334 BA69     		ldr	r2, [r7, #24]
 2673 0336 5340     		eors	r3, r3, r2
 2674 0338 BB61     		str	r3, [r7, #24]
 2675 033a 3A6A     		ldr	r2, [r7, #32]
 2676 033c FB69     		ldr	r3, [r7, #28]
 2677 033e D31A     		subs	r3, r2, r3
 2678 0340 3B62     		str	r3, [r7, #32]
 2679 0342 3A6A     		ldr	r2, [r7, #32]
 2680 0344 BB69     		ldr	r3, [r7, #24]
 2681 0346 D31A     		subs	r3, r2, r3
 2682 0348 3B62     		str	r3, [r7, #32]
 2683 034a BB69     		ldr	r3, [r7, #24]
 2684 034c 4FEA5333 		lsr	r3, r3, #13
 2685 0350 3A6A     		ldr	r2, [r7, #32]
 2686 0352 5340     		eors	r3, r3, r2
 2687 0354 3B62     		str	r3, [r7, #32]
 2688 0356 FA69     		ldr	r2, [r7, #28]
 2689 0358 BB69     		ldr	r3, [r7, #24]
 2690 035a D31A     		subs	r3, r2, r3
 2691 035c FB61     		str	r3, [r7, #28]
 2692 035e FA69     		ldr	r2, [r7, #28]
 2693 0360 3B6A     		ldr	r3, [r7, #32]
 2694 0362 D31A     		subs	r3, r2, r3
 2695 0364 FB61     		str	r3, [r7, #28]
 2696 0366 3B6A     		ldr	r3, [r7, #32]
 2697 0368 4FEA1333 		lsr	r3, r3, #12
 2698 036c FA69     		ldr	r2, [r7, #28]
 2699 036e 5340     		eors	r3, r3, r2
 2700 0370 FB61     		str	r3, [r7, #28]
 2701 0372 BA69     		ldr	r2, [r7, #24]
 2702 0374 3B6A     		ldr	r3, [r7, #32]
 2703 0376 D31A     		subs	r3, r2, r3
 2704 0378 BB61     		str	r3, [r7, #24]
 2705 037a BA69     		ldr	r2, [r7, #24]
 2706 037c FB69     		ldr	r3, [r7, #28]
 2707 037e D31A     		subs	r3, r2, r3
 2708 0380 BB61     		str	r3, [r7, #24]
 2709 0382 FB69     		ldr	r3, [r7, #28]
 2710 0384 4FEA0343 		lsl	r3, r3, #16
 2711 0388 BA69     		ldr	r2, [r7, #24]
 2712 038a 5340     		eors	r3, r3, r2
 2713 038c BB61     		str	r3, [r7, #24]
 2714 038e 3A6A     		ldr	r2, [r7, #32]
 2715 0390 FB69     		ldr	r3, [r7, #28]
 2716 0392 D31A     		subs	r3, r2, r3
 2717 0394 3B62     		str	r3, [r7, #32]
 2718 0396 3A6A     		ldr	r2, [r7, #32]
 2719 0398 BB69     		ldr	r3, [r7, #24]
 2720 039a D31A     		subs	r3, r2, r3
 2721 039c 3B62     		str	r3, [r7, #32]
 2722 039e BB69     		ldr	r3, [r7, #24]
 2723 03a0 4FEA5313 		lsr	r3, r3, #5
 2724 03a4 3A6A     		ldr	r2, [r7, #32]
 2725 03a6 5340     		eors	r3, r3, r2
 2726 03a8 3B62     		str	r3, [r7, #32]
 2727 03aa FA69     		ldr	r2, [r7, #28]
 2728 03ac BB69     		ldr	r3, [r7, #24]
 2729 03ae D31A     		subs	r3, r2, r3
 2730 03b0 FB61     		str	r3, [r7, #28]
 2731 03b2 FA69     		ldr	r2, [r7, #28]
 2732 03b4 3B6A     		ldr	r3, [r7, #32]
 2733 03b6 D31A     		subs	r3, r2, r3
 2734 03b8 FB61     		str	r3, [r7, #28]
 2735 03ba 3B6A     		ldr	r3, [r7, #32]
 2736 03bc 4FEAD303 		lsr	r3, r3, #3
 2737 03c0 FA69     		ldr	r2, [r7, #28]
 2738 03c2 5340     		eors	r3, r3, r2
 2739 03c4 FB61     		str	r3, [r7, #28]
 2740 03c6 BA69     		ldr	r2, [r7, #24]
 2741 03c8 3B6A     		ldr	r3, [r7, #32]
 2742 03ca D31A     		subs	r3, r2, r3
 2743 03cc BB61     		str	r3, [r7, #24]
 2744 03ce BA69     		ldr	r2, [r7, #24]
 2745 03d0 FB69     		ldr	r3, [r7, #28]
 2746 03d2 D31A     		subs	r3, r2, r3
 2747 03d4 BB61     		str	r3, [r7, #24]
 2748 03d6 FB69     		ldr	r3, [r7, #28]
 2749 03d8 4FEA8323 		lsl	r3, r3, #10
 2750 03dc BA69     		ldr	r2, [r7, #24]
 2751 03de 5340     		eors	r3, r3, r2
 2752 03e0 BB61     		str	r3, [r7, #24]
 2753 03e2 3A6A     		ldr	r2, [r7, #32]
 2754 03e4 FB69     		ldr	r3, [r7, #28]
 2755 03e6 D31A     		subs	r3, r2, r3
 2756 03e8 3B62     		str	r3, [r7, #32]
 2757 03ea 3A6A     		ldr	r2, [r7, #32]
 2758 03ec BB69     		ldr	r3, [r7, #24]
 2759 03ee D31A     		subs	r3, r2, r3
 2760 03f0 3B62     		str	r3, [r7, #32]
 2761 03f2 BB69     		ldr	r3, [r7, #24]
 2762 03f4 4FEAD333 		lsr	r3, r3, #15
 2763 03f8 3A6A     		ldr	r2, [r7, #32]
 2764 03fa 5340     		eors	r3, r3, r2
 2765 03fc 3B62     		str	r3, [r7, #32]
 2766 03fe 40F20003 		movw	r3, #:lower16:users
 2767 0402 C0F20003 		movt	r3, #:upper16:users
 2768 0406 1B68     		ldr	r3, [r3, #0]
 2769 0408 9B68     		ldr	r3, [r3, #8]
 2770 040a 5B68     		ldr	r3, [r3, #4]
 2771 040c 03F1FF32 		add	r2, r3, #-1
 2772 0410 3B6A     		ldr	r3, [r7, #32]
 2773 0412 1340     		ands	r3, r3, r2
 2774 0414 FB60     		str	r3, [r7, #12]
 2775              	.LBE8:
 2776 0416 40F20003 		movw	r3, #:lower16:users
 2777 041a C0F20003 		movt	r3, #:upper16:users
 2778 041e 1B68     		ldr	r3, [r3, #0]
 2779 0420 9B68     		ldr	r3, [r3, #8]
 2780 0422 1968     		ldr	r1, [r3, #0]
 2781 0424 FA68     		ldr	r2, [r7, #12]
 2782 0426 1346     		mov	r3, r2
 2783 0428 4FEA4303 		lsl	r3, r3, #1
 2784 042c 9B18     		adds	r3, r3, r2
 2785 042e 4FEA8303 		lsl	r3, r3, #2
 2786 0432 CB18     		adds	r3, r1, r3
 2787 0434 1B68     		ldr	r3, [r3, #0]
 2788 0436 002B     		cmp	r3, #0
 2789 0438 1BD0     		beq	.L76
 2790              		.loc 1 50 0 discriminator 18
 2791 043a 40F20003 		movw	r3, #:lower16:users
 2792 043e C0F20003 		movt	r3, #:upper16:users
 2793 0442 1B68     		ldr	r3, [r3, #0]
 2794 0444 9B68     		ldr	r3, [r3, #8]
 2795 0446 1968     		ldr	r1, [r3, #0]
 2796 0448 FA68     		ldr	r2, [r7, #12]
 2797 044a 1346     		mov	r3, r2
 2798 044c 4FEA4303 		lsl	r3, r3, #1
 2799 0450 9B18     		adds	r3, r3, r2
 2800 0452 4FEA8303 		lsl	r3, r3, #2
 2801 0456 CB18     		adds	r3, r1, r3
 2802 0458 1A68     		ldr	r2, [r3, #0]
 2803 045a 40F20003 		movw	r3, #:lower16:users
 2804 045e C0F20003 		movt	r3, #:upper16:users
 2805 0462 1B68     		ldr	r3, [r3, #0]
 2806 0464 9B68     		ldr	r3, [r3, #8]
 2807 0466 5B69     		ldr	r3, [r3, #20]
 2808 0468 C3F10003 		rsb	r3, r3, #0
 2809 046c D318     		adds	r3, r2, r3
 2810 046e 7B62     		str	r3, [r7, #36]
 2811 0470 29E0     		b	.L78
 2812              	.L76:
 2813              		.loc 1 50 0 discriminator 19
 2814 0472 4FF00003 		mov	r3, #0
 2815 0476 7B62     		str	r3, [r7, #36]
 2816 0478 25E0     		b	.L78
 2817              	.L81:
 2818              		.loc 1 50 0 discriminator 26
 2819 047a 7B6A     		ldr	r3, [r7, #36]
 2820 047c 1B6A     		ldr	r3, [r3, #32]
 2821 047e 042B     		cmp	r3, #4
 2822 0480 0CD1     		bne	.L79
 2823              		.loc 1 50 0 discriminator 22
 2824 0482 7B6A     		ldr	r3, [r7, #36]
 2825 0484 DB69     		ldr	r3, [r3, #28]
 2826 0486 1846     		mov	r0, r3
 2827 0488 07F10403 		add	r3, r7, #4
 2828 048c 1946     		mov	r1, r3
 2829 048e 4FF00402 		mov	r2, #4
 2830 0492 FFF7FEFF 		bl	memcmp
 2831 0496 0346     		mov	r3, r0
 2832 0498 002B     		cmp	r3, #0
 2833 049a 17D0     		beq	.L60
 2834              	.L79:
 2835              		.loc 1 50 0 discriminator 23
 2836 049c 7B6A     		ldr	r3, [r7, #36]
 2837 049e 9B69     		ldr	r3, [r3, #24]
 2838 04a0 002B     		cmp	r3, #0
 2839 04a2 0DD0     		beq	.L80
 2840              		.loc 1 50 0 discriminator 24
 2841 04a4 7B6A     		ldr	r3, [r7, #36]
 2842 04a6 9A69     		ldr	r2, [r3, #24]
 2843 04a8 40F20003 		movw	r3, #:lower16:users
 2844 04ac C0F20003 		movt	r3, #:upper16:users
 2845 04b0 1B68     		ldr	r3, [r3, #0]
 2846 04b2 9B68     		ldr	r3, [r3, #8]
 2847 04b4 5B69     		ldr	r3, [r3, #20]
 2848 04b6 C3F10003 		rsb	r3, r3, #0
 2849 04ba D318     		adds	r3, r2, r3
 2850 04bc 7B62     		str	r3, [r7, #36]
 2851 04be 02E0     		b	.L78
 2852              	.L80:
 2853              		.loc 1 50 0 discriminator 25
 2854 04c0 4FF00003 		mov	r3, #0
 2855 04c4 7B62     		str	r3, [r7, #36]
 2856              	.L78:
 2857              		.loc 1 50 0 discriminator 21
 2858 04c6 7B6A     		ldr	r3, [r7, #36]
 2859 04c8 002B     		cmp	r3, #0
 2860 04ca D6D1     		bne	.L81
 2861              	.L60:
 2862              	.LBE7:
  51:src/modbus.c  **** 	//s: output pointer
  52:src/modbus.c  **** 	//printf("Data: 0x%x\n", s ? s->name : "unknown");
  53:src/modbus.c  **** 	return s;
 2863              		.loc 1 53 0 is_stmt 1
 2864 04cc 7B6A     		ldr	r3, [r7, #36]
  54:src/modbus.c  **** }
 2865              		.loc 1 54 0
 2866 04ce 1846     		mov	r0, r3
 2867 04d0 07F12807 		add	r7, r7, #40
 2868 04d4 BD46     		mov	sp, r7
 2869 04d6 80BD     		pop	{r7, pc}
 2870              		.cfi_endproc
 2871              	.LFE2:
 2873              		.section	.text.validateSlaveID,"ax",%progbits
 2874              		.align	2
 2875              		.global	validateSlaveID
 2876              		.thumb
 2877              		.thumb_func
 2879              	validateSlaveID:
 2880              	.LFB3:
  55:src/modbus.c  **** 
  56:src/modbus.c  **** // MODBUS :
  57:src/modbus.c  **** 
  58:src/modbus.c  **** //Validating the slaveID
  59:src/modbus.c  **** uint32_t validateSlaveID(uint32_t *qPacket, uint32_t deviceID) {
 2881              		.loc 1 59 0
 2882              		.cfi_startproc
 2883              		@ args = 0, pretend = 0, frame = 8
 2884              		@ frame_needed = 1, uses_anonymous_args = 0
 2885              		@ link register save eliminated.
 2886 0000 80B4     		push	{r7}
 2887              	.LCFI9:
 2888              		.cfi_def_cfa_offset 4
 2889              		.cfi_offset 7, -4
 2890 0002 83B0     		sub	sp, sp, #12
 2891              	.LCFI10:
 2892              		.cfi_def_cfa_offset 16
 2893 0004 00AF     		add	r7, sp, #0
 2894              	.LCFI11:
 2895              		.cfi_def_cfa_register 7
 2896 0006 7860     		str	r0, [r7, #4]
 2897 0008 3960     		str	r1, [r7, #0]
  60:src/modbus.c  **** 	if (*qPacket == deviceID) {
 2898              		.loc 1 60 0
 2899 000a 7B68     		ldr	r3, [r7, #4]
 2900 000c 1A68     		ldr	r2, [r3, #0]
 2901 000e 3B68     		ldr	r3, [r7, #0]
 2902 0010 9A42     		cmp	r2, r3
 2903 0012 16D1     		bne	.L83
  61:src/modbus.c  **** 
  62:src/modbus.c  **** 		//Copy deviceID into repose packet
  63:src/modbus.c  **** 		*rPacket = *qPacket;
 2904              		.loc 1 63 0
 2905 0014 40F20003 		movw	r3, #:lower16:rPacket
 2906 0018 C0F20003 		movt	r3, #:upper16:rPacket
 2907 001c 1B68     		ldr	r3, [r3, #0]
 2908 001e 7A68     		ldr	r2, [r7, #4]
 2909 0020 1268     		ldr	r2, [r2, #0]
 2910 0022 1A60     		str	r2, [r3, #0]
  64:src/modbus.c  **** 		//printf("%d\n",*rPacket);
  65:src/modbus.c  **** 		rPacket++;
 2911              		.loc 1 65 0
 2912 0024 40F20003 		movw	r3, #:lower16:rPacket
 2913 0028 C0F20003 		movt	r3, #:upper16:rPacket
 2914 002c 1B68     		ldr	r3, [r3, #0]
 2915 002e 03F10402 		add	r2, r3, #4
 2916 0032 40F20003 		movw	r3, #:lower16:rPacket
 2917 0036 C0F20003 		movt	r3, #:upper16:rPacket
 2918 003a 1A60     		str	r2, [r3, #0]
  66:src/modbus.c  **** 		return 1;
 2919              		.loc 1 66 0
 2920 003c 4FF00103 		mov	r3, #1
 2921 0040 01E0     		b	.L84
 2922              	.L83:
  67:src/modbus.c  **** 	} else {
  68:src/modbus.c  **** 		return 0;
 2923              		.loc 1 68 0
 2924 0042 4FF00003 		mov	r3, #0
 2925              	.L84:
  69:src/modbus.c  **** 	}
  70:src/modbus.c  **** }
 2926              		.loc 1 70 0
 2927 0046 1846     		mov	r0, r3
 2928 0048 07F10C07 		add	r7, r7, #12
 2929 004c BD46     		mov	sp, r7
 2930 004e 80BC     		pop	{r7}
 2931 0050 7047     		bx	lr
 2932              		.cfi_endproc
 2933              	.LFE3:
 2935 0052 00BF     		.section	.text.validateCrc,"ax",%progbits
 2936              		.align	2
 2937              		.global	validateCrc
 2938              		.thumb
 2939              		.thumb_func
 2941              	validateCrc:
 2942              	.LFB4:
  71:src/modbus.c  **** 
  72:src/modbus.c  **** uint32_t validateCrc(uint32_t *qPacket,uint32_t usDataLen,uint32_t *tempCRC){
 2943              		.loc 1 72 0
 2944              		.cfi_startproc
 2945              		@ args = 0, pretend = 0, frame = 32
 2946              		@ frame_needed = 1, uses_anonymous_args = 0
 2947              		@ link register save eliminated.
 2948 0000 80B4     		push	{r7}
 2949              	.LCFI12:
 2950              		.cfi_def_cfa_offset 4
 2951              		.cfi_offset 7, -4
 2952 0002 89B0     		sub	sp, sp, #36
 2953              	.LCFI13:
 2954              		.cfi_def_cfa_offset 40
 2955 0004 00AF     		add	r7, sp, #0
 2956              	.LCFI14:
 2957              		.cfi_def_cfa_register 7
 2958 0006 F860     		str	r0, [r7, #12]
 2959 0008 B960     		str	r1, [r7, #8]
 2960 000a 7A60     		str	r2, [r7, #4]
  73:src/modbus.c  **** 
  74:src/modbus.c  **** 	/*//CRC 16
  75:src/modbus.c  **** 	uint32_t CRC16(uint32_t *qPacket, uint32_t usDataLen) {*/
  76:src/modbus.c  **** 
  77:src/modbus.c  **** 		uint32_t ucrcHi = 0xFF;
 2961              		.loc 1 77 0
 2962 000c 4FF0FF03 		mov	r3, #255
 2963 0010 FB61     		str	r3, [r7, #28]
  78:src/modbus.c  **** 		uint32_t ucrcLo = 0xFF;
 2964              		.loc 1 78 0
 2965 0012 4FF0FF03 		mov	r3, #255
 2966 0016 BB61     		str	r3, [r7, #24]
  79:src/modbus.c  **** 		uint32_t iIndex;
  80:src/modbus.c  **** 
  81:src/modbus.c  **** 		while(usDataLen--){
 2967              		.loc 1 81 0
 2968 0018 1AE0     		b	.L86
 2969              	.L87:
  82:src/modbus.c  **** 			iIndex = ucrcLo ^ *(qPacket++);
 2970              		.loc 1 82 0
 2971 001a FB68     		ldr	r3, [r7, #12]
 2972 001c 1A68     		ldr	r2, [r3, #0]
 2973 001e BB69     		ldr	r3, [r7, #24]
 2974 0020 5340     		eors	r3, r3, r2
 2975 0022 7B61     		str	r3, [r7, #20]
 2976 0024 FB68     		ldr	r3, [r7, #12]
 2977 0026 03F10403 		add	r3, r3, #4
 2978 002a FB60     		str	r3, [r7, #12]
  83:src/modbus.c  **** 			ucrcLo = ucrcHi ^ crcHi[iIndex];
 2979              		.loc 1 83 0
 2980 002c 40F20003 		movw	r3, #:lower16:crcHi
 2981 0030 C0F20003 		movt	r3, #:upper16:crcHi
 2982 0034 7A69     		ldr	r2, [r7, #20]
 2983 0036 53F82220 		ldr	r2, [r3, r2, lsl #2]
 2984 003a FB69     		ldr	r3, [r7, #28]
 2985 003c 5340     		eors	r3, r3, r2
 2986 003e BB61     		str	r3, [r7, #24]
  84:src/modbus.c  **** 			ucrcHi = crcLo[iIndex];
 2987              		.loc 1 84 0
 2988 0040 40F20003 		movw	r3, #:lower16:crcLo
 2989 0044 C0F20003 		movt	r3, #:upper16:crcLo
 2990 0048 7A69     		ldr	r2, [r7, #20]
 2991 004a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2992 004e FB61     		str	r3, [r7, #28]
 2993              	.L86:
  81:src/modbus.c  **** 		while(usDataLen--){
 2994              		.loc 1 81 0 discriminator 1
 2995 0050 BB68     		ldr	r3, [r7, #8]
 2996 0052 002B     		cmp	r3, #0
 2997 0054 0CBF     		ite	eq
 2998 0056 0023     		moveq	r3, #0
 2999 0058 0123     		movne	r3, #1
 3000 005a DBB2     		uxtb	r3, r3
 3001 005c BA68     		ldr	r2, [r7, #8]
 3002 005e 02F1FF32 		add	r2, r2, #-1
 3003 0062 BA60     		str	r2, [r7, #8]
 3004 0064 002B     		cmp	r3, #0
 3005 0066 D8D1     		bne	.L87
  85:src/modbus.c  **** 		}
  86:src/modbus.c  **** 		//ucrcHi = ucrcHi << 8 | ucrcLo;
  87:src/modbus.c  **** 
  88:src/modbus.c  **** 		if (ucrcLo == *tempCRC++){
 3006              		.loc 1 88 0
 3007 0068 7B68     		ldr	r3, [r7, #4]
 3008 006a 1A68     		ldr	r2, [r3, #0]
 3009 006c BB69     		ldr	r3, [r7, #24]
 3010 006e 9A42     		cmp	r2, r3
 3011 0070 14BF     		ite	ne
 3012 0072 0023     		movne	r3, #0
 3013 0074 0123     		moveq	r3, #1
 3014 0076 DBB2     		uxtb	r3, r3
 3015 0078 7A68     		ldr	r2, [r7, #4]
 3016 007a 02F10402 		add	r2, r2, #4
 3017 007e 7A60     		str	r2, [r7, #4]
 3018 0080 002B     		cmp	r3, #0
 3019 0082 07D0     		beq	.L88
  89:src/modbus.c  **** 			if(ucrcHi ==*tempCRC){
 3020              		.loc 1 89 0
 3021 0084 7B68     		ldr	r3, [r7, #4]
 3022 0086 1A68     		ldr	r2, [r3, #0]
 3023 0088 FB69     		ldr	r3, [r7, #28]
 3024 008a 9A42     		cmp	r2, r3
 3025 008c 02D1     		bne	.L88
  90:src/modbus.c  **** 				return 1;
 3026              		.loc 1 90 0
 3027 008e 4FF00103 		mov	r3, #1
 3028 0092 01E0     		b	.L89
 3029              	.L88:
  91:src/modbus.c  **** 			}
  92:src/modbus.c  **** 		}
  93:src/modbus.c  **** 		return 0;
 3030              		.loc 1 93 0
 3031 0094 4FF00003 		mov	r3, #0
 3032              	.L89:
  94:src/modbus.c  **** }
 3033              		.loc 1 94 0
 3034 0098 1846     		mov	r0, r3
 3035 009a 07F12407 		add	r7, r7, #36
 3036 009e BD46     		mov	sp, r7
 3037 00a0 80BC     		pop	{r7}
 3038 00a2 7047     		bx	lr
 3039              		.cfi_endproc
 3040              	.LFE4:
 3042              		.section	.text.calculateOutputCrc,"ax",%progbits
 3043              		.align	2
 3044              		.global	calculateOutputCrc
 3045              		.thumb
 3046              		.thumb_func
 3048              	calculateOutputCrc:
 3049              	.LFB5:
  95:src/modbus.c  **** 
  96:src/modbus.c  **** uint32_t calculateOutputCrc(uint32_t *tempRpacket,uint32_t rPacketLen){
 3050              		.loc 1 96 0
 3051              		.cfi_startproc
 3052              		@ args = 0, pretend = 0, frame = 24
 3053              		@ frame_needed = 1, uses_anonymous_args = 0
 3054              		@ link register save eliminated.
 3055 0000 80B4     		push	{r7}
 3056              	.LCFI15:
 3057              		.cfi_def_cfa_offset 4
 3058              		.cfi_offset 7, -4
 3059 0002 87B0     		sub	sp, sp, #28
 3060              	.LCFI16:
 3061              		.cfi_def_cfa_offset 32
 3062 0004 00AF     		add	r7, sp, #0
 3063              	.LCFI17:
 3064              		.cfi_def_cfa_register 7
 3065 0006 7860     		str	r0, [r7, #4]
 3066 0008 3960     		str	r1, [r7, #0]
  97:src/modbus.c  **** 	
  98:src/modbus.c  **** 	uint32_t ucrcHi = 0xFF;
 3067              		.loc 1 98 0
 3068 000a 4FF0FF03 		mov	r3, #255
 3069 000e 7B61     		str	r3, [r7, #20]
  99:src/modbus.c  **** 	uint32_t ucrcLo = 0xFF;
 3070              		.loc 1 99 0
 3071 0010 4FF0FF03 		mov	r3, #255
 3072 0014 3B61     		str	r3, [r7, #16]
 100:src/modbus.c  **** 	uint32_t iIndex;
 101:src/modbus.c  **** 
 102:src/modbus.c  **** 	while(rPacketLen--){
 3073              		.loc 1 102 0
 3074 0016 1AE0     		b	.L91
 3075              	.L92:
 103:src/modbus.c  **** 		iIndex = ucrcLo ^ *(tempRpacket++);
 3076              		.loc 1 103 0
 3077 0018 7B68     		ldr	r3, [r7, #4]
 3078 001a 1A68     		ldr	r2, [r3, #0]
 3079 001c 3B69     		ldr	r3, [r7, #16]
 3080 001e 5340     		eors	r3, r3, r2
 3081 0020 FB60     		str	r3, [r7, #12]
 3082 0022 7B68     		ldr	r3, [r7, #4]
 3083 0024 03F10403 		add	r3, r3, #4
 3084 0028 7B60     		str	r3, [r7, #4]
 104:src/modbus.c  **** 		ucrcLo = ucrcHi ^ crcHi[iIndex];
 3085              		.loc 1 104 0
 3086 002a 40F20003 		movw	r3, #:lower16:crcHi
 3087 002e C0F20003 		movt	r3, #:upper16:crcHi
 3088 0032 FA68     		ldr	r2, [r7, #12]
 3089 0034 53F82220 		ldr	r2, [r3, r2, lsl #2]
 3090 0038 7B69     		ldr	r3, [r7, #20]
 3091 003a 5340     		eors	r3, r3, r2
 3092 003c 3B61     		str	r3, [r7, #16]
 105:src/modbus.c  **** 		ucrcHi = crcLo[iIndex];
 3093              		.loc 1 105 0
 3094 003e 40F20003 		movw	r3, #:lower16:crcLo
 3095 0042 C0F20003 		movt	r3, #:upper16:crcLo
 3096 0046 FA68     		ldr	r2, [r7, #12]
 3097 0048 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3098 004c 7B61     		str	r3, [r7, #20]
 3099              	.L91:
 102:src/modbus.c  **** 	while(rPacketLen--){
 3100              		.loc 1 102 0 discriminator 1
 3101 004e 3B68     		ldr	r3, [r7, #0]
 3102 0050 002B     		cmp	r3, #0
 3103 0052 0CBF     		ite	eq
 3104 0054 0023     		moveq	r3, #0
 3105 0056 0123     		movne	r3, #1
 3106 0058 DBB2     		uxtb	r3, r3
 3107 005a 3A68     		ldr	r2, [r7, #0]
 3108 005c 02F1FF32 		add	r2, r2, #-1
 3109 0060 3A60     		str	r2, [r7, #0]
 3110 0062 002B     		cmp	r3, #0
 3111 0064 D8D1     		bne	.L92
 106:src/modbus.c  **** 	}
 107:src/modbus.c  **** 	*rPacket++ = ucrcHi;
 3112              		.loc 1 107 0
 3113 0066 40F20003 		movw	r3, #:lower16:rPacket
 3114 006a C0F20003 		movt	r3, #:upper16:rPacket
 3115 006e 1B68     		ldr	r3, [r3, #0]
 3116 0070 7A69     		ldr	r2, [r7, #20]
 3117 0072 1A60     		str	r2, [r3, #0]
 3118 0074 03F10402 		add	r2, r3, #4
 3119 0078 40F20003 		movw	r3, #:lower16:rPacket
 3120 007c C0F20003 		movt	r3, #:upper16:rPacket
 3121 0080 1A60     		str	r2, [r3, #0]
 108:src/modbus.c  **** 	*rPacket++ = ucrcLo;
 3122              		.loc 1 108 0
 3123 0082 40F20003 		movw	r3, #:lower16:rPacket
 3124 0086 C0F20003 		movt	r3, #:upper16:rPacket
 3125 008a 1B68     		ldr	r3, [r3, #0]
 3126 008c 3A69     		ldr	r2, [r7, #16]
 3127 008e 1A60     		str	r2, [r3, #0]
 3128 0090 03F10402 		add	r2, r3, #4
 3129 0094 40F20003 		movw	r3, #:lower16:rPacket
 3130 0098 C0F20003 		movt	r3, #:upper16:rPacket
 3131 009c 1A60     		str	r2, [r3, #0]
 109:src/modbus.c  **** 	return 0;		
 3132              		.loc 1 109 0
 3133 009e 4FF00003 		mov	r3, #0
 110:src/modbus.c  **** }
 3134              		.loc 1 110 0
 3135 00a2 1846     		mov	r0, r3
 3136 00a4 07F11C07 		add	r7, r7, #28
 3137 00a8 BD46     		mov	sp, r7
 3138 00aa 80BC     		pop	{r7}
 3139 00ac 7047     		bx	lr
 3140              		.cfi_endproc
 3141              	.LFE5:
 3143 00ae 00BF     		.section	.text.validateFunction,"ax",%progbits
 3144              		.align	2
 3145              		.global	validateFunction
 3146              		.thumb
 3147              		.thumb_func
 3149              	validateFunction:
 3150              	.LFB6:
 111:src/modbus.c  **** 
 112:src/modbus.c  **** //Validate the function
 113:src/modbus.c  **** uint32_t validateFunction(uint32_t *qPacket) {
 3151              		.loc 1 113 0
 3152              		.cfi_startproc
 3153              		@ args = 0, pretend = 0, frame = 8
 3154              		@ frame_needed = 1, uses_anonymous_args = 0
 3155 0000 80B5     		push	{r7, lr}
 3156              	.LCFI18:
 3157              		.cfi_def_cfa_offset 8
 3158              		.cfi_offset 14, -4
 3159              		.cfi_offset 7, -8
 3160 0002 82B0     		sub	sp, sp, #8
 3161              	.LCFI19:
 3162              		.cfi_def_cfa_offset 16
 3163 0004 00AF     		add	r7, sp, #0
 3164              	.LCFI20:
 3165              		.cfi_def_cfa_register 7
 3166 0006 7860     		str	r0, [r7, #4]
 114:src/modbus.c  **** 
 115:src/modbus.c  **** 	qPacket++;
 3167              		.loc 1 115 0
 3168 0008 7B68     		ldr	r3, [r7, #4]
 3169 000a 03F10403 		add	r3, r3, #4
 3170 000e 7B60     		str	r3, [r7, #4]
 116:src/modbus.c  **** 
 117:src/modbus.c  **** 	//Copy function address in to respose packet
 118:src/modbus.c  **** 	*rPacket = *qPacket;
 3171              		.loc 1 118 0
 3172 0010 40F20003 		movw	r3, #:lower16:rPacket
 3173 0014 C0F20003 		movt	r3, #:upper16:rPacket
 3174 0018 1B68     		ldr	r3, [r3, #0]
 3175 001a 7A68     		ldr	r2, [r7, #4]
 3176 001c 1268     		ldr	r2, [r2, #0]
 3177 001e 1A60     		str	r2, [r3, #0]
 119:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 120:src/modbus.c  **** 	rPacket++;
 3178              		.loc 1 120 0
 3179 0020 40F20003 		movw	r3, #:lower16:rPacket
 3180 0024 C0F20003 		movt	r3, #:upper16:rPacket
 3181 0028 1B68     		ldr	r3, [r3, #0]
 3182 002a 03F10402 		add	r2, r3, #4
 3183 002e 40F20003 		movw	r3, #:lower16:rPacket
 3184 0032 C0F20003 		movt	r3, #:upper16:rPacket
 3185 0036 1A60     		str	r2, [r3, #0]
 121:src/modbus.c  **** 
 122:src/modbus.c  **** 	switch (*qPacket) {
 3186              		.loc 1 122 0
 3187 0038 7B68     		ldr	r3, [r7, #4]
 3188 003a 1B68     		ldr	r3, [r3, #0]
 3189 003c 03F1FF33 		add	r3, r3, #-1
 3190 0040 0F2B     		cmp	r3, #15
 3191 0042 59D8     		bhi	.L94
 3192 0044 01A2     		adr	r2, .L104
 3193 0046 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3194 004a 00BF     		.align	2
 3195              	.L104:
 3196 004c 8D000000 		.word	.L95+1
 3197 0050 99000000 		.word	.L96+1
 3198 0054 A5000000 		.word	.L97+1
 3199 0058 B1000000 		.word	.L98+1
 3200 005c BD000000 		.word	.L99+1
 3201 0060 C9000000 		.word	.L100+1
 3202 0064 ED000000 		.word	.L101+1
 3203 0068 F9000000 		.word	.L94+1
 3204 006c F9000000 		.word	.L94+1
 3205 0070 F9000000 		.word	.L94+1
 3206 0074 F9000000 		.word	.L94+1
 3207 0078 F9000000 		.word	.L94+1
 3208 007c F9000000 		.word	.L94+1
 3209 0080 F9000000 		.word	.L94+1
 3210 0084 D5000000 		.word	.L102+1
 3211 0088 E1000000 		.word	.L103+1
 3212              	.L95:
 123:src/modbus.c  **** 	case READ_COIL:
 124:src/modbus.c  **** 		readCoil(qPacket);
 3213              		.loc 1 124 0
 3214 008c 7868     		ldr	r0, [r7, #4]
 3215 008e FFF7FEFF 		bl	readCoil
 125:src/modbus.c  **** 		return 1;
 3216              		.loc 1 125 0
 3217 0092 4FF00103 		mov	r3, #1
 3218 0096 31E0     		b	.L105
 3219              	.L96:
 126:src/modbus.c  **** 		break;
 127:src/modbus.c  **** 	case READ_DISCRETE_INPUTS:
 128:src/modbus.c  **** 		readDiscreteInputs(qPacket);
 3220              		.loc 1 128 0
 3221 0098 7868     		ldr	r0, [r7, #4]
 3222 009a FFF7FEFF 		bl	readDiscreteInputs
 129:src/modbus.c  **** 		return 1;
 3223              		.loc 1 129 0
 3224 009e 4FF00103 		mov	r3, #1
 3225 00a2 2BE0     		b	.L105
 3226              	.L97:
 130:src/modbus.c  **** 		break;
 131:src/modbus.c  **** 	case READ_HOLDING_REGISTERS:
 132:src/modbus.c  **** 		readHoldingRegisters(qPacket);
 3227              		.loc 1 132 0
 3228 00a4 7868     		ldr	r0, [r7, #4]
 3229 00a6 FFF7FEFF 		bl	readHoldingRegisters
 133:src/modbus.c  **** 		return 1;
 3230              		.loc 1 133 0
 3231 00aa 4FF00103 		mov	r3, #1
 3232 00ae 25E0     		b	.L105
 3233              	.L98:
 134:src/modbus.c  **** 		break;
 135:src/modbus.c  **** 	case READ_INPUT_REGISTERS:
 136:src/modbus.c  **** 		readInputRegisters(qPacket);
 3234              		.loc 1 136 0
 3235 00b0 7868     		ldr	r0, [r7, #4]
 3236 00b2 FFF7FEFF 		bl	readInputRegisters
 137:src/modbus.c  **** 		return 1;
 3237              		.loc 1 137 0
 3238 00b6 4FF00103 		mov	r3, #1
 3239 00ba 1FE0     		b	.L105
 3240              	.L99:
 138:src/modbus.c  **** 		break;
 139:src/modbus.c  **** 	case WRITE_SINGLE_COIL:
 140:src/modbus.c  **** 		writeSingleCoil(qPacket);
 3241              		.loc 1 140 0
 3242 00bc 7868     		ldr	r0, [r7, #4]
 3243 00be FFF7FEFF 		bl	writeSingleCoil
 141:src/modbus.c  **** 		return 1;
 3244              		.loc 1 141 0
 3245 00c2 4FF00103 		mov	r3, #1
 3246 00c6 19E0     		b	.L105
 3247              	.L100:
 142:src/modbus.c  **** 		break;
 143:src/modbus.c  **** 	case WRITE_SINGLE_REGISTER:
 144:src/modbus.c  **** 		writeSingleRegister(qPacket);
 3248              		.loc 1 144 0
 3249 00c8 7868     		ldr	r0, [r7, #4]
 3250 00ca FFF7FEFF 		bl	writeSingleRegister
 145:src/modbus.c  **** 		return 1;
 3251              		.loc 1 145 0
 3252 00ce 4FF00103 		mov	r3, #1
 3253 00d2 13E0     		b	.L105
 3254              	.L102:
 146:src/modbus.c  **** 		break;
 147:src/modbus.c  **** 	case WRITE_MULTIPLE_COILS:
 148:src/modbus.c  **** 		writeMultipleCoils(qPacket);
 3255              		.loc 1 148 0
 3256 00d4 7868     		ldr	r0, [r7, #4]
 3257 00d6 FFF7FEFF 		bl	writeMultipleCoils
 149:src/modbus.c  **** 		return 1;
 3258              		.loc 1 149 0
 3259 00da 4FF00103 		mov	r3, #1
 3260 00de 0DE0     		b	.L105
 3261              	.L103:
 150:src/modbus.c  **** 		break;
 151:src/modbus.c  **** 	case WRITE_MULTIPLE_REGISTERS:
 152:src/modbus.c  **** 		writeMultipleRegisters(qPacket);
 3262              		.loc 1 152 0
 3263 00e0 7868     		ldr	r0, [r7, #4]
 3264 00e2 FFF7FEFF 		bl	writeMultipleRegisters
 153:src/modbus.c  **** 		return 1;
 3265              		.loc 1 153 0
 3266 00e6 4FF00103 		mov	r3, #1
 3267 00ea 07E0     		b	.L105
 3268              	.L101:
 154:src/modbus.c  **** 		break;
 155:src/modbus.c  **** 	case READ_EXCEPTION_STATUS:
 156:src/modbus.c  **** 		readExceptionStatus(qPacket);
 3269              		.loc 1 156 0
 3270 00ec 7868     		ldr	r0, [r7, #4]
 3271 00ee FFF7FEFF 		bl	readExceptionStatus
 157:src/modbus.c  **** 		return 1;
 3272              		.loc 1 157 0
 3273 00f2 4FF00103 		mov	r3, #1
 3274 00f6 01E0     		b	.L105
 3275              	.L94:
 158:src/modbus.c  **** 		break;
 159:src/modbus.c  **** 	default:
 160:src/modbus.c  **** 		return 0;
 3276              		.loc 1 160 0
 3277 00f8 4FF00003 		mov	r3, #0
 3278              	.L105:
 161:src/modbus.c  **** 	}
 162:src/modbus.c  **** }
 3279              		.loc 1 162 0
 3280 00fc 1846     		mov	r0, r3
 3281 00fe 07F10807 		add	r7, r7, #8
 3282 0102 BD46     		mov	sp, r7
 3283 0104 80BD     		pop	{r7, pc}
 3284              		.cfi_endproc
 3285              	.LFE6:
 3287 0106 00BF     		.section	.text.writeMultipleRegisters,"ax",%progbits
 3288              		.align	2
 3289              		.global	writeMultipleRegisters
 3290              		.thumb
 3291              		.thumb_func
 3293              	writeMultipleRegisters:
 3294              	.LFB7:
 163:src/modbus.c  **** 
 164:src/modbus.c  **** 
 165:src/modbus.c  **** //TODO : Code to be checked for Multiple Register Writing
 166:src/modbus.c  **** uint32_t writeMultipleRegisters(uint32_t *qPacket) {
 3295              		.loc 1 166 0
 3296              		.cfi_startproc
 3297              		@ args = 0, pretend = 0, frame = 56
 3298              		@ frame_needed = 1, uses_anonymous_args = 0
 3299 0000 80B5     		push	{r7, lr}
 3300              	.LCFI21:
 3301              		.cfi_def_cfa_offset 8
 3302              		.cfi_offset 14, -4
 3303              		.cfi_offset 7, -8
 3304 0002 8EB0     		sub	sp, sp, #56
 3305              	.LCFI22:
 3306              		.cfi_def_cfa_offset 64
 3307 0004 00AF     		add	r7, sp, #0
 3308              	.LCFI23:
 3309              		.cfi_def_cfa_register 7
 3310 0006 7860     		str	r0, [r7, #4]
 167:src/modbus.c  **** 
 168:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 169:src/modbus.c  **** 	qPacket++;
 3311              		.loc 1 169 0
 3312 0008 7B68     		ldr	r3, [r7, #4]
 3313 000a 03F10403 		add	r3, r3, #4
 3314 000e 7B60     		str	r3, [r7, #4]
 170:src/modbus.c  **** 
 171:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket
 172:src/modbus.c  **** 	firstRequest = 0x9c40 + *qPacket++;
 3315              		.loc 1 172 0
 3316 0010 7B68     		ldr	r3, [r7, #4]
 3317 0012 1B68     		ldr	r3, [r3, #0]
 3318 0014 03F51C42 		add	r2, r3, #39936
 3319 0018 02F14002 		add	r2, r2, #64
 3320 001c 40F20003 		movw	r3, #:lower16:firstRequest
 3321 0020 C0F20003 		movt	r3, #:upper16:firstRequest
 3322 0024 1A60     		str	r2, [r3, #0]
 3323 0026 7B68     		ldr	r3, [r7, #4]
 3324 0028 03F10403 		add	r3, r3, #4
 3325 002c 7B60     		str	r3, [r7, #4]
 173:src/modbus.c  **** 
 174:src/modbus.c  **** 	//Data address of first coil
 175:src/modbus.c  **** 	*rPacket = (unsigned int) firstRequest;
 3326              		.loc 1 175 0
 3327 002e 40F20003 		movw	r3, #:lower16:rPacket
 3328 0032 C0F20003 		movt	r3, #:upper16:rPacket
 3329 0036 1A68     		ldr	r2, [r3, #0]
 3330 0038 40F20003 		movw	r3, #:lower16:firstRequest
 3331 003c C0F20003 		movt	r3, #:upper16:firstRequest
 3332 0040 1B68     		ldr	r3, [r3, #0]
 3333 0042 1360     		str	r3, [r2, #0]
 176:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 177:src/modbus.c  **** 	rPacket++;
 3334              		.loc 1 177 0
 3335 0044 40F20003 		movw	r3, #:lower16:rPacket
 3336 0048 C0F20003 		movt	r3, #:upper16:rPacket
 3337 004c 1B68     		ldr	r3, [r3, #0]
 3338 004e 03F10402 		add	r2, r3, #4
 3339 0052 40F20003 		movw	r3, #:lower16:rPacket
 3340 0056 C0F20003 		movt	r3, #:upper16:rPacket
 3341 005a 1A60     		str	r2, [r3, #0]
 178:src/modbus.c  **** 
 179:src/modbus.c  **** 	//move the number of registers to be written.
 180:src/modbus.c  **** 	totalRequest = *qPacket++;
 3342              		.loc 1 180 0
 3343 005c 7B68     		ldr	r3, [r7, #4]
 3344 005e 1A68     		ldr	r2, [r3, #0]
 3345 0060 40F20003 		movw	r3, #:lower16:totalRequest
 3346 0064 C0F20003 		movt	r3, #:upper16:totalRequest
 3347 0068 1A60     		str	r2, [r3, #0]
 3348 006a 7B68     		ldr	r3, [r7, #4]
 3349 006c 03F10403 		add	r3, r3, #4
 3350 0070 7B60     		str	r3, [r7, #4]
 181:src/modbus.c  **** 
 182:src/modbus.c  **** 	//Number of registers to be written
 183:src/modbus.c  **** 	*rPacket = (unsigned int) totalRequest;
 3351              		.loc 1 183 0
 3352 0072 40F20003 		movw	r3, #:lower16:rPacket
 3353 0076 C0F20003 		movt	r3, #:upper16:rPacket
 3354 007a 1A68     		ldr	r2, [r3, #0]
 3355 007c 40F20003 		movw	r3, #:lower16:totalRequest
 3356 0080 C0F20003 		movt	r3, #:upper16:totalRequest
 3357 0084 1B68     		ldr	r3, [r3, #0]
 3358 0086 1360     		str	r3, [r2, #0]
 184:src/modbus.c  **** 	rPacket++;
 3359              		.loc 1 184 0
 3360 0088 40F20003 		movw	r3, #:lower16:rPacket
 3361 008c C0F20003 		movt	r3, #:upper16:rPacket
 3362 0090 1B68     		ldr	r3, [r3, #0]
 3363 0092 03F10402 		add	r2, r3, #4
 3364 0096 40F20003 		movw	r3, #:lower16:rPacket
 3365 009a C0F20003 		movt	r3, #:upper16:rPacket
 3366 009e 1A60     		str	r2, [r3, #0]
 185:src/modbus.c  **** 
 186:src/modbus.c  **** 	//Number of bytes to be sent to slave by master
 187:src/modbus.c  **** 	unsigned int byteStream = (unsigned int) *qPacket++;
 3367              		.loc 1 187 0
 3368 00a0 7B68     		ldr	r3, [r7, #4]
 3369 00a2 1B68     		ldr	r3, [r3, #0]
 3370 00a4 FB61     		str	r3, [r7, #28]
 3371 00a6 7B68     		ldr	r3, [r7, #4]
 3372 00a8 03F10403 		add	r3, r3, #4
 3373 00ac 7B60     		str	r3, [r7, #4]
 188:src/modbus.c  **** 
 189:src/modbus.c  **** 	//Fetch first address data.
 190:src/modbus.c  **** 	s = getData(firstRequest++);
 3374              		.loc 1 190 0
 3375 00ae 40F20003 		movw	r3, #:lower16:firstRequest
 3376 00b2 C0F20003 		movt	r3, #:upper16:firstRequest
 3377 00b6 1B68     		ldr	r3, [r3, #0]
 3378 00b8 1A46     		mov	r2, r3
 3379 00ba 03F10101 		add	r1, r3, #1
 3380 00be 40F20003 		movw	r3, #:lower16:firstRequest
 3381 00c2 C0F20003 		movt	r3, #:upper16:firstRequest
 3382 00c6 1960     		str	r1, [r3, #0]
 3383 00c8 1046     		mov	r0, r2
 3384 00ca FFF7FEFF 		bl	getData
 3385 00ce 0246     		mov	r2, r0
 3386 00d0 40F20003 		movw	r3, #:lower16:s
 3387 00d4 C0F20003 		movt	r3, #:upper16:s
 3388 00d8 1A60     		str	r2, [r3, #0]
 191:src/modbus.c  **** 
 192:src/modbus.c  **** 	//For WRITE_MULTIPLE_REGISTERS
 193:src/modbus.c  **** 	uint32_t *tempWriteData = qPacket;
 3389              		.loc 1 193 0
 3390 00da 7B68     		ldr	r3, [r7, #4]
 3391 00dc BB61     		str	r3, [r7, #24]
 194:src/modbus.c  **** 
 195:src/modbus.c  **** 	int dataToBeWritten = *tempWriteData++;
 3392              		.loc 1 195 0
 3393 00de BB69     		ldr	r3, [r7, #24]
 3394 00e0 1B68     		ldr	r3, [r3, #0]
 3395 00e2 7B61     		str	r3, [r7, #20]
 3396 00e4 BB69     		ldr	r3, [r7, #24]
 3397 00e6 03F10403 		add	r3, r3, #4
 3398 00ea BB61     		str	r3, [r7, #24]
 196:src/modbus.c  **** 
 197:src/modbus.c  **** 	int tempWriteRequest = (int) dataToBeWritten;
 3399              		.loc 1 197 0
 3400 00ec 7B69     		ldr	r3, [r7, #20]
 3401 00ee 7B63     		str	r3, [r7, #52]
 198:src/modbus.c  **** 	int count = byteStream;
 3402              		.loc 1 198 0
 3403 00f0 FB69     		ldr	r3, [r7, #28]
 3404 00f2 3B63     		str	r3, [r7, #48]
 199:src/modbus.c  **** 	int fromBit = 0;
 3405              		.loc 1 199 0
 3406 00f4 4FF00003 		mov	r3, #0
 3407 00f8 FB62     		str	r3, [r7, #44]
 200:src/modbus.c  **** 	int toBit = 7;
 3408              		.loc 1 200 0
 3409 00fa 4FF00703 		mov	r3, #7
 3410 00fe BB62     		str	r3, [r7, #40]
 201:src/modbus.c  **** 	int shiftRight;
 202:src/modbus.c  **** 	//int d;
 203:src/modbus.c  **** 
 204:src/modbus.c  **** 	again: while (count != 0) {
 3411              		.loc 1 204 0
 3412 0100 6CE0     		b	.L108
 3413              	.L111:
 3414              	.LBB9:
 205:src/modbus.c  **** 
 206:src/modbus.c  **** 		//Call masking function and store value in r.
 207:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 3415              		.loc 1 207 0
 3416 0102 F86A     		ldr	r0, [r7, #44]
 3417 0104 B96A     		ldr	r1, [r7, #40]
 3418 0106 FFF7FEFF 		bl	getMask
 3419 010a 3861     		str	r0, [r7, #16]
 208:src/modbus.c  **** 
 209:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 210:src/modbus.c  **** 		unsigned int result = r & s->value;
 3420              		.loc 1 210 0
 3421 010c 40F20003 		movw	r3, #:lower16:s
 3422 0110 C0F20003 		movt	r3, #:upper16:s
 3423 0114 1B68     		ldr	r3, [r3, #0]
 3424 0116 5B68     		ldr	r3, [r3, #4]
 3425 0118 1A46     		mov	r2, r3
 3426 011a 3B69     		ldr	r3, [r7, #16]
 3427 011c 1340     		ands	r3, r3, r2
 3428 011e 3B62     		str	r3, [r7, #32]
 211:src/modbus.c  **** 
 212:src/modbus.c  **** 		tempWriteRequest = r & tempWriteRequest;
 3429              		.loc 1 212 0
 3430 0120 7A6B     		ldr	r2, [r7, #52]
 3431 0122 3B69     		ldr	r3, [r7, #16]
 3432 0124 1340     		ands	r3, r3, r2
 3433 0126 7B63     		str	r3, [r7, #52]
 213:src/modbus.c  **** 
 214:src/modbus.c  **** 		//Else shift right.
 215:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3434              		.loc 1 215 0
 3435 0128 FB6A     		ldr	r3, [r7, #44]
 3436 012a 7B62     		str	r3, [r7, #36]
 3437 012c 0BE0     		b	.L109
 3438              	.L110:
 216:src/modbus.c  **** 			result = result >> 1;
 3439              		.loc 1 216 0 discriminator 2
 3440 012e 3B6A     		ldr	r3, [r7, #32]
 3441 0130 4FEA5303 		lsr	r3, r3, #1
 3442 0134 3B62     		str	r3, [r7, #32]
 217:src/modbus.c  **** 			tempWriteRequest = tempWriteRequest >> 1;
 3443              		.loc 1 217 0 discriminator 2
 3444 0136 7B6B     		ldr	r3, [r7, #52]
 3445 0138 4FEA6303 		asr	r3, r3, #1
 3446 013c 7B63     		str	r3, [r7, #52]
 215:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3447              		.loc 1 215 0 discriminator 2
 3448 013e 7B6A     		ldr	r3, [r7, #36]
 3449 0140 03F1FF33 		add	r3, r3, #-1
 3450 0144 7B62     		str	r3, [r7, #36]
 3451              	.L109:
 215:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3452              		.loc 1 215 0 is_stmt 0 discriminator 1
 3453 0146 7B6A     		ldr	r3, [r7, #36]
 3454 0148 002B     		cmp	r3, #0
 3455 014a F0DC     		bgt	.L110
 218:src/modbus.c  **** 		}
 219:src/modbus.c  **** 
 220:src/modbus.c  **** 		result = result | tempWriteRequest;
 3456              		.loc 1 220 0 is_stmt 1
 3457 014c 7B6B     		ldr	r3, [r7, #52]
 3458 014e 3A6A     		ldr	r2, [r7, #32]
 3459 0150 1343     		orrs	r3, r3, r2
 3460 0152 3B62     		str	r3, [r7, #32]
 221:src/modbus.c  **** 
 222:src/modbus.c  **** 		//Store the data to be sent in response packet one by one till requested bits reached.
 223:src/modbus.c  **** 		*rPacket = result;
 3461              		.loc 1 223 0
 3462 0154 40F20003 		movw	r3, #:lower16:rPacket
 3463 0158 C0F20003 		movt	r3, #:upper16:rPacket
 3464 015c 1B68     		ldr	r3, [r3, #0]
 3465 015e 3A6A     		ldr	r2, [r7, #32]
 3466 0160 1A60     		str	r2, [r3, #0]
 224:src/modbus.c  **** 		rPacket++;
 3467              		.loc 1 224 0
 3468 0162 40F20003 		movw	r3, #:lower16:rPacket
 3469 0166 C0F20003 		movt	r3, #:upper16:rPacket
 3470 016a 1B68     		ldr	r3, [r3, #0]
 3471 016c 03F10402 		add	r2, r3, #4
 3472 0170 40F20003 		movw	r3, #:lower16:rPacket
 3473 0174 C0F20003 		movt	r3, #:upper16:rPacket
 3474 0178 1A60     		str	r2, [r3, #0]
 225:src/modbus.c  **** //		printf("Data: 0x%x\n", result);
 226:src/modbus.c  **** 
 227:src/modbus.c  **** 		//Decrease the count for number of bytes to be written
 228:src/modbus.c  **** 		count--;
 3475              		.loc 1 228 0
 3476 017a 3B6B     		ldr	r3, [r7, #48]
 3477 017c 03F1FF33 		add	r3, r3, #-1
 3478 0180 3B63     		str	r3, [r7, #48]
 229:src/modbus.c  **** 		fromBit = fromBit + 8;
 3479              		.loc 1 229 0
 3480 0182 FB6A     		ldr	r3, [r7, #44]
 3481 0184 03F10803 		add	r3, r3, #8
 3482 0188 FB62     		str	r3, [r7, #44]
 230:src/modbus.c  **** 		toBit = toBit + 8;
 3483              		.loc 1 230 0
 3484 018a BB6A     		ldr	r3, [r7, #40]
 3485 018c 03F10803 		add	r3, r3, #8
 3486 0190 BB62     		str	r3, [r7, #40]
 231:src/modbus.c  **** 		tempWriteRequest = (int) dataToBeWritten;
 3487              		.loc 1 231 0
 3488 0192 7B69     		ldr	r3, [r7, #20]
 3489 0194 7B63     		str	r3, [r7, #52]
 232:src/modbus.c  **** 
 233:src/modbus.c  **** 		// If two bytes written then move on to next register
 234:src/modbus.c  **** 		if (count == 2) {
 3490              		.loc 1 234 0
 3491 0196 3B6B     		ldr	r3, [r7, #48]
 3492 0198 022B     		cmp	r3, #2
 3493 019a 1FD1     		bne	.L108
 3494              	.LBB10:
 235:src/modbus.c  **** 			s = getData(firstRequest++);
 3495              		.loc 1 235 0
 3496 019c 40F20003 		movw	r3, #:lower16:firstRequest
 3497 01a0 C0F20003 		movt	r3, #:upper16:firstRequest
 3498 01a4 1B68     		ldr	r3, [r3, #0]
 3499 01a6 1A46     		mov	r2, r3
 3500 01a8 03F10101 		add	r1, r3, #1
 3501 01ac 40F20003 		movw	r3, #:lower16:firstRequest
 3502 01b0 C0F20003 		movt	r3, #:upper16:firstRequest
 3503 01b4 1960     		str	r1, [r3, #0]
 3504 01b6 1046     		mov	r0, r2
 3505 01b8 FFF7FEFF 		bl	getData
 3506 01bc 0246     		mov	r2, r0
 3507 01be 40F20003 		movw	r3, #:lower16:s
 3508 01c2 C0F20003 		movt	r3, #:upper16:s
 3509 01c6 1A60     		str	r2, [r3, #0]
 236:src/modbus.c  **** 			int dataToBeWritten = *tempWriteData;
 3510              		.loc 1 236 0
 3511 01c8 BB69     		ldr	r3, [r7, #24]
 3512 01ca 1B68     		ldr	r3, [r3, #0]
 3513 01cc FB60     		str	r3, [r7, #12]
 237:src/modbus.c  **** 			fromBit = 0;
 3514              		.loc 1 237 0
 3515 01ce 4FF00003 		mov	r3, #0
 3516 01d2 FB62     		str	r3, [r7, #44]
 238:src/modbus.c  **** 			toBit = 7;
 3517              		.loc 1 238 0
 3518 01d4 4FF00703 		mov	r3, #7
 3519 01d8 BB62     		str	r3, [r7, #40]
 239:src/modbus.c  **** 			goto again;
 3520              		.loc 1 239 0
 3521 01da 00BF     		nop
 3522              	.L107:
 3523              	.L108:
 3524              	.LBE10:
 3525              	.LBE9:
 204:src/modbus.c  **** 	again: while (count != 0) {
 3526              		.loc 1 204 0 discriminator 1
 3527 01dc 3B6B     		ldr	r3, [r7, #48]
 3528 01de 002B     		cmp	r3, #0
 3529 01e0 8FD1     		bne	.L111
 240:src/modbus.c  **** 		}
 241:src/modbus.c  **** 	}
 242:src/modbus.c  **** /*
 243:src/modbus.c  **** 	for (d = 0; d < 5; d++) {
 244:src/modbus.c  **** 		printf("\n0x%x", arrayResponsePacket[d]);
 245:src/modbus.c  **** 	}
 246:src/modbus.c  **** */
 247:src/modbus.c  **** 	return 0;
 3530              		.loc 1 247 0
 3531 01e2 4FF00003 		mov	r3, #0
 248:src/modbus.c  **** 
 249:src/modbus.c  **** }
 3532              		.loc 1 249 0
 3533 01e6 1846     		mov	r0, r3
 3534 01e8 07F13807 		add	r7, r7, #56
 3535 01ec BD46     		mov	sp, r7
 3536 01ee 80BD     		pop	{r7, pc}
 3537              		.cfi_endproc
 3538              	.LFE7:
 3540              		.section	.rodata
 3541              		.align	2
 3542              	.LC1:
 3543 0018 44617461 		.ascii	"Data: 0x%x\012\000"
 3543      3A203078 
 3543      25780A00 
 3544              		.section	.text.writeMultipleCoils,"ax",%progbits
 3545              		.align	2
 3546              		.global	writeMultipleCoils
 3547              		.thumb
 3548              		.thumb_func
 3550              	writeMultipleCoils:
 3551              	.LFB8:
 250:src/modbus.c  **** 
 251:src/modbus.c  **** //TODO : Code to be checked for Multiple Coils Writing
 252:src/modbus.c  **** uint32_t writeMultipleCoils(uint32_t *qPacket) {
 3552              		.loc 1 252 0
 3553              		.cfi_startproc
 3554              		@ args = 0, pretend = 0, frame = 48
 3555              		@ frame_needed = 1, uses_anonymous_args = 0
 3556 0000 80B5     		push	{r7, lr}
 3557              	.LCFI24:
 3558              		.cfi_def_cfa_offset 8
 3559              		.cfi_offset 14, -4
 3560              		.cfi_offset 7, -8
 3561 0002 8CB0     		sub	sp, sp, #48
 3562              	.LCFI25:
 3563              		.cfi_def_cfa_offset 56
 3564 0004 00AF     		add	r7, sp, #0
 3565              	.LCFI26:
 3566              		.cfi_def_cfa_register 7
 3567 0006 7860     		str	r0, [r7, #4]
 253:src/modbus.c  **** 
 254:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 255:src/modbus.c  **** 	qPacket++;
 3568              		.loc 1 255 0
 3569 0008 7B68     		ldr	r3, [r7, #4]
 3570 000a 03F10403 		add	r3, r3, #4
 3571 000e 7B60     		str	r3, [r7, #4]
 256:src/modbus.c  **** 
 257:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket
 258:src/modbus.c  **** 	firstRequest = 0x0000 + *qPacket++;
 3572              		.loc 1 258 0
 3573 0010 7B68     		ldr	r3, [r7, #4]
 3574 0012 1A68     		ldr	r2, [r3, #0]
 3575 0014 40F20003 		movw	r3, #:lower16:firstRequest
 3576 0018 C0F20003 		movt	r3, #:upper16:firstRequest
 3577 001c 1A60     		str	r2, [r3, #0]
 3578 001e 7B68     		ldr	r3, [r7, #4]
 3579 0020 03F10403 		add	r3, r3, #4
 3580 0024 7B60     		str	r3, [r7, #4]
 259:src/modbus.c  **** 
 260:src/modbus.c  **** 	//Data address of first coil
 261:src/modbus.c  **** 	*rPacket = (unsigned int) firstRequest;
 3581              		.loc 1 261 0
 3582 0026 40F20003 		movw	r3, #:lower16:rPacket
 3583 002a C0F20003 		movt	r3, #:upper16:rPacket
 3584 002e 1A68     		ldr	r2, [r3, #0]
 3585 0030 40F20003 		movw	r3, #:lower16:firstRequest
 3586 0034 C0F20003 		movt	r3, #:upper16:firstRequest
 3587 0038 1B68     		ldr	r3, [r3, #0]
 3588 003a 1360     		str	r3, [r2, #0]
 262:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 263:src/modbus.c  **** 	rPacket++;
 3589              		.loc 1 263 0
 3590 003c 40F20003 		movw	r3, #:lower16:rPacket
 3591 0040 C0F20003 		movt	r3, #:upper16:rPacket
 3592 0044 1B68     		ldr	r3, [r3, #0]
 3593 0046 03F10402 		add	r2, r3, #4
 3594 004a 40F20003 		movw	r3, #:lower16:rPacket
 3595 004e C0F20003 		movt	r3, #:upper16:rPacket
 3596 0052 1A60     		str	r2, [r3, #0]
 264:src/modbus.c  **** 
 265:src/modbus.c  **** 	//move the number of coils to be written.
 266:src/modbus.c  **** 	totalRequest = *qPacket++;
 3597              		.loc 1 266 0
 3598 0054 7B68     		ldr	r3, [r7, #4]
 3599 0056 1A68     		ldr	r2, [r3, #0]
 3600 0058 40F20003 		movw	r3, #:lower16:totalRequest
 3601 005c C0F20003 		movt	r3, #:upper16:totalRequest
 3602 0060 1A60     		str	r2, [r3, #0]
 3603 0062 7B68     		ldr	r3, [r7, #4]
 3604 0064 03F10403 		add	r3, r3, #4
 3605 0068 7B60     		str	r3, [r7, #4]
 267:src/modbus.c  **** 
 268:src/modbus.c  **** 	//Number of coils to be written
 269:src/modbus.c  **** 	*rPacket = (unsigned int) totalRequest;
 3606              		.loc 1 269 0
 3607 006a 40F20003 		movw	r3, #:lower16:rPacket
 3608 006e C0F20003 		movt	r3, #:upper16:rPacket
 3609 0072 1A68     		ldr	r2, [r3, #0]
 3610 0074 40F20003 		movw	r3, #:lower16:totalRequest
 3611 0078 C0F20003 		movt	r3, #:upper16:totalRequest
 3612 007c 1B68     		ldr	r3, [r3, #0]
 3613 007e 1360     		str	r3, [r2, #0]
 270:src/modbus.c  **** 	rPacket++;
 3614              		.loc 1 270 0
 3615 0080 40F20003 		movw	r3, #:lower16:rPacket
 3616 0084 C0F20003 		movt	r3, #:upper16:rPacket
 3617 0088 1B68     		ldr	r3, [r3, #0]
 3618 008a 03F10402 		add	r2, r3, #4
 3619 008e 40F20003 		movw	r3, #:lower16:rPacket
 3620 0092 C0F20003 		movt	r3, #:upper16:rPacket
 3621 0096 1A60     		str	r2, [r3, #0]
 271:src/modbus.c  **** 
 272:src/modbus.c  **** 	//Number of bytes to be sent to slave by master
 273:src/modbus.c  **** 	unsigned int byteStream = (unsigned int) *qPacket++;
 3622              		.loc 1 273 0
 3623 0098 7B68     		ldr	r3, [r7, #4]
 3624 009a 1B68     		ldr	r3, [r3, #0]
 3625 009c 3B61     		str	r3, [r7, #16]
 3626 009e 7B68     		ldr	r3, [r7, #4]
 3627 00a0 03F10403 		add	r3, r3, #4
 3628 00a4 7B60     		str	r3, [r7, #4]
 274:src/modbus.c  **** 
 275:src/modbus.c  **** 	//Fetch first address data.
 276:src/modbus.c  **** 	s = getData(firstRequest++);
 3629              		.loc 1 276 0
 3630 00a6 40F20003 		movw	r3, #:lower16:firstRequest
 3631 00aa C0F20003 		movt	r3, #:upper16:firstRequest
 3632 00ae 1B68     		ldr	r3, [r3, #0]
 3633 00b0 1A46     		mov	r2, r3
 3634 00b2 03F10101 		add	r1, r3, #1
 3635 00b6 40F20003 		movw	r3, #:lower16:firstRequest
 3636 00ba C0F20003 		movt	r3, #:upper16:firstRequest
 3637 00be 1960     		str	r1, [r3, #0]
 3638 00c0 1046     		mov	r0, r2
 3639 00c2 FFF7FEFF 		bl	getData
 3640 00c6 0246     		mov	r2, r0
 3641 00c8 40F20003 		movw	r3, #:lower16:s
 3642 00cc C0F20003 		movt	r3, #:upper16:s
 3643 00d0 1A60     		str	r2, [r3, #0]
 277:src/modbus.c  **** 
 278:src/modbus.c  **** 	uint32_t *dataToBeWritten;
 279:src/modbus.c  **** 	dataToBeWritten = qPacket;
 3644              		.loc 1 279 0
 3645 00d2 7B68     		ldr	r3, [r7, #4]
 3646 00d4 FB62     		str	r3, [r7, #44]
 280:src/modbus.c  **** 	qPacket++;
 3647              		.loc 1 280 0
 3648 00d6 7B68     		ldr	r3, [r7, #4]
 3649 00d8 03F10403 		add	r3, r3, #4
 3650 00dc 7B60     		str	r3, [r7, #4]
 281:src/modbus.c  **** 
 282:src/modbus.c  **** 	int tempWriteRequest = *dataToBeWritten++;
 3651              		.loc 1 282 0
 3652 00de FB6A     		ldr	r3, [r7, #44]
 3653 00e0 1B68     		ldr	r3, [r3, #0]
 3654 00e2 BB62     		str	r3, [r7, #40]
 3655 00e4 FB6A     		ldr	r3, [r7, #44]
 3656 00e6 03F10403 		add	r3, r3, #4
 3657 00ea FB62     		str	r3, [r7, #44]
 283:src/modbus.c  **** 	int count = byteStream;
 3658              		.loc 1 283 0
 3659 00ec 3B69     		ldr	r3, [r7, #16]
 3660 00ee 7B62     		str	r3, [r7, #36]
 284:src/modbus.c  **** 	int fromBit = 0;
 3661              		.loc 1 284 0
 3662 00f0 4FF00003 		mov	r3, #0
 3663 00f4 3B62     		str	r3, [r7, #32]
 285:src/modbus.c  **** 	int toBit = 7;
 3664              		.loc 1 285 0
 3665 00f6 4FF00703 		mov	r3, #7
 3666 00fa FB61     		str	r3, [r7, #28]
 286:src/modbus.c  **** 	int shiftRight;
 287:src/modbus.c  **** 	int d;
 288:src/modbus.c  **** 
 289:src/modbus.c  **** 	while (count != 0) {
 3667              		.loc 1 289 0
 3668 00fc 3AE0     		b	.L113
 3669              	.L116:
 3670              	.LBB11:
 290:src/modbus.c  **** 
 291:src/modbus.c  **** 		//Call masking function and store value in r.
 292:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 3671              		.loc 1 292 0
 3672 00fe 386A     		ldr	r0, [r7, #32]
 3673 0100 F969     		ldr	r1, [r7, #28]
 3674 0102 FFF7FEFF 		bl	getMask
 3675 0106 F860     		str	r0, [r7, #12]
 293:src/modbus.c  **** 
 294:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 295:src/modbus.c  **** 		unsigned int result = r & s->value;
 3676              		.loc 1 295 0
 3677 0108 40F20003 		movw	r3, #:lower16:s
 3678 010c C0F20003 		movt	r3, #:upper16:s
 3679 0110 1B68     		ldr	r3, [r3, #0]
 3680 0112 5B68     		ldr	r3, [r3, #4]
 3681 0114 1A46     		mov	r2, r3
 3682 0116 FB68     		ldr	r3, [r7, #12]
 3683 0118 1340     		ands	r3, r3, r2
 3684 011a 7B61     		str	r3, [r7, #20]
 296:src/modbus.c  **** 
 297:src/modbus.c  **** 		//tempWriteRequest = r & tempWriteRequest;
 298:src/modbus.c  **** 
 299:src/modbus.c  **** 		//Else shift right.
 300:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3685              		.loc 1 300 0
 3686 011c 3B6A     		ldr	r3, [r7, #32]
 3687 011e BB61     		str	r3, [r7, #24]
 3688 0120 07E0     		b	.L114
 3689              	.L115:
 301:src/modbus.c  **** 			result = result >> 1;
 3690              		.loc 1 301 0 discriminator 2
 3691 0122 7B69     		ldr	r3, [r7, #20]
 3692 0124 4FEA5303 		lsr	r3, r3, #1
 3693 0128 7B61     		str	r3, [r7, #20]
 300:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3694              		.loc 1 300 0 discriminator 2
 3695 012a BB69     		ldr	r3, [r7, #24]
 3696 012c 03F1FF33 		add	r3, r3, #-1
 3697 0130 BB61     		str	r3, [r7, #24]
 3698              	.L114:
 300:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3699              		.loc 1 300 0 is_stmt 0 discriminator 1
 3700 0132 BB69     		ldr	r3, [r7, #24]
 3701 0134 002B     		cmp	r3, #0
 3702 0136 F4DC     		bgt	.L115
 302:src/modbus.c  **** 			//tempWriteRequest = tempWriteRequest << 1;
 303:src/modbus.c  **** 		}
 304:src/modbus.c  **** 
 305:src/modbus.c  **** 		result = result | tempWriteRequest;
 3703              		.loc 1 305 0 is_stmt 1
 3704 0138 BB6A     		ldr	r3, [r7, #40]
 3705 013a 7A69     		ldr	r2, [r7, #20]
 3706 013c 1343     		orrs	r3, r3, r2
 3707 013e 7B61     		str	r3, [r7, #20]
 306:src/modbus.c  **** 
 307:src/modbus.c  **** 		//Store the data to be sent in response packet one by one till requested bits reached.
 308:src/modbus.c  **** //		*rPacket = result;
 309:src/modbus.c  **** //		rPacket++;
 310:src/modbus.c  **** 		printf("Data: 0x%x\n", result);
 3708              		.loc 1 310 0
 3709 0140 40F20000 		movw	r0, #:lower16:.LC1
 3710 0144 C0F20000 		movt	r0, #:upper16:.LC1
 3711 0148 7969     		ldr	r1, [r7, #20]
 3712 014a FFF7FEFF 		bl	printf
 311:src/modbus.c  **** 
 312:src/modbus.c  **** 		//Decrease the count for number of bytes to be written
 313:src/modbus.c  **** 		count--;
 3713              		.loc 1 313 0
 3714 014e 7B6A     		ldr	r3, [r7, #36]
 3715 0150 03F1FF33 		add	r3, r3, #-1
 3716 0154 7B62     		str	r3, [r7, #36]
 314:src/modbus.c  **** 		fromBit = fromBit + 8;
 3717              		.loc 1 314 0
 3718 0156 3B6A     		ldr	r3, [r7, #32]
 3719 0158 03F10803 		add	r3, r3, #8
 3720 015c 3B62     		str	r3, [r7, #32]
 315:src/modbus.c  **** 		toBit = toBit + 8;
 3721              		.loc 1 315 0
 3722 015e FB69     		ldr	r3, [r7, #28]
 3723 0160 03F10803 		add	r3, r3, #8
 3724 0164 FB61     		str	r3, [r7, #28]
 316:src/modbus.c  **** 		tempWriteRequest = *dataToBeWritten++;
 3725              		.loc 1 316 0
 3726 0166 FB6A     		ldr	r3, [r7, #44]
 3727 0168 1B68     		ldr	r3, [r3, #0]
 3728 016a BB62     		str	r3, [r7, #40]
 3729 016c FB6A     		ldr	r3, [r7, #44]
 3730 016e 03F10403 		add	r3, r3, #4
 3731 0172 FB62     		str	r3, [r7, #44]
 3732              	.L113:
 3733              	.LBE11:
 289:src/modbus.c  **** 	while (count != 0) {
 3734              		.loc 1 289 0 discriminator 1
 3735 0174 7B6A     		ldr	r3, [r7, #36]
 3736 0176 002B     		cmp	r3, #0
 3737 0178 C1D1     		bne	.L116
 317:src/modbus.c  **** 	}
 318:src/modbus.c  **** 
 319:src/modbus.c  **** //	for (d = 0; d < 5; d++) {
 320:src/modbus.c  **** //		printf("\n0x%x", arrayResponsePacket[d]);
 321:src/modbus.c  **** //	}
 322:src/modbus.c  **** 
 323:src/modbus.c  **** 	return 0;
 3738              		.loc 1 323 0
 3739 017a 4FF00003 		mov	r3, #0
 324:src/modbus.c  **** }
 3740              		.loc 1 324 0
 3741 017e 1846     		mov	r0, r3
 3742 0180 07F13007 		add	r7, r7, #48
 3743 0184 BD46     		mov	sp, r7
 3744 0186 80BD     		pop	{r7, pc}
 3745              		.cfi_endproc
 3746              	.LFE8:
 3748              		.section	.text.readExceptionStatus,"ax",%progbits
 3749              		.align	2
 3750              		.global	readExceptionStatus
 3751              		.thumb
 3752              		.thumb_func
 3754              	readExceptionStatus:
 3755              	.LFB9:
 325:src/modbus.c  **** 
 326:src/modbus.c  **** uint32_t readExceptionStatus(uint32_t *qPacket) {
 3756              		.loc 1 326 0
 3757              		.cfi_startproc
 3758              		@ args = 0, pretend = 0, frame = 8
 3759              		@ frame_needed = 1, uses_anonymous_args = 0
 3760              		@ link register save eliminated.
 3761 0000 80B4     		push	{r7}
 3762              	.LCFI27:
 3763              		.cfi_def_cfa_offset 4
 3764              		.cfi_offset 7, -4
 3765 0002 83B0     		sub	sp, sp, #12
 3766              	.LCFI28:
 3767              		.cfi_def_cfa_offset 16
 3768 0004 00AF     		add	r7, sp, #0
 3769              	.LCFI29:
 3770              		.cfi_def_cfa_register 7
 3771 0006 7860     		str	r0, [r7, #4]
 327:src/modbus.c  **** 	return 0;
 3772              		.loc 1 327 0
 3773 0008 4FF00003 		mov	r3, #0
 328:src/modbus.c  **** }
 3774              		.loc 1 328 0
 3775 000c 1846     		mov	r0, r3
 3776 000e 07F10C07 		add	r7, r7, #12
 3777 0012 BD46     		mov	sp, r7
 3778 0014 80BC     		pop	{r7}
 3779 0016 7047     		bx	lr
 3780              		.cfi_endproc
 3781              	.LFE9:
 3783              		.section	.text.writeSingleRegister,"ax",%progbits
 3784              		.align	2
 3785              		.global	writeSingleRegister
 3786              		.thumb
 3787              		.thumb_func
 3789              	writeSingleRegister:
 3790              	.LFB10:
 329:src/modbus.c  **** 
 330:src/modbus.c  **** uint32_t writeSingleRegister(uint32_t *qPacket) {
 3791              		.loc 1 330 0
 3792              		.cfi_startproc
 3793              		@ args = 0, pretend = 0, frame = 40
 3794              		@ frame_needed = 1, uses_anonymous_args = 0
 3795 0000 80B5     		push	{r7, lr}
 3796              	.LCFI30:
 3797              		.cfi_def_cfa_offset 8
 3798              		.cfi_offset 14, -4
 3799              		.cfi_offset 7, -8
 3800 0002 8AB0     		sub	sp, sp, #40
 3801              	.LCFI31:
 3802              		.cfi_def_cfa_offset 48
 3803 0004 00AF     		add	r7, sp, #0
 3804              	.LCFI32:
 3805              		.cfi_def_cfa_register 7
 3806 0006 7860     		str	r0, [r7, #4]
 331:src/modbus.c  **** 
 332:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 333:src/modbus.c  **** 	qPacket++;
 3807              		.loc 1 333 0
 3808 0008 7B68     		ldr	r3, [r7, #4]
 3809 000a 03F10403 		add	r3, r3, #4
 3810 000e 7B60     		str	r3, [r7, #4]
 334:src/modbus.c  **** 
 335:src/modbus.c  **** 	//Store the address requested and move it to response packet
 336:src/modbus.c  **** 	uint32_t tempWriteAddress = *qPacket;
 3811              		.loc 1 336 0
 3812 0010 7B68     		ldr	r3, [r7, #4]
 3813 0012 1B68     		ldr	r3, [r3, #0]
 3814 0014 FB61     		str	r3, [r7, #28]
 337:src/modbus.c  **** 	*rPacket = (unsigned int) tempWriteAddress;
 3815              		.loc 1 337 0
 3816 0016 40F20003 		movw	r3, #:lower16:rPacket
 3817 001a C0F20003 		movt	r3, #:upper16:rPacket
 3818 001e 1B68     		ldr	r3, [r3, #0]
 3819 0020 FA69     		ldr	r2, [r7, #28]
 3820 0022 1A60     		str	r2, [r3, #0]
 338:src/modbus.c  **** 	rPacket++;
 3821              		.loc 1 338 0
 3822 0024 40F20003 		movw	r3, #:lower16:rPacket
 3823 0028 C0F20003 		movt	r3, #:upper16:rPacket
 3824 002c 1B68     		ldr	r3, [r3, #0]
 3825 002e 03F10402 		add	r2, r3, #4
 3826 0032 40F20003 		movw	r3, #:lower16:rPacket
 3827 0036 C0F20003 		movt	r3, #:upper16:rPacket
 3828 003a 1A60     		str	r2, [r3, #0]
 339:src/modbus.c  **** 
 340:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 341:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 342:src/modbus.c  **** 	firstRequest = 0x9c40 + *qPacket++;
 3829              		.loc 1 342 0
 3830 003c 7B68     		ldr	r3, [r7, #4]
 3831 003e 1B68     		ldr	r3, [r3, #0]
 3832 0040 03F51C42 		add	r2, r3, #39936
 3833 0044 02F14002 		add	r2, r2, #64
 3834 0048 40F20003 		movw	r3, #:lower16:firstRequest
 3835 004c C0F20003 		movt	r3, #:upper16:firstRequest
 3836 0050 1A60     		str	r2, [r3, #0]
 3837 0052 7B68     		ldr	r3, [r7, #4]
 3838 0054 03F10403 		add	r3, r3, #4
 3839 0058 7B60     		str	r3, [r7, #4]
 343:src/modbus.c  **** 
 344:src/modbus.c  **** 	//move the data to be written
 345:src/modbus.c  **** 	writeRequest = *qPacket;
 3840              		.loc 1 345 0
 3841 005a 7B68     		ldr	r3, [r7, #4]
 3842 005c 1A68     		ldr	r2, [r3, #0]
 3843 005e 40F20003 		movw	r3, #:lower16:writeRequest
 3844 0062 C0F20003 		movt	r3, #:upper16:writeRequest
 3845 0066 1A60     		str	r2, [r3, #0]
 346:src/modbus.c  **** 
 347:src/modbus.c  **** 	//stream to be sent back to response packet
 348:src/modbus.c  **** 	//*rPacket = (unsigned int) firstRequest;
 349:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 350:src/modbus.c  **** 	//rPacket++;
 351:src/modbus.c  **** 
 352:src/modbus.c  **** 	//Fetch first address data.
 353:src/modbus.c  **** 	s = getData(firstRequest++);
 3846              		.loc 1 353 0
 3847 0068 40F20003 		movw	r3, #:lower16:firstRequest
 3848 006c C0F20003 		movt	r3, #:upper16:firstRequest
 3849 0070 1B68     		ldr	r3, [r3, #0]
 3850 0072 1A46     		mov	r2, r3
 3851 0074 03F10101 		add	r1, r3, #1
 3852 0078 40F20003 		movw	r3, #:lower16:firstRequest
 3853 007c C0F20003 		movt	r3, #:upper16:firstRequest
 3854 0080 1960     		str	r1, [r3, #0]
 3855 0082 1046     		mov	r0, r2
 3856 0084 FFF7FEFF 		bl	getData
 3857 0088 0246     		mov	r2, r0
 3858 008a 40F20003 		movw	r3, #:lower16:s
 3859 008e C0F20003 		movt	r3, #:upper16:s
 3860 0092 1A60     		str	r2, [r3, #0]
 354:src/modbus.c  **** 
 355:src/modbus.c  **** 	int tempWriteRequest = (int) writeRequest;
 3861              		.loc 1 355 0
 3862 0094 40F20003 		movw	r3, #:lower16:writeRequest
 3863 0098 C0F20003 		movt	r3, #:upper16:writeRequest
 3864 009c 1B68     		ldr	r3, [r3, #0]
 3865 009e BB61     		str	r3, [r7, #24]
 356:src/modbus.c  **** 	int fromBit = 0;
 3866              		.loc 1 356 0
 3867 00a0 4FF00003 		mov	r3, #0
 3868 00a4 7B61     		str	r3, [r7, #20]
 357:src/modbus.c  **** 	int toBit = 32;
 3869              		.loc 1 357 0
 3870 00a6 4FF02003 		mov	r3, #32
 3871 00aa 3B61     		str	r3, [r7, #16]
 358:src/modbus.c  **** 	int shiftRight;
 359:src/modbus.c  **** 	int d;
 360:src/modbus.c  **** 
 361:src/modbus.c  **** 	//Call masking function and store value in r.
 362:src/modbus.c  **** 	unsigned int r = getMask(fromBit, toBit);
 3872              		.loc 1 362 0
 3873 00ac 7869     		ldr	r0, [r7, #20]
 3874 00ae 3969     		ldr	r1, [r7, #16]
 3875 00b0 FFF7FEFF 		bl	getMask
 3876 00b4 F860     		str	r0, [r7, #12]
 363:src/modbus.c  **** 
 364:src/modbus.c  **** 	//Get masking done on data from hash and store in result.
 365:src/modbus.c  **** 	unsigned int result = r & s->value;
 3877              		.loc 1 365 0
 3878 00b6 40F20003 		movw	r3, #:lower16:s
 3879 00ba C0F20003 		movt	r3, #:upper16:s
 3880 00be 1B68     		ldr	r3, [r3, #0]
 3881 00c0 5B68     		ldr	r3, [r3, #4]
 3882 00c2 1A46     		mov	r2, r3
 3883 00c4 FB68     		ldr	r3, [r7, #12]
 3884 00c6 1340     		ands	r3, r3, r2
 3885 00c8 3B62     		str	r3, [r7, #32]
 366:src/modbus.c  **** 
 367:src/modbus.c  **** 	//Else shift right.
 368:src/modbus.c  **** 	for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3886              		.loc 1 368 0
 3887 00ca 7B69     		ldr	r3, [r7, #20]
 3888 00cc 7B62     		str	r3, [r7, #36]
 3889 00ce 07E0     		b	.L119
 3890              	.L120:
 369:src/modbus.c  **** 		result = result >> 1;
 3891              		.loc 1 369 0 discriminator 2
 3892 00d0 3B6A     		ldr	r3, [r7, #32]
 3893 00d2 4FEA5303 		lsr	r3, r3, #1
 3894 00d6 3B62     		str	r3, [r7, #32]
 368:src/modbus.c  **** 	for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3895              		.loc 1 368 0 discriminator 2
 3896 00d8 7B6A     		ldr	r3, [r7, #36]
 3897 00da 03F1FF33 		add	r3, r3, #-1
 3898 00de 7B62     		str	r3, [r7, #36]
 3899              	.L119:
 368:src/modbus.c  **** 	for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3900              		.loc 1 368 0 is_stmt 0 discriminator 1
 3901 00e0 7B6A     		ldr	r3, [r7, #36]
 3902 00e2 002B     		cmp	r3, #0
 3903 00e4 F4DC     		bgt	.L120
 370:src/modbus.c  **** 	}
 371:src/modbus.c  **** 
 372:src/modbus.c  **** 	//printf("Data: 0x%x\n", result);
 373:src/modbus.c  **** 
 374:src/modbus.c  **** 	result = result | tempWriteRequest;
 3904              		.loc 1 374 0 is_stmt 1
 3905 00e6 BB69     		ldr	r3, [r7, #24]
 3906 00e8 3A6A     		ldr	r2, [r7, #32]
 3907 00ea 1343     		orrs	r3, r3, r2
 3908 00ec 3B62     		str	r3, [r7, #32]
 375:src/modbus.c  **** 
 376:src/modbus.c  **** 	//Store the data to be sent in response packet one by one till requested bits reached.
 377:src/modbus.c  **** 	//*rPacket = result;
 378:src/modbus.c  **** 	//rPacket++;
 379:src/modbus.c  **** 	*rPacket = tempWriteRequest;
 3909              		.loc 1 379 0
 3910 00ee 40F20003 		movw	r3, #:lower16:rPacket
 3911 00f2 C0F20003 		movt	r3, #:upper16:rPacket
 3912 00f6 1B68     		ldr	r3, [r3, #0]
 3913 00f8 BA69     		ldr	r2, [r7, #24]
 3914 00fa 1A60     		str	r2, [r3, #0]
 380:src/modbus.c  **** 	rPacket++;
 3915              		.loc 1 380 0
 3916 00fc 40F20003 		movw	r3, #:lower16:rPacket
 3917 0100 C0F20003 		movt	r3, #:upper16:rPacket
 3918 0104 1B68     		ldr	r3, [r3, #0]
 3919 0106 03F10402 		add	r2, r3, #4
 3920 010a 40F20003 		movw	r3, #:lower16:rPacket
 3921 010e C0F20003 		movt	r3, #:upper16:rPacket
 3922 0112 1A60     		str	r2, [r3, #0]
 381:src/modbus.c  **** 
 382:src/modbus.c  **** //	for (d = 0; d < (1 + 5); d++) {
 383:src/modbus.c  **** //		printf("\n0x%x", arrayResponsePacket[d]);
 384:src/modbus.c  **** //	}
 385:src/modbus.c  **** 
 386:src/modbus.c  **** 	return 0;
 3923              		.loc 1 386 0
 3924 0114 4FF00003 		mov	r3, #0
 387:src/modbus.c  **** 
 388:src/modbus.c  **** }
 3925              		.loc 1 388 0
 3926 0118 1846     		mov	r0, r3
 3927 011a 07F12807 		add	r7, r7, #40
 3928 011e BD46     		mov	sp, r7
 3929 0120 80BD     		pop	{r7, pc}
 3930              		.cfi_endproc
 3931              	.LFE10:
 3933 0122 00BF     		.section	.text.writeSingleCoil,"ax",%progbits
 3934              		.align	2
 3935              		.global	writeSingleCoil
 3936              		.thumb
 3937              		.thumb_func
 3939              	writeSingleCoil:
 3940              	.LFB11:
 389:src/modbus.c  **** 
 390:src/modbus.c  **** 
 391:src/modbus.c  **** //TODO : Check what to use for writing ON (0xffff0000 or 0xff00) and OFF (0x00000000 or 0x0000)
 392:src/modbus.c  **** uint32_t writeSingleCoil(uint32_t *qPacket) {
 3941              		.loc 1 392 0
 3942              		.cfi_startproc
 3943              		@ args = 0, pretend = 0, frame = 40
 3944              		@ frame_needed = 1, uses_anonymous_args = 0
 3945 0000 80B5     		push	{r7, lr}
 3946              	.LCFI33:
 3947              		.cfi_def_cfa_offset 8
 3948              		.cfi_offset 14, -4
 3949              		.cfi_offset 7, -8
 3950 0002 8AB0     		sub	sp, sp, #40
 3951              	.LCFI34:
 3952              		.cfi_def_cfa_offset 48
 3953 0004 00AF     		add	r7, sp, #0
 3954              	.LCFI35:
 3955              		.cfi_def_cfa_register 7
 3956 0006 7860     		str	r0, [r7, #4]
 393:src/modbus.c  **** 
 394:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 395:src/modbus.c  **** 	qPacket++;
 3957              		.loc 1 395 0
 3958 0008 7B68     		ldr	r3, [r7, #4]
 3959 000a 03F10403 		add	r3, r3, #4
 3960 000e 7B60     		str	r3, [r7, #4]
 396:src/modbus.c  **** 
 397:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 398:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 399:src/modbus.c  **** 	firstRequest = 0x0000 + *qPacket++;
 3961              		.loc 1 399 0
 3962 0010 7B68     		ldr	r3, [r7, #4]
 3963 0012 1A68     		ldr	r2, [r3, #0]
 3964 0014 40F20003 		movw	r3, #:lower16:firstRequest
 3965 0018 C0F20003 		movt	r3, #:upper16:firstRequest
 3966 001c 1A60     		str	r2, [r3, #0]
 3967 001e 7B68     		ldr	r3, [r7, #4]
 3968 0020 03F10403 		add	r3, r3, #4
 3969 0024 7B60     		str	r3, [r7, #4]
 400:src/modbus.c  **** 
 401:src/modbus.c  **** 	//move the data to be written
 402:src/modbus.c  **** 	uint32_t *writeRequest = qPacket;
 3970              		.loc 1 402 0
 3971 0026 7B68     		ldr	r3, [r7, #4]
 3972 0028 7B62     		str	r3, [r7, #36]
 403:src/modbus.c  **** //	writeRequest+=3;
 404:src/modbus.c  **** 
 405:src/modbus.c  **** 	//stream to be sent back to response packet
 406:src/modbus.c  **** 	*rPacket = (unsigned int) firstRequest;
 3973              		.loc 1 406 0
 3974 002a 40F20003 		movw	r3, #:lower16:rPacket
 3975 002e C0F20003 		movt	r3, #:upper16:rPacket
 3976 0032 1A68     		ldr	r2, [r3, #0]
 3977 0034 40F20003 		movw	r3, #:lower16:firstRequest
 3978 0038 C0F20003 		movt	r3, #:upper16:firstRequest
 3979 003c 1B68     		ldr	r3, [r3, #0]
 3980 003e 1360     		str	r3, [r2, #0]
 407:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 408:src/modbus.c  **** 	rPacket++;
 3981              		.loc 1 408 0
 3982 0040 40F20003 		movw	r3, #:lower16:rPacket
 3983 0044 C0F20003 		movt	r3, #:upper16:rPacket
 3984 0048 1B68     		ldr	r3, [r3, #0]
 3985 004a 03F10402 		add	r2, r3, #4
 3986 004e 40F20003 		movw	r3, #:lower16:rPacket
 3987 0052 C0F20003 		movt	r3, #:upper16:rPacket
 3988 0056 1A60     		str	r2, [r3, #0]
 409:src/modbus.c  **** 
 410:src/modbus.c  **** 	//Fetch first address data.
 411:src/modbus.c  **** 	s = getData(firstRequest++);
 3989              		.loc 1 411 0
 3990 0058 40F20003 		movw	r3, #:lower16:firstRequest
 3991 005c C0F20003 		movt	r3, #:upper16:firstRequest
 3992 0060 1B68     		ldr	r3, [r3, #0]
 3993 0062 1A46     		mov	r2, r3
 3994 0064 03F10101 		add	r1, r3, #1
 3995 0068 40F20003 		movw	r3, #:lower16:firstRequest
 3996 006c C0F20003 		movt	r3, #:upper16:firstRequest
 3997 0070 1960     		str	r1, [r3, #0]
 3998 0072 1046     		mov	r0, r2
 3999 0074 FFF7FEFF 		bl	getData
 4000 0078 0246     		mov	r2, r0
 4001 007a 40F20003 		movw	r3, #:lower16:s
 4002 007e C0F20003 		movt	r3, #:upper16:s
 4003 0082 1A60     		str	r2, [r3, #0]
 412:src/modbus.c  **** 
 413:src/modbus.c  **** 	//int tempWriteRequest = (int) writeRequest;
 414:src/modbus.c  **** 	int fromBit = 0;
 4004              		.loc 1 414 0
 4005 0084 4FF00003 		mov	r3, #0
 4006 0088 3B62     		str	r3, [r7, #32]
 415:src/modbus.c  **** 	int toBit = 7;
 4007              		.loc 1 415 0
 4008 008a 4FF00703 		mov	r3, #7
 4009 008e FB61     		str	r3, [r7, #28]
 416:src/modbus.c  **** 	int shiftRight;
 417:src/modbus.c  **** 	int d;
 418:src/modbus.c  **** 	int count = 0;
 4010              		.loc 1 418 0
 4011 0090 4FF00003 		mov	r3, #0
 4012 0094 7B61     		str	r3, [r7, #20]
 419:src/modbus.c  **** 	unsigned int result;
 420:src/modbus.c  **** 
 421:src/modbus.c  **** 	while(count < 2){
 4013              		.loc 1 421 0
 4014 0096 45E0     		b	.L122
 4015              	.L125:
 4016              	.LBB12:
 422:src/modbus.c  **** 		//Call masking function and store value in r.
 423:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 4017              		.loc 1 423 0
 4018 0098 386A     		ldr	r0, [r7, #32]
 4019 009a F969     		ldr	r1, [r7, #28]
 4020 009c FFF7FEFF 		bl	getMask
 4021 00a0 F860     		str	r0, [r7, #12]
 424:src/modbus.c  **** 
 425:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 426:src/modbus.c  **** 		result = r & s->value;
 4022              		.loc 1 426 0
 4023 00a2 40F20003 		movw	r3, #:lower16:s
 4024 00a6 C0F20003 		movt	r3, #:upper16:s
 4025 00aa 1B68     		ldr	r3, [r3, #0]
 4026 00ac 5B68     		ldr	r3, [r3, #4]
 4027 00ae 1A46     		mov	r2, r3
 4028 00b0 FB68     		ldr	r3, [r7, #12]
 4029 00b2 1340     		ands	r3, r3, r2
 4030 00b4 3B61     		str	r3, [r7, #16]
 427:src/modbus.c  **** 
 428:src/modbus.c  **** 		//Else shift right.
 429:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4031              		.loc 1 429 0
 4032 00b6 3B6A     		ldr	r3, [r7, #32]
 4033 00b8 BB61     		str	r3, [r7, #24]
 4034 00ba 07E0     		b	.L123
 4035              	.L124:
 430:src/modbus.c  **** 			result = result >> 1;
 4036              		.loc 1 430 0 discriminator 2
 4037 00bc 3B69     		ldr	r3, [r7, #16]
 4038 00be 4FEA5303 		lsr	r3, r3, #1
 4039 00c2 3B61     		str	r3, [r7, #16]
 429:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4040              		.loc 1 429 0 discriminator 2
 4041 00c4 BB69     		ldr	r3, [r7, #24]
 4042 00c6 03F1FF33 		add	r3, r3, #-1
 4043 00ca BB61     		str	r3, [r7, #24]
 4044              	.L123:
 429:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4045              		.loc 1 429 0 is_stmt 0 discriminator 1
 4046 00cc BB69     		ldr	r3, [r7, #24]
 4047 00ce 002B     		cmp	r3, #0
 4048 00d0 F4DC     		bgt	.L124
 431:src/modbus.c  **** 		}
 432:src/modbus.c  **** 
 433:src/modbus.c  **** 		*rPacket = *writeRequest;
 4049              		.loc 1 433 0 is_stmt 1
 4050 00d2 40F20003 		movw	r3, #:lower16:rPacket
 4051 00d6 C0F20003 		movt	r3, #:upper16:rPacket
 4052 00da 1B68     		ldr	r3, [r3, #0]
 4053 00dc 7A6A     		ldr	r2, [r7, #36]
 4054 00de 1268     		ldr	r2, [r2, #0]
 4055 00e0 1A60     		str	r2, [r3, #0]
 434:src/modbus.c  **** 		rPacket++;
 4056              		.loc 1 434 0
 4057 00e2 40F20003 		movw	r3, #:lower16:rPacket
 4058 00e6 C0F20003 		movt	r3, #:upper16:rPacket
 4059 00ea 1B68     		ldr	r3, [r3, #0]
 4060 00ec 03F10402 		add	r2, r3, #4
 4061 00f0 40F20003 		movw	r3, #:lower16:rPacket
 4062 00f4 C0F20003 		movt	r3, #:upper16:rPacket
 4063 00f8 1A60     		str	r2, [r3, #0]
 435:src/modbus.c  **** 
 436:src/modbus.c  **** 		result = result | *writeRequest++;
 4064              		.loc 1 436 0
 4065 00fa 7B6A     		ldr	r3, [r7, #36]
 4066 00fc 1B68     		ldr	r3, [r3, #0]
 4067 00fe 3A69     		ldr	r2, [r7, #16]
 4068 0100 1343     		orrs	r3, r3, r2
 4069 0102 3B61     		str	r3, [r7, #16]
 4070 0104 7B6A     		ldr	r3, [r7, #36]
 4071 0106 03F10403 		add	r3, r3, #4
 4072 010a 7B62     		str	r3, [r7, #36]
 437:src/modbus.c  **** 
 438:src/modbus.c  **** 		fromBit = fromBit + 8;
 4073              		.loc 1 438 0
 4074 010c 3B6A     		ldr	r3, [r7, #32]
 4075 010e 03F10803 		add	r3, r3, #8
 4076 0112 3B62     		str	r3, [r7, #32]
 439:src/modbus.c  **** 		toBit = toBit + 8;
 4077              		.loc 1 439 0
 4078 0114 FB69     		ldr	r3, [r7, #28]
 4079 0116 03F10803 		add	r3, r3, #8
 4080 011a FB61     		str	r3, [r7, #28]
 440:src/modbus.c  **** 
 441:src/modbus.c  **** 		count++;
 4081              		.loc 1 441 0
 4082 011c 7B69     		ldr	r3, [r7, #20]
 4083 011e 03F10103 		add	r3, r3, #1
 4084 0122 7B61     		str	r3, [r7, #20]
 4085              	.L122:
 4086              	.LBE12:
 421:src/modbus.c  **** 	while(count < 2){
 4087              		.loc 1 421 0 discriminator 1
 4088 0124 7B69     		ldr	r3, [r7, #20]
 4089 0126 012B     		cmp	r3, #1
 4090 0128 B6DD     		ble	.L125
 442:src/modbus.c  **** 	}
 443:src/modbus.c  **** //		//Store the data to be sent in response packet one by one till requested bits reached.
 444:src/modbus.c  **** //		*rPacket = result;
 445:src/modbus.c  **** //		rPacket++;
 446:src/modbus.c  **** //		//printf("Data: 0x%x\n", result);
 447:src/modbus.c  **** 
 448:src/modbus.c  **** 
 449:src/modbus.c  **** //	for (d = 0; d < (1 + 3); d++) {
 450:src/modbus.c  **** //		printf("\n0x%x", arrayResponsePacket[d]);
 451:src/modbus.c  **** //	}
 452:src/modbus.c  **** 
 453:src/modbus.c  **** 	return 0;
 4091              		.loc 1 453 0
 4092 012a 4FF00003 		mov	r3, #0
 454:src/modbus.c  **** 
 455:src/modbus.c  **** }
 4093              		.loc 1 455 0
 4094 012e 1846     		mov	r0, r3
 4095 0130 07F12807 		add	r7, r7, #40
 4096 0134 BD46     		mov	sp, r7
 4097 0136 80BD     		pop	{r7, pc}
 4098              		.cfi_endproc
 4099              	.LFE11:
 4101              		.section	.text.readInputRegisters,"ax",%progbits
 4102              		.align	2
 4103              		.global	readInputRegisters
 4104              		.thumb
 4105              		.thumb_func
 4107              	readInputRegisters:
 4108              	.LFB12:
 456:src/modbus.c  **** 
 457:src/modbus.c  **** uint32_t readInputRegisters(uint32_t *qPacket) {
 4109              		.loc 1 457 0
 4110              		.cfi_startproc
 4111              		@ args = 0, pretend = 0, frame = 48
 4112              		@ frame_needed = 1, uses_anonymous_args = 0
 4113 0000 80B5     		push	{r7, lr}
 4114              	.LCFI36:
 4115              		.cfi_def_cfa_offset 8
 4116              		.cfi_offset 14, -4
 4117              		.cfi_offset 7, -8
 4118 0002 8CB0     		sub	sp, sp, #48
 4119              	.LCFI37:
 4120              		.cfi_def_cfa_offset 56
 4121 0004 00AF     		add	r7, sp, #0
 4122              	.LCFI38:
 4123              		.cfi_def_cfa_register 7
 4124 0006 7860     		str	r0, [r7, #4]
 458:src/modbus.c  **** 
 459:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 460:src/modbus.c  **** 	qPacket++;
 4125              		.loc 1 460 0
 4126 0008 7B68     		ldr	r3, [r7, #4]
 4127 000a 03F10403 		add	r3, r3, #4
 4128 000e 7B60     		str	r3, [r7, #4]
 461:src/modbus.c  **** 
 462:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 463:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 464:src/modbus.c  **** 	firstRequest = 0x7530 + *qPacket++;
 4129              		.loc 1 464 0
 4130 0010 7B68     		ldr	r3, [r7, #4]
 4131 0012 1B68     		ldr	r3, [r3, #0]
 4132 0014 03F5EA42 		add	r2, r3, #29952
 4133 0018 02F13002 		add	r2, r2, #48
 4134 001c 40F20003 		movw	r3, #:lower16:firstRequest
 4135 0020 C0F20003 		movt	r3, #:upper16:firstRequest
 4136 0024 1A60     		str	r2, [r3, #0]
 4137 0026 7B68     		ldr	r3, [r7, #4]
 4138 0028 03F10403 		add	r3, r3, #4
 4139 002c 7B60     		str	r3, [r7, #4]
 465:src/modbus.c  **** 	totalRequest = *qPacket;
 4140              		.loc 1 465 0
 4141 002e 7B68     		ldr	r3, [r7, #4]
 4142 0030 1A68     		ldr	r2, [r3, #0]
 4143 0032 40F20003 		movw	r3, #:lower16:totalRequest
 4144 0036 C0F20003 		movt	r3, #:upper16:totalRequest
 4145 003a 1A60     		str	r2, [r3, #0]
 466:src/modbus.c  **** 
 467:src/modbus.c  **** 	//Calculate no. of byte and assign it to rPacket
 468:src/modbus.c  **** 	unsigned int byteStream = ((totalRequest / 8) + 1);
 4146              		.loc 1 468 0
 4147 003c 40F20003 		movw	r3, #:lower16:totalRequest
 4148 0040 C0F20003 		movt	r3, #:upper16:totalRequest
 4149 0044 1B68     		ldr	r3, [r3, #0]
 4150 0046 4FEAD303 		lsr	r3, r3, #3
 4151 004a 03F10103 		add	r3, r3, #1
 4152 004e FB60     		str	r3, [r7, #12]
 469:src/modbus.c  **** 
 470:src/modbus.c  **** 	//Copy no. of byte stream to be sent back to reponse packet
 471:src/modbus.c  **** 	*rPacket = (unsigned int) byteStream;
 4153              		.loc 1 471 0
 4154 0050 40F20003 		movw	r3, #:lower16:rPacket
 4155 0054 C0F20003 		movt	r3, #:upper16:rPacket
 4156 0058 1B68     		ldr	r3, [r3, #0]
 4157 005a FA68     		ldr	r2, [r7, #12]
 4158 005c 1A60     		str	r2, [r3, #0]
 472:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 473:src/modbus.c  **** 	rPacket++;
 4159              		.loc 1 473 0
 4160 005e 40F20003 		movw	r3, #:lower16:rPacket
 4161 0062 C0F20003 		movt	r3, #:upper16:rPacket
 4162 0066 1B68     		ldr	r3, [r3, #0]
 4163 0068 03F10402 		add	r2, r3, #4
 4164 006c 40F20003 		movw	r3, #:lower16:rPacket
 4165 0070 C0F20003 		movt	r3, #:upper16:rPacket
 4166 0074 1A60     		str	r2, [r3, #0]
 474:src/modbus.c  **** 
 475:src/modbus.c  **** 	//Fetch first address data.
 476:src/modbus.c  **** 	s = getData(firstRequest++);
 4167              		.loc 1 476 0
 4168 0076 40F20003 		movw	r3, #:lower16:firstRequest
 4169 007a C0F20003 		movt	r3, #:upper16:firstRequest
 4170 007e 1B68     		ldr	r3, [r3, #0]
 4171 0080 1A46     		mov	r2, r3
 4172 0082 03F10101 		add	r1, r3, #1
 4173 0086 40F20003 		movw	r3, #:lower16:firstRequest
 4174 008a C0F20003 		movt	r3, #:upper16:firstRequest
 4175 008e 1960     		str	r1, [r3, #0]
 4176 0090 1046     		mov	r0, r2
 4177 0092 FFF7FEFF 		bl	getData
 4178 0096 0246     		mov	r2, r0
 4179 0098 40F20003 		movw	r3, #:lower16:s
 4180 009c C0F20003 		movt	r3, #:upper16:s
 4181 00a0 1A60     		str	r2, [r3, #0]
 477:src/modbus.c  **** 
 478:src/modbus.c  **** 	int tempTotalRequest = (int) totalRequest;
 4182              		.loc 1 478 0
 4183 00a2 40F20003 		movw	r3, #:lower16:totalRequest
 4184 00a6 C0F20003 		movt	r3, #:upper16:totalRequest
 4185 00aa 1B68     		ldr	r3, [r3, #0]
 4186 00ac FB62     		str	r3, [r7, #44]
 479:src/modbus.c  **** 	int count = 0;
 4187              		.loc 1 479 0
 4188 00ae 4FF00003 		mov	r3, #0
 4189 00b2 BB62     		str	r3, [r7, #40]
 480:src/modbus.c  **** 	int fromBit = 0;
 4190              		.loc 1 480 0
 4191 00b4 4FF00003 		mov	r3, #0
 4192 00b8 7B62     		str	r3, [r7, #36]
 481:src/modbus.c  **** 	int toBit = 7;
 4193              		.loc 1 481 0
 4194 00ba 4FF00703 		mov	r3, #7
 4195 00be 3B62     		str	r3, [r7, #32]
 482:src/modbus.c  **** 	int shiftRight;
 483:src/modbus.c  **** 	int flag = 0;
 4196              		.loc 1 483 0
 4197 00c0 4FF00003 		mov	r3, #0
 4198 00c4 BB61     		str	r3, [r7, #24]
 484:src/modbus.c  **** 	int maxCount = 0;
 4199              		.loc 1 484 0
 4200 00c6 4FF00003 		mov	r3, #0
 4201 00ca 7B61     		str	r3, [r7, #20]
 485:src/modbus.c  **** 	//int d;
 486:src/modbus.c  **** 
 487:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4202              		.loc 1 487 0
 4203 00cc 9CE0     		b	.L128
 4204              	.L137:
 4205              	.LBB13:
 488:src/modbus.c  **** 
 489:src/modbus.c  **** 		if (totalRequest < 8) {
 4206              		.loc 1 489 0
 4207 00ce 40F20003 		movw	r3, #:lower16:totalRequest
 4208 00d2 C0F20003 		movt	r3, #:upper16:totalRequest
 4209 00d6 1B68     		ldr	r3, [r3, #0]
 4210 00d8 072B     		cmp	r3, #7
 4211 00da 07D8     		bhi	.L129
 490:src/modbus.c  **** 			toBit = totalRequest - 1;
 4212              		.loc 1 490 0
 4213 00dc 40F20003 		movw	r3, #:lower16:totalRequest
 4214 00e0 C0F20003 		movt	r3, #:upper16:totalRequest
 4215 00e4 1B68     		ldr	r3, [r3, #0]
 4216 00e6 03F1FF33 		add	r3, r3, #-1
 4217 00ea 3B62     		str	r3, [r7, #32]
 4218              	.L129:
 491:src/modbus.c  **** 		}
 492:src/modbus.c  **** 
 493:src/modbus.c  **** 		//Check if temp (having totalRequest) has modulus value of totalRequest.
 494:src/modbus.c  **** 		if (tempTotalRequest == (totalRequest % 8) && flag == 1) {
 4219              		.loc 1 494 0
 4220 00ec FA6A     		ldr	r2, [r7, #44]
 4221 00ee 40F20003 		movw	r3, #:lower16:totalRequest
 4222 00f2 C0F20003 		movt	r3, #:upper16:totalRequest
 4223 00f6 1B68     		ldr	r3, [r3, #0]
 4224 00f8 03F00703 		and	r3, r3, #7
 4225 00fc 9A42     		cmp	r2, r3
 4226 00fe 0CD1     		bne	.L130
 4227              		.loc 1 494 0 is_stmt 0 discriminator 1
 4228 0100 BB69     		ldr	r3, [r7, #24]
 4229 0102 012B     		cmp	r3, #1
 4230 0104 09D1     		bne	.L130
 495:src/modbus.c  **** 			toBit = (totalRequest % 8) - 1; //if true the set toBit to modules minus-1.
 4231              		.loc 1 495 0 is_stmt 1
 4232 0106 40F20003 		movw	r3, #:lower16:totalRequest
 4233 010a C0F20003 		movt	r3, #:upper16:totalRequest
 4234 010e 1B68     		ldr	r3, [r3, #0]
 4235 0110 03F00703 		and	r3, r3, #7
 4236 0114 03F1FF33 		add	r3, r3, #-1
 4237 0118 3B62     		str	r3, [r7, #32]
 4238              	.L130:
 496:src/modbus.c  **** 		}
 497:src/modbus.c  **** 
 498:src/modbus.c  **** 		//Call masking function and store value in r.
 499:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 4239              		.loc 1 499 0
 4240 011a 786A     		ldr	r0, [r7, #36]
 4241 011c 396A     		ldr	r1, [r7, #32]
 4242 011e FFF7FEFF 		bl	getMask
 4243 0122 B860     		str	r0, [r7, #8]
 500:src/modbus.c  **** 
 501:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 502:src/modbus.c  **** 		unsigned int result = r & s->value;
 4244              		.loc 1 502 0
 4245 0124 40F20003 		movw	r3, #:lower16:s
 4246 0128 C0F20003 		movt	r3, #:upper16:s
 4247 012c 1B68     		ldr	r3, [r3, #0]
 4248 012e 5B68     		ldr	r3, [r3, #4]
 4249 0130 1A46     		mov	r2, r3
 4250 0132 BB68     		ldr	r3, [r7, #8]
 4251 0134 1340     		ands	r3, r3, r2
 4252 0136 3B61     		str	r3, [r7, #16]
 503:src/modbus.c  **** 
 504:src/modbus.c  **** 		//Check if first 8 Bit then go to "next" label.
 505:src/modbus.c  **** 		if (toBit == 7) {
 4253              		.loc 1 505 0
 4254 0138 3B6A     		ldr	r3, [r7, #32]
 4255 013a 072B     		cmp	r3, #7
 4256 013c 0ED0     		beq	.L138
 4257              	.L131:
 506:src/modbus.c  **** 			goto next;
 507:src/modbus.c  **** 		}
 508:src/modbus.c  **** 
 509:src/modbus.c  **** 		//Else shift right.
 510:src/modbus.c  **** 		else {
 511:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4258              		.loc 1 511 0
 4259 013e 7B6A     		ldr	r3, [r7, #36]
 4260 0140 FB61     		str	r3, [r7, #28]
 4261 0142 07E0     		b	.L133
 4262              	.L134:
 512:src/modbus.c  **** 				result = result >> 1;
 4263              		.loc 1 512 0 discriminator 2
 4264 0144 3B69     		ldr	r3, [r7, #16]
 4265 0146 4FEA5303 		lsr	r3, r3, #1
 4266 014a 3B61     		str	r3, [r7, #16]
 511:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4267              		.loc 1 511 0 discriminator 2
 4268 014c FB69     		ldr	r3, [r7, #28]
 4269 014e 03F1FF33 		add	r3, r3, #-1
 4270 0152 FB61     		str	r3, [r7, #28]
 4271              	.L133:
 511:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4272              		.loc 1 511 0 is_stmt 0 discriminator 1
 4273 0154 FB69     		ldr	r3, [r7, #28]
 4274 0156 002B     		cmp	r3, #0
 4275 0158 F4DC     		bgt	.L134
 4276 015a 00E0     		b	.L132
 4277              	.L138:
 506:src/modbus.c  **** 			goto next;
 4278              		.loc 1 506 0 is_stmt 1
 4279 015c 00BF     		nop
 4280              	.L132:
 513:src/modbus.c  **** 			}
 514:src/modbus.c  **** 		}
 515:src/modbus.c  **** 
 516:src/modbus.c  **** 		//Label
 517:src/modbus.c  **** 		next:
 518:src/modbus.c  **** 
 519:src/modbus.c  **** 		//Store the data to be sent in response packet one by one till requested bits reached.
 520:src/modbus.c  **** 		*rPacket = result;
 4281              		.loc 1 520 0
 4282 015e 40F20003 		movw	r3, #:lower16:rPacket
 4283 0162 C0F20003 		movt	r3, #:upper16:rPacket
 4284 0166 1B68     		ldr	r3, [r3, #0]
 4285 0168 3A69     		ldr	r2, [r7, #16]
 4286 016a 1A60     		str	r2, [r3, #0]
 521:src/modbus.c  **** 		rPacket++;
 4287              		.loc 1 521 0
 4288 016c 40F20003 		movw	r3, #:lower16:rPacket
 4289 0170 C0F20003 		movt	r3, #:upper16:rPacket
 4290 0174 1B68     		ldr	r3, [r3, #0]
 4291 0176 03F10402 		add	r2, r3, #4
 4292 017a 40F20003 		movw	r3, #:lower16:rPacket
 4293 017e C0F20003 		movt	r3, #:upper16:rPacket
 4294 0182 1A60     		str	r2, [r3, #0]
 522:src/modbus.c  **** //		printf("Data: 0x%x\n", result);
 523:src/modbus.c  **** 
 524:src/modbus.c  **** 		//Increase the countbuffer to check if 32 bit data sent or not
 525:src/modbus.c  **** 		count++;
 4295              		.loc 1 525 0
 4296 0184 BB6A     		ldr	r3, [r7, #40]
 4297 0186 03F10103 		add	r3, r3, #1
 4298 018a BB62     		str	r3, [r7, #40]
 526:src/modbus.c  **** 
 527:src/modbus.c  **** 		//Decrement the totalReqeust (assigned to temp) by 8 after sending 8 bit.
 528:src/modbus.c  **** 		tempTotalRequest = tempTotalRequest - 8;
 4299              		.loc 1 528 0
 4300 018c FB6A     		ldr	r3, [r7, #44]
 4301 018e A3F10803 		sub	r3, r3, #8
 4302 0192 FB62     		str	r3, [r7, #44]
 529:src/modbus.c  **** 
 530:src/modbus.c  **** 		//Check if totalRequest is more than 32 bit or not.
 531:src/modbus.c  **** 		if (totalRequest >= 32) {
 4303              		.loc 1 531 0
 4304 0194 40F20003 		movw	r3, #:lower16:totalRequest
 4305 0198 C0F20003 		movt	r3, #:upper16:totalRequest
 4306 019c 1B68     		ldr	r3, [r3, #0]
 4307 019e 1F2B     		cmp	r3, #31
 4308 01a0 02D9     		bls	.L135
 532:src/modbus.c  **** 			maxCount = 4;
 4309              		.loc 1 532 0
 4310 01a2 4FF00403 		mov	r3, #4
 4311 01a6 7B61     		str	r3, [r7, #20]
 4312              	.L135:
 533:src/modbus.c  **** 		}
 534:src/modbus.c  **** 
 535:src/modbus.c  **** 		//If not then set
 536:src/modbus.c  **** 		/*else{
 537:src/modbus.c  **** 		 count = 0;
 538:src/modbus.c  **** 		 fromBit = 0;
 539:src/modbus.c  **** 		 toBit = 7;
 540:src/modbus.c  **** 		 flag = 1;
 541:src/modbus.c  **** 		 goto again;
 542:src/modbus.c  **** 		 }*/
 543:src/modbus.c  **** 
 544:src/modbus.c  **** 		//If count reached b i.e. total 4*8 Bit sent (32 bit) then get next value from hash.
 545:src/modbus.c  **** 		if (count == maxCount) {
 4313              		.loc 1 545 0
 4314 01a8 BA6A     		ldr	r2, [r7, #40]
 4315 01aa 7B69     		ldr	r3, [r7, #20]
 4316 01ac 9A42     		cmp	r2, r3
 4317 01ae 23D1     		bne	.L136
 546:src/modbus.c  **** 			s = getData(firstRequest++);
 4318              		.loc 1 546 0
 4319 01b0 40F20003 		movw	r3, #:lower16:firstRequest
 4320 01b4 C0F20003 		movt	r3, #:upper16:firstRequest
 4321 01b8 1B68     		ldr	r3, [r3, #0]
 4322 01ba 1A46     		mov	r2, r3
 4323 01bc 03F10101 		add	r1, r3, #1
 4324 01c0 40F20003 		movw	r3, #:lower16:firstRequest
 4325 01c4 C0F20003 		movt	r3, #:upper16:firstRequest
 4326 01c8 1960     		str	r1, [r3, #0]
 4327 01ca 1046     		mov	r0, r2
 4328 01cc FFF7FEFF 		bl	getData
 4329 01d0 0246     		mov	r2, r0
 4330 01d2 40F20003 		movw	r3, #:lower16:s
 4331 01d6 C0F20003 		movt	r3, #:upper16:s
 4332 01da 1A60     		str	r2, [r3, #0]
 547:src/modbus.c  **** 			count = 0;
 4333              		.loc 1 547 0
 4334 01dc 4FF00003 		mov	r3, #0
 4335 01e0 BB62     		str	r3, [r7, #40]
 548:src/modbus.c  **** 			fromBit = 0;
 4336              		.loc 1 548 0
 4337 01e2 4FF00003 		mov	r3, #0
 4338 01e6 7B62     		str	r3, [r7, #36]
 549:src/modbus.c  **** 			toBit = 7;
 4339              		.loc 1 549 0
 4340 01e8 4FF00703 		mov	r3, #7
 4341 01ec 3B62     		str	r3, [r7, #32]
 550:src/modbus.c  **** 			flag = 1;
 4342              		.loc 1 550 0
 4343 01ee 4FF00103 		mov	r3, #1
 4344 01f2 BB61     		str	r3, [r7, #24]
 551:src/modbus.c  **** 			goto again;
 4345              		.loc 1 551 0
 4346 01f4 00BF     		nop
 4347              	.L127:
 4348              	.LBE13:
 487:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4349              		.loc 1 487 0
 4350 01f6 07E0     		b	.L128
 4351              	.L136:
 4352              	.LBB14:
 552:src/modbus.c  **** 		}
 553:src/modbus.c  **** 
 554:src/modbus.c  **** 		//Increase fromBit and toBit to fetch next 8 bit.
 555:src/modbus.c  **** 		fromBit = fromBit + 8;
 4353              		.loc 1 555 0
 4354 01f8 7B6A     		ldr	r3, [r7, #36]
 4355 01fa 03F10803 		add	r3, r3, #8
 4356 01fe 7B62     		str	r3, [r7, #36]
 556:src/modbus.c  **** 		toBit = toBit + 8;
 4357              		.loc 1 556 0
 4358 0200 3B6A     		ldr	r3, [r7, #32]
 4359 0202 03F10803 		add	r3, r3, #8
 4360 0206 3B62     		str	r3, [r7, #32]
 4361              	.L128:
 4362              	.LBE14:
 487:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4363              		.loc 1 487 0 discriminator 1
 4364 0208 FB6A     		ldr	r3, [r7, #44]
 4365 020a 002B     		cmp	r3, #0
 4366 020c 3FF75FAF 		bgt	.L137
 557:src/modbus.c  **** 	}
 558:src/modbus.c  **** /*
 559:src/modbus.c  **** 	for (d = 0; d < (byteStream + 3); d++) {
 560:src/modbus.c  **** 		printf("\n0x%x", arrayResponsePacket[d]);
 561:src/modbus.c  **** 	}
 562:src/modbus.c  **** 
 563:src/modbus.c  **** */
 564:src/modbus.c  **** 	return 0;
 4367              		.loc 1 564 0
 4368 0210 4FF00003 		mov	r3, #0
 565:src/modbus.c  **** 
 566:src/modbus.c  **** }
 4369              		.loc 1 566 0
 4370 0214 1846     		mov	r0, r3
 4371 0216 07F13007 		add	r7, r7, #48
 4372 021a BD46     		mov	sp, r7
 4373 021c 80BD     		pop	{r7, pc}
 4374              		.cfi_endproc
 4375              	.LFE12:
 4377 021e 00BF     		.section	.text.readHoldingRegisters,"ax",%progbits
 4378              		.align	2
 4379              		.global	readHoldingRegisters
 4380              		.thumb
 4381              		.thumb_func
 4383              	readHoldingRegisters:
 4384              	.LFB13:
 567:src/modbus.c  **** 
 568:src/modbus.c  **** uint32_t readHoldingRegisters(uint32_t *qPacket) {
 4385              		.loc 1 568 0
 4386              		.cfi_startproc
 4387              		@ args = 0, pretend = 0, frame = 48
 4388              		@ frame_needed = 1, uses_anonymous_args = 0
 4389 0000 80B5     		push	{r7, lr}
 4390              	.LCFI39:
 4391              		.cfi_def_cfa_offset 8
 4392              		.cfi_offset 14, -4
 4393              		.cfi_offset 7, -8
 4394 0002 8CB0     		sub	sp, sp, #48
 4395              	.LCFI40:
 4396              		.cfi_def_cfa_offset 56
 4397 0004 00AF     		add	r7, sp, #0
 4398              	.LCFI41:
 4399              		.cfi_def_cfa_register 7
 4400 0006 7860     		str	r0, [r7, #4]
 569:src/modbus.c  **** 
 570:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 571:src/modbus.c  **** 	qPacket++;
 4401              		.loc 1 571 0
 4402 0008 7B68     		ldr	r3, [r7, #4]
 4403 000a 03F10403 		add	r3, r3, #4
 4404 000e 7B60     		str	r3, [r7, #4]
 572:src/modbus.c  **** 
 573:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 574:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 575:src/modbus.c  **** 	firstRequest = 0x9C40 | *qPacket++;
 4405              		.loc 1 575 0
 4406 0010 7B68     		ldr	r3, [r7, #4]
 4407 0012 1B68     		ldr	r3, [r3, #0]
 4408 0014 43F41C42 		orr	r2, r3, #39936
 4409 0018 42F04002 		orr	r2, r2, #64
 4410 001c 40F20003 		movw	r3, #:lower16:firstRequest
 4411 0020 C0F20003 		movt	r3, #:upper16:firstRequest
 4412 0024 1A60     		str	r2, [r3, #0]
 4413 0026 7B68     		ldr	r3, [r7, #4]
 4414 0028 03F10403 		add	r3, r3, #4
 4415 002c 7B60     		str	r3, [r7, #4]
 576:src/modbus.c  **** 	totalRequest = *qPacket;
 4416              		.loc 1 576 0
 4417 002e 7B68     		ldr	r3, [r7, #4]
 4418 0030 1A68     		ldr	r2, [r3, #0]
 4419 0032 40F20003 		movw	r3, #:lower16:totalRequest
 4420 0036 C0F20003 		movt	r3, #:upper16:totalRequest
 4421 003a 1A60     		str	r2, [r3, #0]
 577:src/modbus.c  **** 
 578:src/modbus.c  **** 	//Calculate no. of byte and assign it to rPacket
 579:src/modbus.c  **** 	unsigned int byteStream = totalRequest * 2;
 4422              		.loc 1 579 0
 4423 003c 40F20003 		movw	r3, #:lower16:totalRequest
 4424 0040 C0F20003 		movt	r3, #:upper16:totalRequest
 4425 0044 1B68     		ldr	r3, [r3, #0]
 4426 0046 4FEA4303 		lsl	r3, r3, #1
 4427 004a BB61     		str	r3, [r7, #24]
 580:src/modbus.c  **** 
 581:src/modbus.c  **** 	//Copy no. of byte stream to be sent back to response packet
 582:src/modbus.c  **** 	*rPacket = (unsigned int) byteStream;
 4428              		.loc 1 582 0
 4429 004c 40F20003 		movw	r3, #:lower16:rPacket
 4430 0050 C0F20003 		movt	r3, #:upper16:rPacket
 4431 0054 1B68     		ldr	r3, [r3, #0]
 4432 0056 BA69     		ldr	r2, [r7, #24]
 4433 0058 1A60     		str	r2, [r3, #0]
 583:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 584:src/modbus.c  **** 	rPacket++;
 4434              		.loc 1 584 0
 4435 005a 40F20003 		movw	r3, #:lower16:rPacket
 4436 005e C0F20003 		movt	r3, #:upper16:rPacket
 4437 0062 1B68     		ldr	r3, [r3, #0]
 4438 0064 03F10402 		add	r2, r3, #4
 4439 0068 40F20003 		movw	r3, #:lower16:rPacket
 4440 006c C0F20003 		movt	r3, #:upper16:rPacket
 4441 0070 1A60     		str	r2, [r3, #0]
 585:src/modbus.c  **** 
 586:src/modbus.c  **** 	//Fetch first address data.
 587:src/modbus.c  **** 	s = getData(firstRequest++);
 4442              		.loc 1 587 0
 4443 0072 40F20003 		movw	r3, #:lower16:firstRequest
 4444 0076 C0F20003 		movt	r3, #:upper16:firstRequest
 4445 007a 1B68     		ldr	r3, [r3, #0]
 4446 007c 1A46     		mov	r2, r3
 4447 007e 03F10101 		add	r1, r3, #1
 4448 0082 40F20003 		movw	r3, #:lower16:firstRequest
 4449 0086 C0F20003 		movt	r3, #:upper16:firstRequest
 4450 008a 1960     		str	r1, [r3, #0]
 4451 008c 1046     		mov	r0, r2
 4452 008e FFF7FEFF 		bl	getData
 4453 0092 0246     		mov	r2, r0
 4454 0094 40F20003 		movw	r3, #:lower16:s
 4455 0098 C0F20003 		movt	r3, #:upper16:s
 4456 009c 1A60     		str	r2, [r3, #0]
 588:src/modbus.c  **** 
 589:src/modbus.c  **** 	int tempTotalRequest = (int) totalRequest;
 4457              		.loc 1 589 0
 4458 009e 40F20003 		movw	r3, #:lower16:totalRequest
 4459 00a2 C0F20003 		movt	r3, #:upper16:totalRequest
 4460 00a6 1B68     		ldr	r3, [r3, #0]
 4461 00a8 FB62     		str	r3, [r7, #44]
 590:src/modbus.c  **** 	int fromBit = 0;
 4462              		.loc 1 590 0
 4463 00aa 4FF00003 		mov	r3, #0
 4464 00ae 7B61     		str	r3, [r7, #20]
 591:src/modbus.c  **** 	int toBit = 15;
 4465              		.loc 1 591 0
 4466 00b0 4FF00F03 		mov	r3, #15
 4467 00b4 3B61     		str	r3, [r7, #16]
 592:src/modbus.c  **** 	int shiftRight;
 593:src/modbus.c  **** 	//int d;
 594:src/modbus.c  **** 
 595:src/modbus.c  **** 	while (tempTotalRequest > 0) {
 4468              		.loc 1 595 0
 4469 00b6 5BE0     		b	.L140
 4470              	.L145:
 4471              	.LBB15:
 596:src/modbus.c  **** 
 597:src/modbus.c  **** 		int fromBit = 0;
 4472              		.loc 1 597 0
 4473 00b8 4FF00003 		mov	r3, #0
 4474 00bc 7B62     		str	r3, [r7, #36]
 598:src/modbus.c  **** 		int toBit = 7;
 4475              		.loc 1 598 0
 4476 00be 4FF00703 		mov	r3, #7
 4477 00c2 3B62     		str	r3, [r7, #32]
 599:src/modbus.c  **** 
 600:src/modbus.c  **** 		while(fromBit <= 8){
 4478              		.loc 1 600 0
 4479 00c4 37E0     		b	.L141
 4480              	.L144:
 4481              	.LBB16:
 601:src/modbus.c  **** 				//Call masking function and store value in r.
 602:src/modbus.c  **** 				unsigned int r = getMask(fromBit, toBit);
 4482              		.loc 1 602 0
 4483 00c6 786A     		ldr	r0, [r7, #36]
 4484 00c8 396A     		ldr	r1, [r7, #32]
 4485 00ca FFF7FEFF 		bl	getMask
 4486 00ce F860     		str	r0, [r7, #12]
 603:src/modbus.c  **** 
 604:src/modbus.c  **** 				//Get masking done on data from hash and store in result.
 605:src/modbus.c  **** 				unsigned int result = r & s->value;
 4487              		.loc 1 605 0
 4488 00d0 40F20003 		movw	r3, #:lower16:s
 4489 00d4 C0F20003 		movt	r3, #:upper16:s
 4490 00d8 1B68     		ldr	r3, [r3, #0]
 4491 00da 5B68     		ldr	r3, [r3, #4]
 4492 00dc 1A46     		mov	r2, r3
 4493 00de FB68     		ldr	r3, [r7, #12]
 4494 00e0 1340     		ands	r3, r3, r2
 4495 00e2 FB61     		str	r3, [r7, #28]
 606:src/modbus.c  **** 
 607:src/modbus.c  **** 				for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4496              		.loc 1 607 0
 4497 00e4 7B6A     		ldr	r3, [r7, #36]
 4498 00e6 BB62     		str	r3, [r7, #40]
 4499 00e8 07E0     		b	.L142
 4500              	.L143:
 608:src/modbus.c  **** 					result = result >> 1;
 4501              		.loc 1 608 0 discriminator 2
 4502 00ea FB69     		ldr	r3, [r7, #28]
 4503 00ec 4FEA5303 		lsr	r3, r3, #1
 4504 00f0 FB61     		str	r3, [r7, #28]
 607:src/modbus.c  **** 				for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4505              		.loc 1 607 0 discriminator 2
 4506 00f2 BB6A     		ldr	r3, [r7, #40]
 4507 00f4 03F1FF33 		add	r3, r3, #-1
 4508 00f8 BB62     		str	r3, [r7, #40]
 4509              	.L142:
 607:src/modbus.c  **** 				for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4510              		.loc 1 607 0 is_stmt 0 discriminator 1
 4511 00fa BB6A     		ldr	r3, [r7, #40]
 4512 00fc 002B     		cmp	r3, #0
 4513 00fe F4DC     		bgt	.L143
 609:src/modbus.c  **** 				}
 610:src/modbus.c  **** 
 611:src/modbus.c  **** 				//Store the data to be sent in response packet one by one till requested bits reached.
 612:src/modbus.c  **** 				*rPacket = result;
 4514              		.loc 1 612 0 is_stmt 1
 4515 0100 40F20003 		movw	r3, #:lower16:rPacket
 4516 0104 C0F20003 		movt	r3, #:upper16:rPacket
 4517 0108 1B68     		ldr	r3, [r3, #0]
 4518 010a FA69     		ldr	r2, [r7, #28]
 4519 010c 1A60     		str	r2, [r3, #0]
 613:src/modbus.c  **** 				rPacket++;
 4520              		.loc 1 613 0
 4521 010e 40F20003 		movw	r3, #:lower16:rPacket
 4522 0112 C0F20003 		movt	r3, #:upper16:rPacket
 4523 0116 1B68     		ldr	r3, [r3, #0]
 4524 0118 03F10402 		add	r2, r3, #4
 4525 011c 40F20003 		movw	r3, #:lower16:rPacket
 4526 0120 C0F20003 		movt	r3, #:upper16:rPacket
 4527 0124 1A60     		str	r2, [r3, #0]
 614:src/modbus.c  **** 				//printf("Data: 0x%x\n", result);
 615:src/modbus.c  **** 
 616:src/modbus.c  **** 
 617:src/modbus.c  **** 				//Increase from and to bit
 618:src/modbus.c  **** 				fromBit = fromBit + 8;
 4528              		.loc 1 618 0
 4529 0126 7B6A     		ldr	r3, [r7, #36]
 4530 0128 03F10803 		add	r3, r3, #8
 4531 012c 7B62     		str	r3, [r7, #36]
 619:src/modbus.c  **** 				toBit = toBit + 8;
 4532              		.loc 1 619 0
 4533 012e 3B6A     		ldr	r3, [r7, #32]
 4534 0130 03F10803 		add	r3, r3, #8
 4535 0134 3B62     		str	r3, [r7, #32]
 4536              	.L141:
 4537              	.LBE16:
 600:src/modbus.c  **** 		while(fromBit <= 8){
 4538              		.loc 1 600 0 discriminator 1
 4539 0136 7B6A     		ldr	r3, [r7, #36]
 4540 0138 082B     		cmp	r3, #8
 4541 013a C4DD     		ble	.L144
 620:src/modbus.c  **** 		}
 621:src/modbus.c  **** 
 622:src/modbus.c  **** 		//Decrement request count
 623:src/modbus.c  **** 		tempTotalRequest = tempTotalRequest - 1;
 4542              		.loc 1 623 0
 4543 013c FB6A     		ldr	r3, [r7, #44]
 4544 013e 03F1FF33 		add	r3, r3, #-1
 4545 0142 FB62     		str	r3, [r7, #44]
 624:src/modbus.c  **** 
 625:src/modbus.c  **** 		//Fetch next data .
 626:src/modbus.c  **** 		s = getData(firstRequest++);
 4546              		.loc 1 626 0
 4547 0144 40F20003 		movw	r3, #:lower16:firstRequest
 4548 0148 C0F20003 		movt	r3, #:upper16:firstRequest
 4549 014c 1B68     		ldr	r3, [r3, #0]
 4550 014e 1A46     		mov	r2, r3
 4551 0150 03F10101 		add	r1, r3, #1
 4552 0154 40F20003 		movw	r3, #:lower16:firstRequest
 4553 0158 C0F20003 		movt	r3, #:upper16:firstRequest
 4554 015c 1960     		str	r1, [r3, #0]
 4555 015e 1046     		mov	r0, r2
 4556 0160 FFF7FEFF 		bl	getData
 4557 0164 0246     		mov	r2, r0
 4558 0166 40F20003 		movw	r3, #:lower16:s
 4559 016a C0F20003 		movt	r3, #:upper16:s
 4560 016e 1A60     		str	r2, [r3, #0]
 4561              	.L140:
 4562              	.LBE15:
 595:src/modbus.c  **** 	while (tempTotalRequest > 0) {
 4563              		.loc 1 595 0 discriminator 1
 4564 0170 FB6A     		ldr	r3, [r7, #44]
 4565 0172 002B     		cmp	r3, #0
 4566 0174 A0DC     		bgt	.L145
 627:src/modbus.c  **** 	}
 628:src/modbus.c  **** 
 629:src/modbus.c  **** /*	for (d = 0; d < ((byteStream / 2) + 3); d++) {
 630:src/modbus.c  **** 		printf("\n0x%x", arrayResponsePacket[d]);
 631:src/modbus.c  **** 	}
 632:src/modbus.c  **** */
 633:src/modbus.c  **** 	return 0;
 4567              		.loc 1 633 0
 4568 0176 4FF00003 		mov	r3, #0
 634:src/modbus.c  **** }
 4569              		.loc 1 634 0
 4570 017a 1846     		mov	r0, r3
 4571 017c 07F13007 		add	r7, r7, #48
 4572 0180 BD46     		mov	sp, r7
 4573 0182 80BD     		pop	{r7, pc}
 4574              		.cfi_endproc
 4575              	.LFE13:
 4577              		.section	.text.readDiscreteInputs,"ax",%progbits
 4578              		.align	2
 4579              		.global	readDiscreteInputs
 4580              		.thumb
 4581              		.thumb_func
 4583              	readDiscreteInputs:
 4584              	.LFB14:
 635:src/modbus.c  **** 
 636:src/modbus.c  **** uint32_t readDiscreteInputs(uint32_t *qPacket) {
 4585              		.loc 1 636 0
 4586              		.cfi_startproc
 4587              		@ args = 0, pretend = 0, frame = 48
 4588              		@ frame_needed = 1, uses_anonymous_args = 0
 4589 0000 80B5     		push	{r7, lr}
 4590              	.LCFI42:
 4591              		.cfi_def_cfa_offset 8
 4592              		.cfi_offset 14, -4
 4593              		.cfi_offset 7, -8
 4594 0002 8CB0     		sub	sp, sp, #48
 4595              	.LCFI43:
 4596              		.cfi_def_cfa_offset 56
 4597 0004 00AF     		add	r7, sp, #0
 4598              	.LCFI44:
 4599              		.cfi_def_cfa_register 7
 4600 0006 7860     		str	r0, [r7, #4]
 637:src/modbus.c  **** 
 638:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 639:src/modbus.c  **** 	qPacket++;
 4601              		.loc 1 639 0
 4602 0008 7B68     		ldr	r3, [r7, #4]
 4603 000a 03F10403 		add	r3, r3, #4
 4604 000e 7B60     		str	r3, [r7, #4]
 640:src/modbus.c  **** 
 641:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 642:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 643:src/modbus.c  **** 	firstRequest = 0x2710 | *qPacket++;
 4605              		.loc 1 643 0
 4606 0010 7B68     		ldr	r3, [r7, #4]
 4607 0012 1B68     		ldr	r3, [r3, #0]
 4608 0014 43F41C52 		orr	r2, r3, #9984
 4609 0018 42F01002 		orr	r2, r2, #16
 4610 001c 40F20003 		movw	r3, #:lower16:firstRequest
 4611 0020 C0F20003 		movt	r3, #:upper16:firstRequest
 4612 0024 1A60     		str	r2, [r3, #0]
 4613 0026 7B68     		ldr	r3, [r7, #4]
 4614 0028 03F10403 		add	r3, r3, #4
 4615 002c 7B60     		str	r3, [r7, #4]
 644:src/modbus.c  **** 	totalRequest = *qPacket;
 4616              		.loc 1 644 0
 4617 002e 7B68     		ldr	r3, [r7, #4]
 4618 0030 1A68     		ldr	r2, [r3, #0]
 4619 0032 40F20003 		movw	r3, #:lower16:totalRequest
 4620 0036 C0F20003 		movt	r3, #:upper16:totalRequest
 4621 003a 1A60     		str	r2, [r3, #0]
 645:src/modbus.c  **** 
 646:src/modbus.c  **** 	//Calculate no. of byte and assign it to rPacket
 647:src/modbus.c  **** 	unsigned int byteStream = ((totalRequest / 8) + 1);
 4622              		.loc 1 647 0
 4623 003c 40F20003 		movw	r3, #:lower16:totalRequest
 4624 0040 C0F20003 		movt	r3, #:upper16:totalRequest
 4625 0044 1B68     		ldr	r3, [r3, #0]
 4626 0046 4FEAD303 		lsr	r3, r3, #3
 4627 004a 03F10103 		add	r3, r3, #1
 4628 004e FB60     		str	r3, [r7, #12]
 648:src/modbus.c  **** 
 649:src/modbus.c  **** 	//Copy no. of byte stream to be sent back to reponse packet
 650:src/modbus.c  **** 	*rPacket = (unsigned int) byteStream;
 4629              		.loc 1 650 0
 4630 0050 40F20003 		movw	r3, #:lower16:rPacket
 4631 0054 C0F20003 		movt	r3, #:upper16:rPacket
 4632 0058 1B68     		ldr	r3, [r3, #0]
 4633 005a FA68     		ldr	r2, [r7, #12]
 4634 005c 1A60     		str	r2, [r3, #0]
 651:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 652:src/modbus.c  **** 	rPacket++;
 4635              		.loc 1 652 0
 4636 005e 40F20003 		movw	r3, #:lower16:rPacket
 4637 0062 C0F20003 		movt	r3, #:upper16:rPacket
 4638 0066 1B68     		ldr	r3, [r3, #0]
 4639 0068 03F10402 		add	r2, r3, #4
 4640 006c 40F20003 		movw	r3, #:lower16:rPacket
 4641 0070 C0F20003 		movt	r3, #:upper16:rPacket
 4642 0074 1A60     		str	r2, [r3, #0]
 653:src/modbus.c  **** 
 654:src/modbus.c  **** 	//Fetch first address data.
 655:src/modbus.c  **** 	s = getData(firstRequest++);
 4643              		.loc 1 655 0
 4644 0076 40F20003 		movw	r3, #:lower16:firstRequest
 4645 007a C0F20003 		movt	r3, #:upper16:firstRequest
 4646 007e 1B68     		ldr	r3, [r3, #0]
 4647 0080 1A46     		mov	r2, r3
 4648 0082 03F10101 		add	r1, r3, #1
 4649 0086 40F20003 		movw	r3, #:lower16:firstRequest
 4650 008a C0F20003 		movt	r3, #:upper16:firstRequest
 4651 008e 1960     		str	r1, [r3, #0]
 4652 0090 1046     		mov	r0, r2
 4653 0092 FFF7FEFF 		bl	getData
 4654 0096 0246     		mov	r2, r0
 4655 0098 40F20003 		movw	r3, #:lower16:s
 4656 009c C0F20003 		movt	r3, #:upper16:s
 4657 00a0 1A60     		str	r2, [r3, #0]
 656:src/modbus.c  **** 
 657:src/modbus.c  **** 	int tempTotalRequest = (int) totalRequest;
 4658              		.loc 1 657 0
 4659 00a2 40F20003 		movw	r3, #:lower16:totalRequest
 4660 00a6 C0F20003 		movt	r3, #:upper16:totalRequest
 4661 00aa 1B68     		ldr	r3, [r3, #0]
 4662 00ac FB62     		str	r3, [r7, #44]
 658:src/modbus.c  **** 	int count = 0;
 4663              		.loc 1 658 0
 4664 00ae 4FF00003 		mov	r3, #0
 4665 00b2 BB62     		str	r3, [r7, #40]
 659:src/modbus.c  **** 	int fromBit = 0;
 4666              		.loc 1 659 0
 4667 00b4 4FF00003 		mov	r3, #0
 4668 00b8 7B62     		str	r3, [r7, #36]
 660:src/modbus.c  **** 	int toBit = 7;
 4669              		.loc 1 660 0
 4670 00ba 4FF00703 		mov	r3, #7
 4671 00be 3B62     		str	r3, [r7, #32]
 661:src/modbus.c  **** 	int shiftRight;
 662:src/modbus.c  **** 	int flag = 0;
 4672              		.loc 1 662 0
 4673 00c0 4FF00003 		mov	r3, #0
 4674 00c4 BB61     		str	r3, [r7, #24]
 663:src/modbus.c  **** 	int maxCount = 0;
 4675              		.loc 1 663 0
 4676 00c6 4FF00003 		mov	r3, #0
 4677 00ca 7B61     		str	r3, [r7, #20]
 664:src/modbus.c  **** 	//int d;
 665:src/modbus.c  **** 
 666:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4678              		.loc 1 666 0
 4679 00cc 9CE0     		b	.L148
 4680              	.L157:
 4681              	.LBB17:
 667:src/modbus.c  **** 
 668:src/modbus.c  **** 		if (totalRequest < 8) {
 4682              		.loc 1 668 0
 4683 00ce 40F20003 		movw	r3, #:lower16:totalRequest
 4684 00d2 C0F20003 		movt	r3, #:upper16:totalRequest
 4685 00d6 1B68     		ldr	r3, [r3, #0]
 4686 00d8 072B     		cmp	r3, #7
 4687 00da 07D8     		bhi	.L149
 669:src/modbus.c  **** 			toBit = totalRequest - 1;
 4688              		.loc 1 669 0
 4689 00dc 40F20003 		movw	r3, #:lower16:totalRequest
 4690 00e0 C0F20003 		movt	r3, #:upper16:totalRequest
 4691 00e4 1B68     		ldr	r3, [r3, #0]
 4692 00e6 03F1FF33 		add	r3, r3, #-1
 4693 00ea 3B62     		str	r3, [r7, #32]
 4694              	.L149:
 670:src/modbus.c  **** 		}
 671:src/modbus.c  **** 
 672:src/modbus.c  **** 		//Check if temp (having totalRequest) has modulus value of totalRequest.
 673:src/modbus.c  **** 		if (tempTotalRequest == (totalRequest % 8) && flag == 1) {
 4695              		.loc 1 673 0
 4696 00ec FA6A     		ldr	r2, [r7, #44]
 4697 00ee 40F20003 		movw	r3, #:lower16:totalRequest
 4698 00f2 C0F20003 		movt	r3, #:upper16:totalRequest
 4699 00f6 1B68     		ldr	r3, [r3, #0]
 4700 00f8 03F00703 		and	r3, r3, #7
 4701 00fc 9A42     		cmp	r2, r3
 4702 00fe 0CD1     		bne	.L150
 4703              		.loc 1 673 0 is_stmt 0 discriminator 1
 4704 0100 BB69     		ldr	r3, [r7, #24]
 4705 0102 012B     		cmp	r3, #1
 4706 0104 09D1     		bne	.L150
 674:src/modbus.c  **** 			toBit = (totalRequest % 8) - 1; //if true the set toBit to modules minus-1.
 4707              		.loc 1 674 0 is_stmt 1
 4708 0106 40F20003 		movw	r3, #:lower16:totalRequest
 4709 010a C0F20003 		movt	r3, #:upper16:totalRequest
 4710 010e 1B68     		ldr	r3, [r3, #0]
 4711 0110 03F00703 		and	r3, r3, #7
 4712 0114 03F1FF33 		add	r3, r3, #-1
 4713 0118 3B62     		str	r3, [r7, #32]
 4714              	.L150:
 675:src/modbus.c  **** 		}
 676:src/modbus.c  **** 
 677:src/modbus.c  **** 		//Call masking function and store value in r.
 678:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 4715              		.loc 1 678 0
 4716 011a 786A     		ldr	r0, [r7, #36]
 4717 011c 396A     		ldr	r1, [r7, #32]
 4718 011e FFF7FEFF 		bl	getMask
 4719 0122 B860     		str	r0, [r7, #8]
 679:src/modbus.c  **** 
 680:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 681:src/modbus.c  **** 		unsigned int result = r & s->value;
 4720              		.loc 1 681 0
 4721 0124 40F20003 		movw	r3, #:lower16:s
 4722 0128 C0F20003 		movt	r3, #:upper16:s
 4723 012c 1B68     		ldr	r3, [r3, #0]
 4724 012e 5B68     		ldr	r3, [r3, #4]
 4725 0130 1A46     		mov	r2, r3
 4726 0132 BB68     		ldr	r3, [r7, #8]
 4727 0134 1340     		ands	r3, r3, r2
 4728 0136 3B61     		str	r3, [r7, #16]
 682:src/modbus.c  **** 
 683:src/modbus.c  **** 		//Check if first 8 Bit then go to "next" label.
 684:src/modbus.c  **** 		if (toBit == 7) {
 4729              		.loc 1 684 0
 4730 0138 3B6A     		ldr	r3, [r7, #32]
 4731 013a 072B     		cmp	r3, #7
 4732 013c 0ED0     		beq	.L158
 4733              	.L151:
 685:src/modbus.c  **** 			goto next;
 686:src/modbus.c  **** 		}
 687:src/modbus.c  **** 
 688:src/modbus.c  **** 		//Else shift right.
 689:src/modbus.c  **** 		else {
 690:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4734              		.loc 1 690 0
 4735 013e 7B6A     		ldr	r3, [r7, #36]
 4736 0140 FB61     		str	r3, [r7, #28]
 4737 0142 07E0     		b	.L153
 4738              	.L154:
 691:src/modbus.c  **** 				result = result >> 1;
 4739              		.loc 1 691 0 discriminator 2
 4740 0144 3B69     		ldr	r3, [r7, #16]
 4741 0146 4FEA5303 		lsr	r3, r3, #1
 4742 014a 3B61     		str	r3, [r7, #16]
 690:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4743              		.loc 1 690 0 discriminator 2
 4744 014c FB69     		ldr	r3, [r7, #28]
 4745 014e 03F1FF33 		add	r3, r3, #-1
 4746 0152 FB61     		str	r3, [r7, #28]
 4747              	.L153:
 690:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4748              		.loc 1 690 0 is_stmt 0 discriminator 1
 4749 0154 FB69     		ldr	r3, [r7, #28]
 4750 0156 002B     		cmp	r3, #0
 4751 0158 F4DC     		bgt	.L154
 4752 015a 00E0     		b	.L152
 4753              	.L158:
 685:src/modbus.c  **** 			goto next;
 4754              		.loc 1 685 0 is_stmt 1
 4755 015c 00BF     		nop
 4756              	.L152:
 692:src/modbus.c  **** 			}
 693:src/modbus.c  **** 		}
 694:src/modbus.c  **** 
 695:src/modbus.c  **** 		//Label
 696:src/modbus.c  **** 		next:
 697:src/modbus.c  **** 
 698:src/modbus.c  **** 		//Store the data to be sent in response packet one by one till requested bits reached.
 699:src/modbus.c  **** 		*rPacket = result;
 4757              		.loc 1 699 0
 4758 015e 40F20003 		movw	r3, #:lower16:rPacket
 4759 0162 C0F20003 		movt	r3, #:upper16:rPacket
 4760 0166 1B68     		ldr	r3, [r3, #0]
 4761 0168 3A69     		ldr	r2, [r7, #16]
 4762 016a 1A60     		str	r2, [r3, #0]
 700:src/modbus.c  **** 		rPacket++;
 4763              		.loc 1 700 0
 4764 016c 40F20003 		movw	r3, #:lower16:rPacket
 4765 0170 C0F20003 		movt	r3, #:upper16:rPacket
 4766 0174 1B68     		ldr	r3, [r3, #0]
 4767 0176 03F10402 		add	r2, r3, #4
 4768 017a 40F20003 		movw	r3, #:lower16:rPacket
 4769 017e C0F20003 		movt	r3, #:upper16:rPacket
 4770 0182 1A60     		str	r2, [r3, #0]
 701:src/modbus.c  **** //		printf("Data: 0x%x\n", result);
 702:src/modbus.c  **** 
 703:src/modbus.c  **** 		//Increase the countbuffer to check if 32 bit data sent or not
 704:src/modbus.c  **** 		count++;
 4771              		.loc 1 704 0
 4772 0184 BB6A     		ldr	r3, [r7, #40]
 4773 0186 03F10103 		add	r3, r3, #1
 4774 018a BB62     		str	r3, [r7, #40]
 705:src/modbus.c  **** 
 706:src/modbus.c  **** 		//Decrement the totalReqeust (assigned to temp) by 8 after sending 8 bit.
 707:src/modbus.c  **** 		tempTotalRequest = tempTotalRequest - 8;
 4775              		.loc 1 707 0
 4776 018c FB6A     		ldr	r3, [r7, #44]
 4777 018e A3F10803 		sub	r3, r3, #8
 4778 0192 FB62     		str	r3, [r7, #44]
 708:src/modbus.c  **** 
 709:src/modbus.c  **** 		//Check if totalRequest is more than 32 bit or not.
 710:src/modbus.c  **** 		if (totalRequest >= 32) {
 4779              		.loc 1 710 0
 4780 0194 40F20003 		movw	r3, #:lower16:totalRequest
 4781 0198 C0F20003 		movt	r3, #:upper16:totalRequest
 4782 019c 1B68     		ldr	r3, [r3, #0]
 4783 019e 1F2B     		cmp	r3, #31
 4784 01a0 02D9     		bls	.L155
 711:src/modbus.c  **** 			maxCount = 4;
 4785              		.loc 1 711 0
 4786 01a2 4FF00403 		mov	r3, #4
 4787 01a6 7B61     		str	r3, [r7, #20]
 4788              	.L155:
 712:src/modbus.c  **** 		}
 713:src/modbus.c  **** 
 714:src/modbus.c  **** 		//If not then set
 715:src/modbus.c  **** 		/*else{
 716:src/modbus.c  **** 		 count = 0;
 717:src/modbus.c  **** 		 fromBit = 0;
 718:src/modbus.c  **** 		 toBit = 7;
 719:src/modbus.c  **** 		 flag = 1;
 720:src/modbus.c  **** 		 goto again;
 721:src/modbus.c  **** 		 }*/
 722:src/modbus.c  **** 
 723:src/modbus.c  **** 		//If count reached b i.e. total 4*8 Bit sent (32 bit) then get next value from hash.
 724:src/modbus.c  **** 		if (count == maxCount) {
 4789              		.loc 1 724 0
 4790 01a8 BA6A     		ldr	r2, [r7, #40]
 4791 01aa 7B69     		ldr	r3, [r7, #20]
 4792 01ac 9A42     		cmp	r2, r3
 4793 01ae 23D1     		bne	.L156
 725:src/modbus.c  **** 			s = getData(firstRequest++);
 4794              		.loc 1 725 0
 4795 01b0 40F20003 		movw	r3, #:lower16:firstRequest
 4796 01b4 C0F20003 		movt	r3, #:upper16:firstRequest
 4797 01b8 1B68     		ldr	r3, [r3, #0]
 4798 01ba 1A46     		mov	r2, r3
 4799 01bc 03F10101 		add	r1, r3, #1
 4800 01c0 40F20003 		movw	r3, #:lower16:firstRequest
 4801 01c4 C0F20003 		movt	r3, #:upper16:firstRequest
 4802 01c8 1960     		str	r1, [r3, #0]
 4803 01ca 1046     		mov	r0, r2
 4804 01cc FFF7FEFF 		bl	getData
 4805 01d0 0246     		mov	r2, r0
 4806 01d2 40F20003 		movw	r3, #:lower16:s
 4807 01d6 C0F20003 		movt	r3, #:upper16:s
 4808 01da 1A60     		str	r2, [r3, #0]
 726:src/modbus.c  **** 			count = 0;
 4809              		.loc 1 726 0
 4810 01dc 4FF00003 		mov	r3, #0
 4811 01e0 BB62     		str	r3, [r7, #40]
 727:src/modbus.c  **** 			fromBit = 0;
 4812              		.loc 1 727 0
 4813 01e2 4FF00003 		mov	r3, #0
 4814 01e6 7B62     		str	r3, [r7, #36]
 728:src/modbus.c  **** 			toBit = 7;
 4815              		.loc 1 728 0
 4816 01e8 4FF00703 		mov	r3, #7
 4817 01ec 3B62     		str	r3, [r7, #32]
 729:src/modbus.c  **** 			flag = 1;
 4818              		.loc 1 729 0
 4819 01ee 4FF00103 		mov	r3, #1
 4820 01f2 BB61     		str	r3, [r7, #24]
 730:src/modbus.c  **** 			goto again;
 4821              		.loc 1 730 0
 4822 01f4 00BF     		nop
 4823              	.L147:
 4824              	.LBE17:
 666:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4825              		.loc 1 666 0
 4826 01f6 07E0     		b	.L148
 4827              	.L156:
 4828              	.LBB18:
 731:src/modbus.c  **** 		}
 732:src/modbus.c  **** 
 733:src/modbus.c  **** 		//Increase fromBit and toBit to fetch next 8 bit.
 734:src/modbus.c  **** 		fromBit = fromBit + 8;
 4829              		.loc 1 734 0
 4830 01f8 7B6A     		ldr	r3, [r7, #36]
 4831 01fa 03F10803 		add	r3, r3, #8
 4832 01fe 7B62     		str	r3, [r7, #36]
 735:src/modbus.c  **** 		toBit = toBit + 8;
 4833              		.loc 1 735 0
 4834 0200 3B6A     		ldr	r3, [r7, #32]
 4835 0202 03F10803 		add	r3, r3, #8
 4836 0206 3B62     		str	r3, [r7, #32]
 4837              	.L148:
 4838              	.LBE18:
 666:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4839              		.loc 1 666 0 discriminator 1
 4840 0208 FB6A     		ldr	r3, [r7, #44]
 4841 020a 002B     		cmp	r3, #0
 4842 020c 3FF75FAF 		bgt	.L157
 736:src/modbus.c  **** 	}
 737:src/modbus.c  **** /*
 738:src/modbus.c  **** 	for (d = 0; d < (byteStream + 3); d++) {
 739:src/modbus.c  **** 		printf("\n0x%x", arrayResponsePacket[d]);
 740:src/modbus.c  **** 	}
 741:src/modbus.c  **** */
 742:src/modbus.c  **** 	return 0;
 4843              		.loc 1 742 0
 4844 0210 4FF00003 		mov	r3, #0
 743:src/modbus.c  **** 
 744:src/modbus.c  **** }
 4845              		.loc 1 744 0
 4846 0214 1846     		mov	r0, r3
 4847 0216 07F13007 		add	r7, r7, #48
 4848 021a BD46     		mov	sp, r7
 4849 021c 80BD     		pop	{r7, pc}
 4850              		.cfi_endproc
 4851              	.LFE14:
 4853 021e 00BF     		.section	.text.readCoil,"ax",%progbits
 4854              		.align	2
 4855              		.global	readCoil
 4856              		.thumb
 4857              		.thumb_func
 4859              	readCoil:
 4860              	.LFB15:
 745:src/modbus.c  **** 
 746:src/modbus.c  **** uint32_t readCoil(uint32_t *qPacket) {
 4861              		.loc 1 746 0
 4862              		.cfi_startproc
 4863              		@ args = 0, pretend = 0, frame = 48
 4864              		@ frame_needed = 1, uses_anonymous_args = 0
 4865 0000 80B5     		push	{r7, lr}
 4866              	.LCFI45:
 4867              		.cfi_def_cfa_offset 8
 4868              		.cfi_offset 14, -4
 4869              		.cfi_offset 7, -8
 4870 0002 8CB0     		sub	sp, sp, #48
 4871              	.LCFI46:
 4872              		.cfi_def_cfa_offset 56
 4873 0004 00AF     		add	r7, sp, #0
 4874              	.LCFI47:
 4875              		.cfi_def_cfa_register 7
 4876 0006 7860     		str	r0, [r7, #4]
 747:src/modbus.c  **** 
 748:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 749:src/modbus.c  **** 	qPacket++;
 4877              		.loc 1 749 0
 4878 0008 7B68     		ldr	r3, [r7, #4]
 4879 000a 03F10403 		add	r3, r3, #4
 4880 000e 7B60     		str	r3, [r7, #4]
 750:src/modbus.c  **** 
 751:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 752:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 753:src/modbus.c  **** 	firstRequest = 0x0000 + *qPacket++;
 4881              		.loc 1 753 0
 4882 0010 7B68     		ldr	r3, [r7, #4]
 4883 0012 1A68     		ldr	r2, [r3, #0]
 4884 0014 40F20003 		movw	r3, #:lower16:firstRequest
 4885 0018 C0F20003 		movt	r3, #:upper16:firstRequest
 4886 001c 1A60     		str	r2, [r3, #0]
 4887 001e 7B68     		ldr	r3, [r7, #4]
 4888 0020 03F10403 		add	r3, r3, #4
 4889 0024 7B60     		str	r3, [r7, #4]
 754:src/modbus.c  **** 	totalRequest = *qPacket;
 4890              		.loc 1 754 0
 4891 0026 7B68     		ldr	r3, [r7, #4]
 4892 0028 1A68     		ldr	r2, [r3, #0]
 4893 002a 40F20003 		movw	r3, #:lower16:totalRequest
 4894 002e C0F20003 		movt	r3, #:upper16:totalRequest
 4895 0032 1A60     		str	r2, [r3, #0]
 755:src/modbus.c  **** 
 756:src/modbus.c  **** 	//Calculate no. of byte and assign it to rPacket
 757:src/modbus.c  **** 	unsigned int byteStream = ((totalRequest / 8) + 1);
 4896              		.loc 1 757 0
 4897 0034 40F20003 		movw	r3, #:lower16:totalRequest
 4898 0038 C0F20003 		movt	r3, #:upper16:totalRequest
 4899 003c 1B68     		ldr	r3, [r3, #0]
 4900 003e 4FEAD303 		lsr	r3, r3, #3
 4901 0042 03F10103 		add	r3, r3, #1
 4902 0046 FB60     		str	r3, [r7, #12]
 758:src/modbus.c  **** 
 759:src/modbus.c  **** 	//Copy no. of byte stream to be sent back to reponse packet
 760:src/modbus.c  **** 	*rPacket = (unsigned int) byteStream;
 4903              		.loc 1 760 0
 4904 0048 40F20003 		movw	r3, #:lower16:rPacket
 4905 004c C0F20003 		movt	r3, #:upper16:rPacket
 4906 0050 1B68     		ldr	r3, [r3, #0]
 4907 0052 FA68     		ldr	r2, [r7, #12]
 4908 0054 1A60     		str	r2, [r3, #0]
 761:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 762:src/modbus.c  **** 	rPacket++;
 4909              		.loc 1 762 0
 4910 0056 40F20003 		movw	r3, #:lower16:rPacket
 4911 005a C0F20003 		movt	r3, #:upper16:rPacket
 4912 005e 1B68     		ldr	r3, [r3, #0]
 4913 0060 03F10402 		add	r2, r3, #4
 4914 0064 40F20003 		movw	r3, #:lower16:rPacket
 4915 0068 C0F20003 		movt	r3, #:upper16:rPacket
 4916 006c 1A60     		str	r2, [r3, #0]
 763:src/modbus.c  **** 
 764:src/modbus.c  **** 	//Fetch first address data.
 765:src/modbus.c  **** 	s = getData(firstRequest++);
 4917              		.loc 1 765 0
 4918 006e 40F20003 		movw	r3, #:lower16:firstRequest
 4919 0072 C0F20003 		movt	r3, #:upper16:firstRequest
 4920 0076 1B68     		ldr	r3, [r3, #0]
 4921 0078 1A46     		mov	r2, r3
 4922 007a 03F10101 		add	r1, r3, #1
 4923 007e 40F20003 		movw	r3, #:lower16:firstRequest
 4924 0082 C0F20003 		movt	r3, #:upper16:firstRequest
 4925 0086 1960     		str	r1, [r3, #0]
 4926 0088 1046     		mov	r0, r2
 4927 008a FFF7FEFF 		bl	getData
 4928 008e 0246     		mov	r2, r0
 4929 0090 40F20003 		movw	r3, #:lower16:s
 4930 0094 C0F20003 		movt	r3, #:upper16:s
 4931 0098 1A60     		str	r2, [r3, #0]
 766:src/modbus.c  **** 
 767:src/modbus.c  **** 	int tempTotalRequest = (int) totalRequest;
 4932              		.loc 1 767 0
 4933 009a 40F20003 		movw	r3, #:lower16:totalRequest
 4934 009e C0F20003 		movt	r3, #:upper16:totalRequest
 4935 00a2 1B68     		ldr	r3, [r3, #0]
 4936 00a4 FB62     		str	r3, [r7, #44]
 768:src/modbus.c  **** 	int count = 0;
 4937              		.loc 1 768 0
 4938 00a6 4FF00003 		mov	r3, #0
 4939 00aa BB62     		str	r3, [r7, #40]
 769:src/modbus.c  **** 	int fromBit = 0;
 4940              		.loc 1 769 0
 4941 00ac 4FF00003 		mov	r3, #0
 4942 00b0 7B62     		str	r3, [r7, #36]
 770:src/modbus.c  **** 	int toBit = 7;
 4943              		.loc 1 770 0
 4944 00b2 4FF00703 		mov	r3, #7
 4945 00b6 3B62     		str	r3, [r7, #32]
 771:src/modbus.c  **** 	int shiftRight;
 772:src/modbus.c  **** 	int flag = 0;
 4946              		.loc 1 772 0
 4947 00b8 4FF00003 		mov	r3, #0
 4948 00bc BB61     		str	r3, [r7, #24]
 773:src/modbus.c  **** 	int maxCount = 0;
 4949              		.loc 1 773 0
 4950 00be 4FF00003 		mov	r3, #0
 4951 00c2 7B61     		str	r3, [r7, #20]
 774:src/modbus.c  **** 	//int d;
 775:src/modbus.c  **** 
 776:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4952              		.loc 1 776 0
 4953 00c4 9CE0     		b	.L161
 4954              	.L170:
 4955              	.LBB19:
 777:src/modbus.c  **** 
 778:src/modbus.c  **** 		if (totalRequest < 8) {
 4956              		.loc 1 778 0
 4957 00c6 40F20003 		movw	r3, #:lower16:totalRequest
 4958 00ca C0F20003 		movt	r3, #:upper16:totalRequest
 4959 00ce 1B68     		ldr	r3, [r3, #0]
 4960 00d0 072B     		cmp	r3, #7
 4961 00d2 07D8     		bhi	.L162
 779:src/modbus.c  **** 			toBit = totalRequest - 1;
 4962              		.loc 1 779 0
 4963 00d4 40F20003 		movw	r3, #:lower16:totalRequest
 4964 00d8 C0F20003 		movt	r3, #:upper16:totalRequest
 4965 00dc 1B68     		ldr	r3, [r3, #0]
 4966 00de 03F1FF33 		add	r3, r3, #-1
 4967 00e2 3B62     		str	r3, [r7, #32]
 4968              	.L162:
 780:src/modbus.c  **** 		}
 781:src/modbus.c  **** 
 782:src/modbus.c  **** 		//Check if temp (having totalRequest) has modulus value of totalRequest.
 783:src/modbus.c  **** 		if (tempTotalRequest == (totalRequest % 8) && flag == 1) {
 4969              		.loc 1 783 0
 4970 00e4 FA6A     		ldr	r2, [r7, #44]
 4971 00e6 40F20003 		movw	r3, #:lower16:totalRequest
 4972 00ea C0F20003 		movt	r3, #:upper16:totalRequest
 4973 00ee 1B68     		ldr	r3, [r3, #0]
 4974 00f0 03F00703 		and	r3, r3, #7
 4975 00f4 9A42     		cmp	r2, r3
 4976 00f6 0CD1     		bne	.L163
 4977              		.loc 1 783 0 is_stmt 0 discriminator 1
 4978 00f8 BB69     		ldr	r3, [r7, #24]
 4979 00fa 012B     		cmp	r3, #1
 4980 00fc 09D1     		bne	.L163
 784:src/modbus.c  **** 			toBit = (totalRequest % 8) - 1; //if true the set toBit to modules minus-1.
 4981              		.loc 1 784 0 is_stmt 1
 4982 00fe 40F20003 		movw	r3, #:lower16:totalRequest
 4983 0102 C0F20003 		movt	r3, #:upper16:totalRequest
 4984 0106 1B68     		ldr	r3, [r3, #0]
 4985 0108 03F00703 		and	r3, r3, #7
 4986 010c 03F1FF33 		add	r3, r3, #-1
 4987 0110 3B62     		str	r3, [r7, #32]
 4988              	.L163:
 785:src/modbus.c  **** 		}
 786:src/modbus.c  **** 
 787:src/modbus.c  **** 		//Call masking function and store value in r.
 788:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 4989              		.loc 1 788 0
 4990 0112 786A     		ldr	r0, [r7, #36]
 4991 0114 396A     		ldr	r1, [r7, #32]
 4992 0116 FFF7FEFF 		bl	getMask
 4993 011a B860     		str	r0, [r7, #8]
 789:src/modbus.c  **** 
 790:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 791:src/modbus.c  **** 		unsigned int result = r & s->value;
 4994              		.loc 1 791 0
 4995 011c 40F20003 		movw	r3, #:lower16:s
 4996 0120 C0F20003 		movt	r3, #:upper16:s
 4997 0124 1B68     		ldr	r3, [r3, #0]
 4998 0126 5B68     		ldr	r3, [r3, #4]
 4999 0128 1A46     		mov	r2, r3
 5000 012a BB68     		ldr	r3, [r7, #8]
 5001 012c 1340     		ands	r3, r3, r2
 5002 012e 3B61     		str	r3, [r7, #16]
 792:src/modbus.c  **** 
 793:src/modbus.c  **** 		//Check if first 8 Bit then go to "next" label.
 794:src/modbus.c  **** 		if (toBit == 7) {
 5003              		.loc 1 794 0
 5004 0130 3B6A     		ldr	r3, [r7, #32]
 5005 0132 072B     		cmp	r3, #7
 5006 0134 0ED0     		beq	.L171
 5007              	.L164:
 795:src/modbus.c  **** 			goto next;
 796:src/modbus.c  **** 		}
 797:src/modbus.c  **** 
 798:src/modbus.c  **** 		//Else shift right.
 799:src/modbus.c  **** 		else {
 800:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 5008              		.loc 1 800 0
 5009 0136 7B6A     		ldr	r3, [r7, #36]
 5010 0138 FB61     		str	r3, [r7, #28]
 5011 013a 07E0     		b	.L166
 5012              	.L167:
 801:src/modbus.c  **** 				result = result >> 1;
 5013              		.loc 1 801 0 discriminator 2
 5014 013c 3B69     		ldr	r3, [r7, #16]
 5015 013e 4FEA5303 		lsr	r3, r3, #1
 5016 0142 3B61     		str	r3, [r7, #16]
 800:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 5017              		.loc 1 800 0 discriminator 2
 5018 0144 FB69     		ldr	r3, [r7, #28]
 5019 0146 03F1FF33 		add	r3, r3, #-1
 5020 014a FB61     		str	r3, [r7, #28]
 5021              	.L166:
 800:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 5022              		.loc 1 800 0 is_stmt 0 discriminator 1
 5023 014c FB69     		ldr	r3, [r7, #28]
 5024 014e 002B     		cmp	r3, #0
 5025 0150 F4DC     		bgt	.L167
 5026 0152 00E0     		b	.L165
 5027              	.L171:
 795:src/modbus.c  **** 			goto next;
 5028              		.loc 1 795 0 is_stmt 1
 5029 0154 00BF     		nop
 5030              	.L165:
 802:src/modbus.c  **** 			}
 803:src/modbus.c  **** 		}
 804:src/modbus.c  **** 
 805:src/modbus.c  **** 		//Label
 806:src/modbus.c  **** 		next:
 807:src/modbus.c  **** 
 808:src/modbus.c  **** 		//Store the data to be sent in response packet one by one till requested bits reached.
 809:src/modbus.c  **** 		*rPacket = result;
 5031              		.loc 1 809 0
 5032 0156 40F20003 		movw	r3, #:lower16:rPacket
 5033 015a C0F20003 		movt	r3, #:upper16:rPacket
 5034 015e 1B68     		ldr	r3, [r3, #0]
 5035 0160 3A69     		ldr	r2, [r7, #16]
 5036 0162 1A60     		str	r2, [r3, #0]
 810:src/modbus.c  **** 		rPacket++;
 5037              		.loc 1 810 0
 5038 0164 40F20003 		movw	r3, #:lower16:rPacket
 5039 0168 C0F20003 		movt	r3, #:upper16:rPacket
 5040 016c 1B68     		ldr	r3, [r3, #0]
 5041 016e 03F10402 		add	r2, r3, #4
 5042 0172 40F20003 		movw	r3, #:lower16:rPacket
 5043 0176 C0F20003 		movt	r3, #:upper16:rPacket
 5044 017a 1A60     		str	r2, [r3, #0]
 811:src/modbus.c  **** //		printf("Data: 0x%x\n", result);
 812:src/modbus.c  **** 
 813:src/modbus.c  **** 		//Increase the countbuffer to check if 32 bit data sent or not
 814:src/modbus.c  **** 		count++;
 5045              		.loc 1 814 0
 5046 017c BB6A     		ldr	r3, [r7, #40]
 5047 017e 03F10103 		add	r3, r3, #1
 5048 0182 BB62     		str	r3, [r7, #40]
 815:src/modbus.c  **** 
 816:src/modbus.c  **** 		//Decrement the totalReqeust (assigned to temp) by 8 after sending 8 bit.
 817:src/modbus.c  **** 		tempTotalRequest = tempTotalRequest - 8;
 5049              		.loc 1 817 0
 5050 0184 FB6A     		ldr	r3, [r7, #44]
 5051 0186 A3F10803 		sub	r3, r3, #8
 5052 018a FB62     		str	r3, [r7, #44]
 818:src/modbus.c  **** 
 819:src/modbus.c  **** 		//Check if totalRequest is more than 32 bit or not.
 820:src/modbus.c  **** 		if (totalRequest >= 32) {
 5053              		.loc 1 820 0
 5054 018c 40F20003 		movw	r3, #:lower16:totalRequest
 5055 0190 C0F20003 		movt	r3, #:upper16:totalRequest
 5056 0194 1B68     		ldr	r3, [r3, #0]
 5057 0196 1F2B     		cmp	r3, #31
 5058 0198 02D9     		bls	.L168
 821:src/modbus.c  **** 			maxCount = 4;
 5059              		.loc 1 821 0
 5060 019a 4FF00403 		mov	r3, #4
 5061 019e 7B61     		str	r3, [r7, #20]
 5062              	.L168:
 822:src/modbus.c  **** 		}
 823:src/modbus.c  **** 
 824:src/modbus.c  **** 		//If not then set
 825:src/modbus.c  **** 		/*else{
 826:src/modbus.c  **** 		 count = 0;
 827:src/modbus.c  **** 		 fromBit = 0;
 828:src/modbus.c  **** 		 toBit = 7;
 829:src/modbus.c  **** 		 flag = 1;
 830:src/modbus.c  **** 		 goto again;
 831:src/modbus.c  **** 		 }*/
 832:src/modbus.c  **** 
 833:src/modbus.c  **** 		//If count reached b i.e. total 4*8 Bit sent (32 bit) then get next value from hash.
 834:src/modbus.c  **** 		if (count == maxCount) {
 5063              		.loc 1 834 0
 5064 01a0 BA6A     		ldr	r2, [r7, #40]
 5065 01a2 7B69     		ldr	r3, [r7, #20]
 5066 01a4 9A42     		cmp	r2, r3
 5067 01a6 23D1     		bne	.L169
 835:src/modbus.c  **** 			s = getData(firstRequest++);
 5068              		.loc 1 835 0
 5069 01a8 40F20003 		movw	r3, #:lower16:firstRequest
 5070 01ac C0F20003 		movt	r3, #:upper16:firstRequest
 5071 01b0 1B68     		ldr	r3, [r3, #0]
 5072 01b2 1A46     		mov	r2, r3
 5073 01b4 03F10101 		add	r1, r3, #1
 5074 01b8 40F20003 		movw	r3, #:lower16:firstRequest
 5075 01bc C0F20003 		movt	r3, #:upper16:firstRequest
 5076 01c0 1960     		str	r1, [r3, #0]
 5077 01c2 1046     		mov	r0, r2
 5078 01c4 FFF7FEFF 		bl	getData
 5079 01c8 0246     		mov	r2, r0
 5080 01ca 40F20003 		movw	r3, #:lower16:s
 5081 01ce C0F20003 		movt	r3, #:upper16:s
 5082 01d2 1A60     		str	r2, [r3, #0]
 836:src/modbus.c  **** 			count = 0;
 5083              		.loc 1 836 0
 5084 01d4 4FF00003 		mov	r3, #0
 5085 01d8 BB62     		str	r3, [r7, #40]
 837:src/modbus.c  **** 			fromBit = 0;
 5086              		.loc 1 837 0
 5087 01da 4FF00003 		mov	r3, #0
 5088 01de 7B62     		str	r3, [r7, #36]
 838:src/modbus.c  **** 			toBit = 7;
 5089              		.loc 1 838 0
 5090 01e0 4FF00703 		mov	r3, #7
 5091 01e4 3B62     		str	r3, [r7, #32]
 839:src/modbus.c  **** 			flag = 1;
 5092              		.loc 1 839 0
 5093 01e6 4FF00103 		mov	r3, #1
 5094 01ea BB61     		str	r3, [r7, #24]
 840:src/modbus.c  **** 			goto again;
 5095              		.loc 1 840 0
 5096 01ec 00BF     		nop
 5097              	.L160:
 5098              	.LBE19:
 776:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 5099              		.loc 1 776 0
 5100 01ee 07E0     		b	.L161
 5101              	.L169:
 5102              	.LBB20:
 841:src/modbus.c  **** 		}
 842:src/modbus.c  **** 
 843:src/modbus.c  **** 		//Increase fromBit and toBit to fetch next 8 bit.
 844:src/modbus.c  **** 		fromBit = fromBit + 8;
 5103              		.loc 1 844 0
 5104 01f0 7B6A     		ldr	r3, [r7, #36]
 5105 01f2 03F10803 		add	r3, r3, #8
 5106 01f6 7B62     		str	r3, [r7, #36]
 845:src/modbus.c  **** 		toBit = toBit + 8;
 5107              		.loc 1 845 0
 5108 01f8 3B6A     		ldr	r3, [r7, #32]
 5109 01fa 03F10803 		add	r3, r3, #8
 5110 01fe 3B62     		str	r3, [r7, #32]
 5111              	.L161:
 5112              	.LBE20:
 776:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 5113              		.loc 1 776 0 discriminator 1
 5114 0200 FB6A     		ldr	r3, [r7, #44]
 5115 0202 002B     		cmp	r3, #0
 5116 0204 3FF75FAF 		bgt	.L170
 846:src/modbus.c  **** 	}
 847:src/modbus.c  **** 
 848:src/modbus.c  **** /*	for (d = 0; d < (byteStream + 3); d++) {
 849:src/modbus.c  **** 		printf("\n0x%x", arrayResponsePacket[d]);
 850:src/modbus.c  **** 	}
 851:src/modbus.c  **** */
 852:src/modbus.c  **** 	return 0;
 5117              		.loc 1 852 0
 5118 0208 4FF00003 		mov	r3, #0
 853:src/modbus.c  **** }
 5119              		.loc 1 853 0
 5120 020c 1846     		mov	r0, r3
 5121 020e 07F13007 		add	r7, r7, #48
 5122 0212 BD46     		mov	sp, r7
 5123 0214 80BD     		pop	{r7, pc}
 5124              		.cfi_endproc
 5125              	.LFE15:
 5127 0216 00BF     		.section	.text.getMask,"ax",%progbits
 5128              		.align	2
 5129              		.global	getMask
 5130              		.thumb
 5131              		.thumb_func
 5133              	getMask:
 5134              	.LFB16:
 854:src/modbus.c  **** 
 855:src/modbus.c  **** unsigned int getMask(int a, int b) {
 5135              		.loc 1 855 0
 5136              		.cfi_startproc
 5137              		@ args = 0, pretend = 0, frame = 16
 5138              		@ frame_needed = 1, uses_anonymous_args = 0
 5139              		@ link register save eliminated.
 5140 0000 80B4     		push	{r7}
 5141              	.LCFI48:
 5142              		.cfi_def_cfa_offset 4
 5143              		.cfi_offset 7, -4
 5144 0002 85B0     		sub	sp, sp, #20
 5145              	.LCFI49:
 5146              		.cfi_def_cfa_offset 24
 5147 0004 00AF     		add	r7, sp, #0
 5148              	.LCFI50:
 5149              		.cfi_def_cfa_register 7
 5150 0006 7860     		str	r0, [r7, #4]
 5151 0008 3960     		str	r1, [r7, #0]
 856:src/modbus.c  **** 	unsigned int i;
 857:src/modbus.c  **** 	unsigned int r = 0;
 5152              		.loc 1 857 0
 5153 000a 4FF00003 		mov	r3, #0
 5154 000e BB60     		str	r3, [r7, #8]
 858:src/modbus.c  **** 	for (i = a; i <= b; i++) {
 5155              		.loc 1 858 0
 5156 0010 7B68     		ldr	r3, [r7, #4]
 5157 0012 FB60     		str	r3, [r7, #12]
 5158 0014 0BE0     		b	.L173
 5159              	.L174:
 859:src/modbus.c  **** 		r |= 1 << i;
 5160              		.loc 1 859 0 discriminator 2
 5161 0016 FB68     		ldr	r3, [r7, #12]
 5162 0018 4FF00102 		mov	r2, #1
 5163 001c 02FA03F3 		lsl	r3, r2, r3
 5164 0020 BA68     		ldr	r2, [r7, #8]
 5165 0022 1343     		orrs	r3, r3, r2
 5166 0024 BB60     		str	r3, [r7, #8]
 858:src/modbus.c  **** 	for (i = a; i <= b; i++) {
 5167              		.loc 1 858 0 discriminator 2
 5168 0026 FB68     		ldr	r3, [r7, #12]
 5169 0028 03F10103 		add	r3, r3, #1
 5170 002c FB60     		str	r3, [r7, #12]
 5171              	.L173:
 858:src/modbus.c  **** 	for (i = a; i <= b; i++) {
 5172              		.loc 1 858 0 is_stmt 0 discriminator 1
 5173 002e 3A68     		ldr	r2, [r7, #0]
 5174 0030 FB68     		ldr	r3, [r7, #12]
 5175 0032 9A42     		cmp	r2, r3
 5176 0034 EFD2     		bcs	.L174
 860:src/modbus.c  **** 	}
 861:src/modbus.c  **** 	return r;
 5177              		.loc 1 861 0 is_stmt 1
 5178 0036 BB68     		ldr	r3, [r7, #8]
 862:src/modbus.c  **** }
 5179              		.loc 1 862 0
 5180 0038 1846     		mov	r0, r3
 5181 003a 07F11407 		add	r7, r7, #20
 5182 003e BD46     		mov	sp, r7
 5183 0040 80BC     		pop	{r7}
 5184 0042 7047     		bx	lr
 5185              		.cfi_endproc
 5186              	.LFE16:
 5188              		.text
 5189              	.Letext0:
 5190              		.file 2 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/include/stddef.h"
 5191              		.file 3 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/i
 5192              		.file 4 "src/include/uthash.h"
 5193              		.file 5 "src/include/modbus.h"
DEFINED SYMBOLS
                            *ABS*:00000000 modbus.c
     /tmp/ccFxigan.s:20     .rodata.crcHi:00000000 $d
     /tmp/ccFxigan.s:23     .rodata.crcHi:00000000 crcHi
     /tmp/ccFxigan.s:281    .rodata.crcLo:00000000 $d
     /tmp/ccFxigan.s:284    .rodata.crcLo:00000000 crcLo
     /tmp/ccFxigan.s:546    .bss.firstRequest:00000000 firstRequest
     /tmp/ccFxigan.s:543    .bss.firstRequest:00000000 $d
     /tmp/ccFxigan.s:553    .bss.totalRequest:00000000 totalRequest
     /tmp/ccFxigan.s:550    .bss.totalRequest:00000000 $d
     /tmp/ccFxigan.s:560    .bss.writeRequest:00000000 writeRequest
     /tmp/ccFxigan.s:557    .bss.writeRequest:00000000 $d
     /tmp/ccFxigan.s:567    .bss.arrayResponsePacket:00000000 arrayResponsePacket
     /tmp/ccFxigan.s:564    .bss.arrayResponsePacket:00000000 $d
     /tmp/ccFxigan.s:574    .data.rPacket:00000000 rPacket
     /tmp/ccFxigan.s:571    .data.rPacket:00000000 $d
     /tmp/ccFxigan.s:581    .bss.users:00000000 users
     /tmp/ccFxigan.s:578    .bss.users:00000000 $d
                            *COM*:00000004 s
     /tmp/ccFxigan.s:585    .text.addData:00000000 $t
     /tmp/ccFxigan.s:590    .text.addData:00000000 addData
     /tmp/ccFxigan.s:842    .text.addData:0000021c $d
     /tmp/ccFxigan.s:855    .text.addData:00000248 $t
     /tmp/ccFxigan.s:1597   .text.addData:000008dc $d
     /tmp/ccFxigan.s:1610   .text.addData:00000908 $t
     /tmp/ccFxigan.s:2226   .rodata:00000000 $d
     /tmp/ccFxigan.s:2227   .rodata:00000000 .LC0
     /tmp/ccFxigan.s:2230   .text.putData:00000000 $t
     /tmp/ccFxigan.s:2235   .text.putData:00000000 putData
     /tmp/ccFxigan.s:2286   .text.getData:00000000 $t
     /tmp/ccFxigan.s:2291   .text.getData:00000000 getData
     /tmp/ccFxigan.s:2540   .text.getData:0000021c $d
     /tmp/ccFxigan.s:2553   .text.getData:00000248 $t
     /tmp/ccFxigan.s:2874   .text.validateSlaveID:00000000 $t
     /tmp/ccFxigan.s:2879   .text.validateSlaveID:00000000 validateSlaveID
     /tmp/ccFxigan.s:2936   .text.validateCrc:00000000 $t
     /tmp/ccFxigan.s:2941   .text.validateCrc:00000000 validateCrc
     /tmp/ccFxigan.s:3043   .text.calculateOutputCrc:00000000 $t
     /tmp/ccFxigan.s:3048   .text.calculateOutputCrc:00000000 calculateOutputCrc
     /tmp/ccFxigan.s:3144   .text.validateFunction:00000000 $t
     /tmp/ccFxigan.s:3149   .text.validateFunction:00000000 validateFunction
     /tmp/ccFxigan.s:3196   .text.validateFunction:0000004c $d
     /tmp/ccFxigan.s:3214   .text.validateFunction:0000008c $t
     /tmp/ccFxigan.s:4859   .text.readCoil:00000000 readCoil
     /tmp/ccFxigan.s:4583   .text.readDiscreteInputs:00000000 readDiscreteInputs
     /tmp/ccFxigan.s:4383   .text.readHoldingRegisters:00000000 readHoldingRegisters
     /tmp/ccFxigan.s:4107   .text.readInputRegisters:00000000 readInputRegisters
     /tmp/ccFxigan.s:3939   .text.writeSingleCoil:00000000 writeSingleCoil
     /tmp/ccFxigan.s:3789   .text.writeSingleRegister:00000000 writeSingleRegister
     /tmp/ccFxigan.s:3550   .text.writeMultipleCoils:00000000 writeMultipleCoils
     /tmp/ccFxigan.s:3293   .text.writeMultipleRegisters:00000000 writeMultipleRegisters
     /tmp/ccFxigan.s:3754   .text.readExceptionStatus:00000000 readExceptionStatus
     /tmp/ccFxigan.s:3288   .text.writeMultipleRegisters:00000000 $t
     /tmp/ccFxigan.s:5133   .text.getMask:00000000 getMask
     /tmp/ccFxigan.s:3542   .rodata:00000018 .LC1
     /tmp/ccFxigan.s:3545   .text.writeMultipleCoils:00000000 $t
     /tmp/ccFxigan.s:3749   .text.readExceptionStatus:00000000 $t
     /tmp/ccFxigan.s:3784   .text.writeSingleRegister:00000000 $t
     /tmp/ccFxigan.s:3934   .text.writeSingleCoil:00000000 $t
     /tmp/ccFxigan.s:4102   .text.readInputRegisters:00000000 $t
     /tmp/ccFxigan.s:4378   .text.readHoldingRegisters:00000000 $t
     /tmp/ccFxigan.s:4578   .text.readDiscreteInputs:00000000 $t
     /tmp/ccFxigan.s:4854   .text.readCoil:00000000 $t
     /tmp/ccFxigan.s:5128   .text.getMask:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memcmp
malloc
exit
memset
free
printf
