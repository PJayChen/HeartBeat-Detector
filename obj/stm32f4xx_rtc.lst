   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_rtc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.RTC_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	RTC_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	RTC_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Initialization
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Calendar (Time and Date) configuration
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Alarms (Alarm A and Alarm B) configuration
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - WakeUp Timer configuration
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Daylight Saving configuration
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Output pin Configuration
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Coarse digital Calibration configuration
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Smooth digital Calibration configuration
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - TimeStamp configuration
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Tampers configuration
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Backup Data Registers configuration
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Shift control synchronisation    
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Interrupts and flags management
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @verbatim
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                               Backup Domain Operating Condition
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The real-time clock (RTC), the RTC backup registers, and the backup 
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          VDD supply is powered off.
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To retain the content of the RTC backup registers, backup SRAM, 
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          and supply the RTC when VDD is turned off, VBAT pin can be connected 
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to an optional standby voltage supplied by a battery or by another 
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          source.
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To allow the RTC to operate even when the main digital supply (VDD) 
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          is turned off, the VBAT pin powers the following blocks:
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - The RTC
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - The LSE oscillator
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - The backup SRAM when the low power backup regulator is enabled
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            4 - PC13 to PC15 I/Os, plus PI8 I/O (when available)
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VDD (analog switch connected 
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VDD), the following functions are available:
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as either GPIO or LSE pins
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as a GPIO or as the RTC_AF1 pin
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as a GPIO or as the RTC_AF2 pin
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VBAT (analog switch connected 
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VBAT because VDD is not present), the following functions are available:
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as LSE pins only
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as the RTC_AF1 pin 
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as the RTC_AF2 pin
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Backup Domain Reset
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The backup domain reset sets all RTC registers and the RCC_BDCR 
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          register to their reset values. The BKPSRAM is not affected by this
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          reset. The only way of resetting the BKPSRAM is through the Flash 
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          interface by requesting a protection level change from 1 to 0.
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          A backup domain reset is generated when one of the following events
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          occurs:
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - Software reset, triggered by setting the BDRST bit in the 
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC Backup domain control register (RCC_BDCR). You can use the
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC_BackupResetCmd().
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - VDD or VBAT power on, if both supplies have previously been
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                powered off.
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   Backup Domain Access
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          After reset, the backup domain (RTC registers, RTC backup data 
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          registers and backup SRAM) is protected against possible unwanted 
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          write accesses. 
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To enable access to the RTC Domain and RTC registers, proceed as follows:
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Power Controller (PWR) APB1 interface clock using the
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RCC_APB1PeriphClockCmd() function.
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Select the RTC clock source using the RCC_RTCCLKConfig() function.
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable RTC Clock using the RCC_RTCCLKCmd() function.
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   RTC Driver: how to use it
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC domain access (see description in the section above)
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Prescaler (Asynchronous and Synchronous) and
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC hour format using the RTC_Init() function.
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Time and Date configuration
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===========================
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and RTC_SetDate() functions.
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              functions.
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Use the RTC_DayLightSavingConfig() function to add or sub one
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              hour to the RTC Calendar.    
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Alarm configuration
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Alarm use the RTC_SetAlarm() function.
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Alarm, use the RTC_GetAlarm() function.
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          RTC Wakeup configuration
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ========================
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Outputs configuration
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =====================
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC has 2 different outputs:
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and WaKeUp signals.          
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the selected RTC signal on RTC_AF1 pin, use the 
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_OutputConfig() function.                
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB: this output is 512Hz signal or 1Hz .  
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Smooth digital Calibration configuration
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================    
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Original Digital Calibration Value and the corresponding
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Coarse digital Calibration configuration
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Coarse Calibration Value and the corresponding
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              sign using the RTC_CoarseCalibConfig() function.
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() 
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          TimeStamp configuration
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =======================
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              using the RTC_TimeStampCmd() function.
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp Time and Date register, use the 
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStamp() function.
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp SubSecond register, use the 
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStampSubSecond() function.
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TamperPinSelection()
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin.     
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Tamper configuration
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ====================
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *             - Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function. 
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper precharge or discharge duration using 
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TamperPinsPrechargeDuration() function.
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Time stamp on Tamper detection event using  
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TSOnTamperDetecCmd() function.
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 depending on the value of the TSINSEL bit in the 
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TimeStampPinSelection()
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin. 
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Backup Data Registers configuration
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.  
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                  RTC and low power modes
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The MCU can be woken up from a low power mode by an RTC alternate 
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           function.
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           These RTC alternate functions can wake up the system from the Stop 
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           and Standby lowpower modes.
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The system can also wake up from low power modes without depending 
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           or the RTC wakeup events.
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC provides a programmable time base for waking up from the 
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Stop or Standby mode at regular intervals.
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Wakeup from STOP and Standby modes is possible only when the RTC 
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           clock source is LSE or LSI.
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF1 alternate functions
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF1 pin (PC13) can be used for the following purposes:
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM output
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB output
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin 
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |          |          |           |              | selection  |  selection   
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | Calibration out |          |          |           |              |    Don't   |     Don't    
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |          |          |           |              |            |     Don't    
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     0    |    0     |     1     |      0       |      0     |     care     
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |          |          |           |              |            |              
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |          |          |           |              |            |              
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |          |          |           |              |    Don't   |              
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0    |    0     |     0     |      1       |    care    |      0       
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF2 alternate functions
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF2 pin (PI8) can be used for the following purposes:
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |           |              | selection  |  selection   |Configuration |
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |           |              |            |     Don't    |              |
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |           |              |            |              |              |
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |           |              |            |              |              |
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |           |              |    Don't   |              |              |
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @endverbatim
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @attention
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rcc.h"
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Masks Definition */
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F ))
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                  Initialization and Configuration functions
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to initialize and configure the RTC
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Write protection, enter and exit the RTC initialization mode, RTC registers
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   synchronization check and reference clock detection enable.
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   1. The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      split into 2 programmable prescalers to minimize power consumption.
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - When both prescalers are used, it is recommended to configure the asynchronous
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****        prescaler to a high value to minimize consumption.
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   2. All RTC registers are Write protected. Writing to the RTC registers
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      is enabled by writing a key into the Write Protection register, RTC_WPR.
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   3. To Configure the RTC Calendar, user application should enter initialization
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      mode. In this mode, the calendar counter is stopped and its value can be 
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      updated. When the initialization sequence is complete, the calendar restarts 
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      counting after 4 RTCCLK cycles.
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   4. To read the calendar through the shadow registers after Calendar initialization,
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      calendar update or after wakeup from low power modes the software must first 
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      clear the RSF flag. The software must then wait until it is set again before 
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      reading the calendar, which means that the calendar registers have been 
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      correctly copied into the RTC_TR and RTC_DR shadow registers.
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      The RTC_WaitForSynchro() function implements the above software sequence 
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      (RSF clear and RSF check).
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         registers.       
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  28              		.loc 1 368 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 14, -4
  36              		.cfi_offset 7, -8
  37 0002 84B0     		sub	sp, sp, #16
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 24
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
  43              		.loc 1 369 0
  44 0006 4FF00003 		mov	r3, #0
  45 000a 7B60     		str	r3, [r7, #4]
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
  46              		.loc 1 370 0
  47 000c 4FF00003 		mov	r3, #0
  48 0010 BB60     		str	r3, [r7, #8]
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
  49              		.loc 1 371 0
  50 0012 4FF00003 		mov	r3, #0
  51 0016 FB73     		strb	r3, [r7, #15]
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
  52              		.loc 1 374 0
  53 0018 4FF42053 		mov	r3, #10240
  54 001c C4F20003 		movt	r3, 16384
  55 0020 4FF0CA02 		mov	r2, #202
  56 0024 5A62     		str	r2, [r3, #36]
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
  57              		.loc 1 375 0
  58 0026 4FF42053 		mov	r3, #10240
  59 002a C4F20003 		movt	r3, 16384
  60 002e 4FF05302 		mov	r2, #83
  61 0032 5A62     		str	r2, [r3, #36]
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
  62              		.loc 1 378 0
  63 0034 FFF7FEFF 		bl	RTC_EnterInitMode
  64 0038 0346     		mov	r3, r0
  65 003a 002B     		cmp	r3, #0
  66 003c 03D1     		bne	.L2
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
  67              		.loc 1 380 0
  68 003e 4FF00003 		mov	r3, #0
  69 0042 FB73     		strb	r3, [r7, #15]
  70 0044 84E0     		b	.L3
  71              	.L2:
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
  72              		.loc 1 385 0
  73 0046 4FF42053 		mov	r3, #10240
  74 004a C4F20003 		movt	r3, 16384
  75 004e 4FF00002 		mov	r2, #0
  76 0052 1A60     		str	r2, [r3, #0]
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
  77              		.loc 1 386 0
  78 0054 4FF42053 		mov	r3, #10240
  79 0058 C4F20003 		movt	r3, 16384
  80 005c 42F20112 		movw	r2, #8449
  81 0060 5A60     		str	r2, [r3, #4]
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
  82              		.loc 1 388 0
  83 0062 4FF42053 		mov	r3, #10240
  84 0066 C4F20003 		movt	r3, 16384
  85 006a 4FF42052 		mov	r2, #10240
  86 006e C4F20002 		movt	r2, 16384
  87 0072 9268     		ldr	r2, [r2, #8]
  88 0074 02F00702 		and	r2, r2, #7
  89 0078 9A60     		str	r2, [r3, #8]
  90              	.L5:
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
  91              		.loc 1 393 0 discriminator 1
  92 007a 4FF42053 		mov	r3, #10240
  93 007e C4F20003 		movt	r3, 16384
  94 0082 DB68     		ldr	r3, [r3, #12]
  95 0084 03F00403 		and	r3, r3, #4
  96 0088 BB60     		str	r3, [r7, #8]
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
  97              		.loc 1 394 0 discriminator 1
  98 008a 7B68     		ldr	r3, [r7, #4]
  99 008c 03F10103 		add	r3, r3, #1
 100 0090 7B60     		str	r3, [r7, #4]
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 101              		.loc 1 395 0 discriminator 1
 102 0092 7B68     		ldr	r3, [r7, #4]
 103 0094 B3F5803F 		cmp	r3, #65536
 104 0098 02D0     		beq	.L4
 105 009a BB68     		ldr	r3, [r7, #8]
 106 009c 002B     		cmp	r3, #0
 107 009e ECD0     		beq	.L5
 108              	.L4:
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 109              		.loc 1 397 0
 110 00a0 4FF42053 		mov	r3, #10240
 111 00a4 C4F20003 		movt	r3, 16384
 112 00a8 DB68     		ldr	r3, [r3, #12]
 113 00aa 03F00403 		and	r3, r3, #4
 114 00ae 002B     		cmp	r3, #0
 115 00b0 03D1     		bne	.L6
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 116              		.loc 1 399 0
 117 00b2 4FF00003 		mov	r3, #0
 118 00b6 FB73     		strb	r3, [r7, #15]
 119 00b8 4AE0     		b	.L3
 120              	.L6:
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 121              		.loc 1 404 0
 122 00ba 4FF42053 		mov	r3, #10240
 123 00be C4F20003 		movt	r3, 16384
 124 00c2 9B68     		ldr	r3, [r3, #8]
 125 00c4 4FF42053 		mov	r3, #10240
 126 00c8 C4F20003 		movt	r3, 16384
 127 00cc 4FF00002 		mov	r2, #0
 128 00d0 9A60     		str	r2, [r3, #8]
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 129              		.loc 1 405 0
 130 00d2 4FF42053 		mov	r3, #10240
 131 00d6 C4F20003 		movt	r3, 16384
 132 00da 4FF6FF72 		movw	r2, #65535
 133 00de 5A61     		str	r2, [r3, #20]
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 134              		.loc 1 406 0
 135 00e0 4FF42053 		mov	r3, #10240
 136 00e4 C4F20003 		movt	r3, 16384
 137 00e8 4FF0FF02 		mov	r2, #255
 138 00ec C0F27F02 		movt	r2, 127
 139 00f0 1A61     		str	r2, [r3, #16]
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 140              		.loc 1 407 0
 141 00f2 4FF42053 		mov	r3, #10240
 142 00f6 C4F20003 		movt	r3, 16384
 143 00fa 4FF00002 		mov	r2, #0
 144 00fe 9A61     		str	r2, [r3, #24]
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 145              		.loc 1 408 0
 146 0100 4FF42053 		mov	r3, #10240
 147 0104 C4F20003 		movt	r3, 16384
 148 0108 4FF00002 		mov	r2, #0
 149 010c DA61     		str	r2, [r3, #28]
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 150              		.loc 1 409 0
 151 010e 4FF42053 		mov	r3, #10240
 152 0112 C4F20003 		movt	r3, 16384
 153 0116 4FF00002 		mov	r2, #0
 154 011a 1A62     		str	r2, [r3, #32]
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 155              		.loc 1 412 0
 156 011c 4FF42053 		mov	r3, #10240
 157 0120 C4F20003 		movt	r3, 16384
 158 0124 4FF00002 		mov	r2, #0
 159 0128 DA60     		str	r2, [r3, #12]
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 160              		.loc 1 415 0
 161 012a 4FF42053 		mov	r3, #10240
 162 012e C4F20003 		movt	r3, 16384
 163 0132 4FF00002 		mov	r2, #0
 164 0136 1A64     		str	r2, [r3, #64]
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 165              		.loc 1 417 0
 166 0138 FFF7FEFF 		bl	RTC_WaitForSynchro
 167 013c 0346     		mov	r3, r0
 168 013e 002B     		cmp	r3, #0
 169 0140 03D1     		bne	.L7
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 170              		.loc 1 419 0
 171 0142 4FF00003 		mov	r3, #0
 172 0146 FB73     		strb	r3, [r7, #15]
 173 0148 02E0     		b	.L3
 174              	.L7:
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 175              		.loc 1 423 0
 176 014a 4FF00103 		mov	r3, #1
 177 014e FB73     		strb	r3, [r7, #15]
 178              	.L3:
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 179              		.loc 1 429 0
 180 0150 4FF42053 		mov	r3, #10240
 181 0154 C4F20003 		movt	r3, 16384
 182 0158 4FF0FF02 		mov	r2, #255
 183 015c 5A62     		str	r2, [r3, #36]
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 184              		.loc 1 431 0
 185 015e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 186              		.loc 1 432 0
 187 0160 1846     		mov	r0, r3
 188 0162 07F11007 		add	r7, r7, #16
 189 0166 BD46     		mov	sp, r7
 190 0168 80BD     		pop	{r7, pc}
 191              		.cfi_endproc
 192              	.LFE110:
 194 016a 00BF     		.section	.text.RTC_Init,"ax",%progbits
 195              		.align	2
 196              		.global	RTC_Init
 197              		.thumb
 198              		.thumb_func
 200              	RTC_Init:
 201              	.LFB111:
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 202              		.loc 1 446 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 16
 205              		@ frame_needed = 1, uses_anonymous_args = 0
 206 0000 80B5     		push	{r7, lr}
 207              	.LCFI3:
 208              		.cfi_def_cfa_offset 8
 209              		.cfi_offset 14, -4
 210              		.cfi_offset 7, -8
 211 0002 84B0     		sub	sp, sp, #16
 212              	.LCFI4:
 213              		.cfi_def_cfa_offset 24
 214 0004 00AF     		add	r7, sp, #0
 215              	.LCFI5:
 216              		.cfi_def_cfa_register 7
 217 0006 7860     		str	r0, [r7, #4]
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 218              		.loc 1 447 0
 219 0008 4FF00003 		mov	r3, #0
 220 000c FB73     		strb	r3, [r7, #15]
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 221              		.loc 1 455 0
 222 000e 4FF42053 		mov	r3, #10240
 223 0012 C4F20003 		movt	r3, 16384
 224 0016 4FF0CA02 		mov	r2, #202
 225 001a 5A62     		str	r2, [r3, #36]
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 226              		.loc 1 456 0
 227 001c 4FF42053 		mov	r3, #10240
 228 0020 C4F20003 		movt	r3, 16384
 229 0024 4FF05302 		mov	r2, #83
 230 0028 5A62     		str	r2, [r3, #36]
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 231              		.loc 1 459 0
 232 002a FFF7FEFF 		bl	RTC_EnterInitMode
 233 002e 0346     		mov	r3, r0
 234 0030 002B     		cmp	r3, #0
 235 0032 03D1     		bne	.L9
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 236              		.loc 1 461 0
 237 0034 4FF00003 		mov	r3, #0
 238 0038 FB73     		strb	r3, [r7, #15]
 239 003a 33E0     		b	.L10
 240              	.L9:
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 241              		.loc 1 466 0
 242 003c 4FF42053 		mov	r3, #10240
 243 0040 C4F20003 		movt	r3, 16384
 244 0044 4FF42052 		mov	r2, #10240
 245 0048 C4F20002 		movt	r2, 16384
 246 004c 9268     		ldr	r2, [r2, #8]
 247 004e 22F04002 		bic	r2, r2, #64
 248 0052 9A60     		str	r2, [r3, #8]
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 249              		.loc 1 468 0
 250 0054 4FF42053 		mov	r3, #10240
 251 0058 C4F20003 		movt	r3, 16384
 252 005c 4FF42052 		mov	r2, #10240
 253 0060 C4F20002 		movt	r2, 16384
 254 0064 9168     		ldr	r1, [r2, #8]
 255 0066 7A68     		ldr	r2, [r7, #4]
 256 0068 1268     		ldr	r2, [r2, #0]
 257 006a 0A43     		orrs	r2, r2, r1
 258 006c 9A60     		str	r2, [r3, #8]
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 259              		.loc 1 471 0
 260 006e 4FF42053 		mov	r3, #10240
 261 0072 C4F20003 		movt	r3, 16384
 262 0076 7A68     		ldr	r2, [r7, #4]
 263 0078 9268     		ldr	r2, [r2, #8]
 264 007a 1A61     		str	r2, [r3, #16]
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 265              		.loc 1 472 0
 266 007c 4FF42053 		mov	r3, #10240
 267 0080 C4F20003 		movt	r3, 16384
 268 0084 4FF42052 		mov	r2, #10240
 269 0088 C4F20002 		movt	r2, 16384
 270 008c 1169     		ldr	r1, [r2, #16]
 271 008e 7A68     		ldr	r2, [r7, #4]
 272 0090 5268     		ldr	r2, [r2, #4]
 273 0092 4FEA0242 		lsl	r2, r2, #16
 274 0096 0A43     		orrs	r2, r2, r1
 275 0098 1A61     		str	r2, [r3, #16]
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 276              		.loc 1 475 0
 277 009a FFF7FEFF 		bl	RTC_ExitInitMode
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 278              		.loc 1 477 0
 279 009e 4FF00103 		mov	r3, #1
 280 00a2 FB73     		strb	r3, [r7, #15]
 281              	.L10:
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 282              		.loc 1 480 0
 283 00a4 4FF42053 		mov	r3, #10240
 284 00a8 C4F20003 		movt	r3, 16384
 285 00ac 4FF0FF02 		mov	r2, #255
 286 00b0 5A62     		str	r2, [r3, #36]
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 287              		.loc 1 482 0
 288 00b2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 289              		.loc 1 483 0
 290 00b4 1846     		mov	r0, r3
 291 00b6 07F11007 		add	r7, r7, #16
 292 00ba BD46     		mov	sp, r7
 293 00bc 80BD     		pop	{r7, pc}
 294              		.cfi_endproc
 295              	.LFE111:
 297 00be 00BF     		.section	.text.RTC_StructInit,"ax",%progbits
 298              		.align	2
 299              		.global	RTC_StructInit
 300              		.thumb
 301              		.thumb_func
 303              	RTC_StructInit:
 304              	.LFB112:
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 305              		.loc 1 492 0
 306              		.cfi_startproc
 307              		@ args = 0, pretend = 0, frame = 8
 308              		@ frame_needed = 1, uses_anonymous_args = 0
 309              		@ link register save eliminated.
 310 0000 80B4     		push	{r7}
 311              	.LCFI6:
 312              		.cfi_def_cfa_offset 4
 313              		.cfi_offset 7, -4
 314 0002 83B0     		sub	sp, sp, #12
 315              	.LCFI7:
 316              		.cfi_def_cfa_offset 16
 317 0004 00AF     		add	r7, sp, #0
 318              	.LCFI8:
 319              		.cfi_def_cfa_register 7
 320 0006 7860     		str	r0, [r7, #4]
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 321              		.loc 1 494 0
 322 0008 7B68     		ldr	r3, [r7, #4]
 323 000a 4FF00002 		mov	r2, #0
 324 000e 1A60     		str	r2, [r3, #0]
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 325              		.loc 1 497 0
 326 0010 7B68     		ldr	r3, [r7, #4]
 327 0012 4FF07F02 		mov	r2, #127
 328 0016 5A60     		str	r2, [r3, #4]
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 329              		.loc 1 500 0
 330 0018 7B68     		ldr	r3, [r7, #4]
 331 001a 4FF0FF02 		mov	r2, #255
 332 001e 9A60     		str	r2, [r3, #8]
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 333              		.loc 1 501 0
 334 0020 07F10C07 		add	r7, r7, #12
 335 0024 BD46     		mov	sp, r7
 336 0026 80BC     		pop	{r7}
 337 0028 7047     		bx	lr
 338              		.cfi_endproc
 339              	.LFE112:
 341 002a 00BF     		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 342              		.align	2
 343              		.global	RTC_WriteProtectionCmd
 344              		.thumb
 345              		.thumb_func
 347              	RTC_WriteProtectionCmd:
 348              	.LFB113:
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 349              		.loc 1 514 0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 8
 352              		@ frame_needed = 1, uses_anonymous_args = 0
 353              		@ link register save eliminated.
 354 0000 80B4     		push	{r7}
 355              	.LCFI9:
 356              		.cfi_def_cfa_offset 4
 357              		.cfi_offset 7, -4
 358 0002 83B0     		sub	sp, sp, #12
 359              	.LCFI10:
 360              		.cfi_def_cfa_offset 16
 361 0004 00AF     		add	r7, sp, #0
 362              	.LCFI11:
 363              		.cfi_def_cfa_register 7
 364 0006 0346     		mov	r3, r0
 365 0008 FB71     		strb	r3, [r7, #7]
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 366              		.loc 1 518 0
 367 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 368 000c 002B     		cmp	r3, #0
 369 000e 07D0     		beq	.L13
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 370              		.loc 1 521 0
 371 0010 4FF42053 		mov	r3, #10240
 372 0014 C4F20003 		movt	r3, 16384
 373 0018 4FF0FF02 		mov	r2, #255
 374 001c 5A62     		str	r2, [r3, #36]
 375 001e 0DE0     		b	.L12
 376              	.L13:
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 377              		.loc 1 526 0
 378 0020 4FF42053 		mov	r3, #10240
 379 0024 C4F20003 		movt	r3, 16384
 380 0028 4FF0CA02 		mov	r2, #202
 381 002c 5A62     		str	r2, [r3, #36]
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 382              		.loc 1 527 0
 383 002e 4FF42053 		mov	r3, #10240
 384 0032 C4F20003 		movt	r3, 16384
 385 0036 4FF05302 		mov	r2, #83
 386 003a 5A62     		str	r2, [r3, #36]
 387              	.L12:
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 388              		.loc 1 529 0
 389 003c 07F10C07 		add	r7, r7, #12
 390 0040 BD46     		mov	sp, r7
 391 0042 80BC     		pop	{r7}
 392 0044 7047     		bx	lr
 393              		.cfi_endproc
 394              	.LFE113:
 396 0046 00BF     		.section	.text.RTC_EnterInitMode,"ax",%progbits
 397              		.align	2
 398              		.global	RTC_EnterInitMode
 399              		.thumb
 400              		.thumb_func
 402              	RTC_EnterInitMode:
 403              	.LFB114:
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 404              		.loc 1 541 0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 16
 407              		@ frame_needed = 1, uses_anonymous_args = 0
 408              		@ link register save eliminated.
 409 0000 80B4     		push	{r7}
 410              	.LCFI12:
 411              		.cfi_def_cfa_offset 4
 412              		.cfi_offset 7, -4
 413 0002 85B0     		sub	sp, sp, #20
 414              	.LCFI13:
 415              		.cfi_def_cfa_offset 24
 416 0004 00AF     		add	r7, sp, #0
 417              	.LCFI14:
 418              		.cfi_def_cfa_register 7
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 419              		.loc 1 542 0
 420 0006 4FF00003 		mov	r3, #0
 421 000a 7B60     		str	r3, [r7, #4]
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 422              		.loc 1 543 0
 423 000c 4FF00003 		mov	r3, #0
 424 0010 FB73     		strb	r3, [r7, #15]
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 425              		.loc 1 544 0
 426 0012 4FF00003 		mov	r3, #0
 427 0016 BB60     		str	r3, [r7, #8]
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 428              		.loc 1 547 0
 429 0018 4FF42053 		mov	r3, #10240
 430 001c C4F20003 		movt	r3, 16384
 431 0020 DB68     		ldr	r3, [r3, #12]
 432 0022 03F04003 		and	r3, r3, #64
 433 0026 002B     		cmp	r3, #0
 434 0028 2AD1     		bne	.L16
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 435              		.loc 1 550 0
 436 002a 4FF42053 		mov	r3, #10240
 437 002e C4F20003 		movt	r3, 16384
 438 0032 4FF0FF32 		mov	r2, #-1
 439 0036 DA60     		str	r2, [r3, #12]
 440              	.L18:
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 441              		.loc 1 555 0 discriminator 1
 442 0038 4FF42053 		mov	r3, #10240
 443 003c C4F20003 		movt	r3, 16384
 444 0040 DB68     		ldr	r3, [r3, #12]
 445 0042 03F04003 		and	r3, r3, #64
 446 0046 BB60     		str	r3, [r7, #8]
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 447              		.loc 1 556 0 discriminator 1
 448 0048 7B68     		ldr	r3, [r7, #4]
 449 004a 03F10103 		add	r3, r3, #1
 450 004e 7B60     		str	r3, [r7, #4]
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 451              		.loc 1 557 0 discriminator 1
 452 0050 7B68     		ldr	r3, [r7, #4]
 453 0052 B3F5803F 		cmp	r3, #65536
 454 0056 02D0     		beq	.L17
 455 0058 BB68     		ldr	r3, [r7, #8]
 456 005a 002B     		cmp	r3, #0
 457 005c ECD0     		beq	.L18
 458              	.L17:
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 459              		.loc 1 559 0
 460 005e 4FF42053 		mov	r3, #10240
 461 0062 C4F20003 		movt	r3, 16384
 462 0066 DB68     		ldr	r3, [r3, #12]
 463 0068 03F04003 		and	r3, r3, #64
 464 006c 002B     		cmp	r3, #0
 465 006e 03D0     		beq	.L19
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 466              		.loc 1 561 0
 467 0070 4FF00103 		mov	r3, #1
 468 0074 FB73     		strb	r3, [r7, #15]
 469 0076 06E0     		b	.L20
 470              	.L19:
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 471              		.loc 1 565 0
 472 0078 4FF00003 		mov	r3, #0
 473 007c FB73     		strb	r3, [r7, #15]
 474 007e 02E0     		b	.L20
 475              	.L16:
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 476              		.loc 1 570 0
 477 0080 4FF00103 		mov	r3, #1
 478 0084 FB73     		strb	r3, [r7, #15]
 479              	.L20:
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status);  
 480              		.loc 1 573 0
 481 0086 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 482              		.loc 1 574 0
 483 0088 1846     		mov	r0, r3
 484 008a 07F11407 		add	r7, r7, #20
 485 008e BD46     		mov	sp, r7
 486 0090 80BC     		pop	{r7}
 487 0092 7047     		bx	lr
 488              		.cfi_endproc
 489              	.LFE114:
 491              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 492              		.align	2
 493              		.global	RTC_ExitInitMode
 494              		.thumb
 495              		.thumb_func
 497              	RTC_ExitInitMode:
 498              	.LFB115:
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 499              		.loc 1 586 0
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 0
 502              		@ frame_needed = 1, uses_anonymous_args = 0
 503              		@ link register save eliminated.
 504 0000 80B4     		push	{r7}
 505              	.LCFI15:
 506              		.cfi_def_cfa_offset 4
 507              		.cfi_offset 7, -4
 508 0002 00AF     		add	r7, sp, #0
 509              	.LCFI16:
 510              		.cfi_def_cfa_register 7
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 511              		.loc 1 588 0
 512 0004 4FF42053 		mov	r3, #10240
 513 0008 C4F20003 		movt	r3, 16384
 514 000c 4FF42052 		mov	r2, #10240
 515 0010 C4F20002 		movt	r2, 16384
 516 0014 D268     		ldr	r2, [r2, #12]
 517 0016 22F08002 		bic	r2, r2, #128
 518 001a DA60     		str	r2, [r3, #12]
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 519              		.loc 1 589 0
 520 001c BD46     		mov	sp, r7
 521 001e 80BC     		pop	{r7}
 522 0020 7047     		bx	lr
 523              		.cfi_endproc
 524              	.LFE115:
 526 0022 00BF     		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 527              		.align	2
 528              		.global	RTC_WaitForSynchro
 529              		.thumb
 530              		.thumb_func
 532              	RTC_WaitForSynchro:
 533              	.LFB116:
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 534              		.loc 1 608 0
 535              		.cfi_startproc
 536              		@ args = 0, pretend = 0, frame = 16
 537              		@ frame_needed = 1, uses_anonymous_args = 0
 538              		@ link register save eliminated.
 539 0000 80B4     		push	{r7}
 540              	.LCFI17:
 541              		.cfi_def_cfa_offset 4
 542              		.cfi_offset 7, -4
 543 0002 85B0     		sub	sp, sp, #20
 544              	.LCFI18:
 545              		.cfi_def_cfa_offset 24
 546 0004 00AF     		add	r7, sp, #0
 547              	.LCFI19:
 548              		.cfi_def_cfa_register 7
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 549              		.loc 1 609 0
 550 0006 4FF00003 		mov	r3, #0
 551 000a 7B60     		str	r3, [r7, #4]
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 552              		.loc 1 610 0
 553 000c 4FF00003 		mov	r3, #0
 554 0010 FB73     		strb	r3, [r7, #15]
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 555              		.loc 1 611 0
 556 0012 4FF00003 		mov	r3, #0
 557 0016 BB60     		str	r3, [r7, #8]
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 558              		.loc 1 614 0
 559 0018 4FF42053 		mov	r3, #10240
 560 001c C4F20003 		movt	r3, 16384
 561 0020 4FF0CA02 		mov	r2, #202
 562 0024 5A62     		str	r2, [r3, #36]
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 563              		.loc 1 615 0
 564 0026 4FF42053 		mov	r3, #10240
 565 002a C4F20003 		movt	r3, 16384
 566 002e 4FF05302 		mov	r2, #83
 567 0032 5A62     		str	r2, [r3, #36]
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 568              		.loc 1 618 0
 569 0034 4FF42053 		mov	r3, #10240
 570 0038 C4F20003 		movt	r3, 16384
 571 003c 4FF42052 		mov	r2, #10240
 572 0040 C4F20002 		movt	r2, 16384
 573 0044 D268     		ldr	r2, [r2, #12]
 574 0046 22F0A002 		bic	r2, r2, #160
 575 004a DA60     		str	r2, [r3, #12]
 576              	.L24:
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   do
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 577              		.loc 1 623 0 discriminator 1
 578 004c 4FF42053 		mov	r3, #10240
 579 0050 C4F20003 		movt	r3, 16384
 580 0054 DB68     		ldr	r3, [r3, #12]
 581 0056 03F02003 		and	r3, r3, #32
 582 005a BB60     		str	r3, [r7, #8]
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 583              		.loc 1 624 0 discriminator 1
 584 005c 7B68     		ldr	r3, [r7, #4]
 585 005e 03F10103 		add	r3, r3, #1
 586 0062 7B60     		str	r3, [r7, #4]
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 587              		.loc 1 625 0 discriminator 1
 588 0064 7B68     		ldr	r3, [r7, #4]
 589 0066 B3F5003F 		cmp	r3, #131072
 590 006a 02D0     		beq	.L23
 591 006c BB68     		ldr	r3, [r7, #8]
 592 006e 002B     		cmp	r3, #0
 593 0070 ECD0     		beq	.L24
 594              	.L23:
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 595              		.loc 1 627 0
 596 0072 4FF42053 		mov	r3, #10240
 597 0076 C4F20003 		movt	r3, 16384
 598 007a DB68     		ldr	r3, [r3, #12]
 599 007c 03F02003 		and	r3, r3, #32
 600 0080 002B     		cmp	r3, #0
 601 0082 03D0     		beq	.L25
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 602              		.loc 1 629 0
 603 0084 4FF00103 		mov	r3, #1
 604 0088 FB73     		strb	r3, [r7, #15]
 605 008a 02E0     		b	.L26
 606              	.L25:
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 607              		.loc 1 633 0
 608 008c 4FF00003 		mov	r3, #0
 609 0090 FB73     		strb	r3, [r7, #15]
 610              	.L26:
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }        
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 611              		.loc 1 637 0
 612 0092 4FF42053 		mov	r3, #10240
 613 0096 C4F20003 		movt	r3, 16384
 614 009a 4FF0FF02 		mov	r2, #255
 615 009e 5A62     		str	r2, [r3, #36]
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status); 
 616              		.loc 1 639 0
 617 00a0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 618              		.loc 1 640 0
 619 00a2 1846     		mov	r0, r3
 620 00a4 07F11407 		add	r7, r7, #20
 621 00a8 BD46     		mov	sp, r7
 622 00aa 80BC     		pop	{r7}
 623 00ac 7047     		bx	lr
 624              		.cfi_endproc
 625              	.LFE116:
 627 00ae 00BF     		.section	.text.RTC_RefClockCmd,"ax",%progbits
 628              		.align	2
 629              		.global	RTC_RefClockCmd
 630              		.thumb
 631              		.thumb_func
 633              	RTC_RefClockCmd:
 634              	.LFB117:
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 635              		.loc 1 651 0
 636              		.cfi_startproc
 637              		@ args = 0, pretend = 0, frame = 16
 638              		@ frame_needed = 1, uses_anonymous_args = 0
 639 0000 80B5     		push	{r7, lr}
 640              	.LCFI20:
 641              		.cfi_def_cfa_offset 8
 642              		.cfi_offset 14, -4
 643              		.cfi_offset 7, -8
 644 0002 84B0     		sub	sp, sp, #16
 645              	.LCFI21:
 646              		.cfi_def_cfa_offset 24
 647 0004 00AF     		add	r7, sp, #0
 648              	.LCFI22:
 649              		.cfi_def_cfa_register 7
 650 0006 0346     		mov	r3, r0
 651 0008 FB71     		strb	r3, [r7, #7]
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 652              		.loc 1 652 0
 653 000a 4FF00003 		mov	r3, #0
 654 000e FB73     		strb	r3, [r7, #15]
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 655              		.loc 1 658 0
 656 0010 4FF42053 		mov	r3, #10240
 657 0014 C4F20003 		movt	r3, 16384
 658 0018 4FF0CA02 		mov	r2, #202
 659 001c 5A62     		str	r2, [r3, #36]
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 660              		.loc 1 659 0
 661 001e 4FF42053 		mov	r3, #10240
 662 0022 C4F20003 		movt	r3, 16384
 663 0026 4FF05302 		mov	r2, #83
 664 002a 5A62     		str	r2, [r3, #36]
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 665              		.loc 1 662 0
 666 002c FFF7FEFF 		bl	RTC_EnterInitMode
 667 0030 0346     		mov	r3, r0
 668 0032 002B     		cmp	r3, #0
 669 0034 03D1     		bne	.L28
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 670              		.loc 1 664 0
 671 0036 4FF00003 		mov	r3, #0
 672 003a FB73     		strb	r3, [r7, #15]
 673 003c 20E0     		b	.L29
 674              	.L28:
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 675              		.loc 1 668 0
 676 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 677 0040 002B     		cmp	r3, #0
 678 0042 0CD0     		beq	.L30
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 679              		.loc 1 671 0
 680 0044 4FF42053 		mov	r3, #10240
 681 0048 C4F20003 		movt	r3, 16384
 682 004c 4FF42052 		mov	r2, #10240
 683 0050 C4F20002 		movt	r2, 16384
 684 0054 9268     		ldr	r2, [r2, #8]
 685 0056 42F01002 		orr	r2, r2, #16
 686 005a 9A60     		str	r2, [r3, #8]
 687 005c 0BE0     		b	.L31
 688              	.L30:
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 689              		.loc 1 676 0
 690 005e 4FF42053 		mov	r3, #10240
 691 0062 C4F20003 		movt	r3, 16384
 692 0066 4FF42052 		mov	r2, #10240
 693 006a C4F20002 		movt	r2, 16384
 694 006e 9268     		ldr	r2, [r2, #8]
 695 0070 22F01002 		bic	r2, r2, #16
 696 0074 9A60     		str	r2, [r3, #8]
 697              	.L31:
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 698              		.loc 1 679 0
 699 0076 FFF7FEFF 		bl	RTC_ExitInitMode
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 700              		.loc 1 681 0
 701 007a 4FF00103 		mov	r3, #1
 702 007e FB73     		strb	r3, [r7, #15]
 703              	.L29:
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 704              		.loc 1 685 0
 705 0080 4FF42053 		mov	r3, #10240
 706 0084 C4F20003 		movt	r3, 16384
 707 0088 4FF0FF02 		mov	r2, #255
 708 008c 5A62     		str	r2, [r3, #36]
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status; 
 709              		.loc 1 687 0
 710 008e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 711              		.loc 1 688 0
 712 0090 1846     		mov	r0, r3
 713 0092 07F11007 		add	r7, r7, #16
 714 0096 BD46     		mov	sp, r7
 715 0098 80BD     		pop	{r7, pc}
 716              		.cfi_endproc
 717              	.LFE117:
 719 009a 00BF     		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 720              		.align	2
 721              		.global	RTC_BypassShadowCmd
 722              		.thumb
 723              		.thumb_func
 725              	RTC_BypassShadowCmd:
 726              	.LFB118:
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 727              		.loc 1 699 0
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 8
 730              		@ frame_needed = 1, uses_anonymous_args = 0
 731              		@ link register save eliminated.
 732 0000 80B4     		push	{r7}
 733              	.LCFI23:
 734              		.cfi_def_cfa_offset 4
 735              		.cfi_offset 7, -4
 736 0002 83B0     		sub	sp, sp, #12
 737              	.LCFI24:
 738              		.cfi_def_cfa_offset 16
 739 0004 00AF     		add	r7, sp, #0
 740              	.LCFI25:
 741              		.cfi_def_cfa_register 7
 742 0006 0346     		mov	r3, r0
 743 0008 FB71     		strb	r3, [r7, #7]
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 744              		.loc 1 704 0
 745 000a 4FF42053 		mov	r3, #10240
 746 000e C4F20003 		movt	r3, 16384
 747 0012 4FF0CA02 		mov	r2, #202
 748 0016 5A62     		str	r2, [r3, #36]
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 749              		.loc 1 705 0
 750 0018 4FF42053 		mov	r3, #10240
 751 001c C4F20003 		movt	r3, 16384
 752 0020 4FF05302 		mov	r2, #83
 753 0024 5A62     		str	r2, [r3, #36]
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 754              		.loc 1 707 0
 755 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 756 0028 002B     		cmp	r3, #0
 757 002a 0CD0     		beq	.L33
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 758              		.loc 1 710 0
 759 002c 4FF42053 		mov	r3, #10240
 760 0030 C4F20003 		movt	r3, 16384
 761 0034 4FF42052 		mov	r2, #10240
 762 0038 C4F20002 		movt	r2, 16384
 763 003c 9268     		ldr	r2, [r2, #8]
 764 003e 42F02002 		orr	r2, r2, #32
 765 0042 9A60     		str	r2, [r3, #8]
 766 0044 0BE0     		b	.L34
 767              	.L33:
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 768              		.loc 1 715 0
 769 0046 4FF42053 		mov	r3, #10240
 770 004a C4F20003 		movt	r3, 16384
 771 004e 4FF42052 		mov	r2, #10240
 772 0052 C4F20002 		movt	r2, 16384
 773 0056 9268     		ldr	r2, [r2, #8]
 774 0058 02F0DF02 		and	r2, r2, #223
 775 005c 9A60     		str	r2, [r3, #8]
 776              	.L34:
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 777              		.loc 1 719 0
 778 005e 4FF42053 		mov	r3, #10240
 779 0062 C4F20003 		movt	r3, 16384
 780 0066 4FF0FF02 		mov	r2, #255
 781 006a 5A62     		str	r2, [r3, #36]
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 782              		.loc 1 720 0
 783 006c 07F10C07 		add	r7, r7, #12
 784 0070 BD46     		mov	sp, r7
 785 0072 80BC     		pop	{r7}
 786 0074 7047     		bx	lr
 787              		.cfi_endproc
 788              	.LFE118:
 790              		.section	.text.RTC_SetTime,"ax",%progbits
 791              		.align	2
 792              		.global	RTC_SetTime
 793              		.thumb
 794              		.thumb_func
 796              	RTC_SetTime:
 797              	.LFB119:
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Time and Date configuration functions
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Calendar
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (Time and Date).
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 798              		.loc 1 754 0
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 16
 801              		@ frame_needed = 1, uses_anonymous_args = 0
 802 0000 90B5     		push	{r4, r7, lr}
 803              	.LCFI26:
 804              		.cfi_def_cfa_offset 12
 805              		.cfi_offset 14, -4
 806              		.cfi_offset 7, -8
 807              		.cfi_offset 4, -12
 808 0002 85B0     		sub	sp, sp, #20
 809              	.LCFI27:
 810              		.cfi_def_cfa_offset 32
 811 0004 00AF     		add	r7, sp, #0
 812              	.LCFI28:
 813              		.cfi_def_cfa_register 7
 814 0006 7860     		str	r0, [r7, #4]
 815 0008 3960     		str	r1, [r7, #0]
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 816              		.loc 1 755 0
 817 000a 4FF00003 		mov	r3, #0
 818 000e FB60     		str	r3, [r7, #12]
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 819              		.loc 1 756 0
 820 0010 4FF00003 		mov	r3, #0
 821 0014 FB72     		strb	r3, [r7, #11]
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 822              		.loc 1 761 0
 823 0016 7B68     		ldr	r3, [r7, #4]
 824 0018 002B     		cmp	r3, #0
 825 001a 0DD1     		bne	.L36
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 826              		.loc 1 763 0
 827 001c 4FF42053 		mov	r3, #10240
 828 0020 C4F20003 		movt	r3, 16384
 829 0024 9B68     		ldr	r3, [r3, #8]
 830 0026 03F04003 		and	r3, r3, #64
 831 002a 002B     		cmp	r3, #0
 832 002c 19D1     		bne	.L37
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 833              		.loc 1 770 0
 834 002e 3B68     		ldr	r3, [r7, #0]
 835 0030 4FF00002 		mov	r2, #0
 836 0034 DA70     		strb	r2, [r3, #3]
 837 0036 14E0     		b	.L37
 838              	.L36:
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 839              		.loc 1 778 0
 840 0038 4FF42053 		mov	r3, #10240
 841 003c C4F20003 		movt	r3, 16384
 842 0040 9B68     		ldr	r3, [r3, #8]
 843 0042 03F04003 		and	r3, r3, #64
 844 0046 002B     		cmp	r3, #0
 845 0048 07D0     		beq	.L38
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 846              		.loc 1 780 0
 847 004a 3B68     		ldr	r3, [r7, #0]
 848 004c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 849 004e 1846     		mov	r0, r3
 850 0050 FFF7FEFF 		bl	RTC_Bcd2ToByte
 851 0054 0346     		mov	r3, r0
 852 0056 FB60     		str	r3, [r7, #12]
 853 0058 03E0     		b	.L37
 854              	.L38:
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 855              		.loc 1 786 0
 856 005a 3B68     		ldr	r3, [r7, #0]
 857 005c 4FF00002 		mov	r2, #0
 858 0060 DA70     		strb	r2, [r3, #3]
 859              	.L37:
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 860              		.loc 1 794 0
 861 0062 7B68     		ldr	r3, [r7, #4]
 862 0064 002B     		cmp	r3, #0
 863 0066 12D0     		beq	.L39
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 864              		.loc 1 796 0
 865 0068 3B68     		ldr	r3, [r7, #0]
 866 006a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 867 006c 4FEA0342 		lsl	r2, r3, #16
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 868              		.loc 1 797 0
 869 0070 3B68     		ldr	r3, [r7, #0]
 870 0072 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 871 0074 4FEA0323 		lsl	r3, r3, #8
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 872              		.loc 1 796 0
 873 0078 1A43     		orrs	r2, r2, r3
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 874              		.loc 1 798 0
 875 007a 3B68     		ldr	r3, [r7, #0]
 876 007c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 877              		.loc 1 797 0
 878 007e 1A43     		orrs	r2, r2, r3
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 879              		.loc 1 799 0
 880 0080 3B68     		ldr	r3, [r7, #0]
 881 0082 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 882 0084 4FEA0343 		lsl	r3, r3, #16
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 883              		.loc 1 796 0
 884 0088 1343     		orrs	r3, r3, r2
 885 008a FB60     		str	r3, [r7, #12]
 886 008c 1EE0     		b	.L40
 887              	.L39:
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 888              		.loc 1 803 0
 889 008e 3B68     		ldr	r3, [r7, #0]
 890 0090 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 891 0092 1846     		mov	r0, r3
 892 0094 FFF7FEFF 		bl	RTC_ByteToBcd2
 893 0098 0346     		mov	r3, r0
 894 009a 4FEA0344 		lsl	r4, r3, #16
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 895              		.loc 1 804 0
 896 009e 3B68     		ldr	r3, [r7, #0]
 897 00a0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 898 00a2 1846     		mov	r0, r3
 899 00a4 FFF7FEFF 		bl	RTC_ByteToBcd2
 900 00a8 0346     		mov	r3, r0
 901 00aa 4FEA0323 		lsl	r3, r3, #8
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 902              		.loc 1 803 0
 903 00ae 1C43     		orrs	r4, r4, r3
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 904              		.loc 1 805 0
 905 00b0 3B68     		ldr	r3, [r7, #0]
 906 00b2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 907 00b4 1846     		mov	r0, r3
 908 00b6 FFF7FEFF 		bl	RTC_ByteToBcd2
 909 00ba 0346     		mov	r3, r0
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 910              		.loc 1 804 0
 911 00bc 44EA0302 		orr	r2, r4, r3
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 912              		.loc 1 806 0
 913 00c0 3B68     		ldr	r3, [r7, #0]
 914 00c2 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 915 00c4 4FEA0343 		lsl	r3, r3, #16
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 916              		.loc 1 803 0
 917 00c8 1343     		orrs	r3, r3, r2
 918 00ca FB60     		str	r3, [r7, #12]
 919              	.L40:
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 920              		.loc 1 810 0
 921 00cc 4FF42053 		mov	r3, #10240
 922 00d0 C4F20003 		movt	r3, 16384
 923 00d4 4FF0CA02 		mov	r2, #202
 924 00d8 5A62     		str	r2, [r3, #36]
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 925              		.loc 1 811 0
 926 00da 4FF42053 		mov	r3, #10240
 927 00de C4F20003 		movt	r3, 16384
 928 00e2 4FF05302 		mov	r2, #83
 929 00e6 5A62     		str	r2, [r3, #36]
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 930              		.loc 1 814 0
 931 00e8 FFF7FEFF 		bl	RTC_EnterInitMode
 932 00ec 0346     		mov	r3, r0
 933 00ee 002B     		cmp	r3, #0
 934 00f0 03D1     		bne	.L41
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 935              		.loc 1 816 0
 936 00f2 4FF00003 		mov	r3, #0
 937 00f6 FB72     		strb	r3, [r7, #11]
 938 00f8 18E0     		b	.L42
 939              	.L41:
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 940              		.loc 1 821 0
 941 00fa 4FF42052 		mov	r2, #10240
 942 00fe C4F20002 		movt	r2, 16384
 943 0102 F968     		ldr	r1, [r7, #12]
 944 0104 47F67F73 		movw	r3, #32639
 945 0108 C0F27F03 		movt	r3, 127
 946 010c 0B40     		ands	r3, r3, r1
 947 010e 1360     		str	r3, [r2, #0]
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 948              		.loc 1 824 0
 949 0110 FFF7FEFF 		bl	RTC_ExitInitMode
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 950              		.loc 1 826 0
 951 0114 FFF7FEFF 		bl	RTC_WaitForSynchro
 952 0118 0346     		mov	r3, r0
 953 011a 002B     		cmp	r3, #0
 954 011c 03D1     		bne	.L43
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 955              		.loc 1 828 0
 956 011e 4FF00003 		mov	r3, #0
 957 0122 FB72     		strb	r3, [r7, #11]
 958 0124 02E0     		b	.L42
 959              	.L43:
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 960              		.loc 1 832 0
 961 0126 4FF00103 		mov	r3, #1
 962 012a FB72     		strb	r3, [r7, #11]
 963              	.L42:
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 964              		.loc 1 837 0
 965 012c 4FF42053 		mov	r3, #10240
 966 0130 C4F20003 		movt	r3, 16384
 967 0134 4FF0FF02 		mov	r2, #255
 968 0138 5A62     		str	r2, [r3, #36]
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 969              		.loc 1 839 0
 970 013a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 971              		.loc 1 840 0
 972 013c 1846     		mov	r0, r3
 973 013e 07F11407 		add	r7, r7, #20
 974 0142 BD46     		mov	sp, r7
 975 0144 90BD     		pop	{r4, r7, pc}
 976              		.cfi_endproc
 977              	.LFE119:
 979 0146 00BF     		.section	.text.RTC_TimeStructInit,"ax",%progbits
 980              		.align	2
 981              		.global	RTC_TimeStructInit
 982              		.thumb
 983              		.thumb_func
 985              	RTC_TimeStructInit:
 986              	.LFB120:
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 987              		.loc 1 850 0
 988              		.cfi_startproc
 989              		@ args = 0, pretend = 0, frame = 8
 990              		@ frame_needed = 1, uses_anonymous_args = 0
 991              		@ link register save eliminated.
 992 0000 80B4     		push	{r7}
 993              	.LCFI29:
 994              		.cfi_def_cfa_offset 4
 995              		.cfi_offset 7, -4
 996 0002 83B0     		sub	sp, sp, #12
 997              	.LCFI30:
 998              		.cfi_def_cfa_offset 16
 999 0004 00AF     		add	r7, sp, #0
 1000              	.LCFI31:
 1001              		.cfi_def_cfa_register 7
 1002 0006 7860     		str	r0, [r7, #4]
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 1003              		.loc 1 852 0
 1004 0008 7B68     		ldr	r3, [r7, #4]
 1005 000a 4FF00002 		mov	r2, #0
 1006 000e DA70     		strb	r2, [r3, #3]
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 1007              		.loc 1 853 0
 1008 0010 7B68     		ldr	r3, [r7, #4]
 1009 0012 4FF00002 		mov	r2, #0
 1010 0016 1A70     		strb	r2, [r3, #0]
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 1011              		.loc 1 854 0
 1012 0018 7B68     		ldr	r3, [r7, #4]
 1013 001a 4FF00002 		mov	r2, #0
 1014 001e 5A70     		strb	r2, [r3, #1]
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 1015              		.loc 1 855 0
 1016 0020 7B68     		ldr	r3, [r7, #4]
 1017 0022 4FF00002 		mov	r2, #0
 1018 0026 9A70     		strb	r2, [r3, #2]
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1019              		.loc 1 856 0
 1020 0028 07F10C07 		add	r7, r7, #12
 1021 002c BD46     		mov	sp, r7
 1022 002e 80BC     		pop	{r7}
 1023 0030 7047     		bx	lr
 1024              		.cfi_endproc
 1025              	.LFE120:
 1027 0032 00BF     		.section	.text.RTC_GetTime,"ax",%progbits
 1028              		.align	2
 1029              		.global	RTC_GetTime
 1030              		.thumb
 1031              		.thumb_func
 1033              	RTC_GetTime:
 1034              	.LFB121:
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1035              		.loc 1 869 0
 1036              		.cfi_startproc
 1037              		@ args = 0, pretend = 0, frame = 16
 1038              		@ frame_needed = 1, uses_anonymous_args = 0
 1039 0000 80B5     		push	{r7, lr}
 1040              	.LCFI32:
 1041              		.cfi_def_cfa_offset 8
 1042              		.cfi_offset 14, -4
 1043              		.cfi_offset 7, -8
 1044 0002 84B0     		sub	sp, sp, #16
 1045              	.LCFI33:
 1046              		.cfi_def_cfa_offset 24
 1047 0004 00AF     		add	r7, sp, #0
 1048              	.LCFI34:
 1049              		.cfi_def_cfa_register 7
 1050 0006 7860     		str	r0, [r7, #4]
 1051 0008 3960     		str	r1, [r7, #0]
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1052              		.loc 1 870 0
 1053 000a 4FF00003 		mov	r3, #0
 1054 000e FB60     		str	r3, [r7, #12]
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 1055              		.loc 1 876 0
 1056 0010 4FF42053 		mov	r3, #10240
 1057 0014 C4F20003 		movt	r3, 16384
 1058 0018 1A68     		ldr	r2, [r3, #0]
 1059 001a 47F67F73 		movw	r3, #32639
 1060 001e C0F27F03 		movt	r3, 127
 1061 0022 1340     		ands	r3, r3, r2
 1062 0024 FB60     		str	r3, [r7, #12]
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 1063              		.loc 1 879 0
 1064 0026 FB68     		ldr	r3, [r7, #12]
 1065 0028 03F47C13 		and	r3, r3, #4128768
 1066 002c 4FEA1343 		lsr	r3, r3, #16
 1067 0030 DAB2     		uxtb	r2, r3
 1068 0032 3B68     		ldr	r3, [r7, #0]
 1069 0034 1A70     		strb	r2, [r3, #0]
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1070              		.loc 1 880 0
 1071 0036 FB68     		ldr	r3, [r7, #12]
 1072 0038 03F4FE43 		and	r3, r3, #32512
 1073 003c 4FEA1323 		lsr	r3, r3, #8
 1074 0040 DAB2     		uxtb	r2, r3
 1075 0042 3B68     		ldr	r3, [r7, #0]
 1076 0044 5A70     		strb	r2, [r3, #1]
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1077              		.loc 1 881 0
 1078 0046 FB68     		ldr	r3, [r7, #12]
 1079 0048 DBB2     		uxtb	r3, r3
 1080 004a 03F07F03 		and	r3, r3, #127
 1081 004e DAB2     		uxtb	r2, r3
 1082 0050 3B68     		ldr	r3, [r7, #0]
 1083 0052 9A70     		strb	r2, [r3, #2]
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1084              		.loc 1 882 0
 1085 0054 FB68     		ldr	r3, [r7, #12]
 1086 0056 03F48003 		and	r3, r3, #4194304
 1087 005a 4FEA1343 		lsr	r3, r3, #16
 1088 005e DAB2     		uxtb	r2, r3
 1089 0060 3B68     		ldr	r3, [r7, #0]
 1090 0062 DA70     		strb	r2, [r3, #3]
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1091              		.loc 1 885 0
 1092 0064 7B68     		ldr	r3, [r7, #4]
 1093 0066 002B     		cmp	r3, #0
 1094 0068 1AD1     		bne	.L45
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 1095              		.loc 1 888 0
 1096 006a 3B68     		ldr	r3, [r7, #0]
 1097 006c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1098 006e 1846     		mov	r0, r3
 1099 0070 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1100 0074 0346     		mov	r3, r0
 1101 0076 1A46     		mov	r2, r3
 1102 0078 3B68     		ldr	r3, [r7, #0]
 1103 007a 1A70     		strb	r2, [r3, #0]
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1104              		.loc 1 889 0
 1105 007c 3B68     		ldr	r3, [r7, #0]
 1106 007e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1107 0080 1846     		mov	r0, r3
 1108 0082 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1109 0086 0346     		mov	r3, r0
 1110 0088 1A46     		mov	r2, r3
 1111 008a 3B68     		ldr	r3, [r7, #0]
 1112 008c 5A70     		strb	r2, [r3, #1]
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 1113              		.loc 1 890 0
 1114 008e 3B68     		ldr	r3, [r7, #0]
 1115 0090 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1116 0092 1846     		mov	r0, r3
 1117 0094 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1118 0098 0346     		mov	r3, r0
 1119 009a 1A46     		mov	r2, r3
 1120 009c 3B68     		ldr	r3, [r7, #0]
 1121 009e 9A70     		strb	r2, [r3, #2]
 1122              	.L45:
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1123              		.loc 1 892 0
 1124 00a0 07F11007 		add	r7, r7, #16
 1125 00a4 BD46     		mov	sp, r7
 1126 00a6 80BD     		pop	{r7, pc}
 1127              		.cfi_endproc
 1128              	.LFE121:
 1130              		.section	.text.RTC_GetSubSecond,"ax",%progbits
 1131              		.align	2
 1132              		.global	RTC_GetSubSecond
 1133              		.thumb
 1134              		.thumb_func
 1136              	RTC_GetSubSecond:
 1137              	.LFB122:
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         SSR register.
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1138              		.loc 1 902 0
 1139              		.cfi_startproc
 1140              		@ args = 0, pretend = 0, frame = 8
 1141              		@ frame_needed = 1, uses_anonymous_args = 0
 1142              		@ link register save eliminated.
 1143 0000 80B4     		push	{r7}
 1144              	.LCFI35:
 1145              		.cfi_def_cfa_offset 4
 1146              		.cfi_offset 7, -4
 1147 0002 83B0     		sub	sp, sp, #12
 1148              	.LCFI36:
 1149              		.cfi_def_cfa_offset 16
 1150 0004 00AF     		add	r7, sp, #0
 1151              	.LCFI37:
 1152              		.cfi_def_cfa_register 7
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1153              		.loc 1 903 0
 1154 0006 4FF00003 		mov	r3, #0
 1155 000a 7B60     		str	r3, [r7, #4]
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 1156              		.loc 1 906 0
 1157 000c 4FF42053 		mov	r3, #10240
 1158 0010 C4F20003 		movt	r3, 16384
 1159 0014 9B6A     		ldr	r3, [r3, #40]
 1160 0016 7B60     		str	r3, [r7, #4]
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 1161              		.loc 1 909 0
 1162 0018 4FF42053 		mov	r3, #10240
 1163 001c C4F20003 		movt	r3, 16384
 1164 0020 5B68     		ldr	r3, [r3, #4]
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 1165              		.loc 1 911 0
 1166 0022 7B68     		ldr	r3, [r7, #4]
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1167              		.loc 1 912 0
 1168 0024 1846     		mov	r0, r3
 1169 0026 07F10C07 		add	r7, r7, #12
 1170 002a BD46     		mov	sp, r7
 1171 002c 80BC     		pop	{r7}
 1172 002e 7047     		bx	lr
 1173              		.cfi_endproc
 1174              	.LFE122:
 1176              		.section	.text.RTC_SetDate,"ax",%progbits
 1177              		.align	2
 1178              		.global	RTC_SetDate
 1179              		.thumb
 1180              		.thumb_func
 1182              	RTC_SetDate:
 1183              	.LFB123:
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1184              		.loc 1 927 0
 1185              		.cfi_startproc
 1186              		@ args = 0, pretend = 0, frame = 16
 1187              		@ frame_needed = 1, uses_anonymous_args = 0
 1188 0000 90B5     		push	{r4, r7, lr}
 1189              	.LCFI38:
 1190              		.cfi_def_cfa_offset 12
 1191              		.cfi_offset 14, -4
 1192              		.cfi_offset 7, -8
 1193              		.cfi_offset 4, -12
 1194 0002 85B0     		sub	sp, sp, #20
 1195              	.LCFI39:
 1196              		.cfi_def_cfa_offset 32
 1197 0004 00AF     		add	r7, sp, #0
 1198              	.LCFI40:
 1199              		.cfi_def_cfa_register 7
 1200 0006 7860     		str	r0, [r7, #4]
 1201 0008 3960     		str	r1, [r7, #0]
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1202              		.loc 1 928 0
 1203 000a 4FF00003 		mov	r3, #0
 1204 000e FB60     		str	r3, [r7, #12]
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1205              		.loc 1 929 0
 1206 0010 4FF00003 		mov	r3, #0
 1207 0014 FB72     		strb	r3, [r7, #11]
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 1208              		.loc 1 934 0
 1209 0016 7B68     		ldr	r3, [r7, #4]
 1210 0018 002B     		cmp	r3, #0
 1211 001a 0FD1     		bne	.L49
 1212              		.loc 1 934 0 is_stmt 0 discriminator 1
 1213 001c 3B68     		ldr	r3, [r7, #0]
 1214 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1215 0020 03F01003 		and	r3, r3, #16
 1216 0024 002B     		cmp	r3, #0
 1217 0026 09D0     		beq	.L49
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 1218              		.loc 1 936 0 is_stmt 1
 1219 0028 3B68     		ldr	r3, [r7, #0]
 1220 002a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1221 002c 23F01003 		bic	r3, r3, #16
 1222 0030 DBB2     		uxtb	r3, r3
 1223 0032 03F10A03 		add	r3, r3, #10
 1224 0036 DAB2     		uxtb	r2, r3
 1225 0038 3B68     		ldr	r3, [r7, #0]
 1226 003a 5A70     		strb	r2, [r3, #1]
 1227              	.L49:
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1228              		.loc 1 938 0
 1229 003c 7B68     		ldr	r3, [r7, #4]
 1230 003e 002B     		cmp	r3, #0
 1231 0040 0DD0     		beq	.L50
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1232              		.loc 1 947 0
 1233 0042 3B68     		ldr	r3, [r7, #0]
 1234 0044 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1235 0046 1846     		mov	r0, r3
 1236 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1237 004c 0346     		mov	r3, r0
 1238 004e FB60     		str	r3, [r7, #12]
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1239              		.loc 1 949 0
 1240 0050 3B68     		ldr	r3, [r7, #0]
 1241 0052 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1242 0054 1846     		mov	r0, r3
 1243 0056 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1244 005a 0346     		mov	r3, r0
 1245 005c FB60     		str	r3, [r7, #12]
 1246              	.L50:
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1247              		.loc 1 955 0
 1248 005e 7B68     		ldr	r3, [r7, #4]
 1249 0060 002B     		cmp	r3, #0
 1250 0062 12D0     		beq	.L51
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1251              		.loc 1 957 0
 1252 0064 3B68     		ldr	r3, [r7, #0]
 1253 0066 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1254 0068 4FEA0342 		lsl	r2, r3, #16
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1255              		.loc 1 958 0
 1256 006c 3B68     		ldr	r3, [r7, #0]
 1257 006e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1258 0070 4FEA0323 		lsl	r3, r3, #8
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1259              		.loc 1 957 0
 1260 0074 1A43     		orrs	r2, r2, r3
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1261              		.loc 1 959 0
 1262 0076 3B68     		ldr	r3, [r7, #0]
 1263 0078 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1264              		.loc 1 958 0
 1265 007a 1A43     		orrs	r2, r2, r3
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 1266              		.loc 1 960 0
 1267 007c 3B68     		ldr	r3, [r7, #0]
 1268 007e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1269 0080 4FEA4333 		lsl	r3, r3, #13
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1270              		.loc 1 957 0
 1271 0084 1343     		orrs	r3, r3, r2
 1272 0086 FB60     		str	r3, [r7, #12]
 1273 0088 1EE0     		b	.L52
 1274              	.L51:
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1275              		.loc 1 964 0
 1276 008a 3B68     		ldr	r3, [r7, #0]
 1277 008c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1278 008e 1846     		mov	r0, r3
 1279 0090 FFF7FEFF 		bl	RTC_ByteToBcd2
 1280 0094 0346     		mov	r3, r0
 1281 0096 4FEA0344 		lsl	r4, r3, #16
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1282              		.loc 1 965 0
 1283 009a 3B68     		ldr	r3, [r7, #0]
 1284 009c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1285 009e 1846     		mov	r0, r3
 1286 00a0 FFF7FEFF 		bl	RTC_ByteToBcd2
 1287 00a4 0346     		mov	r3, r0
 1288 00a6 4FEA0323 		lsl	r3, r3, #8
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1289              		.loc 1 964 0
 1290 00aa 1C43     		orrs	r4, r4, r3
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1291              		.loc 1 966 0
 1292 00ac 3B68     		ldr	r3, [r7, #0]
 1293 00ae 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1294 00b0 1846     		mov	r0, r3
 1295 00b2 FFF7FEFF 		bl	RTC_ByteToBcd2
 1296 00b6 0346     		mov	r3, r0
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1297              		.loc 1 965 0
 1298 00b8 44EA0302 		orr	r2, r4, r3
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1299              		.loc 1 967 0
 1300 00bc 3B68     		ldr	r3, [r7, #0]
 1301 00be 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1302 00c0 4FEA4333 		lsl	r3, r3, #13
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1303              		.loc 1 964 0
 1304 00c4 1343     		orrs	r3, r3, r2
 1305 00c6 FB60     		str	r3, [r7, #12]
 1306              	.L52:
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1307              		.loc 1 971 0
 1308 00c8 4FF42053 		mov	r3, #10240
 1309 00cc C4F20003 		movt	r3, 16384
 1310 00d0 4FF0CA02 		mov	r2, #202
 1311 00d4 5A62     		str	r2, [r3, #36]
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1312              		.loc 1 972 0
 1313 00d6 4FF42053 		mov	r3, #10240
 1314 00da C4F20003 		movt	r3, 16384
 1315 00de 4FF05302 		mov	r2, #83
 1316 00e2 5A62     		str	r2, [r3, #36]
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1317              		.loc 1 975 0
 1318 00e4 FFF7FEFF 		bl	RTC_EnterInitMode
 1319 00e8 0346     		mov	r3, r0
 1320 00ea 002B     		cmp	r3, #0
 1321 00ec 03D1     		bne	.L53
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 1322              		.loc 1 977 0
 1323 00ee 4FF00003 		mov	r3, #0
 1324 00f2 FB72     		strb	r3, [r7, #11]
 1325 00f4 17E0     		b	.L54
 1326              	.L53:
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 1327              		.loc 1 982 0
 1328 00f6 4FF42053 		mov	r3, #10240
 1329 00fa C4F20003 		movt	r3, 16384
 1330 00fe FA68     		ldr	r2, [r7, #12]
 1331 0100 22F07F42 		bic	r2, r2, #-16777216
 1332 0104 22F0C002 		bic	r2, r2, #192
 1333 0108 5A60     		str	r2, [r3, #4]
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 1334              		.loc 1 985 0
 1335 010a FFF7FEFF 		bl	RTC_ExitInitMode
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 1336              		.loc 1 987 0
 1337 010e FFF7FEFF 		bl	RTC_WaitForSynchro
 1338 0112 0346     		mov	r3, r0
 1339 0114 002B     		cmp	r3, #0
 1340 0116 03D1     		bne	.L55
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 1341              		.loc 1 989 0
 1342 0118 4FF00003 		mov	r3, #0
 1343 011c FB72     		strb	r3, [r7, #11]
 1344 011e 02E0     		b	.L54
 1345              	.L55:
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 1346              		.loc 1 993 0
 1347 0120 4FF00103 		mov	r3, #1
 1348 0124 FB72     		strb	r3, [r7, #11]
 1349              	.L54:
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1350              		.loc 1 997 0
 1351 0126 4FF42053 		mov	r3, #10240
 1352 012a C4F20003 		movt	r3, 16384
 1353 012e 4FF0FF02 		mov	r2, #255
 1354 0132 5A62     		str	r2, [r3, #36]
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 1355              		.loc 1 999 0
 1356 0134 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1357              		.loc 1 1000 0
 1358 0136 1846     		mov	r0, r3
 1359 0138 07F11407 		add	r7, r7, #20
 1360 013c BD46     		mov	sp, r7
 1361 013e 90BD     		pop	{r4, r7, pc}
 1362              		.cfi_endproc
 1363              	.LFE123:
 1365              		.section	.text.RTC_DateStructInit,"ax",%progbits
 1366              		.align	2
 1367              		.global	RTC_DateStructInit
 1368              		.thumb
 1369              		.thumb_func
 1371              	RTC_DateStructInit:
 1372              	.LFB124:
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1373              		.loc 1 1010 0
 1374              		.cfi_startproc
 1375              		@ args = 0, pretend = 0, frame = 8
 1376              		@ frame_needed = 1, uses_anonymous_args = 0
 1377              		@ link register save eliminated.
 1378 0000 80B4     		push	{r7}
 1379              	.LCFI41:
 1380              		.cfi_def_cfa_offset 4
 1381              		.cfi_offset 7, -4
 1382 0002 83B0     		sub	sp, sp, #12
 1383              	.LCFI42:
 1384              		.cfi_def_cfa_offset 16
 1385 0004 00AF     		add	r7, sp, #0
 1386              	.LCFI43:
 1387              		.cfi_def_cfa_register 7
 1388 0006 7860     		str	r0, [r7, #4]
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 1389              		.loc 1 1012 0
 1390 0008 7B68     		ldr	r3, [r7, #4]
 1391 000a 4FF00102 		mov	r2, #1
 1392 000e 1A70     		strb	r2, [r3, #0]
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1393              		.loc 1 1013 0
 1394 0010 7B68     		ldr	r3, [r7, #4]
 1395 0012 4FF00102 		mov	r2, #1
 1396 0016 9A70     		strb	r2, [r3, #2]
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1397              		.loc 1 1014 0
 1398 0018 7B68     		ldr	r3, [r7, #4]
 1399 001a 4FF00102 		mov	r2, #1
 1400 001e 5A70     		strb	r2, [r3, #1]
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1401              		.loc 1 1015 0
 1402 0020 7B68     		ldr	r3, [r7, #4]
 1403 0022 4FF00002 		mov	r2, #0
 1404 0026 DA70     		strb	r2, [r3, #3]
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1405              		.loc 1 1016 0
 1406 0028 07F10C07 		add	r7, r7, #12
 1407 002c BD46     		mov	sp, r7
 1408 002e 80BC     		pop	{r7}
 1409 0030 7047     		bx	lr
 1410              		.cfi_endproc
 1411              	.LFE124:
 1413 0032 00BF     		.section	.text.RTC_GetDate,"ax",%progbits
 1414              		.align	2
 1415              		.global	RTC_GetDate
 1416              		.thumb
 1417              		.thumb_func
 1419              	RTC_GetDate:
 1420              	.LFB125:
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1421              		.loc 1 1029 0
 1422              		.cfi_startproc
 1423              		@ args = 0, pretend = 0, frame = 16
 1424              		@ frame_needed = 1, uses_anonymous_args = 0
 1425 0000 80B5     		push	{r7, lr}
 1426              	.LCFI44:
 1427              		.cfi_def_cfa_offset 8
 1428              		.cfi_offset 14, -4
 1429              		.cfi_offset 7, -8
 1430 0002 84B0     		sub	sp, sp, #16
 1431              	.LCFI45:
 1432              		.cfi_def_cfa_offset 24
 1433 0004 00AF     		add	r7, sp, #0
 1434              	.LCFI46:
 1435              		.cfi_def_cfa_register 7
 1436 0006 7860     		str	r0, [r7, #4]
 1437 0008 3960     		str	r1, [r7, #0]
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1438              		.loc 1 1030 0
 1439 000a 4FF00003 		mov	r3, #0
 1440 000e FB60     		str	r3, [r7, #12]
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1441              		.loc 1 1036 0
 1442 0010 4FF42053 		mov	r3, #10240
 1443 0014 C4F20003 		movt	r3, 16384
 1444 0018 5B68     		ldr	r3, [r3, #4]
 1445 001a 23F07F43 		bic	r3, r3, #-16777216
 1446 001e 23F0C003 		bic	r3, r3, #192
 1447 0022 FB60     		str	r3, [r7, #12]
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1448              		.loc 1 1039 0
 1449 0024 FB68     		ldr	r3, [r7, #12]
 1450 0026 03F47F03 		and	r3, r3, #16711680
 1451 002a 4FEA1343 		lsr	r3, r3, #16
 1452 002e DAB2     		uxtb	r2, r3
 1453 0030 3B68     		ldr	r3, [r7, #0]
 1454 0032 DA70     		strb	r2, [r3, #3]
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1455              		.loc 1 1040 0
 1456 0034 FB68     		ldr	r3, [r7, #12]
 1457 0036 03F4F853 		and	r3, r3, #7936
 1458 003a 4FEA1323 		lsr	r3, r3, #8
 1459 003e DAB2     		uxtb	r2, r3
 1460 0040 3B68     		ldr	r3, [r7, #0]
 1461 0042 5A70     		strb	r2, [r3, #1]
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1462              		.loc 1 1041 0
 1463 0044 FB68     		ldr	r3, [r7, #12]
 1464 0046 DBB2     		uxtb	r3, r3
 1465 0048 03F03F03 		and	r3, r3, #63
 1466 004c DAB2     		uxtb	r2, r3
 1467 004e 3B68     		ldr	r3, [r7, #0]
 1468 0050 9A70     		strb	r2, [r3, #2]
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 1469              		.loc 1 1042 0
 1470 0052 FB68     		ldr	r3, [r7, #12]
 1471 0054 03F46043 		and	r3, r3, #57344
 1472 0058 4FEA5333 		lsr	r3, r3, #13
 1473 005c DAB2     		uxtb	r2, r3
 1474 005e 3B68     		ldr	r3, [r7, #0]
 1475 0060 1A70     		strb	r2, [r3, #0]
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1476              		.loc 1 1045 0
 1477 0062 7B68     		ldr	r3, [r7, #4]
 1478 0064 002B     		cmp	r3, #0
 1479 0066 1ED1     		bne	.L57
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 1480              		.loc 1 1048 0
 1481 0068 3B68     		ldr	r3, [r7, #0]
 1482 006a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1483 006c 1846     		mov	r0, r3
 1484 006e FFF7FEFF 		bl	RTC_Bcd2ToByte
 1485 0072 0346     		mov	r3, r0
 1486 0074 1A46     		mov	r2, r3
 1487 0076 3B68     		ldr	r3, [r7, #0]
 1488 0078 DA70     		strb	r2, [r3, #3]
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1489              		.loc 1 1049 0
 1490 007a 3B68     		ldr	r3, [r7, #0]
 1491 007c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1492 007e 1846     		mov	r0, r3
 1493 0080 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1494 0084 0346     		mov	r3, r0
 1495 0086 1A46     		mov	r2, r3
 1496 0088 3B68     		ldr	r3, [r7, #0]
 1497 008a 5A70     		strb	r2, [r3, #1]
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1498              		.loc 1 1050 0
 1499 008c 3B68     		ldr	r3, [r7, #0]
 1500 008e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1501 0090 1846     		mov	r0, r3
 1502 0092 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1503 0096 0346     		mov	r3, r0
 1504 0098 1A46     		mov	r2, r3
 1505 009a 3B68     		ldr	r3, [r7, #0]
 1506 009c 9A70     		strb	r2, [r3, #2]
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_WeekDay = (uint8_t)(RTC_DateStruct->RTC_WeekDay);   
 1507              		.loc 1 1051 0
 1508 009e 3B68     		ldr	r3, [r7, #0]
 1509 00a0 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1510 00a2 3B68     		ldr	r3, [r7, #0]
 1511 00a4 1A70     		strb	r2, [r3, #0]
 1512              	.L57:
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1513              		.loc 1 1053 0
 1514 00a6 07F11007 		add	r7, r7, #16
 1515 00aa BD46     		mov	sp, r7
 1516 00ac 80BD     		pop	{r7, pc}
 1517              		.cfi_endproc
 1518              	.LFE125:
 1520 00ae 00BF     		.section	.text.RTC_SetAlarm,"ax",%progbits
 1521              		.align	2
 1522              		.global	RTC_SetAlarm
 1523              		.thumb
 1524              		.thumb_func
 1526              	RTC_SetAlarm:
 1527              	.LFB126:
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               Alarms (Alarm A and Alarm B) configuration functions
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Alarms.
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1528              		.loc 1 1090 0
 1529              		.cfi_startproc
 1530              		@ args = 0, pretend = 0, frame = 24
 1531              		@ frame_needed = 1, uses_anonymous_args = 0
 1532 0000 90B5     		push	{r4, r7, lr}
 1533              	.LCFI47:
 1534              		.cfi_def_cfa_offset 12
 1535              		.cfi_offset 14, -4
 1536              		.cfi_offset 7, -8
 1537              		.cfi_offset 4, -12
 1538 0002 87B0     		sub	sp, sp, #28
 1539              	.LCFI48:
 1540              		.cfi_def_cfa_offset 40
 1541 0004 00AF     		add	r7, sp, #0
 1542              	.LCFI49:
 1543              		.cfi_def_cfa_register 7
 1544 0006 F860     		str	r0, [r7, #12]
 1545 0008 B960     		str	r1, [r7, #8]
 1546 000a 7A60     		str	r2, [r7, #4]
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1547              		.loc 1 1091 0
 1548 000c 4FF00003 		mov	r3, #0
 1549 0010 7B61     		str	r3, [r7, #20]
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1550              		.loc 1 1099 0
 1551 0012 FB68     		ldr	r3, [r7, #12]
 1552 0014 002B     		cmp	r3, #0
 1553 0016 0DD1     		bne	.L60
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1554              		.loc 1 1101 0
 1555 0018 4FF42053 		mov	r3, #10240
 1556 001c C4F20003 		movt	r3, 16384
 1557 0020 9B68     		ldr	r3, [r3, #8]
 1558 0022 03F04003 		and	r3, r3, #64
 1559 0026 002B     		cmp	r3, #0
 1560 0028 2CD1     		bne	.L62
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1561              		.loc 1 1108 0
 1562 002a 7B68     		ldr	r3, [r7, #4]
 1563 002c 4FF00002 		mov	r2, #0
 1564 0030 DA70     		strb	r2, [r3, #3]
 1565 0032 27E0     		b	.L62
 1566              	.L60:
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1567              		.loc 1 1125 0
 1568 0034 4FF42053 		mov	r3, #10240
 1569 0038 C4F20003 		movt	r3, 16384
 1570 003c 9B68     		ldr	r3, [r3, #8]
 1571 003e 03F04003 		and	r3, r3, #64
 1572 0042 002B     		cmp	r3, #0
 1573 0044 07D0     		beq	.L63
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 1574              		.loc 1 1127 0
 1575 0046 7B68     		ldr	r3, [r7, #4]
 1576 0048 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1577 004a 1846     		mov	r0, r3
 1578 004c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1579 0050 0346     		mov	r3, r0
 1580 0052 7B61     		str	r3, [r7, #20]
 1581 0054 03E0     		b	.L64
 1582              	.L63:
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1583              		.loc 1 1133 0
 1584 0056 7B68     		ldr	r3, [r7, #4]
 1585 0058 4FF00002 		mov	r2, #0
 1586 005c DA70     		strb	r2, [r3, #3]
 1587              	.L64:
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 1588              		.loc 1 1140 0
 1589 005e 7B68     		ldr	r3, [r7, #4]
 1590 0060 9B68     		ldr	r3, [r3, #8]
 1591 0062 002B     		cmp	r3, #0
 1592 0064 07D1     		bne	.L65
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1593              		.loc 1 1142 0
 1594 0066 7B68     		ldr	r3, [r7, #4]
 1595 0068 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1596 006a 1846     		mov	r0, r3
 1597 006c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1598 0070 0346     		mov	r3, r0
 1599 0072 7B61     		str	r3, [r7, #20]
 1600 0074 06E0     		b	.L62
 1601              	.L65:
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1602              		.loc 1 1147 0
 1603 0076 7B68     		ldr	r3, [r7, #4]
 1604 0078 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1605 007a 1846     		mov	r0, r3
 1606 007c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1607 0080 0346     		mov	r3, r0
 1608 0082 7B61     		str	r3, [r7, #20]
 1609              	.L62:
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1610              		.loc 1 1153 0
 1611 0084 FB68     		ldr	r3, [r7, #12]
 1612 0086 002B     		cmp	r3, #0
 1613 0088 1DD0     		beq	.L66
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1614              		.loc 1 1155 0
 1615 008a 7B68     		ldr	r3, [r7, #4]
 1616 008c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1617 008e 4FEA0342 		lsl	r2, r3, #16
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1618              		.loc 1 1156 0
 1619 0092 7B68     		ldr	r3, [r7, #4]
 1620 0094 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1621 0096 4FEA0323 		lsl	r3, r3, #8
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1622              		.loc 1 1155 0
 1623 009a 1A43     		orrs	r2, r2, r3
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1624              		.loc 1 1157 0
 1625 009c 7B68     		ldr	r3, [r7, #4]
 1626 009e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1627              		.loc 1 1156 0
 1628 00a0 1A43     		orrs	r2, r2, r3
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1629              		.loc 1 1158 0
 1630 00a2 7B68     		ldr	r3, [r7, #4]
 1631 00a4 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1632 00a6 4FEA0343 		lsl	r3, r3, #16
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1633              		.loc 1 1157 0
 1634 00aa 1A43     		orrs	r2, r2, r3
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1635              		.loc 1 1159 0
 1636 00ac 7B68     		ldr	r3, [r7, #4]
 1637 00ae 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1638 00b0 4FEA0363 		lsl	r3, r3, #24
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1639              		.loc 1 1158 0
 1640 00b4 1A43     		orrs	r2, r2, r3
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1641              		.loc 1 1160 0
 1642 00b6 7B68     		ldr	r3, [r7, #4]
 1643 00b8 9B68     		ldr	r3, [r3, #8]
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1644              		.loc 1 1159 0
 1645 00ba 1A43     		orrs	r2, r2, r3
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1646              		.loc 1 1161 0
 1647 00bc 7B68     		ldr	r3, [r7, #4]
 1648 00be 5B68     		ldr	r3, [r3, #4]
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1649              		.loc 1 1155 0
 1650 00c0 1343     		orrs	r3, r3, r2
 1651 00c2 7B61     		str	r3, [r7, #20]
 1652 00c4 2FE0     		b	.L67
 1653              	.L66:
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1654              		.loc 1 1165 0
 1655 00c6 7B68     		ldr	r3, [r7, #4]
 1656 00c8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1657 00ca 1846     		mov	r0, r3
 1658 00cc FFF7FEFF 		bl	RTC_ByteToBcd2
 1659 00d0 0346     		mov	r3, r0
 1660 00d2 4FEA0344 		lsl	r4, r3, #16
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1661              		.loc 1 1166 0
 1662 00d6 7B68     		ldr	r3, [r7, #4]
 1663 00d8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1664 00da 1846     		mov	r0, r3
 1665 00dc FFF7FEFF 		bl	RTC_ByteToBcd2
 1666 00e0 0346     		mov	r3, r0
 1667 00e2 4FEA0323 		lsl	r3, r3, #8
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1668              		.loc 1 1165 0
 1669 00e6 1C43     		orrs	r4, r4, r3
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1670              		.loc 1 1167 0
 1671 00e8 7B68     		ldr	r3, [r7, #4]
 1672 00ea 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1673 00ec 1846     		mov	r0, r3
 1674 00ee FFF7FEFF 		bl	RTC_ByteToBcd2
 1675 00f2 0346     		mov	r3, r0
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1676              		.loc 1 1166 0
 1677 00f4 44EA0302 		orr	r2, r4, r3
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1678              		.loc 1 1168 0
 1679 00f8 7B68     		ldr	r3, [r7, #4]
 1680 00fa DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1681 00fc 4FEA0343 		lsl	r3, r3, #16
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1682              		.loc 1 1167 0
 1683 0100 42EA0304 		orr	r4, r2, r3
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1684              		.loc 1 1169 0
 1685 0104 7B68     		ldr	r3, [r7, #4]
 1686 0106 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1687 0108 1846     		mov	r0, r3
 1688 010a FFF7FEFF 		bl	RTC_ByteToBcd2
 1689 010e 0346     		mov	r3, r0
 1690 0110 4FEA0363 		lsl	r3, r3, #24
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1691              		.loc 1 1168 0
 1692 0114 44EA0302 		orr	r2, r4, r3
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1693              		.loc 1 1170 0
 1694 0118 7B68     		ldr	r3, [r7, #4]
 1695 011a 9B68     		ldr	r3, [r3, #8]
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1696              		.loc 1 1169 0
 1697 011c 1A43     		orrs	r2, r2, r3
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1698              		.loc 1 1171 0
 1699 011e 7B68     		ldr	r3, [r7, #4]
 1700 0120 5B68     		ldr	r3, [r3, #4]
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1701              		.loc 1 1165 0
 1702 0122 1343     		orrs	r3, r3, r2
 1703 0124 7B61     		str	r3, [r7, #20]
 1704              	.L67:
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1705              		.loc 1 1175 0
 1706 0126 4FF42053 		mov	r3, #10240
 1707 012a C4F20003 		movt	r3, 16384
 1708 012e 4FF0CA02 		mov	r2, #202
 1709 0132 5A62     		str	r2, [r3, #36]
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1710              		.loc 1 1176 0
 1711 0134 4FF42053 		mov	r3, #10240
 1712 0138 C4F20003 		movt	r3, 16384
 1713 013c 4FF05302 		mov	r2, #83
 1714 0140 5A62     		str	r2, [r3, #36]
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1715              		.loc 1 1179 0
 1716 0142 BB68     		ldr	r3, [r7, #8]
 1717 0144 B3F5807F 		cmp	r3, #256
 1718 0148 06D1     		bne	.L68
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 1719              		.loc 1 1181 0
 1720 014a 4FF42053 		mov	r3, #10240
 1721 014e C4F20003 		movt	r3, 16384
 1722 0152 7A69     		ldr	r2, [r7, #20]
 1723 0154 DA61     		str	r2, [r3, #28]
 1724 0156 05E0     		b	.L69
 1725              	.L68:
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 1726              		.loc 1 1185 0
 1727 0158 4FF42053 		mov	r3, #10240
 1728 015c C4F20003 		movt	r3, 16384
 1729 0160 7A69     		ldr	r2, [r7, #20]
 1730 0162 1A62     		str	r2, [r3, #32]
 1731              	.L69:
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1732              		.loc 1 1189 0
 1733 0164 4FF42053 		mov	r3, #10240
 1734 0168 C4F20003 		movt	r3, 16384
 1735 016c 4FF0FF02 		mov	r2, #255
 1736 0170 5A62     		str	r2, [r3, #36]
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1737              		.loc 1 1190 0
 1738 0172 07F11C07 		add	r7, r7, #28
 1739 0176 BD46     		mov	sp, r7
 1740 0178 90BD     		pop	{r4, r7, pc}
 1741              		.cfi_endproc
 1742              	.LFE126:
 1744 017a 00BF     		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 1745              		.align	2
 1746              		.global	RTC_AlarmStructInit
 1747              		.thumb
 1748              		.thumb_func
 1750              	RTC_AlarmStructInit:
 1751              	.LFB127:
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         will be initialized.
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1752              		.loc 1 1201 0
 1753              		.cfi_startproc
 1754              		@ args = 0, pretend = 0, frame = 8
 1755              		@ frame_needed = 1, uses_anonymous_args = 0
 1756              		@ link register save eliminated.
 1757 0000 80B4     		push	{r7}
 1758              	.LCFI50:
 1759              		.cfi_def_cfa_offset 4
 1760              		.cfi_offset 7, -4
 1761 0002 83B0     		sub	sp, sp, #12
 1762              	.LCFI51:
 1763              		.cfi_def_cfa_offset 16
 1764 0004 00AF     		add	r7, sp, #0
 1765              	.LCFI52:
 1766              		.cfi_def_cfa_register 7
 1767 0006 7860     		str	r0, [r7, #4]
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1768              		.loc 1 1203 0
 1769 0008 7B68     		ldr	r3, [r7, #4]
 1770 000a 4FF00002 		mov	r2, #0
 1771 000e DA70     		strb	r2, [r3, #3]
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1772              		.loc 1 1204 0
 1773 0010 7B68     		ldr	r3, [r7, #4]
 1774 0012 4FF00002 		mov	r2, #0
 1775 0016 1A70     		strb	r2, [r3, #0]
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1776              		.loc 1 1205 0
 1777 0018 7B68     		ldr	r3, [r7, #4]
 1778 001a 4FF00002 		mov	r2, #0
 1779 001e 5A70     		strb	r2, [r3, #1]
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1780              		.loc 1 1206 0
 1781 0020 7B68     		ldr	r3, [r7, #4]
 1782 0022 4FF00002 		mov	r2, #0
 1783 0026 9A70     		strb	r2, [r3, #2]
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 1784              		.loc 1 1209 0
 1785 0028 7B68     		ldr	r3, [r7, #4]
 1786 002a 4FF00002 		mov	r2, #0
 1787 002e 9A60     		str	r2, [r3, #8]
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1788              		.loc 1 1210 0
 1789 0030 7B68     		ldr	r3, [r7, #4]
 1790 0032 4FF00102 		mov	r2, #1
 1791 0036 1A73     		strb	r2, [r3, #12]
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 1792              		.loc 1 1213 0
 1793 0038 7B68     		ldr	r3, [r7, #4]
 1794 003a 4FF00002 		mov	r2, #0
 1795 003e 5A60     		str	r2, [r3, #4]
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1796              		.loc 1 1214 0
 1797 0040 07F10C07 		add	r7, r7, #12
 1798 0044 BD46     		mov	sp, r7
 1799 0046 80BC     		pop	{r7}
 1800 0048 7047     		bx	lr
 1801              		.cfi_endproc
 1802              	.LFE127:
 1804 004a 00BF     		.section	.text.RTC_GetAlarm,"ax",%progbits
 1805              		.align	2
 1806              		.global	RTC_GetAlarm
 1807              		.thumb
 1808              		.thumb_func
 1810              	RTC_GetAlarm:
 1811              	.LFB128:
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1812              		.loc 1 1231 0
 1813              		.cfi_startproc
 1814              		@ args = 0, pretend = 0, frame = 24
 1815              		@ frame_needed = 1, uses_anonymous_args = 0
 1816 0000 80B5     		push	{r7, lr}
 1817              	.LCFI53:
 1818              		.cfi_def_cfa_offset 8
 1819              		.cfi_offset 14, -4
 1820              		.cfi_offset 7, -8
 1821 0002 86B0     		sub	sp, sp, #24
 1822              	.LCFI54:
 1823              		.cfi_def_cfa_offset 32
 1824 0004 00AF     		add	r7, sp, #0
 1825              	.LCFI55:
 1826              		.cfi_def_cfa_register 7
 1827 0006 F860     		str	r0, [r7, #12]
 1828 0008 B960     		str	r1, [r7, #8]
 1829 000a 7A60     		str	r2, [r7, #4]
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1830              		.loc 1 1232 0
 1831 000c 4FF00003 		mov	r3, #0
 1832 0010 7B61     		str	r3, [r7, #20]
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1833              		.loc 1 1239 0
 1834 0012 BB68     		ldr	r3, [r7, #8]
 1835 0014 B3F5807F 		cmp	r3, #256
 1836 0018 06D1     		bne	.L72
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 1837              		.loc 1 1241 0
 1838 001a 4FF42053 		mov	r3, #10240
 1839 001e C4F20003 		movt	r3, 16384
 1840 0022 DB69     		ldr	r3, [r3, #28]
 1841 0024 7B61     		str	r3, [r7, #20]
 1842 0026 05E0     		b	.L73
 1843              	.L72:
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 1844              		.loc 1 1245 0
 1845 0028 4FF42053 		mov	r3, #10240
 1846 002c C4F20003 		movt	r3, 16384
 1847 0030 1B6A     		ldr	r3, [r3, #32]
 1848 0032 7B61     		str	r3, [r7, #20]
 1849              	.L73:
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1850              		.loc 1 1249 0
 1851 0034 7B69     		ldr	r3, [r7, #20]
 1852 0036 03F47C13 		and	r3, r3, #4128768
 1853 003a 4FEA1343 		lsr	r3, r3, #16
 1854 003e DAB2     		uxtb	r2, r3
 1855 0040 7B68     		ldr	r3, [r7, #4]
 1856 0042 1A70     		strb	r2, [r3, #0]
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1857              		.loc 1 1251 0
 1858 0044 7B69     		ldr	r3, [r7, #20]
 1859 0046 03F4FE43 		and	r3, r3, #32512
 1860 004a 4FEA1323 		lsr	r3, r3, #8
 1861 004e DAB2     		uxtb	r2, r3
 1862 0050 7B68     		ldr	r3, [r7, #4]
 1863 0052 5A70     		strb	r2, [r3, #1]
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1864              		.loc 1 1253 0
 1865 0054 7B69     		ldr	r3, [r7, #20]
 1866 0056 DBB2     		uxtb	r3, r3
 1867 0058 03F07F03 		and	r3, r3, #127
 1868 005c DAB2     		uxtb	r2, r3
 1869 005e 7B68     		ldr	r3, [r7, #4]
 1870 0060 9A70     		strb	r2, [r3, #2]
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 1871              		.loc 1 1255 0
 1872 0062 7B69     		ldr	r3, [r7, #20]
 1873 0064 03F48003 		and	r3, r3, #4194304
 1874 0068 4FEA1343 		lsr	r3, r3, #16
 1875 006c DAB2     		uxtb	r2, r3
 1876 006e 7B68     		ldr	r3, [r7, #4]
 1877 0070 DA70     		strb	r2, [r3, #3]
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1878              		.loc 1 1256 0
 1879 0072 7B69     		ldr	r3, [r7, #20]
 1880 0074 03F07C53 		and	r3, r3, #1056964608
 1881 0078 4FEA1363 		lsr	r3, r3, #24
 1882 007c DAB2     		uxtb	r2, r3
 1883 007e 7B68     		ldr	r3, [r7, #4]
 1884 0080 1A73     		strb	r2, [r3, #12]
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1885              		.loc 1 1257 0
 1886 0082 7B69     		ldr	r3, [r7, #20]
 1887 0084 03F08042 		and	r2, r3, #1073741824
 1888 0088 7B68     		ldr	r3, [r7, #4]
 1889 008a 9A60     		str	r2, [r3, #8]
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1890              		.loc 1 1258 0
 1891 008c 7B69     		ldr	r3, [r7, #20]
 1892 008e 03F08032 		and	r2, r3, #-2139062144
 1893 0092 7B68     		ldr	r3, [r7, #4]
 1894 0094 5A60     		str	r2, [r3, #4]
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1895              		.loc 1 1260 0
 1896 0096 FB68     		ldr	r3, [r7, #12]
 1897 0098 002B     		cmp	r3, #0
 1898 009a 23D1     		bne	.L71
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1899              		.loc 1 1262 0
 1900 009c 7B68     		ldr	r3, [r7, #4]
 1901 009e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1902 00a0 1846     		mov	r0, r3
 1903 00a2 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1904 00a6 0346     		mov	r3, r0
 1905 00a8 1A46     		mov	r2, r3
 1906 00aa 7B68     		ldr	r3, [r7, #4]
 1907 00ac 1A70     		strb	r2, [r3, #0]
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1908              		.loc 1 1264 0
 1909 00ae 7B68     		ldr	r3, [r7, #4]
 1910 00b0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1911 00b2 1846     		mov	r0, r3
 1912 00b4 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1913 00b8 0346     		mov	r3, r0
 1914 00ba 1A46     		mov	r2, r3
 1915 00bc 7B68     		ldr	r3, [r7, #4]
 1916 00be 5A70     		strb	r2, [r3, #1]
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1917              		.loc 1 1266 0
 1918 00c0 7B68     		ldr	r3, [r7, #4]
 1919 00c2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1920 00c4 1846     		mov	r0, r3
 1921 00c6 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1922 00ca 0346     		mov	r3, r0
 1923 00cc 1A46     		mov	r2, r3
 1924 00ce 7B68     		ldr	r3, [r7, #4]
 1925 00d0 9A70     		strb	r2, [r3, #2]
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1926              		.loc 1 1268 0
 1927 00d2 7B68     		ldr	r3, [r7, #4]
 1928 00d4 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1929 00d6 1846     		mov	r0, r3
 1930 00d8 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1931 00dc 0346     		mov	r3, r0
 1932 00de 1A46     		mov	r2, r3
 1933 00e0 7B68     		ldr	r3, [r7, #4]
 1934 00e2 1A73     		strb	r2, [r3, #12]
 1935              	.L71:
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1936              		.loc 1 1270 0
 1937 00e4 07F11807 		add	r7, r7, #24
 1938 00e8 BD46     		mov	sp, r7
 1939 00ea 80BD     		pop	{r7, pc}
 1940              		.cfi_endproc
 1941              	.LFE128:
 1943              		.section	.text.RTC_AlarmCmd,"ax",%progbits
 1944              		.align	2
 1945              		.global	RTC_AlarmCmd
 1946              		.thumb
 1947              		.thumb_func
 1949              	RTC_AlarmCmd:
 1950              	.LFB129:
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1951              		.loc 1 1285 0
 1952              		.cfi_startproc
 1953              		@ args = 0, pretend = 0, frame = 24
 1954              		@ frame_needed = 1, uses_anonymous_args = 0
 1955              		@ link register save eliminated.
 1956 0000 80B4     		push	{r7}
 1957              	.LCFI56:
 1958              		.cfi_def_cfa_offset 4
 1959              		.cfi_offset 7, -4
 1960 0002 87B0     		sub	sp, sp, #28
 1961              	.LCFI57:
 1962              		.cfi_def_cfa_offset 32
 1963 0004 00AF     		add	r7, sp, #0
 1964              	.LCFI58:
 1965              		.cfi_def_cfa_register 7
 1966 0006 7860     		str	r0, [r7, #4]
 1967 0008 0B46     		mov	r3, r1
 1968 000a FB70     		strb	r3, [r7, #3]
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1969              		.loc 1 1286 0
 1970 000c 4FF00003 		mov	r3, #0
 1971 0010 FB60     		str	r3, [r7, #12]
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1972              		.loc 1 1287 0
 1973 0012 4FF00003 		mov	r3, #0
 1974 0016 3B61     		str	r3, [r7, #16]
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1975              		.loc 1 1288 0
 1976 0018 4FF00003 		mov	r3, #0
 1977 001c FB75     		strb	r3, [r7, #23]
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1978              		.loc 1 1295 0
 1979 001e 4FF42053 		mov	r3, #10240
 1980 0022 C4F20003 		movt	r3, 16384
 1981 0026 4FF0CA02 		mov	r2, #202
 1982 002a 5A62     		str	r2, [r3, #36]
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1983              		.loc 1 1296 0
 1984 002c 4FF42053 		mov	r3, #10240
 1985 0030 C4F20003 		movt	r3, 16384
 1986 0034 4FF05302 		mov	r2, #83
 1987 0038 5A62     		str	r2, [r3, #36]
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 1988              		.loc 1 1299 0
 1989 003a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1990 003c 002B     		cmp	r3, #0
 1991 003e 0FD0     		beq	.L76
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 1992              		.loc 1 1301 0
 1993 0040 4FF42053 		mov	r3, #10240
 1994 0044 C4F20003 		movt	r3, 16384
 1995 0048 4FF42052 		mov	r2, #10240
 1996 004c C4F20002 		movt	r2, 16384
 1997 0050 9168     		ldr	r1, [r2, #8]
 1998 0052 7A68     		ldr	r2, [r7, #4]
 1999 0054 0A43     		orrs	r2, r2, r1
 2000 0056 9A60     		str	r2, [r3, #8]
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2001              		.loc 1 1303 0
 2002 0058 4FF00103 		mov	r3, #1
 2003 005c FB75     		strb	r3, [r7, #23]
 2004 005e 34E0     		b	.L77
 2005              	.L76:
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 2006              		.loc 1 1308 0
 2007 0060 4FF42053 		mov	r3, #10240
 2008 0064 C4F20003 		movt	r3, 16384
 2009 0068 4FF42052 		mov	r2, #10240
 2010 006c C4F20002 		movt	r2, 16384
 2011 0070 9168     		ldr	r1, [r2, #8]
 2012 0072 7A68     		ldr	r2, [r7, #4]
 2013 0074 6FEA0202 		mvn	r2, r2
 2014 0078 0A40     		ands	r2, r2, r1
 2015 007a 9A60     		str	r2, [r3, #8]
 2016              	.L79:
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 2017              		.loc 1 1313 0 discriminator 1
 2018 007c 4FF42053 		mov	r3, #10240
 2019 0080 C4F20003 		movt	r3, 16384
 2020 0084 DA68     		ldr	r2, [r3, #12]
 2021 0086 7B68     		ldr	r3, [r7, #4]
 2022 0088 4FEA1323 		lsr	r3, r3, #8
 2023 008c 1340     		ands	r3, r3, r2
 2024 008e 3B61     		str	r3, [r7, #16]
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 2025              		.loc 1 1314 0 discriminator 1
 2026 0090 FB68     		ldr	r3, [r7, #12]
 2027 0092 03F10103 		add	r3, r3, #1
 2028 0096 FB60     		str	r3, [r7, #12]
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 2029              		.loc 1 1315 0 discriminator 1
 2030 0098 FB68     		ldr	r3, [r7, #12]
 2031 009a B3F5803F 		cmp	r3, #65536
 2032 009e 02D0     		beq	.L78
 2033 00a0 3B69     		ldr	r3, [r7, #16]
 2034 00a2 002B     		cmp	r3, #0
 2035 00a4 EAD0     		beq	.L79
 2036              	.L78:
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 2037              		.loc 1 1317 0
 2038 00a6 4FF42053 		mov	r3, #10240
 2039 00aa C4F20003 		movt	r3, 16384
 2040 00ae DA68     		ldr	r2, [r3, #12]
 2041 00b0 7B68     		ldr	r3, [r7, #4]
 2042 00b2 4FEA1323 		lsr	r3, r3, #8
 2043 00b6 1340     		ands	r3, r3, r2
 2044 00b8 002B     		cmp	r3, #0
 2045 00ba 03D1     		bne	.L80
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2046              		.loc 1 1319 0
 2047 00bc 4FF00003 		mov	r3, #0
 2048 00c0 FB75     		strb	r3, [r7, #23]
 2049 00c2 02E0     		b	.L77
 2050              	.L80:
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2051              		.loc 1 1323 0
 2052 00c4 4FF00103 		mov	r3, #1
 2053 00c8 FB75     		strb	r3, [r7, #23]
 2054              	.L77:
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2055              		.loc 1 1328 0
 2056 00ca 4FF42053 		mov	r3, #10240
 2057 00ce C4F20003 		movt	r3, 16384
 2058 00d2 4FF0FF02 		mov	r2, #255
 2059 00d6 5A62     		str	r2, [r3, #36]
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2060              		.loc 1 1330 0
 2061 00d8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2062              		.loc 1 1331 0
 2063 00da 1846     		mov	r0, r3
 2064 00dc 07F11C07 		add	r7, r7, #28
 2065 00e0 BD46     		mov	sp, r7
 2066 00e2 80BC     		pop	{r7}
 2067 00e4 7047     		bx	lr
 2068              		.cfi_endproc
 2069              	.LFE129:
 2071 00e6 00BF     		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
 2072              		.align	2
 2073              		.global	RTC_AlarmSubSecondConfig
 2074              		.thumb
 2075              		.thumb_func
 2077              	RTC_AlarmSubSecondConfig:
 2078              	.LFB130:
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.*
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2079              		.loc 1 1379 0
 2080              		.cfi_startproc
 2081              		@ args = 0, pretend = 0, frame = 24
 2082              		@ frame_needed = 1, uses_anonymous_args = 0
 2083              		@ link register save eliminated.
 2084 0000 80B4     		push	{r7}
 2085              	.LCFI59:
 2086              		.cfi_def_cfa_offset 4
 2087              		.cfi_offset 7, -4
 2088 0002 87B0     		sub	sp, sp, #28
 2089              	.LCFI60:
 2090              		.cfi_def_cfa_offset 32
 2091 0004 00AF     		add	r7, sp, #0
 2092              	.LCFI61:
 2093              		.cfi_def_cfa_register 7
 2094 0006 F860     		str	r0, [r7, #12]
 2095 0008 B960     		str	r1, [r7, #8]
 2096 000a 7A60     		str	r2, [r7, #4]
1380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2097              		.loc 1 1380 0
 2098 000c 4FF00003 		mov	r3, #0
 2099 0010 7B61     		str	r3, [r7, #20]
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2100              		.loc 1 1388 0
 2101 0012 4FF42053 		mov	r3, #10240
 2102 0016 C4F20003 		movt	r3, 16384
 2103 001a 4FF0CA02 		mov	r2, #202
 2104 001e 5A62     		str	r2, [r3, #36]
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2105              		.loc 1 1389 0
 2106 0020 4FF42053 		mov	r3, #10240
 2107 0024 C4F20003 		movt	r3, 16384
 2108 0028 4FF05302 		mov	r2, #83
 2109 002c 5A62     		str	r2, [r3, #36]
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 2110              		.loc 1 1392 0
 2111 002e BA68     		ldr	r2, [r7, #8]
 2112 0030 7B68     		ldr	r3, [r7, #4]
 2113 0032 1343     		orrs	r3, r3, r2
 2114 0034 7B61     		str	r3, [r7, #20]
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2115              		.loc 1 1394 0
 2116 0036 FB68     		ldr	r3, [r7, #12]
 2117 0038 B3F5807F 		cmp	r3, #256
 2118 003c 06D1     		bne	.L82
1395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the AlarmA SubSecond register */
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
 2119              		.loc 1 1397 0
 2120 003e 4FF42053 		mov	r3, #10240
 2121 0042 C4F20003 		movt	r3, 16384
 2122 0046 7A69     		ldr	r2, [r7, #20]
 2123 0048 5A64     		str	r2, [r3, #68]
 2124 004a 05E0     		b	.L83
 2125              	.L82:
1398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B SubSecond register */
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
 2126              		.loc 1 1402 0
 2127 004c 4FF42053 		mov	r3, #10240
 2128 0050 C4F20003 		movt	r3, 16384
 2129 0054 7A69     		ldr	r2, [r7, #20]
 2130 0056 9A64     		str	r2, [r3, #72]
 2131              	.L83:
1403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2132              		.loc 1 1406 0
 2133 0058 4FF42053 		mov	r3, #10240
 2134 005c C4F20003 		movt	r3, 16384
 2135 0060 4FF0FF02 		mov	r2, #255
 2136 0064 5A62     		str	r2, [r3, #36]
1407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2137              		.loc 1 1408 0
 2138 0066 07F11C07 		add	r7, r7, #28
 2139 006a BD46     		mov	sp, r7
 2140 006c 80BC     		pop	{r7}
 2141 006e 7047     		bx	lr
 2142              		.cfi_endproc
 2143              	.LFE130:
 2145              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 2146              		.align	2
 2147              		.global	RTC_GetAlarmSubSecond
 2148              		.thumb
 2149              		.thumb_func
 2151              	RTC_GetAlarmSubSecond:
 2152              	.LFB131:
1409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Subseconds value.
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2153              		.loc 1 1420 0
 2154              		.cfi_startproc
 2155              		@ args = 0, pretend = 0, frame = 16
 2156              		@ frame_needed = 1, uses_anonymous_args = 0
 2157              		@ link register save eliminated.
 2158 0000 80B4     		push	{r7}
 2159              	.LCFI62:
 2160              		.cfi_def_cfa_offset 4
 2161              		.cfi_offset 7, -4
 2162 0002 85B0     		sub	sp, sp, #20
 2163              	.LCFI63:
 2164              		.cfi_def_cfa_offset 24
 2165 0004 00AF     		add	r7, sp, #0
 2166              	.LCFI64:
 2167              		.cfi_def_cfa_register 7
 2168 0006 7860     		str	r0, [r7, #4]
1421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2169              		.loc 1 1421 0
 2170 0008 4FF00003 		mov	r3, #0
 2171 000c FB60     		str	r3, [r7, #12]
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2172              		.loc 1 1424 0
 2173 000e 7B68     		ldr	r3, [r7, #4]
 2174 0010 B3F5807F 		cmp	r3, #256
 2175 0014 0AD1     		bne	.L85
1425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 2176              		.loc 1 1426 0
 2177 0016 4FF42053 		mov	r3, #10240
 2178 001a C4F20003 		movt	r3, 16384
 2179 001e 5B6C     		ldr	r3, [r3, #68]
 2180 0020 4FEA4343 		lsl	r3, r3, #17
 2181 0024 4FEA5343 		lsr	r3, r3, #17
 2182 0028 FB60     		str	r3, [r7, #12]
 2183 002a 09E0     		b	.L86
 2184              	.L85:
1427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2185              		.loc 1 1430 0
 2186 002c 4FF42053 		mov	r3, #10240
 2187 0030 C4F20003 		movt	r3, 16384
 2188 0034 9B6C     		ldr	r3, [r3, #72]
 2189 0036 4FEA4343 		lsl	r3, r3, #17
 2190 003a 4FEA5343 		lsr	r3, r3, #17
 2191 003e FB60     		str	r3, [r7, #12]
 2192              	.L86:
1431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 2193              		.loc 1 1433 0
 2194 0040 FB68     		ldr	r3, [r7, #12]
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2195              		.loc 1 1434 0
 2196 0042 1846     		mov	r0, r3
 2197 0044 07F11407 		add	r7, r7, #20
 2198 0048 BD46     		mov	sp, r7
 2199 004a 80BC     		pop	{r7}
 2200 004c 7047     		bx	lr
 2201              		.cfi_endproc
 2202              	.LFE131:
 2204 004e 00BF     		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 2205              		.align	2
 2206              		.global	RTC_WakeUpClockConfig
 2207              		.thumb
 2208              		.thumb_func
 2210              	RTC_WakeUpClockConfig:
 2211              	.LFB132:
1435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                      WakeUp Timer configuration functions
1446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC WakeUp.
1449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2212              		.loc 1 1469 0
 2213              		.cfi_startproc
 2214              		@ args = 0, pretend = 0, frame = 8
 2215              		@ frame_needed = 1, uses_anonymous_args = 0
 2216              		@ link register save eliminated.
 2217 0000 80B4     		push	{r7}
 2218              	.LCFI65:
 2219              		.cfi_def_cfa_offset 4
 2220              		.cfi_offset 7, -4
 2221 0002 83B0     		sub	sp, sp, #12
 2222              	.LCFI66:
 2223              		.cfi_def_cfa_offset 16
 2224 0004 00AF     		add	r7, sp, #0
 2225              	.LCFI67:
 2226              		.cfi_def_cfa_register 7
 2227 0006 7860     		str	r0, [r7, #4]
1470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2228              		.loc 1 1474 0
 2229 0008 4FF42053 		mov	r3, #10240
 2230 000c C4F20003 		movt	r3, 16384
 2231 0010 4FF0CA02 		mov	r2, #202
 2232 0014 5A62     		str	r2, [r3, #36]
1475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2233              		.loc 1 1475 0
 2234 0016 4FF42053 		mov	r3, #10240
 2235 001a C4F20003 		movt	r3, 16384
 2236 001e 4FF05302 		mov	r2, #83
 2237 0022 5A62     		str	r2, [r3, #36]
1476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 2238              		.loc 1 1478 0
 2239 0024 4FF42053 		mov	r3, #10240
 2240 0028 C4F20003 		movt	r3, 16384
 2241 002c 4FF42052 		mov	r2, #10240
 2242 0030 C4F20002 		movt	r2, 16384
 2243 0034 9268     		ldr	r2, [r2, #8]
 2244 0036 22F00702 		bic	r2, r2, #7
 2245 003a 9A60     		str	r2, [r3, #8]
1479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 2246              		.loc 1 1481 0
 2247 003c 4FF42053 		mov	r3, #10240
 2248 0040 C4F20003 		movt	r3, 16384
 2249 0044 4FF42052 		mov	r2, #10240
 2250 0048 C4F20002 		movt	r2, 16384
 2251 004c 9168     		ldr	r1, [r2, #8]
 2252 004e 7A68     		ldr	r2, [r7, #4]
 2253 0050 0A43     		orrs	r2, r2, r1
 2254 0052 9A60     		str	r2, [r3, #8]
1482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2255              		.loc 1 1484 0
 2256 0054 4FF42053 		mov	r3, #10240
 2257 0058 C4F20003 		movt	r3, 16384
 2258 005c 4FF0FF02 		mov	r2, #255
 2259 0060 5A62     		str	r2, [r3, #36]
1485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2260              		.loc 1 1485 0
 2261 0062 07F10C07 		add	r7, r7, #12
 2262 0066 BD46     		mov	sp, r7
 2263 0068 80BC     		pop	{r7}
 2264 006a 7047     		bx	lr
 2265              		.cfi_endproc
 2266              	.LFE132:
 2268              		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 2269              		.align	2
 2270              		.global	RTC_SetWakeUpCounter
 2271              		.thumb
 2272              		.thumb_func
 2274              	RTC_SetWakeUpCounter:
 2275              	.LFB133:
1486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2276              		.loc 1 1496 0
 2277              		.cfi_startproc
 2278              		@ args = 0, pretend = 0, frame = 8
 2279              		@ frame_needed = 1, uses_anonymous_args = 0
 2280              		@ link register save eliminated.
 2281 0000 80B4     		push	{r7}
 2282              	.LCFI68:
 2283              		.cfi_def_cfa_offset 4
 2284              		.cfi_offset 7, -4
 2285 0002 83B0     		sub	sp, sp, #12
 2286              	.LCFI69:
 2287              		.cfi_def_cfa_offset 16
 2288 0004 00AF     		add	r7, sp, #0
 2289              	.LCFI70:
 2290              		.cfi_def_cfa_register 7
 2291 0006 7860     		str	r0, [r7, #4]
1497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2292              		.loc 1 1501 0
 2293 0008 4FF42053 		mov	r3, #10240
 2294 000c C4F20003 		movt	r3, 16384
 2295 0010 4FF0CA02 		mov	r2, #202
 2296 0014 5A62     		str	r2, [r3, #36]
1502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2297              		.loc 1 1502 0
 2298 0016 4FF42053 		mov	r3, #10240
 2299 001a C4F20003 		movt	r3, 16384
 2300 001e 4FF05302 		mov	r2, #83
 2301 0022 5A62     		str	r2, [r3, #36]
1503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 2302              		.loc 1 1505 0
 2303 0024 4FF42053 		mov	r3, #10240
 2304 0028 C4F20003 		movt	r3, 16384
 2305 002c 7A68     		ldr	r2, [r7, #4]
 2306 002e 5A61     		str	r2, [r3, #20]
1506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2307              		.loc 1 1508 0
 2308 0030 4FF42053 		mov	r3, #10240
 2309 0034 C4F20003 		movt	r3, 16384
 2310 0038 4FF0FF02 		mov	r2, #255
 2311 003c 5A62     		str	r2, [r3, #36]
1509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2312              		.loc 1 1509 0
 2313 003e 07F10C07 		add	r7, r7, #12
 2314 0042 BD46     		mov	sp, r7
 2315 0044 80BC     		pop	{r7}
 2316 0046 7047     		bx	lr
 2317              		.cfi_endproc
 2318              	.LFE133:
 2320              		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
 2321              		.align	2
 2322              		.global	RTC_GetWakeUpCounter
 2323              		.thumb
 2324              		.thumb_func
 2326              	RTC_GetWakeUpCounter:
 2327              	.LFB134:
1510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2328              		.loc 1 1517 0
 2329              		.cfi_startproc
 2330              		@ args = 0, pretend = 0, frame = 0
 2331              		@ frame_needed = 1, uses_anonymous_args = 0
 2332              		@ link register save eliminated.
 2333 0000 80B4     		push	{r7}
 2334              	.LCFI71:
 2335              		.cfi_def_cfa_offset 4
 2336              		.cfi_offset 7, -4
 2337 0002 00AF     		add	r7, sp, #0
 2338              	.LCFI72:
 2339              		.cfi_def_cfa_register 7
1518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 2340              		.loc 1 1519 0
 2341 0004 4FF42053 		mov	r3, #10240
 2342 0008 C4F20003 		movt	r3, 16384
 2343 000c 5B69     		ldr	r3, [r3, #20]
 2344 000e 4FEA0343 		lsl	r3, r3, #16
 2345 0012 4FEA1343 		lsr	r3, r3, #16
1520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2346              		.loc 1 1520 0
 2347 0016 1846     		mov	r0, r3
 2348 0018 BD46     		mov	sp, r7
 2349 001a 80BC     		pop	{r7}
 2350 001c 7047     		bx	lr
 2351              		.cfi_endproc
 2352              	.LFE134:
 2354 001e 00BF     		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 2355              		.align	2
 2356              		.global	RTC_WakeUpCmd
 2357              		.thumb
 2358              		.thumb_func
 2360              	RTC_WakeUpCmd:
 2361              	.LFB135:
1521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2362              		.loc 1 1529 0
 2363              		.cfi_startproc
 2364              		@ args = 0, pretend = 0, frame = 24
 2365              		@ frame_needed = 1, uses_anonymous_args = 0
 2366              		@ link register save eliminated.
 2367 0000 80B4     		push	{r7}
 2368              	.LCFI73:
 2369              		.cfi_def_cfa_offset 4
 2370              		.cfi_offset 7, -4
 2371 0002 87B0     		sub	sp, sp, #28
 2372              	.LCFI74:
 2373              		.cfi_def_cfa_offset 32
 2374 0004 00AF     		add	r7, sp, #0
 2375              	.LCFI75:
 2376              		.cfi_def_cfa_register 7
 2377 0006 0346     		mov	r3, r0
 2378 0008 FB71     		strb	r3, [r7, #7]
1530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 2379              		.loc 1 1530 0
 2380 000a 4FF00003 		mov	r3, #0
 2381 000e FB60     		str	r3, [r7, #12]
1531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 2382              		.loc 1 1531 0
 2383 0010 4FF00003 		mov	r3, #0
 2384 0014 3B61     		str	r3, [r7, #16]
1532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2385              		.loc 1 1532 0
 2386 0016 4FF00003 		mov	r3, #0
 2387 001a FB75     		strb	r3, [r7, #23]
1533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2388              		.loc 1 1538 0
 2389 001c 4FF42053 		mov	r3, #10240
 2390 0020 C4F20003 		movt	r3, 16384
 2391 0024 4FF0CA02 		mov	r2, #202
 2392 0028 5A62     		str	r2, [r3, #36]
1539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2393              		.loc 1 1539 0
 2394 002a 4FF42053 		mov	r3, #10240
 2395 002e C4F20003 		movt	r3, 16384
 2396 0032 4FF05302 		mov	r2, #83
 2397 0036 5A62     		str	r2, [r3, #36]
1540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2398              		.loc 1 1541 0
 2399 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2400 003a 002B     		cmp	r3, #0
 2401 003c 0FD0     		beq	.L91
1542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 2402              		.loc 1 1544 0
 2403 003e 4FF42053 		mov	r3, #10240
 2404 0042 C4F20003 		movt	r3, 16384
 2405 0046 4FF42052 		mov	r2, #10240
 2406 004a C4F20002 		movt	r2, 16384
 2407 004e 9268     		ldr	r2, [r2, #8]
 2408 0050 42F48062 		orr	r2, r2, #1024
 2409 0054 9A60     		str	r2, [r3, #8]
1545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2410              		.loc 1 1545 0
 2411 0056 4FF00103 		mov	r3, #1
 2412 005a FB75     		strb	r3, [r7, #23]
 2413 005c 2EE0     		b	.L92
 2414              	.L91:
1546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 2415              		.loc 1 1550 0
 2416 005e 4FF42053 		mov	r3, #10240
 2417 0062 C4F20003 		movt	r3, 16384
 2418 0066 4FF42052 		mov	r2, #10240
 2419 006a C4F20002 		movt	r2, 16384
 2420 006e 9268     		ldr	r2, [r2, #8]
 2421 0070 22F48062 		bic	r2, r2, #1024
 2422 0074 9A60     		str	r2, [r3, #8]
 2423              	.L94:
1551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 2424              		.loc 1 1554 0 discriminator 1
 2425 0076 4FF42053 		mov	r3, #10240
 2426 007a C4F20003 		movt	r3, 16384
 2427 007e DB68     		ldr	r3, [r3, #12]
 2428 0080 03F00403 		and	r3, r3, #4
 2429 0084 3B61     		str	r3, [r7, #16]
1555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 2430              		.loc 1 1555 0 discriminator 1
 2431 0086 FB68     		ldr	r3, [r7, #12]
 2432 0088 03F10103 		add	r3, r3, #1
 2433 008c FB60     		str	r3, [r7, #12]
1556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 2434              		.loc 1 1556 0 discriminator 1
 2435 008e FB68     		ldr	r3, [r7, #12]
 2436 0090 B3F5803F 		cmp	r3, #65536
 2437 0094 02D0     		beq	.L93
 2438 0096 3B69     		ldr	r3, [r7, #16]
 2439 0098 002B     		cmp	r3, #0
 2440 009a ECD0     		beq	.L94
 2441              	.L93:
1557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 2442              		.loc 1 1558 0
 2443 009c 4FF42053 		mov	r3, #10240
 2444 00a0 C4F20003 		movt	r3, 16384
 2445 00a4 DB68     		ldr	r3, [r3, #12]
 2446 00a6 03F00403 		and	r3, r3, #4
 2447 00aa 002B     		cmp	r3, #0
 2448 00ac 03D1     		bne	.L95
1559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2449              		.loc 1 1560 0
 2450 00ae 4FF00003 		mov	r3, #0
 2451 00b2 FB75     		strb	r3, [r7, #23]
 2452 00b4 02E0     		b	.L92
 2453              	.L95:
1561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2454              		.loc 1 1564 0
 2455 00b6 4FF00103 		mov	r3, #1
 2456 00ba FB75     		strb	r3, [r7, #23]
 2457              	.L92:
1565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2458              		.loc 1 1569 0
 2459 00bc 4FF42053 		mov	r3, #10240
 2460 00c0 C4F20003 		movt	r3, 16384
 2461 00c4 4FF0FF02 		mov	r2, #255
 2462 00c8 5A62     		str	r2, [r3, #36]
1570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2463              		.loc 1 1571 0
 2464 00ca FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2465              		.loc 1 1572 0
 2466 00cc 1846     		mov	r0, r3
 2467 00ce 07F11C07 		add	r7, r7, #28
 2468 00d2 BD46     		mov	sp, r7
 2469 00d4 80BC     		pop	{r7}
 2470 00d6 7047     		bx	lr
 2471              		.cfi_endproc
 2472              	.LFE135:
 2474              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 2475              		.align	2
 2476              		.global	RTC_DayLightSavingConfig
 2477              		.thumb
 2478              		.thumb_func
 2480              	RTC_DayLightSavingConfig:
 2481              	.LFB136:
1573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                     Daylight Saving configuration functions
1584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2482              		.loc 1 1606 0
 2483              		.cfi_startproc
 2484              		@ args = 0, pretend = 0, frame = 8
 2485              		@ frame_needed = 1, uses_anonymous_args = 0
 2486              		@ link register save eliminated.
 2487 0000 80B4     		push	{r7}
 2488              	.LCFI76:
 2489              		.cfi_def_cfa_offset 4
 2490              		.cfi_offset 7, -4
 2491 0002 83B0     		sub	sp, sp, #12
 2492              	.LCFI77:
 2493              		.cfi_def_cfa_offset 16
 2494 0004 00AF     		add	r7, sp, #0
 2495              	.LCFI78:
 2496              		.cfi_def_cfa_register 7
 2497 0006 7860     		str	r0, [r7, #4]
 2498 0008 3960     		str	r1, [r7, #0]
1607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2499              		.loc 1 1612 0
 2500 000a 4FF42053 		mov	r3, #10240
 2501 000e C4F20003 		movt	r3, 16384
 2502 0012 4FF0CA02 		mov	r2, #202
 2503 0016 5A62     		str	r2, [r3, #36]
1613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2504              		.loc 1 1613 0
 2505 0018 4FF42053 		mov	r3, #10240
 2506 001c C4F20003 		movt	r3, 16384
 2507 0020 4FF05302 		mov	r2, #83
 2508 0024 5A62     		str	r2, [r3, #36]
1614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 2509              		.loc 1 1616 0
 2510 0026 4FF42053 		mov	r3, #10240
 2511 002a C4F20003 		movt	r3, 16384
 2512 002e 4FF42052 		mov	r2, #10240
 2513 0032 C4F20002 		movt	r2, 16384
 2514 0036 9268     		ldr	r2, [r2, #8]
 2515 0038 22F48022 		bic	r2, r2, #262144
 2516 003c 9A60     		str	r2, [r3, #8]
1617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 2517              		.loc 1 1619 0
 2518 003e 4FF42053 		mov	r3, #10240
 2519 0042 C4F20003 		movt	r3, 16384
 2520 0046 4FF42052 		mov	r2, #10240
 2521 004a C4F20002 		movt	r2, 16384
 2522 004e 9168     		ldr	r1, [r2, #8]
 2523 0050 7868     		ldr	r0, [r7, #4]
 2524 0052 3A68     		ldr	r2, [r7, #0]
 2525 0054 0243     		orrs	r2, r2, r0
 2526 0056 0A43     		orrs	r2, r2, r1
 2527 0058 9A60     		str	r2, [r3, #8]
1620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2528              		.loc 1 1622 0
 2529 005a 4FF42053 		mov	r3, #10240
 2530 005e C4F20003 		movt	r3, 16384
 2531 0062 4FF0FF02 		mov	r2, #255
 2532 0066 5A62     		str	r2, [r3, #36]
1623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2533              		.loc 1 1623 0
 2534 0068 07F10C07 		add	r7, r7, #12
 2535 006c BD46     		mov	sp, r7
 2536 006e 80BC     		pop	{r7}
 2537 0070 7047     		bx	lr
 2538              		.cfi_endproc
 2539              	.LFE136:
 2541 0072 00BF     		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 2542              		.align	2
 2543              		.global	RTC_GetStoreOperation
 2544              		.thumb
 2545              		.thumb_func
 2547              	RTC_GetStoreOperation:
 2548              	.LFB137:
1624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2549              		.loc 1 1633 0
 2550              		.cfi_startproc
 2551              		@ args = 0, pretend = 0, frame = 0
 2552              		@ frame_needed = 1, uses_anonymous_args = 0
 2553              		@ link register save eliminated.
 2554 0000 80B4     		push	{r7}
 2555              	.LCFI79:
 2556              		.cfi_def_cfa_offset 4
 2557              		.cfi_offset 7, -4
 2558 0002 00AF     		add	r7, sp, #0
 2559              	.LCFI80:
 2560              		.cfi_def_cfa_register 7
1634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 2561              		.loc 1 1634 0
 2562 0004 4FF42053 		mov	r3, #10240
 2563 0008 C4F20003 		movt	r3, 16384
 2564 000c 9B68     		ldr	r3, [r3, #8]
 2565 000e 03F48023 		and	r3, r3, #262144
1635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2566              		.loc 1 1635 0
 2567 0012 1846     		mov	r0, r3
 2568 0014 BD46     		mov	sp, r7
 2569 0016 80BC     		pop	{r7}
 2570 0018 7047     		bx	lr
 2571              		.cfi_endproc
 2572              	.LFE137:
 2574 001a 00BF     		.section	.text.RTC_OutputConfig,"ax",%progbits
 2575              		.align	2
 2576              		.global	RTC_OutputConfig
 2577              		.thumb
 2578              		.thumb_func
 2580              	RTC_OutputConfig:
 2581              	.LFB138:
1636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                          Output pin Configuration function
1647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC Output source.
1650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2582              		.loc 1 1672 0
 2583              		.cfi_startproc
 2584              		@ args = 0, pretend = 0, frame = 8
 2585              		@ frame_needed = 1, uses_anonymous_args = 0
 2586              		@ link register save eliminated.
 2587 0000 80B4     		push	{r7}
 2588              	.LCFI81:
 2589              		.cfi_def_cfa_offset 4
 2590              		.cfi_offset 7, -4
 2591 0002 83B0     		sub	sp, sp, #12
 2592              	.LCFI82:
 2593              		.cfi_def_cfa_offset 16
 2594 0004 00AF     		add	r7, sp, #0
 2595              	.LCFI83:
 2596              		.cfi_def_cfa_register 7
 2597 0006 7860     		str	r0, [r7, #4]
 2598 0008 3960     		str	r1, [r7, #0]
1673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2599              		.loc 1 1678 0
 2600 000a 4FF42053 		mov	r3, #10240
 2601 000e C4F20003 		movt	r3, 16384
 2602 0012 4FF0CA02 		mov	r2, #202
 2603 0016 5A62     		str	r2, [r3, #36]
1679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2604              		.loc 1 1679 0
 2605 0018 4FF42053 		mov	r3, #10240
 2606 001c C4F20003 		movt	r3, 16384
 2607 0020 4FF05302 		mov	r2, #83
 2608 0024 5A62     		str	r2, [r3, #36]
1680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 2609              		.loc 1 1682 0
 2610 0026 4FF42053 		mov	r3, #10240
 2611 002a C4F20003 		movt	r3, 16384
 2612 002e 4FF42052 		mov	r2, #10240
 2613 0032 C4F20002 		movt	r2, 16384
 2614 0036 9268     		ldr	r2, [r2, #8]
 2615 0038 22F4E002 		bic	r2, r2, #7340032
 2616 003c 9A60     		str	r2, [r3, #8]
1683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 2617              		.loc 1 1685 0
 2618 003e 4FF42053 		mov	r3, #10240
 2619 0042 C4F20003 		movt	r3, 16384
 2620 0046 4FF42052 		mov	r2, #10240
 2621 004a C4F20002 		movt	r2, 16384
 2622 004e 9168     		ldr	r1, [r2, #8]
 2623 0050 7868     		ldr	r0, [r7, #4]
 2624 0052 3A68     		ldr	r2, [r7, #0]
 2625 0054 0243     		orrs	r2, r2, r0
 2626 0056 0A43     		orrs	r2, r2, r1
 2627 0058 9A60     		str	r2, [r3, #8]
1686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2628              		.loc 1 1688 0
 2629 005a 4FF42053 		mov	r3, #10240
 2630 005e C4F20003 		movt	r3, 16384
 2631 0062 4FF0FF02 		mov	r2, #255
 2632 0066 5A62     		str	r2, [r3, #36]
1689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2633              		.loc 1 1689 0
 2634 0068 07F10C07 		add	r7, r7, #12
 2635 006c BD46     		mov	sp, r7
 2636 006e 80BC     		pop	{r7}
 2637 0070 7047     		bx	lr
 2638              		.cfi_endproc
 2639              	.LFE138:
 2641 0072 00BF     		.section	.text.RTC_CoarseCalibConfig,"ax",%progbits
 2642              		.align	2
 2643              		.global	RTC_CoarseCalibConfig
 2644              		.thumb
 2645              		.thumb_func
 2647              	RTC_CoarseCalibConfig:
 2648              	.LFB139:
1690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                   Digital Calibration configuration functions
1701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *    
1715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2649              		.loc 1 1726 0
 2650              		.cfi_startproc
 2651              		@ args = 0, pretend = 0, frame = 16
 2652              		@ frame_needed = 1, uses_anonymous_args = 0
 2653 0000 80B5     		push	{r7, lr}
 2654              	.LCFI84:
 2655              		.cfi_def_cfa_offset 8
 2656              		.cfi_offset 14, -4
 2657              		.cfi_offset 7, -8
 2658 0002 84B0     		sub	sp, sp, #16
 2659              	.LCFI85:
 2660              		.cfi_def_cfa_offset 24
 2661 0004 00AF     		add	r7, sp, #0
 2662              	.LCFI86:
 2663              		.cfi_def_cfa_register 7
 2664 0006 7860     		str	r0, [r7, #4]
 2665 0008 3960     		str	r1, [r7, #0]
1727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2666              		.loc 1 1727 0
 2667 000a 4FF00003 		mov	r3, #0
 2668 000e FB73     		strb	r3, [r7, #15]
1728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2669              		.loc 1 1734 0
 2670 0010 4FF42053 		mov	r3, #10240
 2671 0014 C4F20003 		movt	r3, 16384
 2672 0018 4FF0CA02 		mov	r2, #202
 2673 001c 5A62     		str	r2, [r3, #36]
1735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2674              		.loc 1 1735 0
 2675 001e 4FF42053 		mov	r3, #10240
 2676 0022 C4F20003 		movt	r3, 16384
 2677 0026 4FF05302 		mov	r2, #83
 2678 002a 5A62     		str	r2, [r3, #36]
1736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2679              		.loc 1 1738 0
 2680 002c FFF7FEFF 		bl	RTC_EnterInitMode
 2681 0030 0346     		mov	r3, r0
 2682 0032 002B     		cmp	r3, #0
 2683 0034 03D1     		bne	.L100
1739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2684              		.loc 1 1740 0
 2685 0036 4FF00003 		mov	r3, #0
 2686 003a FB73     		strb	r3, [r7, #15]
 2687 003c 0CE0     		b	.L101
 2688              	.L100:
1741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 2689              		.loc 1 1745 0
 2690 003e 4FF42053 		mov	r3, #10240
 2691 0042 C4F20003 		movt	r3, 16384
 2692 0046 7968     		ldr	r1, [r7, #4]
 2693 0048 3A68     		ldr	r2, [r7, #0]
 2694 004a 0A43     		orrs	r2, r2, r1
 2695 004c 9A61     		str	r2, [r3, #24]
1746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2696              		.loc 1 1747 0
 2697 004e FFF7FEFF 		bl	RTC_ExitInitMode
1748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2698              		.loc 1 1749 0
 2699 0052 4FF00103 		mov	r3, #1
 2700 0056 FB73     		strb	r3, [r7, #15]
 2701              	.L101:
1750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2702              		.loc 1 1753 0
 2703 0058 4FF42053 		mov	r3, #10240
 2704 005c C4F20003 		movt	r3, 16384
 2705 0060 4FF0FF02 		mov	r2, #255
 2706 0064 5A62     		str	r2, [r3, #36]
1754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2707              		.loc 1 1755 0
 2708 0066 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2709              		.loc 1 1756 0
 2710 0068 1846     		mov	r0, r3
 2711 006a 07F11007 		add	r7, r7, #16
 2712 006e BD46     		mov	sp, r7
 2713 0070 80BD     		pop	{r7, pc}
 2714              		.cfi_endproc
 2715              	.LFE139:
 2717 0072 00BF     		.section	.text.RTC_CoarseCalibCmd,"ax",%progbits
 2718              		.align	2
 2719              		.global	RTC_CoarseCalibCmd
 2720              		.thumb
 2721              		.thumb_func
 2723              	RTC_CoarseCalibCmd:
 2724              	.LFB140:
1757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2725              		.loc 1 1767 0
 2726              		.cfi_startproc
 2727              		@ args = 0, pretend = 0, frame = 16
 2728              		@ frame_needed = 1, uses_anonymous_args = 0
 2729 0000 80B5     		push	{r7, lr}
 2730              	.LCFI87:
 2731              		.cfi_def_cfa_offset 8
 2732              		.cfi_offset 14, -4
 2733              		.cfi_offset 7, -8
 2734 0002 84B0     		sub	sp, sp, #16
 2735              	.LCFI88:
 2736              		.cfi_def_cfa_offset 24
 2737 0004 00AF     		add	r7, sp, #0
 2738              	.LCFI89:
 2739              		.cfi_def_cfa_register 7
 2740 0006 0346     		mov	r3, r0
 2741 0008 FB71     		strb	r3, [r7, #7]
1768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2742              		.loc 1 1768 0
 2743 000a 4FF00003 		mov	r3, #0
 2744 000e FB73     		strb	r3, [r7, #15]
1769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2745              		.loc 1 1774 0
 2746 0010 4FF42053 		mov	r3, #10240
 2747 0014 C4F20003 		movt	r3, 16384
 2748 0018 4FF0CA02 		mov	r2, #202
 2749 001c 5A62     		str	r2, [r3, #36]
1775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2750              		.loc 1 1775 0
 2751 001e 4FF42053 		mov	r3, #10240
 2752 0022 C4F20003 		movt	r3, 16384
 2753 0026 4FF05302 		mov	r2, #83
 2754 002a 5A62     		str	r2, [r3, #36]
1776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2755              		.loc 1 1778 0
 2756 002c FFF7FEFF 		bl	RTC_EnterInitMode
 2757 0030 0346     		mov	r3, r0
 2758 0032 002B     		cmp	r3, #0
 2759 0034 03D1     		bne	.L103
1779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
 2760              		.loc 1 1780 0
 2761 0036 4FF00003 		mov	r3, #0
 2762 003a FB73     		strb	r3, [r7, #15]
 2763 003c 20E0     		b	.L104
 2764              	.L103:
1781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 2765              		.loc 1 1784 0
 2766 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2767 0040 002B     		cmp	r3, #0
 2768 0042 0CD0     		beq	.L105
1785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 2769              		.loc 1 1787 0
 2770 0044 4FF42053 		mov	r3, #10240
 2771 0048 C4F20003 		movt	r3, 16384
 2772 004c 4FF42052 		mov	r2, #10240
 2773 0050 C4F20002 		movt	r2, 16384
 2774 0054 9268     		ldr	r2, [r2, #8]
 2775 0056 42F08002 		orr	r2, r2, #128
 2776 005a 9A60     		str	r2, [r3, #8]
 2777 005c 0BE0     		b	.L106
 2778              	.L105:
1788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     { 
1791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 2779              		.loc 1 1792 0
 2780 005e 4FF42053 		mov	r3, #10240
 2781 0062 C4F20003 		movt	r3, 16384
 2782 0066 4FF42052 		mov	r2, #10240
 2783 006a C4F20002 		movt	r2, 16384
 2784 006e 9268     		ldr	r2, [r2, #8]
 2785 0070 22F08002 		bic	r2, r2, #128
 2786 0074 9A60     		str	r2, [r3, #8]
 2787              	.L106:
1793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2788              		.loc 1 1795 0
 2789 0076 FFF7FEFF 		bl	RTC_ExitInitMode
1796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2790              		.loc 1 1797 0
 2791 007a 4FF00103 		mov	r3, #1
 2792 007e FB73     		strb	r3, [r7, #15]
 2793              	.L104:
1798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2794              		.loc 1 1801 0
 2795 0080 4FF42053 		mov	r3, #10240
 2796 0084 C4F20003 		movt	r3, 16384
 2797 0088 4FF0FF02 		mov	r2, #255
 2798 008c 5A62     		str	r2, [r3, #36]
1802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2799              		.loc 1 1803 0
 2800 008e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2801              		.loc 1 1804 0
 2802 0090 1846     		mov	r0, r3
 2803 0092 07F11007 		add	r7, r7, #16
 2804 0096 BD46     		mov	sp, r7
 2805 0098 80BD     		pop	{r7, pc}
 2806              		.cfi_endproc
 2807              	.LFE140:
 2809 009a 00BF     		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 2810              		.align	2
 2811              		.global	RTC_CalibOutputCmd
 2812              		.thumb
 2813              		.thumb_func
 2815              	RTC_CalibOutputCmd:
 2816              	.LFB141:
1805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2817              		.loc 1 1813 0
 2818              		.cfi_startproc
 2819              		@ args = 0, pretend = 0, frame = 8
 2820              		@ frame_needed = 1, uses_anonymous_args = 0
 2821              		@ link register save eliminated.
 2822 0000 80B4     		push	{r7}
 2823              	.LCFI90:
 2824              		.cfi_def_cfa_offset 4
 2825              		.cfi_offset 7, -4
 2826 0002 83B0     		sub	sp, sp, #12
 2827              	.LCFI91:
 2828              		.cfi_def_cfa_offset 16
 2829 0004 00AF     		add	r7, sp, #0
 2830              	.LCFI92:
 2831              		.cfi_def_cfa_register 7
 2832 0006 0346     		mov	r3, r0
 2833 0008 FB71     		strb	r3, [r7, #7]
1814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2834              		.loc 1 1818 0
 2835 000a 4FF42053 		mov	r3, #10240
 2836 000e C4F20003 		movt	r3, 16384
 2837 0012 4FF0CA02 		mov	r2, #202
 2838 0016 5A62     		str	r2, [r3, #36]
1819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2839              		.loc 1 1819 0
 2840 0018 4FF42053 		mov	r3, #10240
 2841 001c C4F20003 		movt	r3, 16384
 2842 0020 4FF05302 		mov	r2, #83
 2843 0024 5A62     		str	r2, [r3, #36]
1820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2844              		.loc 1 1821 0
 2845 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2846 0028 002B     		cmp	r3, #0
 2847 002a 0CD0     		beq	.L108
1822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 2848              		.loc 1 1824 0
 2849 002c 4FF42053 		mov	r3, #10240
 2850 0030 C4F20003 		movt	r3, 16384
 2851 0034 4FF42052 		mov	r2, #10240
 2852 0038 C4F20002 		movt	r2, 16384
 2853 003c 9268     		ldr	r2, [r2, #8]
 2854 003e 42F40002 		orr	r2, r2, #8388608
 2855 0042 9A60     		str	r2, [r3, #8]
 2856 0044 0BE0     		b	.L109
 2857              	.L108:
1825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 2858              		.loc 1 1829 0
 2859 0046 4FF42053 		mov	r3, #10240
 2860 004a C4F20003 		movt	r3, 16384
 2861 004e 4FF42052 		mov	r2, #10240
 2862 0052 C4F20002 		movt	r2, 16384
 2863 0056 9268     		ldr	r2, [r2, #8]
 2864 0058 22F40002 		bic	r2, r2, #8388608
 2865 005c 9A60     		str	r2, [r3, #8]
 2866              	.L109:
1830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2867              		.loc 1 1833 0
 2868 005e 4FF42053 		mov	r3, #10240
 2869 0062 C4F20003 		movt	r3, 16384
 2870 0066 4FF0FF02 		mov	r2, #255
 2871 006a 5A62     		str	r2, [r3, #36]
1834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2872              		.loc 1 1834 0
 2873 006c 07F10C07 		add	r7, r7, #12
 2874 0070 BD46     		mov	sp, r7
 2875 0072 80BC     		pop	{r7}
 2876 0074 7047     		bx	lr
 2877              		.cfi_endproc
 2878              	.LFE141:
 2880              		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 2881              		.align	2
 2882              		.global	RTC_CalibOutputConfig
 2883              		.thumb
 2884              		.thumb_func
 2886              	RTC_CalibOutputConfig:
 2887              	.LFB142:
1835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2888              		.loc 1 1845 0
 2889              		.cfi_startproc
 2890              		@ args = 0, pretend = 0, frame = 8
 2891              		@ frame_needed = 1, uses_anonymous_args = 0
 2892              		@ link register save eliminated.
 2893 0000 80B4     		push	{r7}
 2894              	.LCFI93:
 2895              		.cfi_def_cfa_offset 4
 2896              		.cfi_offset 7, -4
 2897 0002 83B0     		sub	sp, sp, #12
 2898              	.LCFI94:
 2899              		.cfi_def_cfa_offset 16
 2900 0004 00AF     		add	r7, sp, #0
 2901              	.LCFI95:
 2902              		.cfi_def_cfa_register 7
 2903 0006 7860     		str	r0, [r7, #4]
1846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2904              		.loc 1 1850 0
 2905 0008 4FF42053 		mov	r3, #10240
 2906 000c C4F20003 		movt	r3, 16384
 2907 0010 4FF0CA02 		mov	r2, #202
 2908 0014 5A62     		str	r2, [r3, #36]
1851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2909              		.loc 1 1851 0
 2910 0016 4FF42053 		mov	r3, #10240
 2911 001a C4F20003 		movt	r3, 16384
 2912 001e 4FF05302 		mov	r2, #83
 2913 0022 5A62     		str	r2, [r3, #36]
1852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /*clear flags before config*/
1854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 2914              		.loc 1 1854 0
 2915 0024 4FF42053 		mov	r3, #10240
 2916 0028 C4F20003 		movt	r3, 16384
 2917 002c 4FF42052 		mov	r2, #10240
 2918 0030 C4F20002 		movt	r2, 16384
 2919 0034 9268     		ldr	r2, [r2, #8]
 2920 0036 22F40022 		bic	r2, r2, #524288
 2921 003a 9A60     		str	r2, [r3, #8]
1855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 2922              		.loc 1 1857 0
 2923 003c 4FF42053 		mov	r3, #10240
 2924 0040 C4F20003 		movt	r3, 16384
 2925 0044 4FF42052 		mov	r2, #10240
 2926 0048 C4F20002 		movt	r2, 16384
 2927 004c 9168     		ldr	r1, [r2, #8]
 2928 004e 7A68     		ldr	r2, [r7, #4]
 2929 0050 0A43     		orrs	r2, r2, r1
 2930 0052 9A60     		str	r2, [r3, #8]
1858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2931              		.loc 1 1860 0
 2932 0054 4FF42053 		mov	r3, #10240
 2933 0058 C4F20003 		movt	r3, 16384
 2934 005c 4FF0FF02 		mov	r2, #255
 2935 0060 5A62     		str	r2, [r3, #36]
1861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2936              		.loc 1 1861 0
 2937 0062 07F10C07 		add	r7, r7, #12
 2938 0066 BD46     		mov	sp, r7
 2939 0068 80BC     		pop	{r7}
 2940 006a 7047     		bx	lr
 2941              		.cfi_endproc
 2942              	.LFE142:
 2944              		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 2945              		.align	2
 2946              		.global	RTC_SmoothCalibConfig
 2947              		.thumb
 2948              		.thumb_func
 2950              	RTC_SmoothCalibConfig:
 2951              	.LFB143:
1862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration periode is 32s.
1868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration periode is 16s.
1869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibartion periode is 8s.
1870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK puls every 2**11 pulses.
1873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2952              		.loc 1 1883 0
 2953              		.cfi_startproc
 2954              		@ args = 0, pretend = 0, frame = 24
 2955              		@ frame_needed = 1, uses_anonymous_args = 0
 2956              		@ link register save eliminated.
 2957 0000 80B4     		push	{r7}
 2958              	.LCFI96:
 2959              		.cfi_def_cfa_offset 4
 2960              		.cfi_offset 7, -4
 2961 0002 87B0     		sub	sp, sp, #28
 2962              	.LCFI97:
 2963              		.cfi_def_cfa_offset 32
 2964 0004 00AF     		add	r7, sp, #0
 2965              	.LCFI98:
 2966              		.cfi_def_cfa_register 7
 2967 0006 F860     		str	r0, [r7, #12]
 2968 0008 B960     		str	r1, [r7, #8]
 2969 000a 7A60     		str	r2, [r7, #4]
1884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2970              		.loc 1 1884 0
 2971 000c 4FF00003 		mov	r3, #0
 2972 0010 FB75     		strb	r3, [r7, #23]
1885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
 2973              		.loc 1 1885 0
 2974 0012 4FF00003 		mov	r3, #0
 2975 0016 3B61     		str	r3, [r7, #16]
1886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2976              		.loc 1 1893 0
 2977 0018 4FF42053 		mov	r3, #10240
 2978 001c C4F20003 		movt	r3, 16384
 2979 0020 4FF0CA02 		mov	r2, #202
 2980 0024 5A62     		str	r2, [r3, #36]
1894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2981              		.loc 1 1894 0
 2982 0026 4FF42053 		mov	r3, #10240
 2983 002a C4F20003 		movt	r3, 16384
 2984 002e 4FF05302 		mov	r2, #83
 2985 0032 5A62     		str	r2, [r3, #36]
1895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 2986              		.loc 1 1897 0
 2987 0034 4FF42053 		mov	r3, #10240
 2988 0038 C4F20003 		movt	r3, 16384
 2989 003c DB68     		ldr	r3, [r3, #12]
 2990 003e 03F48033 		and	r3, r3, #65536
 2991 0042 002B     		cmp	r3, #0
 2992 0044 11D0     		beq	.L112
1898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2993              		.loc 1 1900 0
 2994 0046 03E0     		b	.L113
 2995              	.L114:
1901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       recalpfcount++;
 2996              		.loc 1 1902 0
 2997 0048 3B69     		ldr	r3, [r7, #16]
 2998 004a 03F10103 		add	r3, r3, #1
 2999 004e 3B61     		str	r3, [r7, #16]
 3000              	.L113:
1900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 3001              		.loc 1 1900 0 discriminator 1
 3002 0050 4FF42053 		mov	r3, #10240
 3003 0054 C4F20003 		movt	r3, 16384
 3004 0058 DB68     		ldr	r3, [r3, #12]
 3005 005a 03F48033 		and	r3, r3, #65536
 3006 005e 002B     		cmp	r3, #0
 3007 0060 03D0     		beq	.L112
1900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 3008              		.loc 1 1900 0 is_stmt 0 discriminator 2
 3009 0062 3B69     		ldr	r3, [r7, #16]
 3010 0064 B3F5003F 		cmp	r3, #131072
 3011 0068 EED1     		bne	.L114
 3012              	.L112:
1903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 3013              		.loc 1 1907 0 is_stmt 1
 3014 006a 4FF42053 		mov	r3, #10240
 3015 006e C4F20003 		movt	r3, 16384
 3016 0072 DB68     		ldr	r3, [r3, #12]
 3017 0074 03F48033 		and	r3, r3, #65536
 3018 0078 002B     		cmp	r3, #0
 3019 007a 0DD1     		bne	.L115
1908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 3020              		.loc 1 1910 0
 3021 007c 4FF42053 		mov	r3, #10240
 3022 0080 C4F20003 		movt	r3, 16384
 3023 0084 F968     		ldr	r1, [r7, #12]
 3024 0086 BA68     		ldr	r2, [r7, #8]
 3025 0088 1143     		orrs	r1, r1, r2
 3026 008a 7A68     		ldr	r2, [r7, #4]
 3027 008c 0A43     		orrs	r2, r2, r1
 3028 008e DA63     		str	r2, [r3, #60]
1911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 3029              		.loc 1 1912 0
 3030 0090 4FF00103 		mov	r3, #1
 3031 0094 FB75     		strb	r3, [r7, #23]
 3032 0096 02E0     		b	.L116
 3033              	.L115:
1913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 3034              		.loc 1 1916 0
 3035 0098 4FF00003 		mov	r3, #0
 3036 009c FB75     		strb	r3, [r7, #23]
 3037              	.L116:
1917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 3038              		.loc 1 1920 0
 3039 009e 4FF42053 		mov	r3, #10240
 3040 00a2 C4F20003 		movt	r3, 16384
 3041 00a6 4FF0FF02 		mov	r2, #255
 3042 00aa 5A62     		str	r2, [r3, #36]
1921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 3043              		.loc 1 1922 0
 3044 00ac FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3045              		.loc 1 1923 0
 3046 00ae 1846     		mov	r0, r3
 3047 00b0 07F11C07 		add	r7, r7, #28
 3048 00b4 BD46     		mov	sp, r7
 3049 00b6 80BC     		pop	{r7}
 3050 00b8 7047     		bx	lr
 3051              		.cfi_endproc
 3052              	.LFE143:
 3054 00ba 00BF     		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 3055              		.align	2
 3056              		.global	RTC_TimeStampCmd
 3057              		.thumb
 3058              		.thumb_func
 3060              	RTC_TimeStampCmd:
 3061              	.LFB144:
1924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        TimeStamp configuration functions
1936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         activated.
1947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3062              		.loc 1 1957 0
 3063              		.cfi_startproc
 3064              		@ args = 0, pretend = 0, frame = 16
 3065              		@ frame_needed = 1, uses_anonymous_args = 0
 3066              		@ link register save eliminated.
 3067 0000 80B4     		push	{r7}
 3068              	.LCFI99:
 3069              		.cfi_def_cfa_offset 4
 3070              		.cfi_offset 7, -4
 3071 0002 85B0     		sub	sp, sp, #20
 3072              	.LCFI100:
 3073              		.cfi_def_cfa_offset 24
 3074 0004 00AF     		add	r7, sp, #0
 3075              	.LCFI101:
 3076              		.cfi_def_cfa_register 7
 3077 0006 7860     		str	r0, [r7, #4]
 3078 0008 0B46     		mov	r3, r1
 3079 000a FB70     		strb	r3, [r7, #3]
1958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 3080              		.loc 1 1958 0
 3081 000c 4FF00003 		mov	r3, #0
 3082 0010 FB60     		str	r3, [r7, #12]
1959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 3083              		.loc 1 1965 0
 3084 0012 4FF42053 		mov	r3, #10240
 3085 0016 C4F20003 		movt	r3, 16384
 3086 001a 9B68     		ldr	r3, [r3, #8]
 3087 001c 23F40063 		bic	r3, r3, #2048
 3088 0020 23F00803 		bic	r3, r3, #8
 3089 0024 FB60     		str	r3, [r7, #12]
1966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3090              		.loc 1 1968 0
 3091 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3092 0028 002B     		cmp	r3, #0
 3093 002a 06D0     		beq	.L118
1969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 3094              		.loc 1 1970 0
 3095 002c 7A68     		ldr	r2, [r7, #4]
 3096 002e FB68     		ldr	r3, [r7, #12]
 3097 0030 1343     		orrs	r3, r3, r2
 3098 0032 43F40063 		orr	r3, r3, #2048
 3099 0036 FB60     		str	r3, [r7, #12]
 3100 0038 03E0     		b	.L119
 3101              	.L118:
1971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 3102              		.loc 1 1974 0
 3103 003a FA68     		ldr	r2, [r7, #12]
 3104 003c 7B68     		ldr	r3, [r7, #4]
 3105 003e 1343     		orrs	r3, r3, r2
 3106 0040 FB60     		str	r3, [r7, #12]
 3107              	.L119:
1975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3108              		.loc 1 1978 0
 3109 0042 4FF42053 		mov	r3, #10240
 3110 0046 C4F20003 		movt	r3, 16384
 3111 004a 4FF0CA02 		mov	r2, #202
 3112 004e 5A62     		str	r2, [r3, #36]
1979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3113              		.loc 1 1979 0
 3114 0050 4FF42053 		mov	r3, #10240
 3115 0054 C4F20003 		movt	r3, 16384
 3116 0058 4FF05302 		mov	r2, #83
 3117 005c 5A62     		str	r2, [r3, #36]
1980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
1982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 3118              		.loc 1 1982 0
 3119 005e 4FF42053 		mov	r3, #10240
 3120 0062 C4F20003 		movt	r3, 16384
 3121 0066 FA68     		ldr	r2, [r7, #12]
 3122 0068 9A60     		str	r2, [r3, #8]
1983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3123              		.loc 1 1985 0
 3124 006a 4FF42053 		mov	r3, #10240
 3125 006e C4F20003 		movt	r3, 16384
 3126 0072 4FF0FF02 		mov	r2, #255
 3127 0076 5A62     		str	r2, [r3, #36]
1986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3128              		.loc 1 1986 0
 3129 0078 07F11407 		add	r7, r7, #20
 3130 007c BD46     		mov	sp, r7
 3131 007e 80BC     		pop	{r7}
 3132 0080 7047     		bx	lr
 3133              		.cfi_endproc
 3134              	.LFE144:
 3136 0082 00BF     		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 3137              		.align	2
 3138              		.global	RTC_GetTimeStamp
 3139              		.thumb
 3140              		.thumb_func
 3142              	RTC_GetTimeStamp:
 3143              	.LFB145:
1987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
1990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
1995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
1996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
1997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
1998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3144              		.loc 1 2002 0
 3145              		.cfi_startproc
 3146              		@ args = 0, pretend = 0, frame = 24
 3147              		@ frame_needed = 1, uses_anonymous_args = 0
 3148 0000 80B5     		push	{r7, lr}
 3149              	.LCFI102:
 3150              		.cfi_def_cfa_offset 8
 3151              		.cfi_offset 14, -4
 3152              		.cfi_offset 7, -8
 3153 0002 86B0     		sub	sp, sp, #24
 3154              	.LCFI103:
 3155              		.cfi_def_cfa_offset 32
 3156 0004 00AF     		add	r7, sp, #0
 3157              	.LCFI104:
 3158              		.cfi_def_cfa_register 7
 3159 0006 F860     		str	r0, [r7, #12]
 3160 0008 B960     		str	r1, [r7, #8]
 3161 000a 7A60     		str	r2, [r7, #4]
2003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 3162              		.loc 1 2003 0
 3163 000c 4FF00003 		mov	r3, #0
 3164 0010 7B61     		str	r3, [r7, #20]
 3165 0012 4FF00003 		mov	r3, #0
 3166 0016 3B61     		str	r3, [r7, #16]
2004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 3167              		.loc 1 2009 0
 3168 0018 4FF42053 		mov	r3, #10240
 3169 001c C4F20003 		movt	r3, 16384
 3170 0020 1A6B     		ldr	r2, [r3, #48]
 3171 0022 47F67F73 		movw	r3, #32639
 3172 0026 C0F27F03 		movt	r3, 127
 3173 002a 1340     		ands	r3, r3, r2
 3174 002c 7B61     		str	r3, [r7, #20]
2010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 3175              		.loc 1 2010 0
 3176 002e 4FF42053 		mov	r3, #10240
 3177 0032 C4F20003 		movt	r3, 16384
 3178 0036 5B6B     		ldr	r3, [r3, #52]
 3179 0038 23F07F43 		bic	r3, r3, #-16777216
 3180 003c 23F0C003 		bic	r3, r3, #192
 3181 0040 3B61     		str	r3, [r7, #16]
2011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 3182              		.loc 1 2013 0
 3183 0042 7B69     		ldr	r3, [r7, #20]
 3184 0044 03F47C13 		and	r3, r3, #4128768
 3185 0048 4FEA1343 		lsr	r3, r3, #16
 3186 004c DAB2     		uxtb	r2, r3
 3187 004e BB68     		ldr	r3, [r7, #8]
 3188 0050 1A70     		strb	r2, [r3, #0]
2014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 3189              		.loc 1 2014 0
 3190 0052 7B69     		ldr	r3, [r7, #20]
 3191 0054 03F4FE43 		and	r3, r3, #32512
 3192 0058 4FEA1323 		lsr	r3, r3, #8
 3193 005c DAB2     		uxtb	r2, r3
 3194 005e BB68     		ldr	r3, [r7, #8]
 3195 0060 5A70     		strb	r2, [r3, #1]
2015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 3196              		.loc 1 2015 0
 3197 0062 7B69     		ldr	r3, [r7, #20]
 3198 0064 DBB2     		uxtb	r3, r3
 3199 0066 03F07F03 		and	r3, r3, #127
 3200 006a DAB2     		uxtb	r2, r3
 3201 006c BB68     		ldr	r3, [r7, #8]
 3202 006e 9A70     		strb	r2, [r3, #2]
2016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 3203              		.loc 1 2016 0
 3204 0070 7B69     		ldr	r3, [r7, #20]
 3205 0072 03F48003 		and	r3, r3, #4194304
 3206 0076 4FEA1343 		lsr	r3, r3, #16
 3207 007a DAB2     		uxtb	r2, r3
 3208 007c BB68     		ldr	r3, [r7, #8]
 3209 007e DA70     		strb	r2, [r3, #3]
2017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 3210              		.loc 1 2019 0
 3211 0080 7B68     		ldr	r3, [r7, #4]
 3212 0082 4FF00002 		mov	r2, #0
 3213 0086 DA70     		strb	r2, [r3, #3]
2020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 3214              		.loc 1 2020 0
 3215 0088 3B69     		ldr	r3, [r7, #16]
 3216 008a 03F4F853 		and	r3, r3, #7936
 3217 008e 4FEA1323 		lsr	r3, r3, #8
 3218 0092 DAB2     		uxtb	r2, r3
 3219 0094 7B68     		ldr	r3, [r7, #4]
 3220 0096 5A70     		strb	r2, [r3, #1]
2021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 3221              		.loc 1 2021 0
 3222 0098 3B69     		ldr	r3, [r7, #16]
 3223 009a DBB2     		uxtb	r3, r3
 3224 009c 03F03F03 		and	r3, r3, #63
 3225 00a0 DAB2     		uxtb	r2, r3
 3226 00a2 7B68     		ldr	r3, [r7, #4]
 3227 00a4 9A70     		strb	r2, [r3, #2]
2022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 3228              		.loc 1 2022 0
 3229 00a6 3B69     		ldr	r3, [r7, #16]
 3230 00a8 03F46043 		and	r3, r3, #57344
 3231 00ac 4FEA5333 		lsr	r3, r3, #13
 3232 00b0 DAB2     		uxtb	r2, r3
 3233 00b2 7B68     		ldr	r3, [r7, #4]
 3234 00b4 1A70     		strb	r2, [r3, #0]
2023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 3235              		.loc 1 2025 0
 3236 00b6 FB68     		ldr	r3, [r7, #12]
 3237 00b8 002B     		cmp	r3, #0
 3238 00ba 35D1     		bne	.L120
2026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 3239              		.loc 1 2028 0
 3240 00bc BB68     		ldr	r3, [r7, #8]
 3241 00be 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3242 00c0 1846     		mov	r0, r3
 3243 00c2 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3244 00c6 0346     		mov	r3, r0
 3245 00c8 1A46     		mov	r2, r3
 3246 00ca BB68     		ldr	r3, [r7, #8]
 3247 00cc 1A70     		strb	r2, [r3, #0]
2029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3248              		.loc 1 2029 0
 3249 00ce BB68     		ldr	r3, [r7, #8]
 3250 00d0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3251 00d2 1846     		mov	r0, r3
 3252 00d4 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3253 00d8 0346     		mov	r3, r0
 3254 00da 1A46     		mov	r2, r3
 3255 00dc BB68     		ldr	r3, [r7, #8]
 3256 00de 5A70     		strb	r2, [r3, #1]
2030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3257              		.loc 1 2030 0
 3258 00e0 BB68     		ldr	r3, [r7, #8]
 3259 00e2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3260 00e4 1846     		mov	r0, r3
 3261 00e6 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3262 00ea 0346     		mov	r3, r0
 3263 00ec 1A46     		mov	r2, r3
 3264 00ee BB68     		ldr	r3, [r7, #8]
 3265 00f0 9A70     		strb	r2, [r3, #2]
2031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 3266              		.loc 1 2033 0
 3267 00f2 7B68     		ldr	r3, [r7, #4]
 3268 00f4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3269 00f6 1846     		mov	r0, r3
 3270 00f8 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3271 00fc 0346     		mov	r3, r0
 3272 00fe 1A46     		mov	r2, r3
 3273 0100 7B68     		ldr	r3, [r7, #4]
 3274 0102 5A70     		strb	r2, [r3, #1]
2034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3275              		.loc 1 2034 0
 3276 0104 7B68     		ldr	r3, [r7, #4]
 3277 0106 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3278 0108 1846     		mov	r0, r3
 3279 010a FFF7FEFF 		bl	RTC_Bcd2ToByte
 3280 010e 0346     		mov	r3, r0
 3281 0110 1A46     		mov	r2, r3
 3282 0112 7B68     		ldr	r3, [r7, #4]
 3283 0114 9A70     		strb	r2, [r3, #2]
2035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3284              		.loc 1 2035 0
 3285 0116 7B68     		ldr	r3, [r7, #4]
 3286 0118 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3287 011a 1846     		mov	r0, r3
 3288 011c FFF7FEFF 		bl	RTC_Bcd2ToByte
 3289 0120 0346     		mov	r3, r0
 3290 0122 1A46     		mov	r2, r3
 3291 0124 7B68     		ldr	r3, [r7, #4]
 3292 0126 1A70     		strb	r2, [r3, #0]
 3293              	.L120:
2036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3294              		.loc 1 2037 0
 3295 0128 07F11807 		add	r7, r7, #24
 3296 012c BD46     		mov	sp, r7
 3297 012e 80BD     		pop	{r7, pc}
 3298              		.cfi_endproc
 3299              	.LFE145:
 3301              		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 3302              		.align	2
 3303              		.global	RTC_GetTimeStampSubSecond
 3304              		.thumb
 3305              		.thumb_func
 3307              	RTC_GetTimeStampSubSecond:
 3308              	.LFB146:
2038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
2041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
2042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Subseconds value.
2043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3309              		.loc 1 2045 0
 3310              		.cfi_startproc
 3311              		@ args = 0, pretend = 0, frame = 0
 3312              		@ frame_needed = 1, uses_anonymous_args = 0
 3313              		@ link register save eliminated.
 3314 0000 80B4     		push	{r7}
 3315              	.LCFI105:
 3316              		.cfi_def_cfa_offset 4
 3317              		.cfi_offset 7, -4
 3318 0002 00AF     		add	r7, sp, #0
 3319              	.LCFI106:
 3320              		.cfi_def_cfa_register 7
2046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
2047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 3321              		.loc 1 2047 0
 3322 0004 4FF42053 		mov	r3, #10240
 3323 0008 C4F20003 		movt	r3, 16384
 3324 000c 9B6B     		ldr	r3, [r3, #56]
2048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3325              		.loc 1 2048 0
 3326 000e 1846     		mov	r0, r3
 3327 0010 BD46     		mov	sp, r7
 3328 0012 80BC     		pop	{r7}
 3329 0014 7047     		bx	lr
 3330              		.cfi_endproc
 3331              	.LFE146:
 3333 0016 00BF     		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
 3334              		.align	2
 3335              		.global	RTC_TamperTriggerConfig
 3336              		.thumb
 3337              		.thumb_func
 3339              	RTC_TamperTriggerConfig:
 3340              	.LFB147:
2049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Tampers configuration functions
2060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3341              		.loc 1 2080 0
 3342              		.cfi_startproc
 3343              		@ args = 0, pretend = 0, frame = 8
 3344              		@ frame_needed = 1, uses_anonymous_args = 0
 3345              		@ link register save eliminated.
 3346 0000 80B4     		push	{r7}
 3347              	.LCFI107:
 3348              		.cfi_def_cfa_offset 4
 3349              		.cfi_offset 7, -4
 3350 0002 83B0     		sub	sp, sp, #12
 3351              	.LCFI108:
 3352              		.cfi_def_cfa_offset 16
 3353 0004 00AF     		add	r7, sp, #0
 3354              	.LCFI109:
 3355              		.cfi_def_cfa_register 7
 3356 0006 7860     		str	r0, [r7, #4]
 3357 0008 3960     		str	r1, [r7, #0]
2081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 3358              		.loc 1 2085 0
 3359 000a 3B68     		ldr	r3, [r7, #0]
 3360 000c 002B     		cmp	r3, #0
 3361 000e 10D1     		bne	.L124
2086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
2087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 3362              		.loc 1 2088 0
 3363 0010 4FF42053 		mov	r3, #10240
 3364 0014 C4F20003 		movt	r3, 16384
 3365 0018 4FF42052 		mov	r2, #10240
 3366 001c C4F20002 		movt	r2, 16384
 3367 0020 116C     		ldr	r1, [r2, #64]
 3368 0022 7A68     		ldr	r2, [r7, #4]
 3369 0024 4FEA4202 		lsl	r2, r2, #1
 3370 0028 6FEA0202 		mvn	r2, r2
 3371 002c 0A40     		ands	r2, r2, r1
 3372 002e 1A64     		str	r2, [r3, #64]
 3373 0030 0DE0     		b	.L123
 3374              	.L124:
2089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
2092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 3375              		.loc 1 2093 0
 3376 0032 4FF42053 		mov	r3, #10240
 3377 0036 C4F20003 		movt	r3, 16384
 3378 003a 4FF42052 		mov	r2, #10240
 3379 003e C4F20002 		movt	r2, 16384
 3380 0042 116C     		ldr	r1, [r2, #64]
 3381 0044 7A68     		ldr	r2, [r7, #4]
 3382 0046 4FEA4202 		lsl	r2, r2, #1
 3383 004a 0A43     		orrs	r2, r2, r1
 3384 004c 1A64     		str	r2, [r3, #64]
 3385              	.L123:
2094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3386              		.loc 1 2095 0
 3387 004e 07F10C07 		add	r7, r7, #12
 3388 0052 BD46     		mov	sp, r7
 3389 0054 80BC     		pop	{r7}
 3390 0056 7047     		bx	lr
 3391              		.cfi_endproc
 3392              	.LFE147:
 3394              		.section	.text.RTC_TamperCmd,"ax",%progbits
 3395              		.align	2
 3396              		.global	RTC_TamperCmd
 3397              		.thumb
 3398              		.thumb_func
 3400              	RTC_TamperCmd:
 3401              	.LFB148:
2096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3402              		.loc 1 2106 0
 3403              		.cfi_startproc
 3404              		@ args = 0, pretend = 0, frame = 8
 3405              		@ frame_needed = 1, uses_anonymous_args = 0
 3406              		@ link register save eliminated.
 3407 0000 80B4     		push	{r7}
 3408              	.LCFI110:
 3409              		.cfi_def_cfa_offset 4
 3410              		.cfi_offset 7, -4
 3411 0002 83B0     		sub	sp, sp, #12
 3412              	.LCFI111:
 3413              		.cfi_def_cfa_offset 16
 3414 0004 00AF     		add	r7, sp, #0
 3415              	.LCFI112:
 3416              		.cfi_def_cfa_register 7
 3417 0006 7860     		str	r0, [r7, #4]
 3418 0008 0B46     		mov	r3, r1
 3419 000a FB70     		strb	r3, [r7, #3]
2107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3420              		.loc 1 2111 0
 3421 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3422 000e 002B     		cmp	r3, #0
 3423 0010 0CD0     		beq	.L127
2112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 3424              		.loc 1 2114 0
 3425 0012 4FF42053 		mov	r3, #10240
 3426 0016 C4F20003 		movt	r3, 16384
 3427 001a 4FF42052 		mov	r2, #10240
 3428 001e C4F20002 		movt	r2, 16384
 3429 0022 116C     		ldr	r1, [r2, #64]
 3430 0024 7A68     		ldr	r2, [r7, #4]
 3431 0026 0A43     		orrs	r2, r2, r1
 3432 0028 1A64     		str	r2, [r3, #64]
 3433 002a 0DE0     		b	.L126
 3434              	.L127:
2115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 3435              		.loc 1 2119 0
 3436 002c 4FF42053 		mov	r3, #10240
 3437 0030 C4F20003 		movt	r3, 16384
 3438 0034 4FF42052 		mov	r2, #10240
 3439 0038 C4F20002 		movt	r2, 16384
 3440 003c 116C     		ldr	r1, [r2, #64]
 3441 003e 7A68     		ldr	r2, [r7, #4]
 3442 0040 6FEA0202 		mvn	r2, r2
 3443 0044 0A40     		ands	r2, r2, r1
 3444 0046 1A64     		str	r2, [r3, #64]
 3445              	.L126:
2120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3446              		.loc 1 2121 0
 3447 0048 07F10C07 		add	r7, r7, #12
 3448 004c BD46     		mov	sp, r7
 3449 004e 80BC     		pop	{r7}
 3450 0050 7047     		bx	lr
 3451              		.cfi_endproc
 3452              	.LFE148:
 3454 0052 00BF     		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 3455              		.align	2
 3456              		.global	RTC_TamperFilterConfig
 3457              		.thumb
 3458              		.thumb_func
 3460              	RTC_TamperFilterConfig:
 3461              	.LFB149:
2122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3462              		.loc 1 2137 0
 3463              		.cfi_startproc
 3464              		@ args = 0, pretend = 0, frame = 8
 3465              		@ frame_needed = 1, uses_anonymous_args = 0
 3466              		@ link register save eliminated.
 3467 0000 80B4     		push	{r7}
 3468              	.LCFI113:
 3469              		.cfi_def_cfa_offset 4
 3470              		.cfi_offset 7, -4
 3471 0002 83B0     		sub	sp, sp, #12
 3472              	.LCFI114:
 3473              		.cfi_def_cfa_offset 16
 3474 0004 00AF     		add	r7, sp, #0
 3475              	.LCFI115:
 3476              		.cfi_def_cfa_register 7
 3477 0006 7860     		str	r0, [r7, #4]
2138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 3478              		.loc 1 2142 0
 3479 0008 4FF42053 		mov	r3, #10240
 3480 000c C4F20003 		movt	r3, 16384
 3481 0010 4FF42052 		mov	r2, #10240
 3482 0014 C4F20002 		movt	r2, 16384
 3483 0018 126C     		ldr	r2, [r2, #64]
 3484 001a 22F4C052 		bic	r2, r2, #6144
 3485 001e 1A64     		str	r2, [r3, #64]
2143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 3486              		.loc 1 2145 0
 3487 0020 4FF42053 		mov	r3, #10240
 3488 0024 C4F20003 		movt	r3, 16384
 3489 0028 4FF42052 		mov	r2, #10240
 3490 002c C4F20002 		movt	r2, 16384
 3491 0030 116C     		ldr	r1, [r2, #64]
 3492 0032 7A68     		ldr	r2, [r7, #4]
 3493 0034 0A43     		orrs	r2, r2, r1
 3494 0036 1A64     		str	r2, [r3, #64]
2146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3495              		.loc 1 2146 0
 3496 0038 07F10C07 		add	r7, r7, #12
 3497 003c BD46     		mov	sp, r7
 3498 003e 80BC     		pop	{r7}
 3499 0040 7047     		bx	lr
 3500              		.cfi_endproc
 3501              	.LFE149:
 3503              		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
 3504              		.align	2
 3505              		.global	RTC_TamperSamplingFreqConfig
 3506              		.thumb
 3507              		.thumb_func
 3509              	RTC_TamperSamplingFreqConfig:
 3510              	.LFB150:
2147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3511              		.loc 1 2171 0
 3512              		.cfi_startproc
 3513              		@ args = 0, pretend = 0, frame = 8
 3514              		@ frame_needed = 1, uses_anonymous_args = 0
 3515              		@ link register save eliminated.
 3516 0000 80B4     		push	{r7}
 3517              	.LCFI116:
 3518              		.cfi_def_cfa_offset 4
 3519              		.cfi_offset 7, -4
 3520 0002 83B0     		sub	sp, sp, #12
 3521              	.LCFI117:
 3522              		.cfi_def_cfa_offset 16
 3523 0004 00AF     		add	r7, sp, #0
 3524              	.LCFI118:
 3525              		.cfi_def_cfa_register 7
 3526 0006 7860     		str	r0, [r7, #4]
2172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 3527              		.loc 1 2176 0
 3528 0008 4FF42053 		mov	r3, #10240
 3529 000c C4F20003 		movt	r3, 16384
 3530 0010 4FF42052 		mov	r2, #10240
 3531 0014 C4F20002 		movt	r2, 16384
 3532 0018 126C     		ldr	r2, [r2, #64]
 3533 001a 22F4E062 		bic	r2, r2, #1792
 3534 001e 1A64     		str	r2, [r3, #64]
2177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 3535              		.loc 1 2179 0
 3536 0020 4FF42053 		mov	r3, #10240
 3537 0024 C4F20003 		movt	r3, 16384
 3538 0028 4FF42052 		mov	r2, #10240
 3539 002c C4F20002 		movt	r2, 16384
 3540 0030 116C     		ldr	r1, [r2, #64]
 3541 0032 7A68     		ldr	r2, [r7, #4]
 3542 0034 0A43     		orrs	r2, r2, r1
 3543 0036 1A64     		str	r2, [r3, #64]
2180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3544              		.loc 1 2180 0
 3545 0038 07F10C07 		add	r7, r7, #12
 3546 003c BD46     		mov	sp, r7
 3547 003e 80BC     		pop	{r7}
 3548 0040 7047     		bx	lr
 3549              		.cfi_endproc
 3550              	.LFE150:
 3552              		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 3553              		.align	2
 3554              		.global	RTC_TamperPinsPrechargeDuration
 3555              		.thumb
 3556              		.thumb_func
 3558              	RTC_TamperPinsPrechargeDuration:
 3559              	.LFB151:
2181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before sampling durin
2188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before sampling durin
2189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling durin
2190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling durin
2191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3560              		.loc 1 2194 0
 3561              		.cfi_startproc
 3562              		@ args = 0, pretend = 0, frame = 8
 3563              		@ frame_needed = 1, uses_anonymous_args = 0
 3564              		@ link register save eliminated.
 3565 0000 80B4     		push	{r7}
 3566              	.LCFI119:
 3567              		.cfi_def_cfa_offset 4
 3568              		.cfi_offset 7, -4
 3569 0002 83B0     		sub	sp, sp, #12
 3570              	.LCFI120:
 3571              		.cfi_def_cfa_offset 16
 3572 0004 00AF     		add	r7, sp, #0
 3573              	.LCFI121:
 3574              		.cfi_def_cfa_register 7
 3575 0006 7860     		str	r0, [r7, #4]
2195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 3576              		.loc 1 2199 0
 3577 0008 4FF42053 		mov	r3, #10240
 3578 000c C4F20003 		movt	r3, 16384
 3579 0010 4FF42052 		mov	r2, #10240
 3580 0014 C4F20002 		movt	r2, 16384
 3581 0018 126C     		ldr	r2, [r2, #64]
 3582 001a 22F4C042 		bic	r2, r2, #24576
 3583 001e 1A64     		str	r2, [r3, #64]
2200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 3584              		.loc 1 2202 0
 3585 0020 4FF42053 		mov	r3, #10240
 3586 0024 C4F20003 		movt	r3, 16384
 3587 0028 4FF42052 		mov	r2, #10240
 3588 002c C4F20002 		movt	r2, 16384
 3589 0030 116C     		ldr	r1, [r2, #64]
 3590 0032 7A68     		ldr	r2, [r7, #4]
 3591 0034 0A43     		orrs	r2, r2, r1
 3592 0036 1A64     		str	r2, [r3, #64]
2203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3593              		.loc 1 2203 0
 3594 0038 07F10C07 		add	r7, r7, #12
 3595 003c BD46     		mov	sp, r7
 3596 003e 80BC     		pop	{r7}
 3597 0040 7047     		bx	lr
 3598              		.cfi_endproc
 3599              	.LFE151:
 3601              		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
 3602              		.align	2
 3603              		.global	RTC_TimeStampOnTamperDetectionCmd
 3604              		.thumb
 3605              		.thumb_func
 3607              	RTC_TimeStampOnTamperDetectionCmd:
 3608              	.LFB152:
2204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is reset.   
2209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3609              		.loc 1 2214 0
 3610              		.cfi_startproc
 3611              		@ args = 0, pretend = 0, frame = 8
 3612              		@ frame_needed = 1, uses_anonymous_args = 0
 3613              		@ link register save eliminated.
 3614 0000 80B4     		push	{r7}
 3615              	.LCFI122:
 3616              		.cfi_def_cfa_offset 4
 3617              		.cfi_offset 7, -4
 3618 0002 83B0     		sub	sp, sp, #12
 3619              	.LCFI123:
 3620              		.cfi_def_cfa_offset 16
 3621 0004 00AF     		add	r7, sp, #0
 3622              	.LCFI124:
 3623              		.cfi_def_cfa_register 7
 3624 0006 0346     		mov	r3, r0
 3625 0008 FB71     		strb	r3, [r7, #7]
2215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3626              		.loc 1 2218 0
 3627 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3628 000c 002B     		cmp	r3, #0
 3629 000e 0CD0     		beq	.L133
2219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 3630              		.loc 1 2221 0
 3631 0010 4FF42053 		mov	r3, #10240
 3632 0014 C4F20003 		movt	r3, 16384
 3633 0018 4FF42052 		mov	r2, #10240
 3634 001c C4F20002 		movt	r2, 16384
 3635 0020 126C     		ldr	r2, [r2, #64]
 3636 0022 42F08002 		orr	r2, r2, #128
 3637 0026 1A64     		str	r2, [r3, #64]
 3638 0028 0BE0     		b	.L132
 3639              	.L133:
2222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 3640              		.loc 1 2226 0
 3641 002a 4FF42053 		mov	r3, #10240
 3642 002e C4F20003 		movt	r3, 16384
 3643 0032 4FF42052 		mov	r2, #10240
 3644 0036 C4F20002 		movt	r2, 16384
 3645 003a 126C     		ldr	r2, [r2, #64]
 3646 003c 22F08002 		bic	r2, r2, #128
 3647 0040 1A64     		str	r2, [r3, #64]
 3648              	.L132:
2227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3649              		.loc 1 2228 0
 3650 0042 07F10C07 		add	r7, r7, #12
 3651 0046 BD46     		mov	sp, r7
 3652 0048 80BC     		pop	{r7}
 3653 004a 7047     		bx	lr
 3654              		.cfi_endproc
 3655              	.LFE152:
 3657              		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 3658              		.align	2
 3659              		.global	RTC_TamperPullUpCmd
 3660              		.thumb
 3661              		.thumb_func
 3663              	RTC_TamperPullUpCmd:
 3664              	.LFB153:
2229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3665              		.loc 1 2237 0
 3666              		.cfi_startproc
 3667              		@ args = 0, pretend = 0, frame = 8
 3668              		@ frame_needed = 1, uses_anonymous_args = 0
 3669              		@ link register save eliminated.
 3670 0000 80B4     		push	{r7}
 3671              	.LCFI125:
 3672              		.cfi_def_cfa_offset 4
 3673              		.cfi_offset 7, -4
 3674 0002 83B0     		sub	sp, sp, #12
 3675              	.LCFI126:
 3676              		.cfi_def_cfa_offset 16
 3677 0004 00AF     		add	r7, sp, #0
 3678              	.LCFI127:
 3679              		.cfi_def_cfa_register 7
 3680 0006 0346     		mov	r3, r0
 3681 0008 FB71     		strb	r3, [r7, #7]
2238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
 3682              		.loc 1 2241 0
 3683 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3684 000c 002B     		cmp	r3, #0
 3685 000e 0CD0     		beq	.L136
2242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 3686              		.loc 1 2244 0
 3687 0010 4FF42053 		mov	r3, #10240
 3688 0014 C4F20003 		movt	r3, 16384
 3689 0018 4FF42052 		mov	r2, #10240
 3690 001c C4F20002 		movt	r2, 16384
 3691 0020 126C     		ldr	r2, [r2, #64]
 3692 0022 22F40042 		bic	r2, r2, #32768
 3693 0026 1A64     		str	r2, [r3, #64]
 3694 0028 0BE0     		b	.L135
 3695              	.L136:
2245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 3696              		.loc 1 2249 0
 3697 002a 4FF42053 		mov	r3, #10240
 3698 002e C4F20003 		movt	r3, 16384
 3699 0032 4FF42052 		mov	r2, #10240
 3700 0036 C4F20002 		movt	r2, 16384
 3701 003a 126C     		ldr	r2, [r2, #64]
 3702 003c 42F40042 		orr	r2, r2, #32768
 3703 0040 1A64     		str	r2, [r3, #64]
 3704              	.L135:
2250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
2251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3705              		.loc 1 2251 0
 3706 0042 07F10C07 		add	r7, r7, #12
 3707 0046 BD46     		mov	sp, r7
 3708 0048 80BC     		pop	{r7}
 3709 004a 7047     		bx	lr
 3710              		.cfi_endproc
 3711              	.LFE153:
 3713              		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 3714              		.align	2
 3715              		.global	RTC_WriteBackupRegister
 3716              		.thumb
 3717              		.thumb_func
 3719              	RTC_WriteBackupRegister:
 3720              	.LFB154:
2252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Backup Data Registers configuration functions 
2263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.
2274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3721              		.loc 1 2278 0
 3722              		.cfi_startproc
 3723              		@ args = 0, pretend = 0, frame = 16
 3724              		@ frame_needed = 1, uses_anonymous_args = 0
 3725              		@ link register save eliminated.
 3726 0000 80B4     		push	{r7}
 3727              	.LCFI128:
 3728              		.cfi_def_cfa_offset 4
 3729              		.cfi_offset 7, -4
 3730 0002 85B0     		sub	sp, sp, #20
 3731              	.LCFI129:
 3732              		.cfi_def_cfa_offset 24
 3733 0004 00AF     		add	r7, sp, #0
 3734              	.LCFI130:
 3735              		.cfi_def_cfa_register 7
 3736 0006 7860     		str	r0, [r7, #4]
 3737 0008 3960     		str	r1, [r7, #0]
2279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3738              		.loc 1 2279 0
 3739 000a 4FF00003 		mov	r3, #0
 3740 000e FB60     		str	r3, [r7, #12]
2280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3741              		.loc 1 2284 0
 3742 0010 42F65003 		movw	r3, #10320
 3743 0014 C4F20003 		movt	r3, 16384
 3744 0018 FB60     		str	r3, [r7, #12]
2285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3745              		.loc 1 2285 0
 3746 001a 7B68     		ldr	r3, [r7, #4]
 3747 001c 4FEA8302 		lsl	r2, r3, #2
 3748 0020 FB68     		ldr	r3, [r7, #12]
 3749 0022 D318     		adds	r3, r2, r3
 3750 0024 FB60     		str	r3, [r7, #12]
2286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 3751              		.loc 1 2288 0
 3752 0026 FB68     		ldr	r3, [r7, #12]
 3753 0028 3A68     		ldr	r2, [r7, #0]
 3754 002a 1A60     		str	r2, [r3, #0]
2289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3755              		.loc 1 2289 0
 3756 002c 07F11407 		add	r7, r7, #20
 3757 0030 BD46     		mov	sp, r7
 3758 0032 80BC     		pop	{r7}
 3759 0034 7047     		bx	lr
 3760              		.cfi_endproc
 3761              	.LFE154:
 3763 0036 00BF     		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 3764              		.align	2
 3765              		.global	RTC_ReadBackupRegister
 3766              		.thumb
 3767              		.thumb_func
 3769              	RTC_ReadBackupRegister:
 3770              	.LFB155:
2290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3771              		.loc 1 2299 0
 3772              		.cfi_startproc
 3773              		@ args = 0, pretend = 0, frame = 16
 3774              		@ frame_needed = 1, uses_anonymous_args = 0
 3775              		@ link register save eliminated.
 3776 0000 80B4     		push	{r7}
 3777              	.LCFI131:
 3778              		.cfi_def_cfa_offset 4
 3779              		.cfi_offset 7, -4
 3780 0002 85B0     		sub	sp, sp, #20
 3781              	.LCFI132:
 3782              		.cfi_def_cfa_offset 24
 3783 0004 00AF     		add	r7, sp, #0
 3784              	.LCFI133:
 3785              		.cfi_def_cfa_register 7
 3786 0006 7860     		str	r0, [r7, #4]
2300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3787              		.loc 1 2300 0
 3788 0008 4FF00003 		mov	r3, #0
 3789 000c FB60     		str	r3, [r7, #12]
2301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3790              		.loc 1 2305 0
 3791 000e 42F65003 		movw	r3, #10320
 3792 0012 C4F20003 		movt	r3, 16384
 3793 0016 FB60     		str	r3, [r7, #12]
2306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3794              		.loc 1 2306 0
 3795 0018 7B68     		ldr	r3, [r7, #4]
 3796 001a 4FEA8302 		lsl	r2, r3, #2
 3797 001e FB68     		ldr	r3, [r7, #12]
 3798 0020 D318     		adds	r3, r2, r3
 3799 0022 FB60     		str	r3, [r7, #12]
2307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 3800              		.loc 1 2309 0
 3801 0024 FB68     		ldr	r3, [r7, #12]
 3802 0026 1B68     		ldr	r3, [r3, #0]
2310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3803              		.loc 1 2310 0
 3804 0028 1846     		mov	r0, r3
 3805 002a 07F11407 		add	r7, r7, #20
 3806 002e BD46     		mov	sp, r7
 3807 0030 80BC     		pop	{r7}
 3808 0032 7047     		bx	lr
 3809              		.cfi_endproc
 3810              	.LFE155:
 3812              		.section	.text.RTC_TamperPinSelection,"ax",%progbits
 3813              		.align	2
 3814              		.global	RTC_TamperPinSelection
 3815              		.thumb
 3816              		.thumb_func
 3818              	RTC_TamperPinSelection:
 3819              	.LFB156:
2311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *           configuration functions  
2319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration 
2323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   functions 
2324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
2335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
2336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3820              		.loc 1 2339 0
 3821              		.cfi_startproc
 3822              		@ args = 0, pretend = 0, frame = 8
 3823              		@ frame_needed = 1, uses_anonymous_args = 0
 3824              		@ link register save eliminated.
 3825 0000 80B4     		push	{r7}
 3826              	.LCFI134:
 3827              		.cfi_def_cfa_offset 4
 3828              		.cfi_offset 7, -4
 3829 0002 83B0     		sub	sp, sp, #12
 3830              	.LCFI135:
 3831              		.cfi_def_cfa_offset 16
 3832 0004 00AF     		add	r7, sp, #0
 3833              	.LCFI136:
 3834              		.cfi_def_cfa_register 7
 3835 0006 7860     		str	r0, [r7, #4]
2340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 3836              		.loc 1 2343 0
 3837 0008 4FF42053 		mov	r3, #10240
 3838 000c C4F20003 		movt	r3, 16384
 3839 0010 4FF42052 		mov	r2, #10240
 3840 0014 C4F20002 		movt	r2, 16384
 3841 0018 126C     		ldr	r2, [r2, #64]
 3842 001a 22F48032 		bic	r2, r2, #65536
 3843 001e 1A64     		str	r2, [r3, #64]
2344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 3844              		.loc 1 2344 0
 3845 0020 4FF42053 		mov	r3, #10240
 3846 0024 C4F20003 		movt	r3, 16384
 3847 0028 4FF42052 		mov	r2, #10240
 3848 002c C4F20002 		movt	r2, 16384
 3849 0030 116C     		ldr	r1, [r2, #64]
 3850 0032 7A68     		ldr	r2, [r7, #4]
 3851 0034 0A43     		orrs	r2, r2, r1
 3852 0036 1A64     		str	r2, [r3, #64]
2345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3853              		.loc 1 2345 0
 3854 0038 07F10C07 		add	r7, r7, #12
 3855 003c BD46     		mov	sp, r7
 3856 003e 80BC     		pop	{r7}
 3857 0040 7047     		bx	lr
 3858              		.cfi_endproc
 3859              	.LFE156:
 3861              		.section	.text.RTC_TimeStampPinSelection,"ax",%progbits
 3862              		.align	2
 3863              		.global	RTC_TimeStampPinSelection
 3864              		.thumb
 3865              		.thumb_func
 3867              	RTC_TimeStampPinSelection:
 3868              	.LFB157:
2346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3869              		.loc 1 2356 0
 3870              		.cfi_startproc
 3871              		@ args = 0, pretend = 0, frame = 8
 3872              		@ frame_needed = 1, uses_anonymous_args = 0
 3873              		@ link register save eliminated.
 3874 0000 80B4     		push	{r7}
 3875              	.LCFI137:
 3876              		.cfi_def_cfa_offset 4
 3877              		.cfi_offset 7, -4
 3878 0002 83B0     		sub	sp, sp, #12
 3879              	.LCFI138:
 3880              		.cfi_def_cfa_offset 16
 3881 0004 00AF     		add	r7, sp, #0
 3882              	.LCFI139:
 3883              		.cfi_def_cfa_register 7
 3884 0006 7860     		str	r0, [r7, #4]
2357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 3885              		.loc 1 2360 0
 3886 0008 4FF42053 		mov	r3, #10240
 3887 000c C4F20003 		movt	r3, 16384
 3888 0010 4FF42052 		mov	r2, #10240
 3889 0014 C4F20002 		movt	r2, 16384
 3890 0018 126C     		ldr	r2, [r2, #64]
 3891 001a 22F40032 		bic	r2, r2, #131072
 3892 001e 1A64     		str	r2, [r3, #64]
2361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 3893              		.loc 1 2361 0
 3894 0020 4FF42053 		mov	r3, #10240
 3895 0024 C4F20003 		movt	r3, 16384
 3896 0028 4FF42052 		mov	r2, #10240
 3897 002c C4F20002 		movt	r2, 16384
 3898 0030 116C     		ldr	r1, [r2, #64]
 3899 0032 7A68     		ldr	r2, [r7, #4]
 3900 0034 0A43     		orrs	r2, r2, r1
 3901 0036 1A64     		str	r2, [r3, #64]
2362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3902              		.loc 1 2362 0
 3903 0038 07F10C07 		add	r7, r7, #12
 3904 003c BD46     		mov	sp, r7
 3905 003e 80BC     		pop	{r7}
 3906 0040 7047     		bx	lr
 3907              		.cfi_endproc
 3908              	.LFE157:
 3910              		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 3911              		.align	2
 3912              		.global	RTC_OutputTypeConfig
 3913              		.thumb
 3914              		.thumb_func
 3916              	RTC_OutputTypeConfig:
 3917              	.LFB158:
2363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3918              		.loc 1 2375 0
 3919              		.cfi_startproc
 3920              		@ args = 0, pretend = 0, frame = 8
 3921              		@ frame_needed = 1, uses_anonymous_args = 0
 3922              		@ link register save eliminated.
 3923 0000 80B4     		push	{r7}
 3924              	.LCFI140:
 3925              		.cfi_def_cfa_offset 4
 3926              		.cfi_offset 7, -4
 3927 0002 83B0     		sub	sp, sp, #12
 3928              	.LCFI141:
 3929              		.cfi_def_cfa_offset 16
 3930 0004 00AF     		add	r7, sp, #0
 3931              	.LCFI142:
 3932              		.cfi_def_cfa_register 7
 3933 0006 7860     		str	r0, [r7, #4]
2376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 3934              		.loc 1 2379 0
 3935 0008 4FF42053 		mov	r3, #10240
 3936 000c C4F20003 		movt	r3, 16384
 3937 0010 4FF42052 		mov	r2, #10240
 3938 0014 C4F20002 		movt	r2, 16384
 3939 0018 126C     		ldr	r2, [r2, #64]
 3940 001a 22F48022 		bic	r2, r2, #262144
 3941 001e 1A64     		str	r2, [r3, #64]
2380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 3942              		.loc 1 2380 0
 3943 0020 4FF42053 		mov	r3, #10240
 3944 0024 C4F20003 		movt	r3, 16384
 3945 0028 4FF42052 		mov	r2, #10240
 3946 002c C4F20002 		movt	r2, 16384
 3947 0030 116C     		ldr	r1, [r2, #64]
 3948 0032 7A68     		ldr	r2, [r7, #4]
 3949 0034 0A43     		orrs	r2, r2, r1
 3950 0036 1A64     		str	r2, [r3, #64]
2381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3951              		.loc 1 2381 0
 3952 0038 07F10C07 		add	r7, r7, #12
 3953 003c BD46     		mov	sp, r7
 3954 003e 80BC     		pop	{r7}
 3955 0040 7047     		bx	lr
 3956              		.cfi_endproc
 3957              	.LFE158:
 3959              		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
 3960              		.align	2
 3961              		.global	RTC_SynchroShiftConfig
 3962              		.thumb
 3963              		.thumb_func
 3965              	RTC_SynchroShiftConfig:
 3966              	.LFB159:
2382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Shift control synchronisation functions
2393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
2412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3967              		.loc 1 2413 0
 3968              		.cfi_startproc
 3969              		@ args = 0, pretend = 0, frame = 16
 3970              		@ frame_needed = 1, uses_anonymous_args = 0
 3971 0000 80B5     		push	{r7, lr}
 3972              	.LCFI143:
 3973              		.cfi_def_cfa_offset 8
 3974              		.cfi_offset 14, -4
 3975              		.cfi_offset 7, -8
 3976 0002 84B0     		sub	sp, sp, #16
 3977              	.LCFI144:
 3978              		.cfi_def_cfa_offset 24
 3979 0004 00AF     		add	r7, sp, #0
 3980              	.LCFI145:
 3981              		.cfi_def_cfa_register 7
 3982 0006 7860     		str	r0, [r7, #4]
 3983 0008 3960     		str	r1, [r7, #0]
2414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3984              		.loc 1 2414 0
 3985 000a 4FF00003 		mov	r3, #0
 3986 000e FB73     		strb	r3, [r7, #15]
2415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
 3987              		.loc 1 2415 0
 3988 0010 4FF00003 		mov	r3, #0
 3989 0014 BB60     		str	r3, [r7, #8]
2416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3990              		.loc 1 2422 0
 3991 0016 4FF42053 		mov	r3, #10240
 3992 001a C4F20003 		movt	r3, 16384
 3993 001e 4FF0CA02 		mov	r2, #202
 3994 0022 5A62     		str	r2, [r3, #36]
2423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3995              		.loc 1 2423 0
 3996 0024 4FF42053 		mov	r3, #10240
 3997 0028 C4F20003 		movt	r3, 16384
 3998 002c 4FF05302 		mov	r2, #83
 3999 0030 5A62     		str	r2, [r3, #36]
2424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 4000              		.loc 1 2426 0
 4001 0032 4FF42053 		mov	r3, #10240
 4002 0036 C4F20003 		movt	r3, 16384
 4003 003a DB68     		ldr	r3, [r3, #12]
 4004 003c 03F00803 		and	r3, r3, #8
 4005 0040 002B     		cmp	r3, #0
 4006 0042 11D0     		beq	.L144
2427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 4007              		.loc 1 2429 0
 4008 0044 03E0     		b	.L145
 4009              	.L146:
2430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       shpfcount++;
 4010              		.loc 1 2431 0
 4011 0046 BB68     		ldr	r3, [r7, #8]
 4012 0048 03F10103 		add	r3, r3, #1
 4013 004c BB60     		str	r3, [r7, #8]
 4014              	.L145:
2429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 4015              		.loc 1 2429 0 discriminator 1
 4016 004e 4FF42053 		mov	r3, #10240
 4017 0052 C4F20003 		movt	r3, 16384
 4018 0056 DB68     		ldr	r3, [r3, #12]
 4019 0058 03F00803 		and	r3, r3, #8
 4020 005c 002B     		cmp	r3, #0
 4021 005e 03D0     		beq	.L144
2429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 4022              		.loc 1 2429 0 is_stmt 0 discriminator 2
 4023 0060 BB68     		ldr	r3, [r7, #8]
 4024 0062 B3F5805F 		cmp	r3, #4096
 4025 0066 EED1     		bne	.L146
 4026              	.L144:
2432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 4027              		.loc 1 2436 0 is_stmt 1
 4028 0068 4FF42053 		mov	r3, #10240
 4029 006c C4F20003 		movt	r3, 16384
 4030 0070 DB68     		ldr	r3, [r3, #12]
 4031 0072 03F00803 		and	r3, r3, #8
 4032 0076 002B     		cmp	r3, #0
 4033 0078 21D1     		bne	.L147
2437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 4034              		.loc 1 2439 0
 4035 007a 4FF42053 		mov	r3, #10240
 4036 007e C4F20003 		movt	r3, 16384
 4037 0082 9B68     		ldr	r3, [r3, #8]
 4038 0084 03F01003 		and	r3, r3, #16
 4039 0088 002B     		cmp	r3, #0
 4040 008a 14D1     		bne	.L148
2440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 4041              		.loc 1 2442 0
 4042 008c 4FF42053 		mov	r3, #10240
 4043 0090 C4F20003 		movt	r3, 16384
 4044 0094 3968     		ldr	r1, [r7, #0]
 4045 0096 7A68     		ldr	r2, [r7, #4]
 4046 0098 0A43     		orrs	r2, r2, r1
 4047 009a DA62     		str	r2, [r3, #44]
2443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
2444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 4048              		.loc 1 2444 0
 4049 009c FFF7FEFF 		bl	RTC_WaitForSynchro
 4050 00a0 0346     		mov	r3, r0
 4051 00a2 002B     		cmp	r3, #0
 4052 00a4 03D1     		bne	.L149
2445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 4053              		.loc 1 2446 0
 4054 00a6 4FF00003 		mov	r3, #0
 4055 00aa FB73     		strb	r3, [r7, #15]
 4056 00ac 0AE0     		b	.L150
 4057              	.L149:
2447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
2449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 4058              		.loc 1 2450 0
 4059 00ae 4FF00103 		mov	r3, #1
 4060 00b2 FB73     		strb	r3, [r7, #15]
 4061 00b4 06E0     		b	.L150
 4062              	.L148:
2451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
2454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 4063              		.loc 1 2455 0
 4064 00b6 4FF00003 		mov	r3, #0
 4065 00ba FB73     		strb	r3, [r7, #15]
 4066 00bc 02E0     		b	.L150
 4067              	.L147:
2456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 4068              		.loc 1 2460 0
 4069 00be 4FF00003 		mov	r3, #0
 4070 00c2 FB73     		strb	r3, [r7, #15]
 4071              	.L150:
2461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 4072              		.loc 1 2464 0
 4073 00c4 4FF42053 		mov	r3, #10240
 4074 00c8 C4F20003 		movt	r3, 16384
 4075 00cc 4FF0FF02 		mov	r2, #255
 4076 00d0 5A62     		str	r2, [r3, #36]
2465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 4077              		.loc 1 2466 0
 4078 00d2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4079              		.loc 1 2467 0
 4080 00d4 1846     		mov	r0, r3
 4081 00d6 07F11007 		add	r7, r7, #16
 4082 00da BD46     		mov	sp, r7
 4083 00dc 80BD     		pop	{r7, pc}
 4084              		.cfi_endproc
 4085              	.LFE159:
 4087 00de 00BF     		.section	.text.RTC_ITConfig,"ax",%progbits
 4088              		.align	2
 4089              		.global	RTC_ITConfig
 4090              		.thumb
 4091              		.thumb_func
 4093              	RTC_ITConfig:
 4094              	.LFB160:
2468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Interrupts and flags management functions
2479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  All RTC interrupts are connected to the EXTI controller.
2481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Alarm interrupt, the following sequence is required:
2483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
2484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
2486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Wakeup interrupt, the following sequence is required:
2491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 22 in interrupt mode and select the rising 
2492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_WKUP IRQ channel in the NVIC using the NVIC_Init()
2494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate the RTC wakeup timer event using the 
2496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
2497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Tamper interrupt, the following sequence is required:
2499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC tamper event using the 
2504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC TimeStamp interrupt, the following sequence is required:
2507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC time-stamp event using the 
2512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TimeStampCmd() functions.
2513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4095              		.loc 1 2532 0
 4096              		.cfi_startproc
 4097              		@ args = 0, pretend = 0, frame = 8
 4098              		@ frame_needed = 1, uses_anonymous_args = 0
 4099              		@ link register save eliminated.
 4100 0000 80B4     		push	{r7}
 4101              	.LCFI146:
 4102              		.cfi_def_cfa_offset 4
 4103              		.cfi_offset 7, -4
 4104 0002 83B0     		sub	sp, sp, #12
 4105              	.LCFI147:
 4106              		.cfi_def_cfa_offset 16
 4107 0004 00AF     		add	r7, sp, #0
 4108              	.LCFI148:
 4109              		.cfi_def_cfa_register 7
 4110 0006 7860     		str	r0, [r7, #4]
 4111 0008 0B46     		mov	r3, r1
 4112 000a FB70     		strb	r3, [r7, #3]
2533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 4113              		.loc 1 2538 0
 4114 000c 4FF42053 		mov	r3, #10240
 4115 0010 C4F20003 		movt	r3, 16384
 4116 0014 4FF0CA02 		mov	r2, #202
 4117 0018 5A62     		str	r2, [r3, #36]
2539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 4118              		.loc 1 2539 0
 4119 001a 4FF42053 		mov	r3, #10240
 4120 001e C4F20003 		movt	r3, 16384
 4121 0022 4FF05302 		mov	r2, #83
 4122 0026 5A62     		str	r2, [r3, #36]
2540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 4123              		.loc 1 2541 0
 4124 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4125 002a 002B     		cmp	r3, #0
 4126 002c 1CD0     		beq	.L152
2542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 4127              		.loc 1 2544 0
 4128 002e 4FF42053 		mov	r3, #10240
 4129 0032 C4F20003 		movt	r3, 16384
 4130 0036 4FF42052 		mov	r2, #10240
 4131 003a C4F20002 		movt	r2, 16384
 4132 003e 9168     		ldr	r1, [r2, #8]
 4133 0040 7A68     		ldr	r2, [r7, #4]
 4134 0042 22F00402 		bic	r2, r2, #4
 4135 0046 0A43     		orrs	r2, r2, r1
 4136 0048 9A60     		str	r2, [r3, #8]
2545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 4137              		.loc 1 2546 0
 4138 004a 4FF42053 		mov	r3, #10240
 4139 004e C4F20003 		movt	r3, 16384
 4140 0052 4FF42052 		mov	r2, #10240
 4141 0056 C4F20002 		movt	r2, 16384
 4142 005a 116C     		ldr	r1, [r2, #64]
 4143 005c 7A68     		ldr	r2, [r7, #4]
 4144 005e 02F00402 		and	r2, r2, #4
 4145 0062 0A43     		orrs	r2, r2, r1
 4146 0064 1A64     		str	r2, [r3, #64]
 4147 0066 1FE0     		b	.L153
 4148              	.L152:
2547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 4149              		.loc 1 2551 0
 4150 0068 4FF42053 		mov	r3, #10240
 4151 006c C4F20003 		movt	r3, 16384
 4152 0070 4FF42052 		mov	r2, #10240
 4153 0074 C4F20002 		movt	r2, 16384
 4154 0078 9168     		ldr	r1, [r2, #8]
 4155 007a 7A68     		ldr	r2, [r7, #4]
 4156 007c 22F00402 		bic	r2, r2, #4
 4157 0080 6FEA0202 		mvn	r2, r2
 4158 0084 0A40     		ands	r2, r2, r1
 4159 0086 9A60     		str	r2, [r3, #8]
2552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 4160              		.loc 1 2553 0
 4161 0088 4FF42053 		mov	r3, #10240
 4162 008c C4F20003 		movt	r3, 16384
 4163 0090 4FF42052 		mov	r2, #10240
 4164 0094 C4F20002 		movt	r2, 16384
 4165 0098 116C     		ldr	r1, [r2, #64]
 4166 009a 7A68     		ldr	r2, [r7, #4]
 4167 009c 02F00402 		and	r2, r2, #4
 4168 00a0 6FEA0202 		mvn	r2, r2
 4169 00a4 0A40     		ands	r2, r2, r1
 4170 00a6 1A64     		str	r2, [r3, #64]
 4171              	.L153:
2554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 4172              		.loc 1 2556 0
 4173 00a8 4FF42053 		mov	r3, #10240
 4174 00ac C4F20003 		movt	r3, 16384
 4175 00b0 4FF0FF02 		mov	r2, #255
 4176 00b4 5A62     		str	r2, [r3, #36]
2557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4177              		.loc 1 2557 0
 4178 00b6 07F10C07 		add	r7, r7, #12
 4179 00ba BD46     		mov	sp, r7
 4180 00bc 80BC     		pop	{r7}
 4181 00be 7047     		bx	lr
 4182              		.cfi_endproc
 4183              	.LFE160:
 4185              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 4186              		.align	2
 4187              		.global	RTC_GetFlagStatus
 4188              		.thumb
 4189              		.thumb_func
 4191              	RTC_GetFlagStatus:
 4192              	.LFB161:
2558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4193              		.loc 1 2578 0
 4194              		.cfi_startproc
 4195              		@ args = 0, pretend = 0, frame = 16
 4196              		@ frame_needed = 1, uses_anonymous_args = 0
 4197              		@ link register save eliminated.
 4198 0000 80B4     		push	{r7}
 4199              	.LCFI149:
 4200              		.cfi_def_cfa_offset 4
 4201              		.cfi_offset 7, -4
 4202 0002 85B0     		sub	sp, sp, #20
 4203              	.LCFI150:
 4204              		.cfi_def_cfa_offset 24
 4205 0004 00AF     		add	r7, sp, #0
 4206              	.LCFI151:
 4207              		.cfi_def_cfa_register 7
 4208 0006 7860     		str	r0, [r7, #4]
2579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 4209              		.loc 1 2579 0
 4210 0008 4FF00003 		mov	r3, #0
 4211 000c FB73     		strb	r3, [r7, #15]
2580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4212              		.loc 1 2580 0
 4213 000e 4FF00003 		mov	r3, #0
 4214 0012 BB60     		str	r3, [r7, #8]
2581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 4215              		.loc 1 2586 0
 4216 0014 4FF42053 		mov	r3, #10240
 4217 0018 C4F20003 		movt	r3, 16384
 4218 001c DA68     		ldr	r2, [r3, #12]
 4219 001e 43F67773 		movw	r3, #16247
 4220 0022 1340     		ands	r3, r3, r2
 4221 0024 BB60     		str	r3, [r7, #8]
2587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 4222              		.loc 1 2589 0
 4223 0026 BA68     		ldr	r2, [r7, #8]
 4224 0028 7B68     		ldr	r3, [r7, #4]
 4225 002a 1340     		ands	r3, r3, r2
 4226 002c 002B     		cmp	r3, #0
 4227 002e 03D0     		beq	.L155
2590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4228              		.loc 1 2591 0
 4229 0030 4FF00103 		mov	r3, #1
 4230 0034 FB73     		strb	r3, [r7, #15]
 4231 0036 02E0     		b	.L156
 4232              	.L155:
2592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4233              		.loc 1 2595 0
 4234 0038 4FF00003 		mov	r3, #0
 4235 003c FB73     		strb	r3, [r7, #15]
 4236              	.L156:
2596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4237              		.loc 1 2597 0
 4238 003e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4239              		.loc 1 2598 0
 4240 0040 1846     		mov	r0, r3
 4241 0042 07F11407 		add	r7, r7, #20
 4242 0046 BD46     		mov	sp, r7
 4243 0048 80BC     		pop	{r7}
 4244 004a 7047     		bx	lr
 4245              		.cfi_endproc
 4246              	.LFE161:
 4248              		.section	.text.RTC_ClearFlag,"ax",%progbits
 4249              		.align	2
 4250              		.global	RTC_ClearFlag
 4251              		.thumb
 4252              		.thumb_func
 4254              	RTC_ClearFlag:
 4255              	.LFB162:
2599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4256              		.loc 1 2614 0
 4257              		.cfi_startproc
 4258              		@ args = 0, pretend = 0, frame = 8
 4259              		@ frame_needed = 1, uses_anonymous_args = 0
 4260              		@ link register save eliminated.
 4261 0000 80B4     		push	{r7}
 4262              	.LCFI152:
 4263              		.cfi_def_cfa_offset 4
 4264              		.cfi_offset 7, -4
 4265 0002 83B0     		sub	sp, sp, #12
 4266              	.LCFI153:
 4267              		.cfi_def_cfa_offset 16
 4268 0004 00AF     		add	r7, sp, #0
 4269              	.LCFI154:
 4270              		.cfi_def_cfa_register 7
 4271 0006 7860     		str	r0, [r7, #4]
2615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 4272              		.loc 1 2619 0
 4273 0008 4FF42053 		mov	r3, #10240
 4274 000c C4F20003 		movt	r3, 16384
 4275 0010 7A68     		ldr	r2, [r7, #4]
 4276 0012 4FEA0242 		lsl	r2, r2, #16
 4277 0016 4FEA1242 		lsr	r2, r2, #16
 4278 001a 42F08002 		orr	r2, r2, #128
 4279 001e 6FEA0201 		mvn	r1, r2
 4280 0022 4FF42052 		mov	r2, #10240
 4281 0026 C4F20002 		movt	r2, 16384
 4282 002a D268     		ldr	r2, [r2, #12]
 4283 002c 02F08002 		and	r2, r2, #128
 4284 0030 0A43     		orrs	r2, r2, r1
 4285 0032 DA60     		str	r2, [r3, #12]
2620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4286              		.loc 1 2620 0
 4287 0034 07F10C07 		add	r7, r7, #12
 4288 0038 BD46     		mov	sp, r7
 4289 003a 80BC     		pop	{r7}
 4290 003c 7047     		bx	lr
 4291              		.cfi_endproc
 4292              	.LFE162:
 4294 003e 00BF     		.section	.text.RTC_GetITStatus,"ax",%progbits
 4295              		.align	2
 4296              		.global	RTC_GetITStatus
 4297              		.thumb
 4298              		.thumb_func
 4300              	RTC_GetITStatus:
 4301              	.LFB163:
2621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4302              		.loc 1 2634 0
 4303              		.cfi_startproc
 4304              		@ args = 0, pretend = 0, frame = 24
 4305              		@ frame_needed = 1, uses_anonymous_args = 0
 4306              		@ link register save eliminated.
 4307 0000 80B4     		push	{r7}
 4308              	.LCFI155:
 4309              		.cfi_def_cfa_offset 4
 4310              		.cfi_offset 7, -4
 4311 0002 87B0     		sub	sp, sp, #28
 4312              	.LCFI156:
 4313              		.cfi_def_cfa_offset 32
 4314 0004 00AF     		add	r7, sp, #0
 4315              	.LCFI157:
 4316              		.cfi_def_cfa_register 7
 4317 0006 7860     		str	r0, [r7, #4]
2635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 4318              		.loc 1 2635 0
 4319 0008 4FF00003 		mov	r3, #0
 4320 000c FB75     		strb	r3, [r7, #23]
2636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 4321              		.loc 1 2636 0
 4322 000e 4FF00003 		mov	r3, #0
 4323 0012 3B61     		str	r3, [r7, #16]
 4324 0014 4FF00003 		mov	r3, #0
 4325 0018 FB60     		str	r3, [r7, #12]
2637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 4326              		.loc 1 2642 0
 4327 001a 4FF42053 		mov	r3, #10240
 4328 001e C4F20003 		movt	r3, 16384
 4329 0022 1B6C     		ldr	r3, [r3, #64]
 4330 0024 03F00403 		and	r3, r3, #4
 4331 0028 3B61     		str	r3, [r7, #16]
2643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 4332              		.loc 1 2645 0
 4333 002a 4FF42053 		mov	r3, #10240
 4334 002e C4F20003 		movt	r3, 16384
 4335 0032 9A68     		ldr	r2, [r3, #8]
 4336 0034 7B68     		ldr	r3, [r7, #4]
 4337 0036 1A40     		ands	r2, r2, r3
 4338 0038 7B68     		ldr	r3, [r7, #4]
 4339 003a 4FEAD331 		lsr	r1, r3, #15
 4340 003e 3B69     		ldr	r3, [r7, #16]
 4341 0040 0B40     		ands	r3, r3, r1
 4342 0042 1343     		orrs	r3, r3, r2
 4343 0044 FB60     		str	r3, [r7, #12]
2646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 4344              		.loc 1 2648 0
 4345 0046 4FF42053 		mov	r3, #10240
 4346 004a C4F20003 		movt	r3, 16384
 4347 004e DA68     		ldr	r2, [r3, #12]
 4348 0050 7B68     		ldr	r3, [r7, #4]
 4349 0052 4FEA1313 		lsr	r3, r3, #4
 4350 0056 1340     		ands	r3, r3, r2
 4351 0058 3B61     		str	r3, [r7, #16]
2649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 4352              		.loc 1 2651 0
 4353 005a FB68     		ldr	r3, [r7, #12]
 4354 005c 002B     		cmp	r3, #0
 4355 005e 0AD0     		beq	.L159
 4356              		.loc 1 2651 0 is_stmt 0 discriminator 1
 4357 0060 3B69     		ldr	r3, [r7, #16]
 4358 0062 4FEA0343 		lsl	r3, r3, #16
 4359 0066 4FEA1343 		lsr	r3, r3, #16
 4360 006a 002B     		cmp	r3, #0
 4361 006c 03D0     		beq	.L159
2652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4362              		.loc 1 2653 0 is_stmt 1
 4363 006e 4FF00103 		mov	r3, #1
 4364 0072 FB75     		strb	r3, [r7, #23]
 4365 0074 02E0     		b	.L160
 4366              	.L159:
2654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4367              		.loc 1 2657 0
 4368 0076 4FF00003 		mov	r3, #0
 4369 007a FB75     		strb	r3, [r7, #23]
 4370              	.L160:
2658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4371              		.loc 1 2659 0
 4372 007c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4373              		.loc 1 2660 0
 4374 007e 1846     		mov	r0, r3
 4375 0080 07F11C07 		add	r7, r7, #28
 4376 0084 BD46     		mov	sp, r7
 4377 0086 80BC     		pop	{r7}
 4378 0088 7047     		bx	lr
 4379              		.cfi_endproc
 4380              	.LFE163:
 4382 008a 00BF     		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 4383              		.align	2
 4384              		.global	RTC_ClearITPendingBit
 4385              		.thumb
 4386              		.thumb_func
 4388              	RTC_ClearITPendingBit:
 4389              	.LFB164:
2661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4390              		.loc 1 2674 0
 4391              		.cfi_startproc
 4392              		@ args = 0, pretend = 0, frame = 16
 4393              		@ frame_needed = 1, uses_anonymous_args = 0
 4394              		@ link register save eliminated.
 4395 0000 80B4     		push	{r7}
 4396              	.LCFI158:
 4397              		.cfi_def_cfa_offset 4
 4398              		.cfi_offset 7, -4
 4399 0002 85B0     		sub	sp, sp, #20
 4400              	.LCFI159:
 4401              		.cfi_def_cfa_offset 24
 4402 0004 00AF     		add	r7, sp, #0
 4403              	.LCFI160:
 4404              		.cfi_def_cfa_register 7
 4405 0006 7860     		str	r0, [r7, #4]
2675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4406              		.loc 1 2675 0
 4407 0008 4FF00003 		mov	r3, #0
 4408 000c FB60     		str	r3, [r7, #12]
2676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
 4409              		.loc 1 2681 0
 4410 000e 7B68     		ldr	r3, [r7, #4]
 4411 0010 4FEA1313 		lsr	r3, r3, #4
 4412 0014 FB60     		str	r3, [r7, #12]
2682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 4413              		.loc 1 2684 0
 4414 0016 4FF42053 		mov	r3, #10240
 4415 001a C4F20003 		movt	r3, 16384
 4416 001e FA68     		ldr	r2, [r7, #12]
 4417 0020 4FEA0242 		lsl	r2, r2, #16
 4418 0024 4FEA1242 		lsr	r2, r2, #16
 4419 0028 42F08002 		orr	r2, r2, #128
 4420 002c 6FEA0201 		mvn	r1, r2
 4421 0030 4FF42052 		mov	r2, #10240
 4422 0034 C4F20002 		movt	r2, 16384
 4423 0038 D268     		ldr	r2, [r2, #12]
 4424 003a 02F08002 		and	r2, r2, #128
 4425 003e 0A43     		orrs	r2, r2, r1
 4426 0040 DA60     		str	r2, [r3, #12]
2685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4427              		.loc 1 2685 0
 4428 0042 07F11407 		add	r7, r7, #20
 4429 0046 BD46     		mov	sp, r7
 4430 0048 80BC     		pop	{r7}
 4431 004a 7047     		bx	lr
 4432              		.cfi_endproc
 4433              	.LFE164:
 4435              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 4436              		.align	2
 4437              		.thumb
 4438              		.thumb_func
 4440              	RTC_ByteToBcd2:
 4441              	.LFB165:
2686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4442              		.loc 1 2697 0
 4443              		.cfi_startproc
 4444              		@ args = 0, pretend = 0, frame = 16
 4445              		@ frame_needed = 1, uses_anonymous_args = 0
 4446              		@ link register save eliminated.
 4447 0000 80B4     		push	{r7}
 4448              	.LCFI161:
 4449              		.cfi_def_cfa_offset 4
 4450              		.cfi_offset 7, -4
 4451 0002 85B0     		sub	sp, sp, #20
 4452              	.LCFI162:
 4453              		.cfi_def_cfa_offset 24
 4454 0004 00AF     		add	r7, sp, #0
 4455              	.LCFI163:
 4456              		.cfi_def_cfa_register 7
 4457 0006 0346     		mov	r3, r0
 4458 0008 FB71     		strb	r3, [r7, #7]
2698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
 4459              		.loc 1 2698 0
 4460 000a 4FF00003 		mov	r3, #0
 4461 000e FB73     		strb	r3, [r7, #15]
2699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4462              		.loc 1 2700 0
 4463 0010 07E0     		b	.L163
 4464              	.L164:
2701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 4465              		.loc 1 2702 0
 4466 0012 FB7B     		ldrb	r3, [r7, #15]
 4467 0014 03F10103 		add	r3, r3, #1
 4468 0018 FB73     		strb	r3, [r7, #15]
2703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 4469              		.loc 1 2703 0
 4470 001a FB79     		ldrb	r3, [r7, #7]
 4471 001c A3F10A03 		sub	r3, r3, #10
 4472 0020 FB71     		strb	r3, [r7, #7]
 4473              	.L163:
2700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4474              		.loc 1 2700 0 discriminator 1
 4475 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4476 0024 092B     		cmp	r3, #9
 4477 0026 F4D8     		bhi	.L164
2704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 4478              		.loc 1 2706 0
 4479 0028 FB7B     		ldrb	r3, [r7, #15]
 4480 002a 4FEA0313 		lsl	r3, r3, #4
 4481 002e DAB2     		uxtb	r2, r3
 4482 0030 FB79     		ldrb	r3, [r7, #7]
 4483 0032 1343     		orrs	r3, r3, r2
 4484 0034 DBB2     		uxtb	r3, r3
2707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4485              		.loc 1 2707 0
 4486 0036 1846     		mov	r0, r3
 4487 0038 07F11407 		add	r7, r7, #20
 4488 003c BD46     		mov	sp, r7
 4489 003e 80BC     		pop	{r7}
 4490 0040 7047     		bx	lr
 4491              		.cfi_endproc
 4492              	.LFE165:
 4494 0042 00BF     		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 4495              		.align	2
 4496              		.thumb
 4497              		.thumb_func
 4499              	RTC_Bcd2ToByte:
 4500              	.LFB166:
2708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted word
2713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4501              		.loc 1 2715 0
 4502              		.cfi_startproc
 4503              		@ args = 0, pretend = 0, frame = 16
 4504              		@ frame_needed = 1, uses_anonymous_args = 0
 4505              		@ link register save eliminated.
 4506 0000 80B4     		push	{r7}
 4507              	.LCFI164:
 4508              		.cfi_def_cfa_offset 4
 4509              		.cfi_offset 7, -4
 4510 0002 85B0     		sub	sp, sp, #20
 4511              	.LCFI165:
 4512              		.cfi_def_cfa_offset 24
 4513 0004 00AF     		add	r7, sp, #0
 4514              	.LCFI166:
 4515              		.cfi_def_cfa_register 7
 4516 0006 0346     		mov	r3, r0
 4517 0008 FB71     		strb	r3, [r7, #7]
2716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
 4518              		.loc 1 2716 0
 4519 000a 4FF00003 		mov	r3, #0
 4520 000e FB73     		strb	r3, [r7, #15]
2717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 4521              		.loc 1 2717 0
 4522 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4523 0012 4FEA1313 		lsr	r3, r3, #4
 4524 0016 DBB2     		uxtb	r3, r3
 4525 0018 1A46     		mov	r2, r3
 4526 001a 4FEA8202 		lsl	r2, r2, #2
 4527 001e D318     		adds	r3, r2, r3
 4528 0020 4FEA4303 		lsl	r3, r3, #1
 4529 0024 FB73     		strb	r3, [r7, #15]
2718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 4530              		.loc 1 2718 0
 4531 0026 FB79     		ldrb	r3, [r7, #7]
 4532 0028 03F00F03 		and	r3, r3, #15
 4533 002c DAB2     		uxtb	r2, r3
 4534 002e FB7B     		ldrb	r3, [r7, #15]
 4535 0030 D318     		adds	r3, r2, r3
 4536 0032 DBB2     		uxtb	r3, r3
2719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4537              		.loc 1 2719 0
 4538 0034 1846     		mov	r0, r3
 4539 0036 07F11407 		add	r7, r7, #20
 4540 003a BD46     		mov	sp, r7
 4541 003c 80BC     		pop	{r7}
 4542 003e 7047     		bx	lr
 4543              		.cfi_endproc
 4544              	.LFE166:
 4546              		.text
 4547              	.Letext0:
 4548              		.file 2 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/i
 4549              		.file 3 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 4550              		.file 4 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rtc.h"
 4551              		.file 5 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rtc.c
     /tmp/ccdudSpb.s:20     .text.RTC_DeInit:00000000 $t
     /tmp/ccdudSpb.s:25     .text.RTC_DeInit:00000000 RTC_DeInit
     /tmp/ccdudSpb.s:402    .text.RTC_EnterInitMode:00000000 RTC_EnterInitMode
     /tmp/ccdudSpb.s:532    .text.RTC_WaitForSynchro:00000000 RTC_WaitForSynchro
     /tmp/ccdudSpb.s:195    .text.RTC_Init:00000000 $t
     /tmp/ccdudSpb.s:200    .text.RTC_Init:00000000 RTC_Init
     /tmp/ccdudSpb.s:497    .text.RTC_ExitInitMode:00000000 RTC_ExitInitMode
     /tmp/ccdudSpb.s:298    .text.RTC_StructInit:00000000 $t
     /tmp/ccdudSpb.s:303    .text.RTC_StructInit:00000000 RTC_StructInit
     /tmp/ccdudSpb.s:342    .text.RTC_WriteProtectionCmd:00000000 $t
     /tmp/ccdudSpb.s:347    .text.RTC_WriteProtectionCmd:00000000 RTC_WriteProtectionCmd
     /tmp/ccdudSpb.s:397    .text.RTC_EnterInitMode:00000000 $t
     /tmp/ccdudSpb.s:492    .text.RTC_ExitInitMode:00000000 $t
     /tmp/ccdudSpb.s:527    .text.RTC_WaitForSynchro:00000000 $t
     /tmp/ccdudSpb.s:628    .text.RTC_RefClockCmd:00000000 $t
     /tmp/ccdudSpb.s:633    .text.RTC_RefClockCmd:00000000 RTC_RefClockCmd
     /tmp/ccdudSpb.s:720    .text.RTC_BypassShadowCmd:00000000 $t
     /tmp/ccdudSpb.s:725    .text.RTC_BypassShadowCmd:00000000 RTC_BypassShadowCmd
     /tmp/ccdudSpb.s:791    .text.RTC_SetTime:00000000 $t
     /tmp/ccdudSpb.s:796    .text.RTC_SetTime:00000000 RTC_SetTime
     /tmp/ccdudSpb.s:4499   .text.RTC_Bcd2ToByte:00000000 RTC_Bcd2ToByte
     /tmp/ccdudSpb.s:4440   .text.RTC_ByteToBcd2:00000000 RTC_ByteToBcd2
     /tmp/ccdudSpb.s:980    .text.RTC_TimeStructInit:00000000 $t
     /tmp/ccdudSpb.s:985    .text.RTC_TimeStructInit:00000000 RTC_TimeStructInit
     /tmp/ccdudSpb.s:1028   .text.RTC_GetTime:00000000 $t
     /tmp/ccdudSpb.s:1033   .text.RTC_GetTime:00000000 RTC_GetTime
     /tmp/ccdudSpb.s:1131   .text.RTC_GetSubSecond:00000000 $t
     /tmp/ccdudSpb.s:1136   .text.RTC_GetSubSecond:00000000 RTC_GetSubSecond
     /tmp/ccdudSpb.s:1177   .text.RTC_SetDate:00000000 $t
     /tmp/ccdudSpb.s:1182   .text.RTC_SetDate:00000000 RTC_SetDate
     /tmp/ccdudSpb.s:1366   .text.RTC_DateStructInit:00000000 $t
     /tmp/ccdudSpb.s:1371   .text.RTC_DateStructInit:00000000 RTC_DateStructInit
     /tmp/ccdudSpb.s:1414   .text.RTC_GetDate:00000000 $t
     /tmp/ccdudSpb.s:1419   .text.RTC_GetDate:00000000 RTC_GetDate
     /tmp/ccdudSpb.s:1521   .text.RTC_SetAlarm:00000000 $t
     /tmp/ccdudSpb.s:1526   .text.RTC_SetAlarm:00000000 RTC_SetAlarm
     /tmp/ccdudSpb.s:1745   .text.RTC_AlarmStructInit:00000000 $t
     /tmp/ccdudSpb.s:1750   .text.RTC_AlarmStructInit:00000000 RTC_AlarmStructInit
     /tmp/ccdudSpb.s:1805   .text.RTC_GetAlarm:00000000 $t
     /tmp/ccdudSpb.s:1810   .text.RTC_GetAlarm:00000000 RTC_GetAlarm
     /tmp/ccdudSpb.s:1944   .text.RTC_AlarmCmd:00000000 $t
     /tmp/ccdudSpb.s:1949   .text.RTC_AlarmCmd:00000000 RTC_AlarmCmd
     /tmp/ccdudSpb.s:2072   .text.RTC_AlarmSubSecondConfig:00000000 $t
     /tmp/ccdudSpb.s:2077   .text.RTC_AlarmSubSecondConfig:00000000 RTC_AlarmSubSecondConfig
     /tmp/ccdudSpb.s:2146   .text.RTC_GetAlarmSubSecond:00000000 $t
     /tmp/ccdudSpb.s:2151   .text.RTC_GetAlarmSubSecond:00000000 RTC_GetAlarmSubSecond
     /tmp/ccdudSpb.s:2205   .text.RTC_WakeUpClockConfig:00000000 $t
     /tmp/ccdudSpb.s:2210   .text.RTC_WakeUpClockConfig:00000000 RTC_WakeUpClockConfig
     /tmp/ccdudSpb.s:2269   .text.RTC_SetWakeUpCounter:00000000 $t
     /tmp/ccdudSpb.s:2274   .text.RTC_SetWakeUpCounter:00000000 RTC_SetWakeUpCounter
     /tmp/ccdudSpb.s:2321   .text.RTC_GetWakeUpCounter:00000000 $t
     /tmp/ccdudSpb.s:2326   .text.RTC_GetWakeUpCounter:00000000 RTC_GetWakeUpCounter
     /tmp/ccdudSpb.s:2355   .text.RTC_WakeUpCmd:00000000 $t
     /tmp/ccdudSpb.s:2360   .text.RTC_WakeUpCmd:00000000 RTC_WakeUpCmd
     /tmp/ccdudSpb.s:2475   .text.RTC_DayLightSavingConfig:00000000 $t
     /tmp/ccdudSpb.s:2480   .text.RTC_DayLightSavingConfig:00000000 RTC_DayLightSavingConfig
     /tmp/ccdudSpb.s:2542   .text.RTC_GetStoreOperation:00000000 $t
     /tmp/ccdudSpb.s:2547   .text.RTC_GetStoreOperation:00000000 RTC_GetStoreOperation
     /tmp/ccdudSpb.s:2575   .text.RTC_OutputConfig:00000000 $t
     /tmp/ccdudSpb.s:2580   .text.RTC_OutputConfig:00000000 RTC_OutputConfig
     /tmp/ccdudSpb.s:2642   .text.RTC_CoarseCalibConfig:00000000 $t
     /tmp/ccdudSpb.s:2647   .text.RTC_CoarseCalibConfig:00000000 RTC_CoarseCalibConfig
     /tmp/ccdudSpb.s:2718   .text.RTC_CoarseCalibCmd:00000000 $t
     /tmp/ccdudSpb.s:2723   .text.RTC_CoarseCalibCmd:00000000 RTC_CoarseCalibCmd
     /tmp/ccdudSpb.s:2810   .text.RTC_CalibOutputCmd:00000000 $t
     /tmp/ccdudSpb.s:2815   .text.RTC_CalibOutputCmd:00000000 RTC_CalibOutputCmd
     /tmp/ccdudSpb.s:2881   .text.RTC_CalibOutputConfig:00000000 $t
     /tmp/ccdudSpb.s:2886   .text.RTC_CalibOutputConfig:00000000 RTC_CalibOutputConfig
     /tmp/ccdudSpb.s:2945   .text.RTC_SmoothCalibConfig:00000000 $t
     /tmp/ccdudSpb.s:2950   .text.RTC_SmoothCalibConfig:00000000 RTC_SmoothCalibConfig
     /tmp/ccdudSpb.s:3055   .text.RTC_TimeStampCmd:00000000 $t
     /tmp/ccdudSpb.s:3060   .text.RTC_TimeStampCmd:00000000 RTC_TimeStampCmd
     /tmp/ccdudSpb.s:3137   .text.RTC_GetTimeStamp:00000000 $t
     /tmp/ccdudSpb.s:3142   .text.RTC_GetTimeStamp:00000000 RTC_GetTimeStamp
     /tmp/ccdudSpb.s:3302   .text.RTC_GetTimeStampSubSecond:00000000 $t
     /tmp/ccdudSpb.s:3307   .text.RTC_GetTimeStampSubSecond:00000000 RTC_GetTimeStampSubSecond
     /tmp/ccdudSpb.s:3334   .text.RTC_TamperTriggerConfig:00000000 $t
     /tmp/ccdudSpb.s:3339   .text.RTC_TamperTriggerConfig:00000000 RTC_TamperTriggerConfig
     /tmp/ccdudSpb.s:3395   .text.RTC_TamperCmd:00000000 $t
     /tmp/ccdudSpb.s:3400   .text.RTC_TamperCmd:00000000 RTC_TamperCmd
     /tmp/ccdudSpb.s:3455   .text.RTC_TamperFilterConfig:00000000 $t
     /tmp/ccdudSpb.s:3460   .text.RTC_TamperFilterConfig:00000000 RTC_TamperFilterConfig
     /tmp/ccdudSpb.s:3504   .text.RTC_TamperSamplingFreqConfig:00000000 $t
     /tmp/ccdudSpb.s:3509   .text.RTC_TamperSamplingFreqConfig:00000000 RTC_TamperSamplingFreqConfig
     /tmp/ccdudSpb.s:3553   .text.RTC_TamperPinsPrechargeDuration:00000000 $t
     /tmp/ccdudSpb.s:3558   .text.RTC_TamperPinsPrechargeDuration:00000000 RTC_TamperPinsPrechargeDuration
     /tmp/ccdudSpb.s:3602   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 $t
     /tmp/ccdudSpb.s:3607   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 RTC_TimeStampOnTamperDetectionCmd
     /tmp/ccdudSpb.s:3658   .text.RTC_TamperPullUpCmd:00000000 $t
     /tmp/ccdudSpb.s:3663   .text.RTC_TamperPullUpCmd:00000000 RTC_TamperPullUpCmd
     /tmp/ccdudSpb.s:3714   .text.RTC_WriteBackupRegister:00000000 $t
     /tmp/ccdudSpb.s:3719   .text.RTC_WriteBackupRegister:00000000 RTC_WriteBackupRegister
     /tmp/ccdudSpb.s:3764   .text.RTC_ReadBackupRegister:00000000 $t
     /tmp/ccdudSpb.s:3769   .text.RTC_ReadBackupRegister:00000000 RTC_ReadBackupRegister
     /tmp/ccdudSpb.s:3813   .text.RTC_TamperPinSelection:00000000 $t
     /tmp/ccdudSpb.s:3818   .text.RTC_TamperPinSelection:00000000 RTC_TamperPinSelection
     /tmp/ccdudSpb.s:3862   .text.RTC_TimeStampPinSelection:00000000 $t
     /tmp/ccdudSpb.s:3867   .text.RTC_TimeStampPinSelection:00000000 RTC_TimeStampPinSelection
     /tmp/ccdudSpb.s:3911   .text.RTC_OutputTypeConfig:00000000 $t
     /tmp/ccdudSpb.s:3916   .text.RTC_OutputTypeConfig:00000000 RTC_OutputTypeConfig
     /tmp/ccdudSpb.s:3960   .text.RTC_SynchroShiftConfig:00000000 $t
     /tmp/ccdudSpb.s:3965   .text.RTC_SynchroShiftConfig:00000000 RTC_SynchroShiftConfig
     /tmp/ccdudSpb.s:4088   .text.RTC_ITConfig:00000000 $t
     /tmp/ccdudSpb.s:4093   .text.RTC_ITConfig:00000000 RTC_ITConfig
     /tmp/ccdudSpb.s:4186   .text.RTC_GetFlagStatus:00000000 $t
     /tmp/ccdudSpb.s:4191   .text.RTC_GetFlagStatus:00000000 RTC_GetFlagStatus
     /tmp/ccdudSpb.s:4249   .text.RTC_ClearFlag:00000000 $t
     /tmp/ccdudSpb.s:4254   .text.RTC_ClearFlag:00000000 RTC_ClearFlag
     /tmp/ccdudSpb.s:4295   .text.RTC_GetITStatus:00000000 $t
     /tmp/ccdudSpb.s:4300   .text.RTC_GetITStatus:00000000 RTC_GetITStatus
     /tmp/ccdudSpb.s:4383   .text.RTC_ClearITPendingBit:00000000 $t
     /tmp/ccdudSpb.s:4388   .text.RTC_ClearITPendingBit:00000000 RTC_ClearITPendingBit
     /tmp/ccdudSpb.s:4436   .text.RTC_ByteToBcd2:00000000 $t
     /tmp/ccdudSpb.s:4495   .text.RTC_Bcd2ToByte:00000000 $t
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
