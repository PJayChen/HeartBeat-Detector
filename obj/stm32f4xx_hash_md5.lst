   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_hash_md5.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HASH_MD5,"ax",%progbits
  20              		.align	2
  21              		.global	HASH_MD5
  22              		.thumb
  23              		.thumb_func
  25              	HASH_MD5:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @file    stm32f4xx_hash_md5.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @brief   This file provides high level functions to compute the HASH MD5 and
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          HMAC MD5 Digest of an input message.
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          It uses the stm32f4xx_hash.c/.h drivers to access the STM32F4xx HASH
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          peripheral.
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *  @verbatim
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *    
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          ===================================================================
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *                                   How to use this driver
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          ===================================================================
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          1. Enable The HASH controller clock using 
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_HASH, ENABLE); function.
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          2. Calculate the HASH MD5 Digest using HASH_MD5() function.
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          3. Calculate the HMAC MD5 Digest using HMAC_MD5() function.
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *  @endverbatim
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   ******************************************************************************
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @attention
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   ******************************************************************************
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   */
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /* Includes ------------------------------------------------------------------*/
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** #include "stm32f4xx_hash.h"
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @{
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   */
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /** @defgroup HASH 
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @brief HASH driver modules
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @{
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   */
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /* Private typedef -----------------------------------------------------------*/
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /* Private define ------------------------------------------------------------*/
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** #define MD5BUSY_TIMEOUT    ((uint32_t) 0x00010000)
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /* Private macro -------------------------------------------------------------*/
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /* Private variables ---------------------------------------------------------*/
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /* Private function prototypes -----------------------------------------------*/
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /* Private functions ---------------------------------------------------------*/
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /** @defgroup HASH_Private_Functions
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @{
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   */ 
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /** @defgroup HASH_Group7 High Level MD5 functions
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****  *  @brief   High Level MD5 Hash and HMAC functions 
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****  *
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** @verbatim   
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****  ===============================================================================
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****                           High Level MD5 Hash and HMAC functions
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****  ===============================================================================
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** @endverbatim
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @{
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   */
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /**
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @brief  Compute the HASH MD5 digest.
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @param  Input: pointer to the Input buffer to be treated.
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @param  Ilen: length of the Input buffer.
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @param  Output: the returned digest
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @retval An ErrorStatus enumeration value:
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          - SUCCESS: digest computation done
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          - ERROR: digest computation failed
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   */
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** {
  28              		.loc 1 88 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 112
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 90B5     		push	{r4, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 14, -4
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 4, -12
  38 0002 9DB0     		sub	sp, sp, #116
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 128
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 F860     		str	r0, [r7, #12]
  45 0008 B960     		str	r1, [r7, #8]
  46 000a 7A60     		str	r2, [r7, #4]
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_InitTypeDef MD5_HASH_InitStructure;
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_MsgDigest MD5_MessageDigest;
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   __IO uint16_t nbvalidbitsdata = 0;
  47              		.loc 1 91 0
  48 000c 4FF00003 		mov	r3, #0
  49 0010 FB82     		strh	r3, [r7, #22]	@ movhi
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   uint32_t i = 0;
  50              		.loc 1 92 0
  51 0012 4FF00003 		mov	r3, #0
  52 0016 FB66     		str	r3, [r7, #108]
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   __IO uint32_t counter = 0;
  53              		.loc 1 93 0
  54 0018 4FF00003 		mov	r3, #0
  55 001c 3B61     		str	r3, [r7, #16]
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   uint32_t busystatus = 0;
  56              		.loc 1 94 0
  57 001e 4FF00003 		mov	r3, #0
  58 0022 3B66     		str	r3, [r7, #96]
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   ErrorStatus status = SUCCESS;
  59              		.loc 1 95 0
  60 0024 4FF00103 		mov	r3, #1
  61 0028 87F86B30 		strb	r3, [r7, #107]
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   uint32_t inputaddr  = (uint32_t)Input;
  62              		.loc 1 96 0
  63 002c FB68     		ldr	r3, [r7, #12]
  64 002e 7B66     		str	r3, [r7, #100]
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   uint32_t outputaddr = (uint32_t)Output;
  65              		.loc 1 97 0
  66 0030 7B68     		ldr	r3, [r7, #4]
  67 0032 FB65     		str	r3, [r7, #92]
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* Number of valid bits in last word of the Input data */
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
  68              		.loc 1 101 0
  69 0034 BB68     		ldr	r3, [r7, #8]
  70 0036 9BB2     		uxth	r3, r3
  71 0038 03F00303 		and	r3, r3, #3
  72 003c 9BB2     		uxth	r3, r3
  73 003e 4FEAC303 		lsl	r3, r3, #3
  74 0042 9BB2     		uxth	r3, r3
  75 0044 FB82     		strh	r3, [r7, #22]	@ movhi
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* HASH peripheral initialization */
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_DeInit();
  76              		.loc 1 104 0
  77 0046 FFF7FEFF 		bl	HASH_DeInit
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* HASH Configuration */
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
  78              		.loc 1 107 0
  79 004a 4FF08003 		mov	r3, #128
  80 004e FB62     		str	r3, [r7, #44]
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  81              		.loc 1 108 0
  82 0050 4FF00003 		mov	r3, #0
  83 0054 3B63     		str	r3, [r7, #48]
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  84              		.loc 1 109 0
  85 0056 4FF02003 		mov	r3, #32
  86 005a 7B63     		str	r3, [r7, #52]
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_Init(&MD5_HASH_InitStructure);
  87              		.loc 1 110 0
  88 005c 07F12C03 		add	r3, r7, #44
  89 0060 1846     		mov	r0, r3
  90 0062 FFF7FEFF 		bl	HASH_Init
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* Configure the number of valid bits in last word of the data */
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
  91              		.loc 1 113 0
  92 0066 FB8A     		ldrh	r3, [r7, #22]	@ movhi
  93 0068 9BB2     		uxth	r3, r3
  94 006a 1846     		mov	r0, r3
  95 006c FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* Write the Input block in the IN FIFO */
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   for(i=0; i<Ilen; i+=4)
  96              		.loc 1 116 0
  97 0070 4FF00003 		mov	r3, #0
  98 0074 FB66     		str	r3, [r7, #108]
  99 0076 0CE0     		b	.L2
 100              	.L3:
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   {
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     HASH_DataIn(*(uint32_t*)inputaddr);
 101              		.loc 1 118 0 discriminator 2
 102 0078 7B6E     		ldr	r3, [r7, #100]
 103 007a 1B68     		ldr	r3, [r3, #0]
 104 007c 1846     		mov	r0, r3
 105 007e FFF7FEFF 		bl	HASH_DataIn
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     inputaddr+=4;
 106              		.loc 1 119 0 discriminator 2
 107 0082 7B6E     		ldr	r3, [r7, #100]
 108 0084 03F10403 		add	r3, r3, #4
 109 0088 7B66     		str	r3, [r7, #100]
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   for(i=0; i<Ilen; i+=4)
 110              		.loc 1 116 0 discriminator 2
 111 008a FB6E     		ldr	r3, [r7, #108]
 112 008c 03F10403 		add	r3, r3, #4
 113 0090 FB66     		str	r3, [r7, #108]
 114              	.L2:
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   for(i=0; i<Ilen; i+=4)
 115              		.loc 1 116 0 is_stmt 0 discriminator 1
 116 0092 FA6E     		ldr	r2, [r7, #108]
 117 0094 BB68     		ldr	r3, [r7, #8]
 118 0096 9A42     		cmp	r2, r3
 119 0098 EED3     		bcc	.L3
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   }
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* Start the HASH processor */
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_StartDigest();
 120              		.loc 1 123 0 is_stmt 1
 121 009a FFF7FEFF 		bl	HASH_StartDigest
 122              	.L5:
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* wait until the Busy flag is RESET */
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   do
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   {
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 123              		.loc 1 128 0 discriminator 1
 124 009e 4FF00800 		mov	r0, #8
 125 00a2 FFF7FEFF 		bl	HASH_GetFlagStatus
 126 00a6 0346     		mov	r3, r0
 127 00a8 3B66     		str	r3, [r7, #96]
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     counter++;
 128              		.loc 1 129 0 discriminator 1
 129 00aa 3B69     		ldr	r3, [r7, #16]
 130 00ac 03F10103 		add	r3, r3, #1
 131 00b0 3B61     		str	r3, [r7, #16]
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 132              		.loc 1 130 0 discriminator 1
 133 00b2 3B69     		ldr	r3, [r7, #16]
 134 00b4 B3F5803F 		cmp	r3, #65536
 135 00b8 02D0     		beq	.L4
 136 00ba 3B6E     		ldr	r3, [r7, #96]
 137 00bc 002B     		cmp	r3, #0
 138 00be EED1     		bne	.L5
 139              	.L4:
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   if (busystatus != RESET)
 140              		.loc 1 132 0
 141 00c0 3B6E     		ldr	r3, [r7, #96]
 142 00c2 002B     		cmp	r3, #0
 143 00c4 04D0     		beq	.L6
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   {
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****      status = ERROR;
 144              		.loc 1 134 0
 145 00c6 4FF00003 		mov	r3, #0
 146 00ca 87F86B30 		strb	r3, [r7, #107]
 147 00ce 30E0     		b	.L7
 148              	.L6:
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   }
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   else
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   {
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     /* Read the message digest */
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     HASH_GetDigest(&MD5_MessageDigest);
 149              		.loc 1 139 0
 150 00d0 07F11803 		add	r3, r7, #24
 151 00d4 1846     		mov	r0, r3
 152 00d6 FFF7FEFF 		bl	HASH_GetDigest
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 153              		.loc 1 140 0
 154 00da FB6D     		ldr	r3, [r7, #92]
 155 00dc BA69     		ldr	r2, [r7, #24]
 156 00de BA65     		str	r2, [r7, #88]
 157              	.LBB18:
 158              	.LBB19:
 159              		.file 2 "libs/CMSIS/Include/core_cmInstr.h"
   1:libs/CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
   2:libs/CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:libs/CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:libs/CMSIS/Include/core_cmInstr.h ****  * @version  V2.10
   5:libs/CMSIS/Include/core_cmInstr.h ****  * @date     19. July 2011
   6:libs/CMSIS/Include/core_cmInstr.h ****  *
   7:libs/CMSIS/Include/core_cmInstr.h ****  * @note
   8:libs/CMSIS/Include/core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:libs/CMSIS/Include/core_cmInstr.h ****  *
  10:libs/CMSIS/Include/core_cmInstr.h ****  * @par
  11:libs/CMSIS/Include/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:libs/CMSIS/Include/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:libs/CMSIS/Include/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:libs/CMSIS/Include/core_cmInstr.h ****  *
  15:libs/CMSIS/Include/core_cmInstr.h ****  * @par
  16:libs/CMSIS/Include/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:libs/CMSIS/Include/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:libs/CMSIS/Include/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:libs/CMSIS/Include/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:libs/CMSIS/Include/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:libs/CMSIS/Include/core_cmInstr.h ****  *
  22:libs/CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  23:libs/CMSIS/Include/core_cmInstr.h **** 
  24:libs/CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:libs/CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:libs/CMSIS/Include/core_cmInstr.h **** 
  27:libs/CMSIS/Include/core_cmInstr.h **** 
  28:libs/CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:libs/CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:libs/CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
  31:libs/CMSIS/Include/core_cmInstr.h ****   @{
  32:libs/CMSIS/Include/core_cmInstr.h **** */
  33:libs/CMSIS/Include/core_cmInstr.h **** 
  34:libs/CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:libs/CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  36:libs/CMSIS/Include/core_cmInstr.h **** 
  37:libs/CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:libs/CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:libs/CMSIS/Include/core_cmInstr.h **** #endif
  40:libs/CMSIS/Include/core_cmInstr.h **** 
  41:libs/CMSIS/Include/core_cmInstr.h **** 
  42:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  43:libs/CMSIS/Include/core_cmInstr.h **** 
  44:libs/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:libs/CMSIS/Include/core_cmInstr.h ****  */
  46:libs/CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  47:libs/CMSIS/Include/core_cmInstr.h **** 
  48:libs/CMSIS/Include/core_cmInstr.h **** 
  49:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:libs/CMSIS/Include/core_cmInstr.h **** 
  51:libs/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:libs/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  53:libs/CMSIS/Include/core_cmInstr.h ****  */
  54:libs/CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  55:libs/CMSIS/Include/core_cmInstr.h **** 
  56:libs/CMSIS/Include/core_cmInstr.h **** 
  57:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  58:libs/CMSIS/Include/core_cmInstr.h **** 
  59:libs/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:libs/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:libs/CMSIS/Include/core_cmInstr.h ****  */
  62:libs/CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  63:libs/CMSIS/Include/core_cmInstr.h **** 
  64:libs/CMSIS/Include/core_cmInstr.h **** 
  65:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  66:libs/CMSIS/Include/core_cmInstr.h **** 
  67:libs/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:libs/CMSIS/Include/core_cmInstr.h ****  */
  69:libs/CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  70:libs/CMSIS/Include/core_cmInstr.h **** 
  71:libs/CMSIS/Include/core_cmInstr.h **** 
  72:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:libs/CMSIS/Include/core_cmInstr.h **** 
  74:libs/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:libs/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:libs/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:libs/CMSIS/Include/core_cmInstr.h ****  */
  78:libs/CMSIS/Include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:libs/CMSIS/Include/core_cmInstr.h **** 
  80:libs/CMSIS/Include/core_cmInstr.h **** 
  81:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:libs/CMSIS/Include/core_cmInstr.h **** 
  83:libs/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:libs/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:libs/CMSIS/Include/core_cmInstr.h ****  */
  86:libs/CMSIS/Include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:libs/CMSIS/Include/core_cmInstr.h **** 
  88:libs/CMSIS/Include/core_cmInstr.h **** 
  89:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:libs/CMSIS/Include/core_cmInstr.h **** 
  91:libs/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:libs/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:libs/CMSIS/Include/core_cmInstr.h ****  */
  94:libs/CMSIS/Include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:libs/CMSIS/Include/core_cmInstr.h **** 
  96:libs/CMSIS/Include/core_cmInstr.h **** 
  97:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:libs/CMSIS/Include/core_cmInstr.h **** 
  99:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:libs/CMSIS/Include/core_cmInstr.h **** 
 101:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 103:libs/CMSIS/Include/core_cmInstr.h ****  */
 104:libs/CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 105:libs/CMSIS/Include/core_cmInstr.h **** 
 106:libs/CMSIS/Include/core_cmInstr.h **** 
 107:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:libs/CMSIS/Include/core_cmInstr.h **** 
 109:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:libs/CMSIS/Include/core_cmInstr.h **** 
 111:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 113:libs/CMSIS/Include/core_cmInstr.h ****  */
 114:libs/CMSIS/Include/core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:libs/CMSIS/Include/core_cmInstr.h **** {
 116:libs/CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 117:libs/CMSIS/Include/core_cmInstr.h ****   bx lr
 118:libs/CMSIS/Include/core_cmInstr.h **** }
 119:libs/CMSIS/Include/core_cmInstr.h **** 
 120:libs/CMSIS/Include/core_cmInstr.h **** 
 121:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:libs/CMSIS/Include/core_cmInstr.h **** 
 123:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:libs/CMSIS/Include/core_cmInstr.h **** 
 125:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 127:libs/CMSIS/Include/core_cmInstr.h ****  */
 128:libs/CMSIS/Include/core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:libs/CMSIS/Include/core_cmInstr.h **** {
 130:libs/CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 131:libs/CMSIS/Include/core_cmInstr.h ****   bx lr
 132:libs/CMSIS/Include/core_cmInstr.h **** }
 133:libs/CMSIS/Include/core_cmInstr.h **** 
 134:libs/CMSIS/Include/core_cmInstr.h **** 
 135:libs/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:libs/CMSIS/Include/core_cmInstr.h **** 
 137:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:libs/CMSIS/Include/core_cmInstr.h **** 
 139:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:libs/CMSIS/Include/core_cmInstr.h **** 
 141:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 143:libs/CMSIS/Include/core_cmInstr.h ****  */
 144:libs/CMSIS/Include/core_cmInstr.h **** #define __RBIT                            __rbit
 145:libs/CMSIS/Include/core_cmInstr.h **** 
 146:libs/CMSIS/Include/core_cmInstr.h **** 
 147:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:libs/CMSIS/Include/core_cmInstr.h **** 
 149:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:libs/CMSIS/Include/core_cmInstr.h **** 
 151:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:libs/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:libs/CMSIS/Include/core_cmInstr.h ****  */
 154:libs/CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:libs/CMSIS/Include/core_cmInstr.h **** 
 156:libs/CMSIS/Include/core_cmInstr.h **** 
 157:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:libs/CMSIS/Include/core_cmInstr.h **** 
 159:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:libs/CMSIS/Include/core_cmInstr.h **** 
 161:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:libs/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:libs/CMSIS/Include/core_cmInstr.h ****  */
 164:libs/CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:libs/CMSIS/Include/core_cmInstr.h **** 
 166:libs/CMSIS/Include/core_cmInstr.h **** 
 167:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:libs/CMSIS/Include/core_cmInstr.h **** 
 169:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:libs/CMSIS/Include/core_cmInstr.h **** 
 171:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:libs/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:libs/CMSIS/Include/core_cmInstr.h ****  */
 174:libs/CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:libs/CMSIS/Include/core_cmInstr.h **** 
 176:libs/CMSIS/Include/core_cmInstr.h **** 
 177:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:libs/CMSIS/Include/core_cmInstr.h **** 
 179:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:libs/CMSIS/Include/core_cmInstr.h **** 
 181:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 182:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:libs/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 184:libs/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 185:libs/CMSIS/Include/core_cmInstr.h ****  */
 186:libs/CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:libs/CMSIS/Include/core_cmInstr.h **** 
 188:libs/CMSIS/Include/core_cmInstr.h **** 
 189:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:libs/CMSIS/Include/core_cmInstr.h **** 
 191:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:libs/CMSIS/Include/core_cmInstr.h **** 
 193:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 194:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:libs/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 196:libs/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 197:libs/CMSIS/Include/core_cmInstr.h ****  */
 198:libs/CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:libs/CMSIS/Include/core_cmInstr.h **** 
 200:libs/CMSIS/Include/core_cmInstr.h **** 
 201:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:libs/CMSIS/Include/core_cmInstr.h **** 
 203:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:libs/CMSIS/Include/core_cmInstr.h **** 
 205:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 206:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:libs/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 208:libs/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 209:libs/CMSIS/Include/core_cmInstr.h ****  */
 210:libs/CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:libs/CMSIS/Include/core_cmInstr.h **** 
 212:libs/CMSIS/Include/core_cmInstr.h **** 
 213:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:libs/CMSIS/Include/core_cmInstr.h **** 
 215:libs/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:libs/CMSIS/Include/core_cmInstr.h **** 
 217:libs/CMSIS/Include/core_cmInstr.h ****  */
 218:libs/CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 219:libs/CMSIS/Include/core_cmInstr.h **** 
 220:libs/CMSIS/Include/core_cmInstr.h **** 
 221:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 222:libs/CMSIS/Include/core_cmInstr.h **** 
 223:libs/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 224:libs/CMSIS/Include/core_cmInstr.h **** 
 225:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:libs/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 228:libs/CMSIS/Include/core_cmInstr.h ****  */
 229:libs/CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 230:libs/CMSIS/Include/core_cmInstr.h **** 
 231:libs/CMSIS/Include/core_cmInstr.h **** 
 232:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:libs/CMSIS/Include/core_cmInstr.h **** 
 234:libs/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 235:libs/CMSIS/Include/core_cmInstr.h **** 
 236:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:libs/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 239:libs/CMSIS/Include/core_cmInstr.h ****  */
 240:libs/CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 241:libs/CMSIS/Include/core_cmInstr.h **** 
 242:libs/CMSIS/Include/core_cmInstr.h **** 
 243:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 244:libs/CMSIS/Include/core_cmInstr.h **** 
 245:libs/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:libs/CMSIS/Include/core_cmInstr.h **** 
 247:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:libs/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 249:libs/CMSIS/Include/core_cmInstr.h ****  */
 250:libs/CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz 
 251:libs/CMSIS/Include/core_cmInstr.h **** 
 252:libs/CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:libs/CMSIS/Include/core_cmInstr.h **** 
 254:libs/CMSIS/Include/core_cmInstr.h **** 
 255:libs/CMSIS/Include/core_cmInstr.h **** 
 256:libs/CMSIS/Include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:libs/CMSIS/Include/core_cmInstr.h **** /* IAR iccarm specific functions */
 258:libs/CMSIS/Include/core_cmInstr.h **** 
 259:libs/CMSIS/Include/core_cmInstr.h **** #include <cmsis_iar.h>
 260:libs/CMSIS/Include/core_cmInstr.h **** 
 261:libs/CMSIS/Include/core_cmInstr.h **** 
 262:libs/CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:libs/CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
 264:libs/CMSIS/Include/core_cmInstr.h **** 
 265:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 266:libs/CMSIS/Include/core_cmInstr.h **** 
 267:libs/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:libs/CMSIS/Include/core_cmInstr.h ****  */
 269:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:libs/CMSIS/Include/core_cmInstr.h **** {
 271:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
 272:libs/CMSIS/Include/core_cmInstr.h **** }
 273:libs/CMSIS/Include/core_cmInstr.h **** 
 274:libs/CMSIS/Include/core_cmInstr.h **** 
 275:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:libs/CMSIS/Include/core_cmInstr.h **** 
 277:libs/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:libs/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 279:libs/CMSIS/Include/core_cmInstr.h ****  */
 280:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:libs/CMSIS/Include/core_cmInstr.h **** {
 282:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 283:libs/CMSIS/Include/core_cmInstr.h **** }
 284:libs/CMSIS/Include/core_cmInstr.h **** 
 285:libs/CMSIS/Include/core_cmInstr.h **** 
 286:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
 287:libs/CMSIS/Include/core_cmInstr.h **** 
 288:libs/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:libs/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:libs/CMSIS/Include/core_cmInstr.h ****  */
 291:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:libs/CMSIS/Include/core_cmInstr.h **** {
 293:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfe");
 294:libs/CMSIS/Include/core_cmInstr.h **** }
 295:libs/CMSIS/Include/core_cmInstr.h **** 
 296:libs/CMSIS/Include/core_cmInstr.h **** 
 297:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
 298:libs/CMSIS/Include/core_cmInstr.h **** 
 299:libs/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 300:libs/CMSIS/Include/core_cmInstr.h ****  */
 301:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __SEV(void)
 302:libs/CMSIS/Include/core_cmInstr.h **** {
 303:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("sev");
 304:libs/CMSIS/Include/core_cmInstr.h **** }
 305:libs/CMSIS/Include/core_cmInstr.h **** 
 306:libs/CMSIS/Include/core_cmInstr.h **** 
 307:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 308:libs/CMSIS/Include/core_cmInstr.h **** 
 309:libs/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
 310:libs/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
 311:libs/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
 312:libs/CMSIS/Include/core_cmInstr.h ****  */
 313:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __ISB(void)
 314:libs/CMSIS/Include/core_cmInstr.h **** {
 315:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("isb");
 316:libs/CMSIS/Include/core_cmInstr.h **** }
 317:libs/CMSIS/Include/core_cmInstr.h **** 
 318:libs/CMSIS/Include/core_cmInstr.h **** 
 319:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 320:libs/CMSIS/Include/core_cmInstr.h **** 
 321:libs/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
 322:libs/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 323:libs/CMSIS/Include/core_cmInstr.h ****  */
 324:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DSB(void)
 325:libs/CMSIS/Include/core_cmInstr.h **** {
 326:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dsb");
 327:libs/CMSIS/Include/core_cmInstr.h **** }
 328:libs/CMSIS/Include/core_cmInstr.h **** 
 329:libs/CMSIS/Include/core_cmInstr.h **** 
 330:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 331:libs/CMSIS/Include/core_cmInstr.h **** 
 332:libs/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
 333:libs/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 334:libs/CMSIS/Include/core_cmInstr.h ****  */
 335:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DMB(void)
 336:libs/CMSIS/Include/core_cmInstr.h **** {
 337:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dmb");
 338:libs/CMSIS/Include/core_cmInstr.h **** }
 339:libs/CMSIS/Include/core_cmInstr.h **** 
 340:libs/CMSIS/Include/core_cmInstr.h **** 
 341:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 342:libs/CMSIS/Include/core_cmInstr.h **** 
 343:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 344:libs/CMSIS/Include/core_cmInstr.h **** 
 345:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 346:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 347:libs/CMSIS/Include/core_cmInstr.h ****  */
 348:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
 349:libs/CMSIS/Include/core_cmInstr.h **** {
 350:libs/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 351:libs/CMSIS/Include/core_cmInstr.h ****   
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 160              		.loc 2 352 0
 161 00e0 BA6D     		ldr	r2, [r7, #88]
 162              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 163 00e2 14BA     		rev r4, r2
 164              	@ 0 "" 2
 165              		.thumb
 166 00e4 7C65     		str	r4, [r7, #84]
 353:libs/CMSIS/Include/core_cmInstr.h ****   return(result);
 167              		.loc 2 353 0
 168 00e6 7A6D     		ldr	r2, [r7, #84]
 169              	.LBE19:
 170              	.LBE18:
 171              		.loc 1 140 0
 172 00e8 1A60     		str	r2, [r3, #0]
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 173              		.loc 1 141 0
 174 00ea FB6D     		ldr	r3, [r7, #92]
 175 00ec 03F10403 		add	r3, r3, #4
 176 00f0 FB65     		str	r3, [r7, #92]
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 177              		.loc 1 142 0
 178 00f2 FB6D     		ldr	r3, [r7, #92]
 179 00f4 FA69     		ldr	r2, [r7, #28]
 180 00f6 3A65     		str	r2, [r7, #80]
 181              	.LBB20:
 182              	.LBB21:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 183              		.loc 2 352 0
 184 00f8 3A6D     		ldr	r2, [r7, #80]
 185              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 186 00fa 14BA     		rev r4, r2
 187              	@ 0 "" 2
 188              		.thumb
 189 00fc FC64     		str	r4, [r7, #76]
 190              		.loc 2 353 0
 191 00fe FA6C     		ldr	r2, [r7, #76]
 192              	.LBE21:
 193              	.LBE20:
 194              		.loc 1 142 0
 195 0100 1A60     		str	r2, [r3, #0]
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 196              		.loc 1 143 0
 197 0102 FB6D     		ldr	r3, [r7, #92]
 198 0104 03F10403 		add	r3, r3, #4
 199 0108 FB65     		str	r3, [r7, #92]
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 200              		.loc 1 144 0
 201 010a FB6D     		ldr	r3, [r7, #92]
 202 010c 3A6A     		ldr	r2, [r7, #32]
 203 010e BA64     		str	r2, [r7, #72]
 204              	.LBB22:
 205              	.LBB23:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 206              		.loc 2 352 0
 207 0110 BA6C     		ldr	r2, [r7, #72]
 208              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 209 0112 14BA     		rev r4, r2
 210              	@ 0 "" 2
 211              		.thumb
 212 0114 7C64     		str	r4, [r7, #68]
 213              		.loc 2 353 0
 214 0116 7A6C     		ldr	r2, [r7, #68]
 215              	.LBE23:
 216              	.LBE22:
 217              		.loc 1 144 0
 218 0118 1A60     		str	r2, [r3, #0]
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 219              		.loc 1 145 0
 220 011a FB6D     		ldr	r3, [r7, #92]
 221 011c 03F10403 		add	r3, r3, #4
 222 0120 FB65     		str	r3, [r7, #92]
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 223              		.loc 1 146 0
 224 0122 FB6D     		ldr	r3, [r7, #92]
 225 0124 7A6A     		ldr	r2, [r7, #36]
 226 0126 3A64     		str	r2, [r7, #64]
 227              	.LBB24:
 228              	.LBB25:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 229              		.loc 2 352 0
 230 0128 3A6C     		ldr	r2, [r7, #64]
 231              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 232 012a 14BA     		rev r4, r2
 233              	@ 0 "" 2
 234              		.thumb
 235 012c FC63     		str	r4, [r7, #60]
 236              		.loc 2 353 0
 237 012e FA6B     		ldr	r2, [r7, #60]
 238              	.LBE25:
 239              	.LBE24:
 240              		.loc 1 146 0
 241 0130 1A60     		str	r2, [r3, #0]
 242              	.L7:
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   }
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   return status; 
 243              		.loc 1 148 0
 244 0132 97F86B30 		ldrb	r3, [r7, #107]	@ zero_extendqisi2
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** }
 245              		.loc 1 149 0
 246 0136 1846     		mov	r0, r3
 247 0138 07F17407 		add	r7, r7, #116
 248 013c BD46     		mov	sp, r7
 249 013e 90BD     		pop	{r4, r7, pc}
 250              		.cfi_endproc
 251              	.LFE110:
 253              		.section	.text.HMAC_MD5,"ax",%progbits
 254              		.align	2
 255              		.global	HMAC_MD5
 256              		.thumb
 257              		.thumb_func
 259              	HMAC_MD5:
 260              	.LFB111:
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** /**
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @brief  Compute the HMAC MD5 digest.
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @param  Key: pointer to the Key used for HMAC.
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @param  Keylen: length of the Key used for HMAC.
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @param  Input: pointer to the Input buffer to be treated.
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @param  Ilen: length of the Input buffer.
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @param  Output: the returned digest  
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   * @retval An ErrorStatus enumeration value:
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          - SUCCESS: digest computation done
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   *          - ERROR: digest computation failed
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   */
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****                      uint32_t Ilen, uint8_t Output[16])
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** {
 261              		.loc 1 164 0
 262              		.cfi_startproc
 263              		@ args = 4, pretend = 0, frame = 120
 264              		@ frame_needed = 1, uses_anonymous_args = 0
 265 0000 90B5     		push	{r4, r7, lr}
 266              	.LCFI3:
 267              		.cfi_def_cfa_offset 12
 268              		.cfi_offset 14, -4
 269              		.cfi_offset 7, -8
 270              		.cfi_offset 4, -12
 271 0002 9FB0     		sub	sp, sp, #124
 272              	.LCFI4:
 273              		.cfi_def_cfa_offset 136
 274 0004 00AF     		add	r7, sp, #0
 275              	.LCFI5:
 276              		.cfi_def_cfa_register 7
 277 0006 F860     		str	r0, [r7, #12]
 278 0008 B960     		str	r1, [r7, #8]
 279 000a 7A60     		str	r2, [r7, #4]
 280 000c 3B60     		str	r3, [r7, #0]
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_InitTypeDef MD5_HASH_InitStructure;
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_MsgDigest MD5_MessageDigest;
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   __IO uint16_t nbvalidbitsdata = 0;
 281              		.loc 1 167 0
 282 000e 4FF00003 		mov	r3, #0
 283 0012 7B83     		strh	r3, [r7, #26]	@ movhi
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   __IO uint16_t nbvalidbitskey = 0;
 284              		.loc 1 168 0
 285 0014 4FF00003 		mov	r3, #0
 286 0018 3B83     		strh	r3, [r7, #24]	@ movhi
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   uint32_t i = 0;
 287              		.loc 1 169 0
 288 001a 4FF00003 		mov	r3, #0
 289 001e 7B67     		str	r3, [r7, #116]
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   __IO uint32_t counter = 0;
 290              		.loc 1 170 0
 291 0020 4FF00003 		mov	r3, #0
 292 0024 7B61     		str	r3, [r7, #20]
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   uint32_t busystatus = 0;
 293              		.loc 1 171 0
 294 0026 4FF00003 		mov	r3, #0
 295 002a 7B66     		str	r3, [r7, #100]
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   ErrorStatus status = SUCCESS;
 296              		.loc 1 172 0
 297 002c 4FF00103 		mov	r3, #1
 298 0030 87F87330 		strb	r3, [r7, #115]
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   uint32_t keyaddr    = (uint32_t)Key;
 299              		.loc 1 173 0
 300 0034 FB68     		ldr	r3, [r7, #12]
 301 0036 FB66     		str	r3, [r7, #108]
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   uint32_t inputaddr  = (uint32_t)Input;
 302              		.loc 1 174 0
 303 0038 7B68     		ldr	r3, [r7, #4]
 304 003a BB66     		str	r3, [r7, #104]
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   uint32_t outputaddr = (uint32_t)Output;
 305              		.loc 1 175 0
 306 003c D7F88830 		ldr	r3, [r7, #136]
 307 0040 3B66     		str	r3, [r7, #96]
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* Number of valid bits in last word of the Input data */
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
 308              		.loc 1 178 0
 309 0042 3B68     		ldr	r3, [r7, #0]
 310 0044 9BB2     		uxth	r3, r3
 311 0046 03F00303 		and	r3, r3, #3
 312 004a 9BB2     		uxth	r3, r3
 313 004c 4FEAC303 		lsl	r3, r3, #3
 314 0050 9BB2     		uxth	r3, r3
 315 0052 7B83     		strh	r3, [r7, #26]	@ movhi
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* Number of valid bits in last word of the Key */
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   nbvalidbitskey = 8 * (Keylen % 4);
 316              		.loc 1 181 0
 317 0054 BB68     		ldr	r3, [r7, #8]
 318 0056 9BB2     		uxth	r3, r3
 319 0058 03F00303 		and	r3, r3, #3
 320 005c 9BB2     		uxth	r3, r3
 321 005e 4FEAC303 		lsl	r3, r3, #3
 322 0062 9BB2     		uxth	r3, r3
 323 0064 3B83     		strh	r3, [r7, #24]	@ movhi
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****    
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* HASH peripheral initialization */
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_DeInit();
 324              		.loc 1 184 0
 325 0066 FFF7FEFF 		bl	HASH_DeInit
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* HASH Configuration */
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 326              		.loc 1 187 0
 327 006a 4FF08003 		mov	r3, #128
 328 006e 3B63     		str	r3, [r7, #48]
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 329              		.loc 1 188 0
 330 0070 4FF04003 		mov	r3, #64
 331 0074 7B63     		str	r3, [r7, #52]
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 332              		.loc 1 189 0
 333 0076 4FF02003 		mov	r3, #32
 334 007a BB63     		str	r3, [r7, #56]
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   if(Keylen > 64)
 335              		.loc 1 190 0
 336 007c BB68     		ldr	r3, [r7, #8]
 337 007e 402B     		cmp	r3, #64
 338 0080 03D9     		bls	.L9
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   {
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     /* HMAC long Key */
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 339              		.loc 1 193 0
 340 0082 4FF48033 		mov	r3, #65536
 341 0086 FB63     		str	r3, [r7, #60]
 342 0088 02E0     		b	.L10
 343              	.L9:
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   }
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   else
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   {
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     /* HMAC short Key */
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 344              		.loc 1 198 0
 345 008a 4FF00003 		mov	r3, #0
 346 008e FB63     		str	r3, [r7, #60]
 347              	.L10:
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   }
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_Init(&MD5_HASH_InitStructure);
 348              		.loc 1 200 0
 349 0090 07F13003 		add	r3, r7, #48
 350 0094 1846     		mov	r0, r3
 351 0096 FFF7FEFF 		bl	HASH_Init
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* Configure the number of valid bits in last word of the Key */
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 352              		.loc 1 203 0
 353 009a 3B8B     		ldrh	r3, [r7, #24]	@ movhi
 354 009c 9BB2     		uxth	r3, r3
 355 009e 1846     		mov	r0, r3
 356 00a0 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* Write the Key */
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   for(i=0; i<Keylen; i+=4)
 357              		.loc 1 206 0
 358 00a4 4FF00003 		mov	r3, #0
 359 00a8 7B67     		str	r3, [r7, #116]
 360 00aa 0CE0     		b	.L11
 361              	.L12:
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   {
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     HASH_DataIn(*(uint32_t*)keyaddr);
 362              		.loc 1 208 0 discriminator 2
 363 00ac FB6E     		ldr	r3, [r7, #108]
 364 00ae 1B68     		ldr	r3, [r3, #0]
 365 00b0 1846     		mov	r0, r3
 366 00b2 FFF7FEFF 		bl	HASH_DataIn
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     keyaddr+=4;
 367              		.loc 1 209 0 discriminator 2
 368 00b6 FB6E     		ldr	r3, [r7, #108]
 369 00b8 03F10403 		add	r3, r3, #4
 370 00bc FB66     		str	r3, [r7, #108]
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   for(i=0; i<Keylen; i+=4)
 371              		.loc 1 206 0 discriminator 2
 372 00be 7B6F     		ldr	r3, [r7, #116]
 373 00c0 03F10403 		add	r3, r3, #4
 374 00c4 7B67     		str	r3, [r7, #116]
 375              	.L11:
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   for(i=0; i<Keylen; i+=4)
 376              		.loc 1 206 0 is_stmt 0 discriminator 1
 377 00c6 7A6F     		ldr	r2, [r7, #116]
 378 00c8 BB68     		ldr	r3, [r7, #8]
 379 00ca 9A42     		cmp	r2, r3
 380 00cc EED3     		bcc	.L12
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   }
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* Start the HASH processor */
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   HASH_StartDigest();
 381              		.loc 1 213 0 is_stmt 1
 382 00ce FFF7FEFF 		bl	HASH_StartDigest
 383              	.L14:
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   /* wait until the Busy flag is RESET */
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   do
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   {
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 384              		.loc 1 218 0 discriminator 1
 385 00d2 4FF00800 		mov	r0, #8
 386 00d6 FFF7FEFF 		bl	HASH_GetFlagStatus
 387 00da 0346     		mov	r3, r0
 388 00dc 7B66     		str	r3, [r7, #100]
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     counter++;
 389              		.loc 1 219 0 discriminator 1
 390 00de 7B69     		ldr	r3, [r7, #20]
 391 00e0 03F10103 		add	r3, r3, #1
 392 00e4 7B61     		str	r3, [r7, #20]
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 393              		.loc 1 220 0 discriminator 1
 394 00e6 7B69     		ldr	r3, [r7, #20]
 395 00e8 B3F5803F 		cmp	r3, #65536
 396 00ec 02D0     		beq	.L13
 397 00ee 7B6E     		ldr	r3, [r7, #100]
 398 00f0 002B     		cmp	r3, #0
 399 00f2 EED1     		bne	.L14
 400              	.L13:
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   if (busystatus != RESET)
 401              		.loc 1 222 0
 402 00f4 7B6E     		ldr	r3, [r7, #100]
 403 00f6 002B     		cmp	r3, #0
 404 00f8 04D0     		beq	.L15
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   {
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****      status = ERROR;
 405              		.loc 1 224 0
 406 00fa 4FF00003 		mov	r3, #0
 407 00fe 87F87330 		strb	r3, [r7, #115]
 408 0102 A2E0     		b	.L16
 409              	.L15:
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   }
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   else
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   {
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     /* Configure the number of valid bits in last word of the Input data */
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 410              		.loc 1 229 0
 411 0104 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 412 0106 9BB2     		uxth	r3, r3
 413 0108 1846     		mov	r0, r3
 414 010a FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     /* Write the Input block in the IN FIFO */
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     for(i=0; i<Ilen; i+=4)
 415              		.loc 1 232 0
 416 010e 4FF00003 		mov	r3, #0
 417 0112 7B67     		str	r3, [r7, #116]
 418 0114 0CE0     		b	.L17
 419              	.L18:
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     {
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       HASH_DataIn(*(uint32_t*)inputaddr);
 420              		.loc 1 234 0 discriminator 2
 421 0116 BB6E     		ldr	r3, [r7, #104]
 422 0118 1B68     		ldr	r3, [r3, #0]
 423 011a 1846     		mov	r0, r3
 424 011c FFF7FEFF 		bl	HASH_DataIn
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       inputaddr+=4;
 425              		.loc 1 235 0 discriminator 2
 426 0120 BB6E     		ldr	r3, [r7, #104]
 427 0122 03F10403 		add	r3, r3, #4
 428 0126 BB66     		str	r3, [r7, #104]
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     for(i=0; i<Ilen; i+=4)
 429              		.loc 1 232 0 discriminator 2
 430 0128 7B6F     		ldr	r3, [r7, #116]
 431 012a 03F10403 		add	r3, r3, #4
 432 012e 7B67     		str	r3, [r7, #116]
 433              	.L17:
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     for(i=0; i<Ilen; i+=4)
 434              		.loc 1 232 0 is_stmt 0 discriminator 1
 435 0130 7A6F     		ldr	r2, [r7, #116]
 436 0132 3B68     		ldr	r3, [r7, #0]
 437 0134 9A42     		cmp	r2, r3
 438 0136 EED3     		bcc	.L18
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     }
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     /* Start the HASH processor */
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     HASH_StartDigest();
 439              		.loc 1 239 0 is_stmt 1
 440 0138 FFF7FEFF 		bl	HASH_StartDigest
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     /* wait until the Busy flag is RESET */
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     counter =0;
 441              		.loc 1 242 0
 442 013c 4FF00003 		mov	r3, #0
 443 0140 7B61     		str	r3, [r7, #20]
 444              	.L20:
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     do
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     {
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 445              		.loc 1 245 0 discriminator 1
 446 0142 4FF00800 		mov	r0, #8
 447 0146 FFF7FEFF 		bl	HASH_GetFlagStatus
 448 014a 0346     		mov	r3, r0
 449 014c 7B66     		str	r3, [r7, #100]
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****        counter++;
 450              		.loc 1 246 0 discriminator 1
 451 014e 7B69     		ldr	r3, [r7, #20]
 452 0150 03F10103 		add	r3, r3, #1
 453 0154 7B61     		str	r3, [r7, #20]
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 454              		.loc 1 247 0 discriminator 1
 455 0156 7B69     		ldr	r3, [r7, #20]
 456 0158 B3F5803F 		cmp	r3, #65536
 457 015c 02D0     		beq	.L19
 458 015e 7B6E     		ldr	r3, [r7, #100]
 459 0160 002B     		cmp	r3, #0
 460 0162 EED1     		bne	.L20
 461              	.L19:
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     if (busystatus != RESET)
 462              		.loc 1 249 0
 463 0164 7B6E     		ldr	r3, [r7, #100]
 464 0166 002B     		cmp	r3, #0
 465 0168 04D0     		beq	.L21
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     {
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       status = ERROR;
 466              		.loc 1 251 0
 467 016a 4FF00003 		mov	r3, #0
 468 016e 87F87330 		strb	r3, [r7, #115]
 469 0172 6AE0     		b	.L16
 470              	.L21:
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     }
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     else
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     {  
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       /* Configure the number of valid bits in last word of the Key */
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 471              		.loc 1 256 0
 472 0174 3B8B     		ldrh	r3, [r7, #24]	@ movhi
 473 0176 9BB2     		uxth	r3, r3
 474 0178 1846     		mov	r0, r3
 475 017a FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       /* Write the Key */
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       keyaddr = (uint32_t)Key;
 476              		.loc 1 259 0
 477 017e FB68     		ldr	r3, [r7, #12]
 478 0180 FB66     		str	r3, [r7, #108]
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       for(i=0; i<Keylen; i+=4)
 479              		.loc 1 260 0
 480 0182 4FF00003 		mov	r3, #0
 481 0186 7B67     		str	r3, [r7, #116]
 482 0188 0CE0     		b	.L22
 483              	.L23:
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       {
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****         HASH_DataIn(*(uint32_t*)keyaddr);
 484              		.loc 1 262 0 discriminator 2
 485 018a FB6E     		ldr	r3, [r7, #108]
 486 018c 1B68     		ldr	r3, [r3, #0]
 487 018e 1846     		mov	r0, r3
 488 0190 FFF7FEFF 		bl	HASH_DataIn
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****         keyaddr+=4;
 489              		.loc 1 263 0 discriminator 2
 490 0194 FB6E     		ldr	r3, [r7, #108]
 491 0196 03F10403 		add	r3, r3, #4
 492 019a FB66     		str	r3, [r7, #108]
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       for(i=0; i<Keylen; i+=4)
 493              		.loc 1 260 0 discriminator 2
 494 019c 7B6F     		ldr	r3, [r7, #116]
 495 019e 03F10403 		add	r3, r3, #4
 496 01a2 7B67     		str	r3, [r7, #116]
 497              	.L22:
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       for(i=0; i<Keylen; i+=4)
 498              		.loc 1 260 0 is_stmt 0 discriminator 1
 499 01a4 7A6F     		ldr	r2, [r7, #116]
 500 01a6 BB68     		ldr	r3, [r7, #8]
 501 01a8 9A42     		cmp	r2, r3
 502 01aa EED3     		bcc	.L23
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       }
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****        /* Start the HASH processor */
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****        HASH_StartDigest();
 503              		.loc 1 267 0 is_stmt 1
 504 01ac FFF7FEFF 		bl	HASH_StartDigest
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****        /* wait until the Busy flag is RESET */
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****        counter =0;
 505              		.loc 1 270 0
 506 01b0 4FF00003 		mov	r3, #0
 507 01b4 7B61     		str	r3, [r7, #20]
 508              	.L25:
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****        do
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****        {
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****           busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 509              		.loc 1 273 0 discriminator 1
 510 01b6 4FF00800 		mov	r0, #8
 511 01ba FFF7FEFF 		bl	HASH_GetFlagStatus
 512 01be 0346     		mov	r3, r0
 513 01c0 7B66     		str	r3, [r7, #100]
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****           counter++;
 514              		.loc 1 274 0 discriminator 1
 515 01c2 7B69     		ldr	r3, [r7, #20]
 516 01c4 03F10103 		add	r3, r3, #1
 517 01c8 7B61     		str	r3, [r7, #20]
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 518              		.loc 1 275 0 discriminator 1
 519 01ca 7B69     		ldr	r3, [r7, #20]
 520 01cc B3F5803F 		cmp	r3, #65536
 521 01d0 02D0     		beq	.L24
 522 01d2 7B6E     		ldr	r3, [r7, #100]
 523 01d4 002B     		cmp	r3, #0
 524 01d6 EED1     		bne	.L25
 525              	.L24:
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** 
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       if (busystatus != RESET)
 526              		.loc 1 277 0
 527 01d8 7B6E     		ldr	r3, [r7, #100]
 528 01da 002B     		cmp	r3, #0
 529 01dc 04D0     		beq	.L26
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       {
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****          status = ERROR;
 530              		.loc 1 279 0
 531 01de 4FF00003 		mov	r3, #0
 532 01e2 87F87330 		strb	r3, [r7, #115]
 533 01e6 30E0     		b	.L16
 534              	.L26:
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       }
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       else
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       {
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****          /* Read the message digest */
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****          HASH_GetDigest(&MD5_MessageDigest);
 535              		.loc 1 284 0
 536 01e8 07F11C03 		add	r3, r7, #28
 537 01ec 1846     		mov	r0, r3
 538 01ee FFF7FEFF 		bl	HASH_GetDigest
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 539              		.loc 1 285 0
 540 01f2 3B6E     		ldr	r3, [r7, #96]
 541 01f4 FA69     		ldr	r2, [r7, #28]
 542 01f6 FA65     		str	r2, [r7, #92]
 543              	.LBB26:
 544              	.LBB27:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 545              		.loc 2 352 0
 546 01f8 FA6D     		ldr	r2, [r7, #92]
 547              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 548 01fa 14BA     		rev r4, r2
 549              	@ 0 "" 2
 550              		.thumb
 551 01fc BC65     		str	r4, [r7, #88]
 552              		.loc 2 353 0
 553 01fe BA6D     		ldr	r2, [r7, #88]
 554              	.LBE27:
 555              	.LBE26:
 556              		.loc 1 285 0
 557 0200 1A60     		str	r2, [r3, #0]
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 558              		.loc 1 286 0
 559 0202 3B6E     		ldr	r3, [r7, #96]
 560 0204 03F10403 		add	r3, r3, #4
 561 0208 3B66     		str	r3, [r7, #96]
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 562              		.loc 1 287 0
 563 020a 3B6E     		ldr	r3, [r7, #96]
 564 020c 3A6A     		ldr	r2, [r7, #32]
 565 020e 7A65     		str	r2, [r7, #84]
 566              	.LBB28:
 567              	.LBB29:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 568              		.loc 2 352 0
 569 0210 7A6D     		ldr	r2, [r7, #84]
 570              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 571 0212 14BA     		rev r4, r2
 572              	@ 0 "" 2
 573              		.thumb
 574 0214 3C65     		str	r4, [r7, #80]
 575              		.loc 2 353 0
 576 0216 3A6D     		ldr	r2, [r7, #80]
 577              	.LBE29:
 578              	.LBE28:
 579              		.loc 1 287 0
 580 0218 1A60     		str	r2, [r3, #0]
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 581              		.loc 1 288 0
 582 021a 3B6E     		ldr	r3, [r7, #96]
 583 021c 03F10403 		add	r3, r3, #4
 584 0220 3B66     		str	r3, [r7, #96]
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 585              		.loc 1 289 0
 586 0222 3B6E     		ldr	r3, [r7, #96]
 587 0224 7A6A     		ldr	r2, [r7, #36]
 588 0226 FA64     		str	r2, [r7, #76]
 589              	.LBB30:
 590              	.LBB31:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 591              		.loc 2 352 0
 592 0228 FA6C     		ldr	r2, [r7, #76]
 593              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 594 022a 14BA     		rev r4, r2
 595              	@ 0 "" 2
 596              		.thumb
 597 022c BC64     		str	r4, [r7, #72]
 598              		.loc 2 353 0
 599 022e BA6C     		ldr	r2, [r7, #72]
 600              	.LBE31:
 601              	.LBE30:
 602              		.loc 1 289 0
 603 0230 1A60     		str	r2, [r3, #0]
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 604              		.loc 1 290 0
 605 0232 3B6E     		ldr	r3, [r7, #96]
 606 0234 03F10403 		add	r3, r3, #4
 607 0238 3B66     		str	r3, [r7, #96]
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 608              		.loc 1 291 0
 609 023a 3B6E     		ldr	r3, [r7, #96]
 610 023c BA6A     		ldr	r2, [r7, #40]
 611 023e 7A64     		str	r2, [r7, #68]
 612              	.LBB32:
 613              	.LBB33:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 614              		.loc 2 352 0
 615 0240 7A6C     		ldr	r2, [r7, #68]
 616              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 617 0242 14BA     		rev r4, r2
 618              	@ 0 "" 2
 619              		.thumb
 620 0244 3C64     		str	r4, [r7, #64]
 621              		.loc 2 353 0
 622 0246 3A6C     		ldr	r2, [r7, #64]
 623              	.LBE33:
 624              	.LBE32:
 625              		.loc 1 291 0
 626 0248 1A60     		str	r2, [r3, #0]
 627              	.L16:
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****       }
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****     }
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   }
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c ****   return status;  
 628              		.loc 1 295 0
 629 024a 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c **** }
 630              		.loc 1 296 0
 631 024e 1846     		mov	r0, r3
 632 0250 07F17C07 		add	r7, r7, #124
 633 0254 BD46     		mov	sp, r7
 634 0256 90BD     		pop	{r4, r7, pc}
 635              		.cfi_endproc
 636              	.LFE111:
 638              		.text
 639              	.Letext0:
 640              		.file 3 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/i
 641              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 642              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_hash.h"
 643              		.file 6 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_hash_md5.c
     /tmp/ccDPwXkO.s:20     .text.HASH_MD5:00000000 $t
     /tmp/ccDPwXkO.s:25     .text.HASH_MD5:00000000 HASH_MD5
     /tmp/ccDPwXkO.s:254    .text.HMAC_MD5:00000000 $t
     /tmp/ccDPwXkO.s:259    .text.HMAC_MD5:00000000 HMAC_MD5
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HASH_DeInit
HASH_Init
HASH_SetLastWordValidBitsNbr
HASH_DataIn
HASH_StartDigest
HASH_GetFlagStatus
HASH_GetDigest
