   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_adc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.ADC_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	ADC_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	ADC_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @file    stm32f4xx_adc.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Initialization and Configuration (in addition to ADC multi mode 
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             selection)
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Analog Watchdog configuration
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Temperature Sensor & Vrefint (Voltage Reference internal) & VBAT
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             management 
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels Configuration
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels DMA Configuration
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Injected channels Configuration
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Interrupts and flags management
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @verbatim
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                   How to use this driver
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          1.  Enable the ADC interface clock using 
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADCx, ENABLE); 
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *     
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          2. ADC pins configuration
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *               - Enable the clock for the ADC GPIOs using the following function:
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                - Configure these ADC pins in analog mode using GPIO_Init();  
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          3. Configure the ADC Prescaler, conversion resolution and data 
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              alignment using the ADC_Init() function.
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          4. Activate the ADC peripheral using ADC_Cmd() function.
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Regular channels group configuration
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================    
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC regular channels group features, use 
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_Init() and ADC_RegularChannelConfig() functions.
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configurate and activate the Discontinuous mode, use the 
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_DiscModeChannelCountConfig() and ADC_DiscModeCmd() functions.
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetConversionValue()
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Multi mode ADCs Regular channels configuration
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===============================================
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Refer to "Regular channels group configuration" description to
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              configure the ADC1, ADC2 and ADC3 regular channels.        
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Select the Multi mode ADC regular channels features (dual or 
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              triple mode) using ADC_CommonInit() function and configure 
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              the DMA mode using ADC_MultiModeDMARequestAfterLastTransferCmd() 
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.        
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Read the ADCs converted values using the 
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_GetMultiModeConversionValue() function.
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          DMA for Regular channels group features configuration
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================================== 
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the DMA mode for regular channels group, use the 
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             ADC_DMACmd() function.
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the generation of DMA requests continuously at the end
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             of the last DMA transfer, use the ADC_DMARequestAfterLastTransferCmd() 
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             function.
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Injected channels group configuration
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          =====================================    
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC Injected channels group features, use 
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedChannelConfig() and  ADC_InjectedSequencerLengthConfig()
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the Injected Discontinuous mode, use the 
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedDiscModeCmd() function.  
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the AutoInjected mode, use the ADC_AutoInjectedConvCmd() 
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.        
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetInjectedConversionValue() 
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @endverbatim
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @attention
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************  
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Includes ------------------------------------------------------------------*/
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_adc.h"
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_rcc.h"
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC 
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief ADC driver modules
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private typedef -----------------------------------------------------------*/
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private define ------------------------------------------------------------*/ 
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC DISCNUM mask */
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_DISCNUM_RESET         ((uint32_t)0xFFFF1FFF)
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC AWDCH mask */
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDCH_RESET           ((uint32_t)0xFFFFFFE0)   
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC Analog watchdog enable mode mask */
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDMode_RESET         ((uint32_t)0xFF3FFDFF)   
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR1 register Mask */
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_CLEAR_MASK            ((uint32_t)0xFCFFFEFF)
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC EXTEN mask */
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_EXTEN_RESET           ((uint32_t)0xCFFFFFFF)  
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTEN mask */
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTEN_RESET          ((uint32_t)0xFFCFFFFF)  
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTSEL mask */
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTSEL_RESET         ((uint32_t)0xFFF0FFFF)  
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR2 register Mask */
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_CLEAR_MASK            ((uint32_t)0xC0FFF7FD)
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SQx mask */
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR3_SQ_SET               ((uint32_t)0x0000001F)  
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR2_SQ_SET               ((uint32_t)0x0000001F)  
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_SQ_SET               ((uint32_t)0x0000001F)  
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC L Mask */
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_L_RESET              ((uint32_t)0xFF0FFFFF) 
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JSQx mask */
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JSQ_SET              ((uint32_t)0x0000001F) 
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JL mask */
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_SET               ((uint32_t)0x00300000) 
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_RESET             ((uint32_t)0xFFCFFFFF) 
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SMPx mask */
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR1_SMP_SET             ((uint32_t)0x00000007)  
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR2_SMP_SET             ((uint32_t)0x00000007) 
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JDRx registers offset */
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JDR_OFFSET                ((uint8_t)0x28) 
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CDR register base address */
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CDR_ADDRESS               ((uint32_t)0x40012308)   
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CCR register Mask */
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR_CLEAR_MASK             ((uint32_t)0xFFFC30E0)  
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private macro -------------------------------------------------------------*/
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private variables ---------------------------------------------------------*/
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private function prototypes -----------------------------------------------*/
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private functions ---------------------------------------------------------*/
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Private_Functions
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group1 Initialization and Configuration functions
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Initialization and Configuration functions 
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim    
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       Initialization and Configuration functions
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to:
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Initialize and configure the ADC Prescaler
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Conversion Resolution (12bit..6bit)
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Scan Conversion Mode (multichannels or one channel) for regular group
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Continuous Conversion Mode (Continuous or Single conversion) for 
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular group
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - External trigger Edge and source of regular group, 
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Converted data alignment (left or right)
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - The number of ADC conversions that will be done using the sequencer for 
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel group
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Multi ADC mode selection
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Direct memory access mode selection for multi ADC mode  
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Delay between 2 sampling phases (used in dual or triple interleaved modes)
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Enable or disable the ADC peripheral
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Deinitializes all ADCs peripherals registers to their default reset 
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         values.
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DeInit(void)
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
  28              		.loc 1 207 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 14, -4
  36              		.cfi_offset 7, -8
  37 0002 00AF     		add	r7, sp, #0
  38              	.LCFI1:
  39              		.cfi_def_cfa_register 7
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable all ADCs reset state */
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
  40              		.loc 1 209 0
  41 0004 4FF48070 		mov	r0, #256
  42 0008 4FF00101 		mov	r1, #1
  43 000c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Release all ADCs from reset state */
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
  44              		.loc 1 212 0
  45 0010 4FF48070 		mov	r0, #256
  46 0014 4FF00001 		mov	r1, #0
  47 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
  48              		.loc 1 213 0
  49 001c 80BD     		pop	{r7, pc}
  50              		.cfi_endproc
  51              	.LFE110:
  53 001e 00BF     		.section	.text.ADC_Init,"ax",%progbits
  54              		.align	2
  55              		.global	ADC_Init
  56              		.thumb
  57              		.thumb_func
  59              	ADC_Init:
  60              	.LFB111:
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_InitStruct.
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         the configuration information for the specified ADC peripheral.
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
  61              		.loc 1 229 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 16
  64              		@ frame_needed = 1, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66 0000 80B4     		push	{r7}
  67              	.LCFI2:
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 85B0     		sub	sp, sp, #20
  71              	.LCFI3:
  72              		.cfi_def_cfa_offset 24
  73 0004 00AF     		add	r7, sp, #0
  74              	.LCFI4:
  75              		.cfi_def_cfa_register 7
  76 0006 7860     		str	r0, [r7, #4]
  77 0008 3960     		str	r1, [r7, #0]
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
  78              		.loc 1 230 0
  79 000a 4FF00003 		mov	r3, #0
  80 000e FB60     		str	r3, [r7, #12]
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t tmpreg2 = 0;
  81              		.loc 1 231 0
  82 0010 4FF00003 		mov	r3, #0
  83 0014 FB72     		strb	r3, [r7, #11]
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_RESOLUTION(ADC_InitStruct->ADC_Resolution)); 
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode)); 
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(ADC_InitStruct->ADC_ExternalTrigConvEdge)); 
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));    
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR1 value */
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
  84              		.loc 1 244 0
  85 0016 7B68     		ldr	r3, [r7, #4]
  86 0018 5B68     		ldr	r3, [r3, #4]
  87 001a FB60     		str	r3, [r7, #12]
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear RES and SCAN bits */
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
  88              		.loc 1 247 0
  89 001c FB68     		ldr	r3, [r7, #12]
  90 001e 23F04073 		bic	r3, r3, #50331648
  91 0022 23F48073 		bic	r3, r3, #256
  92 0026 FB60     		str	r3, [r7, #12]
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: scan conversion mode and resolution */
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set RES bit according to ADC_Resolution value */ 
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
  93              		.loc 1 252 0
  94 0028 3B68     		ldr	r3, [r7, #0]
  95 002a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
  96 002c 4FEA0322 		lsl	r2, r3, #8
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
  97              		.loc 1 253 0
  98 0030 3B68     		ldr	r3, [r7, #0]
  99 0032 1B68     		ldr	r3, [r3, #0]
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 100              		.loc 1 252 0
 101 0034 1343     		orrs	r3, r3, r2
 102 0036 FA68     		ldr	r2, [r7, #12]
 103 0038 1343     		orrs	r3, r3, r2
 104 003a FB60     		str	r3, [r7, #12]
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR1 */
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 105              		.loc 1 255 0
 106 003c 7B68     		ldr	r3, [r7, #4]
 107 003e FA68     		ldr	r2, [r7, #12]
 108 0040 5A60     		str	r2, [r3, #4]
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR2 value */
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR2;
 109              		.loc 1 258 0
 110 0042 7B68     		ldr	r3, [r7, #4]
 111 0044 9B68     		ldr	r3, [r3, #8]
 112 0046 FB60     		str	r3, [r7, #12]
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
 113              		.loc 1 261 0
 114 0048 FA68     		ldr	r2, [r7, #12]
 115 004a 4FF2FD73 		movw	r3, #63485
 116 004e CCF2FF03 		movt	r3, 49407
 117 0052 1340     		ands	r3, r3, r2
 118 0054 FB60     		str	r3, [r7, #12]
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: external trigger event and edge, data alignment and 
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      continuous conversion mode */
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 119              		.loc 1 269 0
 120 0056 3B68     		ldr	r3, [r7, #0]
 121 0058 1A69     		ldr	r2, [r3, #16]
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 122              		.loc 1 270 0
 123 005a 3B68     		ldr	r3, [r7, #0]
 124 005c DB68     		ldr	r3, [r3, #12]
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 125              		.loc 1 269 0
 126 005e 1A43     		orrs	r2, r2, r3
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 127              		.loc 1 271 0
 128 0060 3B68     		ldr	r3, [r7, #0]
 129 0062 9B68     		ldr	r3, [r3, #8]
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 130              		.loc 1 270 0
 131 0064 1A43     		orrs	r2, r2, r3
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 132              		.loc 1 272 0
 133 0066 3B68     		ldr	r3, [r7, #0]
 134 0068 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 135 006a 4FEA4303 		lsl	r3, r3, #1
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 136              		.loc 1 269 0
 137 006e 1343     		orrs	r3, r3, r2
 138 0070 FA68     		ldr	r2, [r7, #12]
 139 0072 1343     		orrs	r3, r3, r2
 140 0074 FB60     		str	r3, [r7, #12]
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR2 */
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg1;
 141              		.loc 1 275 0
 142 0076 7B68     		ldr	r3, [r7, #4]
 143 0078 FA68     		ldr	r2, [r7, #12]
 144 007a 9A60     		str	r2, [r3, #8]
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx SQR1 value */
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->SQR1;
 145              		.loc 1 278 0
 146 007c 7B68     		ldr	r3, [r7, #4]
 147 007e DB6A     		ldr	r3, [r3, #44]
 148 0080 FB60     		str	r3, [r7, #12]
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear L bits */
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 149              		.loc 1 281 0
 150 0082 FB68     		ldr	r3, [r7, #12]
 151 0084 23F47003 		bic	r3, r3, #15728640
 152 0088 FB60     		str	r3, [r7, #12]
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: regular channel sequence length */
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set L bits according to ADC_NbrOfConversion value */
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 153              		.loc 1 285 0
 154 008a 3B68     		ldr	r3, [r7, #0]
 155 008c 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 156 008e 03F1FF33 		add	r3, r3, #-1
 157 0092 DAB2     		uxtb	r2, r3
 158 0094 FB7A     		ldrb	r3, [r7, #11]
 159 0096 1343     		orrs	r3, r3, r2
 160 0098 FB72     		strb	r3, [r7, #11]
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 161              		.loc 1 286 0
 162 009a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 163 009c 4FEA0353 		lsl	r3, r3, #20
 164 00a0 FA68     		ldr	r2, [r7, #12]
 165 00a2 1343     		orrs	r3, r3, r2
 166 00a4 FB60     		str	r3, [r7, #12]
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx SQR1 */
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SQR1 = tmpreg1;
 167              		.loc 1 289 0
 168 00a6 7B68     		ldr	r3, [r7, #4]
 169 00a8 FA68     		ldr	r2, [r7, #12]
 170 00aa DA62     		str	r2, [r3, #44]
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 171              		.loc 1 290 0
 172 00ac 07F11407 		add	r7, r7, #20
 173 00b0 BD46     		mov	sp, r7
 174 00b2 80BC     		pop	{r7}
 175 00b4 7047     		bx	lr
 176              		.cfi_endproc
 177              	.LFE111:
 179 00b6 00BF     		.section	.text.ADC_StructInit,"ax",%progbits
 180              		.align	2
 181              		.global	ADC_StructInit
 182              		.thumb
 183              		.thumb_func
 185              	ADC_StructInit:
 186              	.LFB112:
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to initialize the global features of the ADC ( 
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         be initialized.
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 187              		.loc 1 304 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 8
 190              		@ frame_needed = 1, uses_anonymous_args = 0
 191              		@ link register save eliminated.
 192 0000 80B4     		push	{r7}
 193              	.LCFI5:
 194              		.cfi_def_cfa_offset 4
 195              		.cfi_offset 7, -4
 196 0002 83B0     		sub	sp, sp, #12
 197              	.LCFI6:
 198              		.cfi_def_cfa_offset 16
 199 0004 00AF     		add	r7, sp, #0
 200              	.LCFI7:
 201              		.cfi_def_cfa_register 7
 202 0006 7860     		str	r0, [r7, #4]
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 203              		.loc 1 306 0
 204 0008 7B68     		ldr	r3, [r7, #4]
 205 000a 4FF00002 		mov	r2, #0
 206 000e 1A60     		str	r2, [r3, #0]
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_ScanConvMode member */
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 207              		.loc 1 309 0
 208 0010 7B68     		ldr	r3, [r7, #4]
 209 0012 4FF00002 		mov	r2, #0
 210 0016 1A71     		strb	r2, [r3, #4]
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 211              		.loc 1 312 0
 212 0018 7B68     		ldr	r3, [r7, #4]
 213 001a 4FF00002 		mov	r2, #0
 214 001e 5A71     		strb	r2, [r3, #5]
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConvEdge member */
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 215              		.loc 1 315 0
 216 0020 7B68     		ldr	r3, [r7, #4]
 217 0022 4FF00002 		mov	r2, #0
 218 0026 9A60     		str	r2, [r3, #8]
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 219              		.loc 1 318 0
 220 0028 7B68     		ldr	r3, [r7, #4]
 221 002a 4FF00002 		mov	r2, #0
 222 002e DA60     		str	r2, [r3, #12]
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DataAlign member */
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 223              		.loc 1 321 0
 224 0030 7B68     		ldr	r3, [r7, #4]
 225 0032 4FF00002 		mov	r2, #0
 226 0036 1A61     		str	r2, [r3, #16]
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_NbrOfConversion member */
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_NbrOfConversion = 1;
 227              		.loc 1 324 0
 228 0038 7B68     		ldr	r3, [r7, #4]
 229 003a 4FF00102 		mov	r2, #1
 230 003e 1A75     		strb	r2, [r3, #20]
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 231              		.loc 1 325 0
 232 0040 07F10C07 		add	r7, r7, #12
 233 0044 BD46     		mov	sp, r7
 234 0046 80BC     		pop	{r7}
 235 0048 7047     		bx	lr
 236              		.cfi_endproc
 237              	.LFE112:
 239 004a 00BF     		.section	.text.ADC_CommonInit,"ax",%progbits
 240              		.align	2
 241              		.global	ADC_CommonInit
 242              		.thumb
 243              		.thumb_func
 245              	ADC_CommonInit:
 246              	.LFB113:
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCs peripherals according to the specified parameters 
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_CommonInitStruct.
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         that contains the configuration information for  All ADCs peripherals.
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 247              		.loc 1 335 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 16
 250              		@ frame_needed = 1, uses_anonymous_args = 0
 251              		@ link register save eliminated.
 252 0000 80B4     		push	{r7}
 253              	.LCFI8:
 254              		.cfi_def_cfa_offset 4
 255              		.cfi_offset 7, -4
 256 0002 85B0     		sub	sp, sp, #20
 257              	.LCFI9:
 258              		.cfi_def_cfa_offset 24
 259 0004 00AF     		add	r7, sp, #0
 260              	.LCFI10:
 261              		.cfi_def_cfa_register 7
 262 0006 7860     		str	r0, [r7, #4]
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 263              		.loc 1 336 0
 264 0008 4FF00003 		mov	r3, #0
 265 000c FB60     		str	r3, [r7, #12]
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_MODE(ADC_CommonInitStruct->ADC_Mode));
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADC CCR Configuration -----------------*/
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC CCR value */
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADC->CCR;
 266              		.loc 1 344 0
 267 000e 4FF40C53 		mov	r3, #8960
 268 0012 C4F20103 		movt	r3, 16385
 269 0016 5B68     		ldr	r3, [r3, #4]
 270 0018 FB60     		str	r3, [r7, #12]
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear MULTI, DELAY, DMA and ADCPRE bits */
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR_CLEAR_MASK;
 271              		.loc 1 347 0
 272 001a FA68     		ldr	r2, [r7, #12]
 273 001c 43F2E003 		movw	r3, #12512
 274 0020 CFF6FC73 		movt	r3, 65532
 275 0024 1340     		ands	r3, r3, r2
 276 0026 FB60     		str	r3, [r7, #12]
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: Multi mode, Delay between two sampling time, ADC prescaler,
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      and DMA access mode for multimode */
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set MULTI bits according to ADC_Mode value */
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ADCPRE bits according to ADC_Prescaler value */
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DMA bits according to ADC_DMAAccessMode value */
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 277              		.loc 1 355 0
 278 0028 7B68     		ldr	r3, [r7, #4]
 279 002a 1A68     		ldr	r2, [r3, #0]
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 280              		.loc 1 356 0
 281 002c 7B68     		ldr	r3, [r7, #4]
 282 002e 5B68     		ldr	r3, [r3, #4]
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 283              		.loc 1 355 0
 284 0030 1A43     		orrs	r2, r2, r3
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 285              		.loc 1 357 0
 286 0032 7B68     		ldr	r3, [r7, #4]
 287 0034 9B68     		ldr	r3, [r3, #8]
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 288              		.loc 1 356 0
 289 0036 1A43     		orrs	r2, r2, r3
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 290              		.loc 1 358 0
 291 0038 7B68     		ldr	r3, [r7, #4]
 292 003a DB68     		ldr	r3, [r3, #12]
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 293              		.loc 1 355 0
 294 003c 1343     		orrs	r3, r3, r2
 295 003e FA68     		ldr	r2, [r7, #12]
 296 0040 1343     		orrs	r3, r3, r2
 297 0042 FB60     		str	r3, [r7, #12]
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADC CCR */
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC->CCR = tmpreg1;
 298              		.loc 1 361 0
 299 0044 4FF40C53 		mov	r3, #8960
 300 0048 C4F20103 		movt	r3, 16385
 301 004c FA68     		ldr	r2, [r7, #12]
 302 004e 5A60     		str	r2, [r3, #4]
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 303              		.loc 1 362 0
 304 0050 07F11407 		add	r7, r7, #20
 305 0054 BD46     		mov	sp, r7
 306 0056 80BC     		pop	{r7}
 307 0058 7047     		bx	lr
 308              		.cfi_endproc
 309              	.LFE113:
 311 005a 00BF     		.section	.text.ADC_CommonStructInit,"ax",%progbits
 312              		.align	2
 313              		.global	ADC_CommonStructInit
 314              		.thumb
 315              		.thumb_func
 317              	ADC_CommonStructInit:
 318              	.LFB114:
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_CommonInitStruct member with its default value.
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         which will be initialized.
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 319              		.loc 1 371 0
 320              		.cfi_startproc
 321              		@ args = 0, pretend = 0, frame = 8
 322              		@ frame_needed = 1, uses_anonymous_args = 0
 323              		@ link register save eliminated.
 324 0000 80B4     		push	{r7}
 325              	.LCFI11:
 326              		.cfi_def_cfa_offset 4
 327              		.cfi_offset 7, -4
 328 0002 83B0     		sub	sp, sp, #12
 329              	.LCFI12:
 330              		.cfi_def_cfa_offset 16
 331 0004 00AF     		add	r7, sp, #0
 332              	.LCFI13:
 333              		.cfi_def_cfa_register 7
 334 0006 7860     		str	r0, [r7, #4]
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 335              		.loc 1 373 0
 336 0008 7B68     		ldr	r3, [r7, #4]
 337 000a 4FF00002 		mov	r2, #0
 338 000e 1A60     		str	r2, [r3, #0]
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_Prescaler member */
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 339              		.loc 1 376 0
 340 0010 7B68     		ldr	r3, [r7, #4]
 341 0012 4FF00002 		mov	r2, #0
 342 0016 5A60     		str	r2, [r3, #4]
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DMAAccessMode member */
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 343              		.loc 1 379 0
 344 0018 7B68     		ldr	r3, [r7, #4]
 345 001a 4FF00002 		mov	r2, #0
 346 001e 9A60     		str	r2, [r3, #8]
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_TwoSamplingDelay member */
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 347              		.loc 1 382 0
 348 0020 7B68     		ldr	r3, [r7, #4]
 349 0022 4FF00002 		mov	r2, #0
 350 0026 DA60     		str	r2, [r3, #12]
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 351              		.loc 1 383 0
 352 0028 07F10C07 		add	r7, r7, #12
 353 002c BD46     		mov	sp, r7
 354 002e 80BC     		pop	{r7}
 355 0030 7047     		bx	lr
 356              		.cfi_endproc
 357              	.LFE114:
 359 0032 00BF     		.section	.text.ADC_Cmd,"ax",%progbits
 360              		.align	2
 361              		.global	ADC_Cmd
 362              		.thumb
 363              		.thumb_func
 365              	ADC_Cmd:
 366              	.LFB115:
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the ADCx peripheral. 
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 367              		.loc 1 393 0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 8
 370              		@ frame_needed = 1, uses_anonymous_args = 0
 371              		@ link register save eliminated.
 372 0000 80B4     		push	{r7}
 373              	.LCFI14:
 374              		.cfi_def_cfa_offset 4
 375              		.cfi_offset 7, -4
 376 0002 83B0     		sub	sp, sp, #12
 377              	.LCFI15:
 378              		.cfi_def_cfa_offset 16
 379 0004 00AF     		add	r7, sp, #0
 380              	.LCFI16:
 381              		.cfi_def_cfa_register 7
 382 0006 7860     		str	r0, [r7, #4]
 383 0008 0B46     		mov	r3, r1
 384 000a FB70     		strb	r3, [r7, #3]
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 385              		.loc 1 397 0
 386 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 387 000e 002B     		cmp	r3, #0
 388 0010 06D0     		beq	.L7
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 389              		.loc 1 400 0
 390 0012 7B68     		ldr	r3, [r7, #4]
 391 0014 9B68     		ldr	r3, [r3, #8]
 392 0016 43F00102 		orr	r2, r3, #1
 393 001a 7B68     		ldr	r3, [r7, #4]
 394 001c 9A60     		str	r2, [r3, #8]
 395 001e 05E0     		b	.L6
 396              	.L7:
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC peripheral */
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 397              		.loc 1 405 0
 398 0020 7B68     		ldr	r3, [r7, #4]
 399 0022 9B68     		ldr	r3, [r3, #8]
 400 0024 23F00102 		bic	r2, r3, #1
 401 0028 7B68     		ldr	r3, [r7, #4]
 402 002a 9A60     		str	r2, [r3, #8]
 403              	.L6:
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 404              		.loc 1 407 0
 405 002c 07F10C07 		add	r7, r7, #12
 406 0030 BD46     		mov	sp, r7
 407 0032 80BC     		pop	{r7}
 408 0034 7047     		bx	lr
 409              		.cfi_endproc
 410              	.LFE115:
 412 0036 00BF     		.section	.text.ADC_AnalogWatchdogCmd,"ax",%progbits
 413              		.align	2
 414              		.global	ADC_AnalogWatchdogCmd
 415              		.thumb
 416              		.thumb_func
 418              	ADC_AnalogWatchdogCmd:
 419              	.LFB116:
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group2 Analog Watchdog configuration functions
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Analog Watchdog configuration functions 
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                     Analog Watchdog configuration functions
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the Analog Watchdog
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (AWD) feature in the ADC.
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration Analog Watchdog is done following these steps :
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. the ADC guarded channel(s) is (are) selected using the 
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_AnalogWatchdogSingleChannelConfig() function.
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. The Analog watchdog lower and higher threshold are configured using the  
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      ADC_AnalogWatchdogThresholdsConfig() function.
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. The Analog watchdog is enabled and configured to enable the check, on one
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       or more channels, using the  ADC_AnalogWatchdogCmd() function.
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular or 
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         injected channels
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         This parameter can be one of the following values:
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected chan
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular 
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on all regular channel
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on all injected channel
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and inj
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None	  
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 420              		.loc 1 451 0
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 16
 423              		@ frame_needed = 1, uses_anonymous_args = 0
 424              		@ link register save eliminated.
 425 0000 80B4     		push	{r7}
 426              	.LCFI17:
 427              		.cfi_def_cfa_offset 4
 428              		.cfi_offset 7, -4
 429 0002 85B0     		sub	sp, sp, #20
 430              	.LCFI18:
 431              		.cfi_def_cfa_offset 24
 432 0004 00AF     		add	r7, sp, #0
 433              	.LCFI19:
 434              		.cfi_def_cfa_register 7
 435 0006 7860     		str	r0, [r7, #4]
 436 0008 3960     		str	r1, [r7, #0]
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 437              		.loc 1 452 0
 438 000a 4FF00003 		mov	r3, #0
 439 000e FB60     		str	r3, [r7, #12]
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 440              		.loc 1 458 0
 441 0010 7B68     		ldr	r3, [r7, #4]
 442 0012 5B68     		ldr	r3, [r3, #4]
 443 0014 FB60     		str	r3, [r7, #12]
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDMode_RESET;
 444              		.loc 1 461 0
 445 0016 FB68     		ldr	r3, [r7, #12]
 446 0018 23F44003 		bic	r3, r3, #12582912
 447 001c 23F40073 		bic	r3, r3, #512
 448 0020 FB60     		str	r3, [r7, #12]
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the analog watchdog enable mode */
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 449              		.loc 1 464 0
 450 0022 FA68     		ldr	r2, [r7, #12]
 451 0024 3B68     		ldr	r3, [r7, #0]
 452 0026 1343     		orrs	r3, r3, r2
 453 0028 FB60     		str	r3, [r7, #12]
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 454              		.loc 1 467 0
 455 002a 7B68     		ldr	r3, [r7, #4]
 456 002c FA68     		ldr	r2, [r7, #12]
 457 002e 5A60     		str	r2, [r3, #4]
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 458              		.loc 1 468 0
 459 0030 07F11407 		add	r7, r7, #20
 460 0034 BD46     		mov	sp, r7
 461 0036 80BC     		pop	{r7}
 462 0038 7047     		bx	lr
 463              		.cfi_endproc
 464              	.LFE116:
 466 003a 00BF     		.section	.text.ADC_AnalogWatchdogThresholdsConfig,"ax",%progbits
 467              		.align	2
 468              		.global	ADC_AnalogWatchdogThresholdsConfig
 469              		.thumb
 470              		.thumb_func
 472              	ADC_AnalogWatchdogThresholdsConfig:
 473              	.LFB117:
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  LowThreshold:  the ADC analog watchdog Low threshold value.
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                         uint16_t LowThreshold)
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 474              		.loc 1 481 0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 8
 477              		@ frame_needed = 1, uses_anonymous_args = 0
 478              		@ link register save eliminated.
 479 0000 80B4     		push	{r7}
 480              	.LCFI20:
 481              		.cfi_def_cfa_offset 4
 482              		.cfi_offset 7, -4
 483 0002 83B0     		sub	sp, sp, #12
 484              	.LCFI21:
 485              		.cfi_def_cfa_offset 16
 486 0004 00AF     		add	r7, sp, #0
 487              	.LCFI22:
 488              		.cfi_def_cfa_register 7
 489 0006 7860     		str	r0, [r7, #4]
 490 0008 1346     		mov	r3, r2
 491 000a 0A46     		mov	r2, r1	@ movhi
 492 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 493 000e 3B80     		strh	r3, [r7, #0]	@ movhi
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx high threshold */
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->HTR = HighThreshold;
 494              		.loc 1 488 0
 495 0010 7A88     		ldrh	r2, [r7, #2]
 496 0012 7B68     		ldr	r3, [r7, #4]
 497 0014 5A62     		str	r2, [r3, #36]
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx low threshold */
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->LTR = LowThreshold;
 498              		.loc 1 491 0
 499 0016 3A88     		ldrh	r2, [r7, #0]
 500 0018 7B68     		ldr	r3, [r7, #4]
 501 001a 9A62     		str	r2, [r3, #40]
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 502              		.loc 1 492 0
 503 001c 07F10C07 		add	r7, r7, #12
 504 0020 BD46     		mov	sp, r7
 505 0022 80BC     		pop	{r7}
 506 0024 7047     		bx	lr
 507              		.cfi_endproc
 508              	.LFE117:
 510 0026 00BF     		.section	.text.ADC_AnalogWatchdogSingleChannelConfig,"ax",%progbits
 511              		.align	2
 512              		.global	ADC_AnalogWatchdogSingleChannelConfig
 513              		.thumb
 514              		.thumb_func
 516              	ADC_AnalogWatchdogSingleChannelConfig:
 517              	.LFB118:
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 518              		.loc 1 521 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 16
 521              		@ frame_needed = 1, uses_anonymous_args = 0
 522              		@ link register save eliminated.
 523 0000 80B4     		push	{r7}
 524              	.LCFI23:
 525              		.cfi_def_cfa_offset 4
 526              		.cfi_offset 7, -4
 527 0002 85B0     		sub	sp, sp, #20
 528              	.LCFI24:
 529              		.cfi_def_cfa_offset 24
 530 0004 00AF     		add	r7, sp, #0
 531              	.LCFI25:
 532              		.cfi_def_cfa_register 7
 533 0006 7860     		str	r0, [r7, #4]
 534 0008 0B46     		mov	r3, r1
 535 000a FB70     		strb	r3, [r7, #3]
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 536              		.loc 1 522 0
 537 000c 4FF00003 		mov	r3, #0
 538 0010 FB60     		str	r3, [r7, #12]
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 539              		.loc 1 528 0
 540 0012 7B68     		ldr	r3, [r7, #4]
 541 0014 5B68     		ldr	r3, [r3, #4]
 542 0016 FB60     		str	r3, [r7, #12]
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the Analog watchdog channel select bits */
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDCH_RESET;
 543              		.loc 1 531 0
 544 0018 FB68     		ldr	r3, [r7, #12]
 545 001a 23F01F03 		bic	r3, r3, #31
 546 001e FB60     		str	r3, [r7, #12]
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the Analog watchdog channel */
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_Channel;
 547              		.loc 1 534 0
 548 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 549 0022 FA68     		ldr	r2, [r7, #12]
 550 0024 1343     		orrs	r3, r3, r2
 551 0026 FB60     		str	r3, [r7, #12]
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 552              		.loc 1 537 0
 553 0028 7B68     		ldr	r3, [r7, #4]
 554 002a FA68     		ldr	r2, [r7, #12]
 555 002c 5A60     		str	r2, [r3, #4]
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 556              		.loc 1 538 0
 557 002e 07F11407 		add	r7, r7, #20
 558 0032 BD46     		mov	sp, r7
 559 0034 80BC     		pop	{r7}
 560 0036 7047     		bx	lr
 561              		.cfi_endproc
 562              	.LFE118:
 564              		.section	.text.ADC_TempSensorVrefintCmd,"ax",%progbits
 565              		.align	2
 566              		.global	ADC_TempSensorVrefintCmd
 567              		.thumb
 568              		.thumb_func
 570              	ADC_TempSensorVrefintCmd:
 571              	.LFB119:
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group3 Temperature Sensor, Vrefint (Voltage Reference internal) 
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *            and VBAT (Voltage BATtery) management functions
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Temperature Sensor, Vrefint and VBAT management functions 
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                Temperature Sensor, Vrefint and VBAT management functions
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to enable/ disable the internal 
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   connections between the ADC and the Temperature Sensor, the Vrefint and the
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Vbat sources.
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the Temperature sensor and Vrefint channels 
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   voltages is done following these steps :
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of Temperature sensor and Vrefint sources 
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       with the ADC channels using ADC_TempSensorVrefintCmd() function. 
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_TempSensor and/or ADC_Channel_Vrefint using 
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_RegularChannelConfig() or  ADC_InjectedChannelConfig() functions 
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage values, using ADC_GetConversionValue() or  
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the VBAT channel voltage is done following 
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   these steps :
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of VBAT source with the ADC channel using 
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_VBATCmd() function. 
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_Vbat using ADC_RegularChannelConfig() or  
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_InjectedChannelConfig() functions 
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage value, using ADC_GetConversionValue() or  
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channels.
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the temperature sensor and Vrefint channels.
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 572              		.loc 1 586 0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 8
 575              		@ frame_needed = 1, uses_anonymous_args = 0
 576              		@ link register save eliminated.
 577 0000 80B4     		push	{r7}
 578              	.LCFI26:
 579              		.cfi_def_cfa_offset 4
 580              		.cfi_offset 7, -4
 581 0002 83B0     		sub	sp, sp, #12
 582              	.LCFI27:
 583              		.cfi_def_cfa_offset 16
 584 0004 00AF     		add	r7, sp, #0
 585              	.LCFI28:
 586              		.cfi_def_cfa_register 7
 587 0006 0346     		mov	r3, r0
 588 0008 FB71     		strb	r3, [r7, #7]
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 589              		.loc 1 589 0
 590 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 591 000c 002B     		cmp	r3, #0
 592 000e 0CD0     		beq	.L13
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 593              		.loc 1 592 0
 594 0010 4FF40C53 		mov	r3, #8960
 595 0014 C4F20103 		movt	r3, 16385
 596 0018 4FF40C52 		mov	r2, #8960
 597 001c C4F20102 		movt	r2, 16385
 598 0020 5268     		ldr	r2, [r2, #4]
 599 0022 42F40002 		orr	r2, r2, #8388608
 600 0026 5A60     		str	r2, [r3, #4]
 601 0028 0BE0     		b	.L12
 602              	.L13:
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 603              		.loc 1 597 0
 604 002a 4FF40C53 		mov	r3, #8960
 605 002e C4F20103 		movt	r3, 16385
 606 0032 4FF40C52 		mov	r2, #8960
 607 0036 C4F20102 		movt	r2, 16385
 608 003a 5268     		ldr	r2, [r2, #4]
 609 003c 22F40002 		bic	r2, r2, #8388608
 610 0040 5A60     		str	r2, [r3, #4]
 611              	.L12:
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 612              		.loc 1 599 0
 613 0042 07F10C07 		add	r7, r7, #12
 614 0046 BD46     		mov	sp, r7
 615 0048 80BC     		pop	{r7}
 616 004a 7047     		bx	lr
 617              		.cfi_endproc
 618              	.LFE119:
 620              		.section	.text.ADC_VBATCmd,"ax",%progbits
 621              		.align	2
 622              		.global	ADC_VBATCmd
 623              		.thumb
 624              		.thumb_func
 626              	ADC_VBATCmd:
 627              	.LFB120:
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the VBAT (Voltage Battery) channel.
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the VBAT channel.
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_VBATCmd(FunctionalState NewState)                             
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 628              		.loc 1 608 0
 629              		.cfi_startproc
 630              		@ args = 0, pretend = 0, frame = 8
 631              		@ frame_needed = 1, uses_anonymous_args = 0
 632              		@ link register save eliminated.
 633 0000 80B4     		push	{r7}
 634              	.LCFI29:
 635              		.cfi_def_cfa_offset 4
 636              		.cfi_offset 7, -4
 637 0002 83B0     		sub	sp, sp, #12
 638              	.LCFI30:
 639              		.cfi_def_cfa_offset 16
 640 0004 00AF     		add	r7, sp, #0
 641              	.LCFI31:
 642              		.cfi_def_cfa_register 7
 643 0006 0346     		mov	r3, r0
 644 0008 FB71     		strb	r3, [r7, #7]
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 645              		.loc 1 611 0
 646 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 647 000c 002B     		cmp	r3, #0
 648 000e 0CD0     		beq	.L16
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the VBAT channel*/
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 649              		.loc 1 614 0
 650 0010 4FF40C53 		mov	r3, #8960
 651 0014 C4F20103 		movt	r3, 16385
 652 0018 4FF40C52 		mov	r2, #8960
 653 001c C4F20102 		movt	r2, 16385
 654 0020 5268     		ldr	r2, [r2, #4]
 655 0022 42F48002 		orr	r2, r2, #4194304
 656 0026 5A60     		str	r2, [r3, #4]
 657 0028 0BE0     		b	.L15
 658              	.L16:
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the VBAT channel*/
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 659              		.loc 1 619 0
 660 002a 4FF40C53 		mov	r3, #8960
 661 002e C4F20103 		movt	r3, 16385
 662 0032 4FF40C52 		mov	r2, #8960
 663 0036 C4F20102 		movt	r2, 16385
 664 003a 5268     		ldr	r2, [r2, #4]
 665 003c 22F48002 		bic	r2, r2, #4194304
 666 0040 5A60     		str	r2, [r3, #4]
 667              	.L15:
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 668              		.loc 1 621 0
 669 0042 07F10C07 		add	r7, r7, #12
 670 0046 BD46     		mov	sp, r7
 671 0048 80BC     		pop	{r7}
 672 004a 7047     		bx	lr
 673              		.cfi_endproc
 674              	.LFE120:
 676              		.section	.text.ADC_RegularChannelConfig,"ax",%progbits
 677              		.align	2
 678              		.global	ADC_RegularChannelConfig
 679              		.thumb
 680              		.thumb_func
 682              	ADC_RegularChannelConfig:
 683              	.LFB121:
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group4 Regular Channels Configuration functions
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels Configuration functions 
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                   Regular Channels Configuration functions
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to manage the ADC's regular channels,
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration and management functions for regular channels: This subsection 
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      provides functions allowing to configure the ADC regular channels :    
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the rank in the regular group sequencer for each channel
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the sampling time for each channel
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the conversion Trigger for regular channels
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the desired EOC event behavior configuration
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the continuous Mode  (*)
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the Discontinuous Mode 
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      Please Note that the following features for regular channels are configurated
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      using the ADC_Init() function : 
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - scan mode activation 
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - continuous mode activation (**) 
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger source  
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger edge 
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - number of conversion in the regular channels group sequencer.
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note (*) and (**) are performing the same configuration
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   2. Get the conversion data: This subsection provides an important function in 
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      the ADC peripheral since it returns the converted data of the current 
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel. When the Conversion value is read, the EOC Flag is 
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      automatically cleared.
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note For multi ADC mode, the last ADC1, ADC2 and ADC3 regular conversions 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            results data (in the selected multi mode) can be returned in the same 
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            time using ADC_GetMultiModeConversionValue() function. 
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****        
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the regular group sequencer.
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 16.
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 684              		.loc 1 709 0
 685              		.cfi_startproc
 686              		@ args = 0, pretend = 0, frame = 16
 687              		@ frame_needed = 1, uses_anonymous_args = 0
 688              		@ link register save eliminated.
 689 0000 80B4     		push	{r7}
 690              	.LCFI32:
 691              		.cfi_def_cfa_offset 4
 692              		.cfi_offset 7, -4
 693 0002 85B0     		sub	sp, sp, #20
 694              	.LCFI33:
 695              		.cfi_def_cfa_offset 24
 696 0004 00AF     		add	r7, sp, #0
 697              	.LCFI34:
 698              		.cfi_def_cfa_register 7
 699 0006 7860     		str	r0, [r7, #4]
 700 0008 F970     		strb	r1, [r7, #3]
 701 000a BA70     		strb	r2, [r7, #2]
 702 000c 7B70     		strb	r3, [r7, #1]
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 703              		.loc 1 710 0
 704 000e 4FF00003 		mov	r3, #0
 705 0012 FB60     		str	r3, [r7, #12]
 706 0014 4FF00003 		mov	r3, #0
 707 0018 BB60     		str	r3, [r7, #8]
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 708              		.loc 1 718 0
 709 001a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 710 001c 092B     		cmp	r3, #9
 711 001e 27D9     		bls	.L19
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 712              		.loc 1 721 0
 713 0020 7B68     		ldr	r3, [r7, #4]
 714 0022 DB68     		ldr	r3, [r3, #12]
 715 0024 FB60     		str	r3, [r7, #12]
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 716              		.loc 1 724 0
 717 0026 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 718 0028 1346     		mov	r3, r2
 719 002a 4FEA4303 		lsl	r3, r3, #1
 720 002e 9B18     		adds	r3, r3, r2
 721 0030 A3F11E03 		sub	r3, r3, #30
 722 0034 4FF00702 		mov	r2, #7
 723 0038 02FA03F3 		lsl	r3, r2, r3
 724 003c BB60     		str	r3, [r7, #8]
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 725              		.loc 1 727 0
 726 003e BB68     		ldr	r3, [r7, #8]
 727 0040 6FEA0303 		mvn	r3, r3
 728 0044 FA68     		ldr	r2, [r7, #12]
 729 0046 1340     		ands	r3, r3, r2
 730 0048 FB60     		str	r3, [r7, #12]
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 731              		.loc 1 730 0
 732 004a 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 733 004c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 734 004e 1346     		mov	r3, r2
 735 0050 4FEA4303 		lsl	r3, r3, #1
 736 0054 9B18     		adds	r3, r3, r2
 737 0056 A3F11E03 		sub	r3, r3, #30
 738 005a 01FA03F3 		lsl	r3, r1, r3
 739 005e BB60     		str	r3, [r7, #8]
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 740              		.loc 1 733 0
 741 0060 FA68     		ldr	r2, [r7, #12]
 742 0062 BB68     		ldr	r3, [r7, #8]
 743 0064 1343     		orrs	r3, r3, r2
 744 0066 FB60     		str	r3, [r7, #12]
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 745              		.loc 1 736 0
 746 0068 7B68     		ldr	r3, [r7, #4]
 747 006a FA68     		ldr	r2, [r7, #12]
 748 006c DA60     		str	r2, [r3, #12]
 749 006e 22E0     		b	.L20
 750              	.L19:
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 751              		.loc 1 741 0
 752 0070 7B68     		ldr	r3, [r7, #4]
 753 0072 1B69     		ldr	r3, [r3, #16]
 754 0074 FB60     		str	r3, [r7, #12]
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 755              		.loc 1 744 0
 756 0076 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 757 0078 1346     		mov	r3, r2
 758 007a 4FEA4303 		lsl	r3, r3, #1
 759 007e 9B18     		adds	r3, r3, r2
 760 0080 4FF00702 		mov	r2, #7
 761 0084 02FA03F3 		lsl	r3, r2, r3
 762 0088 BB60     		str	r3, [r7, #8]
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 763              		.loc 1 747 0
 764 008a BB68     		ldr	r3, [r7, #8]
 765 008c 6FEA0303 		mvn	r3, r3
 766 0090 FA68     		ldr	r2, [r7, #12]
 767 0092 1340     		ands	r3, r3, r2
 768 0094 FB60     		str	r3, [r7, #12]
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 769              		.loc 1 750 0
 770 0096 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 771 0098 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 772 009a 1346     		mov	r3, r2
 773 009c 4FEA4303 		lsl	r3, r3, #1
 774 00a0 9B18     		adds	r3, r3, r2
 775 00a2 01FA03F3 		lsl	r3, r1, r3
 776 00a6 BB60     		str	r3, [r7, #8]
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 777              		.loc 1 753 0
 778 00a8 FA68     		ldr	r2, [r7, #12]
 779 00aa BB68     		ldr	r3, [r7, #8]
 780 00ac 1343     		orrs	r3, r3, r2
 781 00ae FB60     		str	r3, [r7, #12]
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 782              		.loc 1 756 0
 783 00b0 7B68     		ldr	r3, [r7, #4]
 784 00b2 FA68     		ldr	r2, [r7, #12]
 785 00b4 1A61     		str	r2, [r3, #16]
 786              	.L20:
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 1 to 6 */
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (Rank < 7)
 787              		.loc 1 759 0
 788 00b6 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 789 00b8 062B     		cmp	r3, #6
 790 00ba 27D8     		bhi	.L21
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 791              		.loc 1 762 0
 792 00bc 7B68     		ldr	r3, [r7, #4]
 793 00be 5B6B     		ldr	r3, [r3, #52]
 794 00c0 FB60     		str	r3, [r7, #12]
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 795              		.loc 1 765 0
 796 00c2 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 797 00c4 03F1FF32 		add	r2, r3, #-1
 798 00c8 1346     		mov	r3, r2
 799 00ca 4FEA8303 		lsl	r3, r3, #2
 800 00ce 9B18     		adds	r3, r3, r2
 801 00d0 4FF01F02 		mov	r2, #31
 802 00d4 02FA03F3 		lsl	r3, r2, r3
 803 00d8 BB60     		str	r3, [r7, #8]
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 804              		.loc 1 768 0
 805 00da BB68     		ldr	r3, [r7, #8]
 806 00dc 6FEA0303 		mvn	r3, r3
 807 00e0 FA68     		ldr	r2, [r7, #12]
 808 00e2 1340     		ands	r3, r3, r2
 809 00e4 FB60     		str	r3, [r7, #12]
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 810              		.loc 1 771 0
 811 00e6 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 812 00e8 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 813 00ea 03F1FF32 		add	r2, r3, #-1
 814 00ee 1346     		mov	r3, r2
 815 00f0 4FEA8303 		lsl	r3, r3, #2
 816 00f4 9B18     		adds	r3, r3, r2
 817 00f6 01FA03F3 		lsl	r3, r1, r3
 818 00fa BB60     		str	r3, [r7, #8]
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 819              		.loc 1 774 0
 820 00fc FA68     		ldr	r2, [r7, #12]
 821 00fe BB68     		ldr	r3, [r7, #8]
 822 0100 1343     		orrs	r3, r3, r2
 823 0102 FB60     		str	r3, [r7, #12]
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR3 = tmpreg1;
 824              		.loc 1 777 0
 825 0104 7B68     		ldr	r3, [r7, #4]
 826 0106 FA68     		ldr	r2, [r7, #12]
 827 0108 5A63     		str	r2, [r3, #52]
 828 010a 51E0     		b	.L18
 829              	.L21:
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 7 to 12 */
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else if (Rank < 13)
 830              		.loc 1 780 0
 831 010c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 832 010e 0C2B     		cmp	r3, #12
 833 0110 27D8     		bhi	.L23
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 834              		.loc 1 783 0
 835 0112 7B68     		ldr	r3, [r7, #4]
 836 0114 1B6B     		ldr	r3, [r3, #48]
 837 0116 FB60     		str	r3, [r7, #12]
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 838              		.loc 1 786 0
 839 0118 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 840 011a 1346     		mov	r3, r2
 841 011c 4FEA8303 		lsl	r3, r3, #2
 842 0120 9B18     		adds	r3, r3, r2
 843 0122 A3F12303 		sub	r3, r3, #35
 844 0126 4FF01F02 		mov	r2, #31
 845 012a 02FA03F3 		lsl	r3, r2, r3
 846 012e BB60     		str	r3, [r7, #8]
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 847              		.loc 1 789 0
 848 0130 BB68     		ldr	r3, [r7, #8]
 849 0132 6FEA0303 		mvn	r3, r3
 850 0136 FA68     		ldr	r2, [r7, #12]
 851 0138 1340     		ands	r3, r3, r2
 852 013a FB60     		str	r3, [r7, #12]
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 853              		.loc 1 792 0
 854 013c F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 855 013e BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 856 0140 1346     		mov	r3, r2
 857 0142 4FEA8303 		lsl	r3, r3, #2
 858 0146 9B18     		adds	r3, r3, r2
 859 0148 A3F12303 		sub	r3, r3, #35
 860 014c 01FA03F3 		lsl	r3, r1, r3
 861 0150 BB60     		str	r3, [r7, #8]
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 862              		.loc 1 795 0
 863 0152 FA68     		ldr	r2, [r7, #12]
 864 0154 BB68     		ldr	r3, [r7, #8]
 865 0156 1343     		orrs	r3, r3, r2
 866 0158 FB60     		str	r3, [r7, #12]
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR2 = tmpreg1;
 867              		.loc 1 798 0
 868 015a 7B68     		ldr	r3, [r7, #4]
 869 015c FA68     		ldr	r2, [r7, #12]
 870 015e 1A63     		str	r2, [r3, #48]
 871 0160 26E0     		b	.L18
 872              	.L23:
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 13 to 16 */
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR1;
 873              		.loc 1 804 0
 874 0162 7B68     		ldr	r3, [r7, #4]
 875 0164 DB6A     		ldr	r3, [r3, #44]
 876 0166 FB60     		str	r3, [r7, #12]
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 877              		.loc 1 807 0
 878 0168 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 879 016a 1346     		mov	r3, r2
 880 016c 4FEA8303 		lsl	r3, r3, #2
 881 0170 9B18     		adds	r3, r3, r2
 882 0172 A3F14103 		sub	r3, r3, #65
 883 0176 4FF01F02 		mov	r2, #31
 884 017a 02FA03F3 		lsl	r3, r2, r3
 885 017e BB60     		str	r3, [r7, #8]
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 886              		.loc 1 810 0
 887 0180 BB68     		ldr	r3, [r7, #8]
 888 0182 6FEA0303 		mvn	r3, r3
 889 0186 FA68     		ldr	r2, [r7, #12]
 890 0188 1340     		ands	r3, r3, r2
 891 018a FB60     		str	r3, [r7, #12]
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 892              		.loc 1 813 0
 893 018c F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 894 018e BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 895 0190 1346     		mov	r3, r2
 896 0192 4FEA8303 		lsl	r3, r3, #2
 897 0196 9B18     		adds	r3, r3, r2
 898 0198 A3F14103 		sub	r3, r3, #65
 899 019c 01FA03F3 		lsl	r3, r1, r3
 900 01a0 BB60     		str	r3, [r7, #8]
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 901              		.loc 1 816 0
 902 01a2 FA68     		ldr	r2, [r7, #12]
 903 01a4 BB68     		ldr	r3, [r7, #8]
 904 01a6 1343     		orrs	r3, r3, r2
 905 01a8 FB60     		str	r3, [r7, #12]
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR1 = tmpreg1;
 906              		.loc 1 819 0
 907 01aa 7B68     		ldr	r3, [r7, #4]
 908 01ac FA68     		ldr	r2, [r7, #12]
 909 01ae DA62     		str	r2, [r3, #44]
 910              	.L18:
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 911              		.loc 1 821 0
 912 01b0 07F11407 		add	r7, r7, #20
 913 01b4 BD46     		mov	sp, r7
 914 01b6 80BC     		pop	{r7}
 915 01b8 7047     		bx	lr
 916              		.cfi_endproc
 917              	.LFE121:
 919 01ba 00BF     		.section	.text.ADC_SoftwareStartConv,"ax",%progbits
 920              		.align	2
 921              		.global	ADC_SoftwareStartConv
 922              		.thumb
 923              		.thumb_func
 925              	ADC_SoftwareStartConv:
 926              	.LFB122:
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the regular channels.
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 927              		.loc 1 829 0
 928              		.cfi_startproc
 929              		@ args = 0, pretend = 0, frame = 8
 930              		@ frame_needed = 1, uses_anonymous_args = 0
 931              		@ link register save eliminated.
 932 0000 80B4     		push	{r7}
 933              	.LCFI35:
 934              		.cfi_def_cfa_offset 4
 935              		.cfi_offset 7, -4
 936 0002 83B0     		sub	sp, sp, #12
 937              	.LCFI36:
 938              		.cfi_def_cfa_offset 16
 939 0004 00AF     		add	r7, sp, #0
 940              	.LCFI37:
 941              		.cfi_def_cfa_register 7
 942 0006 7860     		str	r0, [r7, #4]
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for regular group */
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 943              		.loc 1 834 0
 944 0008 7B68     		ldr	r3, [r7, #4]
 945 000a 9B68     		ldr	r3, [r3, #8]
 946 000c 43F08042 		orr	r2, r3, #1073741824
 947 0010 7B68     		ldr	r3, [r7, #4]
 948 0012 9A60     		str	r2, [r3, #8]
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 949              		.loc 1 835 0
 950 0014 07F10C07 		add	r7, r7, #12
 951 0018 BD46     		mov	sp, r7
 952 001a 80BC     		pop	{r7}
 953 001c 7047     		bx	lr
 954              		.cfi_endproc
 955              	.LFE122:
 957 001e 00BF     		.section	.text.ADC_GetSoftwareStartConvStatus,"ax",%progbits
 958              		.align	2
 959              		.global	ADC_GetSoftwareStartConvStatus
 960              		.thumb
 961              		.thumb_func
 963              	ADC_GetSoftwareStartConvStatus:
 964              	.LFB123:
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start regular conversion Status.
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 965              		.loc 1 843 0
 966              		.cfi_startproc
 967              		@ args = 0, pretend = 0, frame = 16
 968              		@ frame_needed = 1, uses_anonymous_args = 0
 969              		@ link register save eliminated.
 970 0000 80B4     		push	{r7}
 971              	.LCFI38:
 972              		.cfi_def_cfa_offset 4
 973              		.cfi_offset 7, -4
 974 0002 85B0     		sub	sp, sp, #20
 975              	.LCFI39:
 976              		.cfi_def_cfa_offset 24
 977 0004 00AF     		add	r7, sp, #0
 978              	.LCFI40:
 979              		.cfi_def_cfa_register 7
 980 0006 7860     		str	r0, [r7, #4]
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 981              		.loc 1 844 0
 982 0008 4FF00003 		mov	r3, #0
 983 000c FB73     		strb	r3, [r7, #15]
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of SWSTART bit */
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 984              		.loc 1 849 0
 985 000e 7B68     		ldr	r3, [r7, #4]
 986 0010 9B68     		ldr	r3, [r3, #8]
 987 0012 03F48003 		and	r3, r3, #4194304
 988 0016 002B     		cmp	r3, #0
 989 0018 03D0     		beq	.L26
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is set */
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 990              		.loc 1 852 0
 991 001a 4FF00103 		mov	r3, #1
 992 001e FB73     		strb	r3, [r7, #15]
 993 0020 02E0     		b	.L27
 994              	.L26:
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is reset */
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 995              		.loc 1 857 0
 996 0022 4FF00003 		mov	r3, #0
 997 0026 FB73     		strb	r3, [r7, #15]
 998              	.L27:
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the SWSTART bit status */
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 999              		.loc 1 861 0
 1000 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1001              		.loc 1 862 0
 1002 002a 1846     		mov	r0, r3
 1003 002c 07F11407 		add	r7, r7, #20
 1004 0030 BD46     		mov	sp, r7
 1005 0032 80BC     		pop	{r7}
 1006 0034 7047     		bx	lr
 1007              		.cfi_endproc
 1008              	.LFE123:
 1010 0036 00BF     		.section	.text.ADC_EOCOnEachRegularChannelCmd,"ax",%progbits
 1011              		.align	2
 1012              		.global	ADC_EOCOnEachRegularChannelCmd
 1013              		.thumb
 1014              		.thumb_func
 1016              	ADC_EOCOnEachRegularChannelCmd:
 1017              	.LFB124:
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the EOC on each regular channel conversion
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC EOC flag rising
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1018              		.loc 1 873 0
 1019              		.cfi_startproc
 1020              		@ args = 0, pretend = 0, frame = 8
 1021              		@ frame_needed = 1, uses_anonymous_args = 0
 1022              		@ link register save eliminated.
 1023 0000 80B4     		push	{r7}
 1024              	.LCFI41:
 1025              		.cfi_def_cfa_offset 4
 1026              		.cfi_offset 7, -4
 1027 0002 83B0     		sub	sp, sp, #12
 1028              	.LCFI42:
 1029              		.cfi_def_cfa_offset 16
 1030 0004 00AF     		add	r7, sp, #0
 1031              	.LCFI43:
 1032              		.cfi_def_cfa_register 7
 1033 0006 7860     		str	r0, [r7, #4]
 1034 0008 0B46     		mov	r3, r1
 1035 000a FB70     		strb	r3, [r7, #3]
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1036              		.loc 1 878 0
 1037 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1038 000e 002B     		cmp	r3, #0
 1039 0010 06D0     		beq	.L29
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC EOC rising on each regular channel conversion */
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 1040              		.loc 1 881 0
 1041 0012 7B68     		ldr	r3, [r7, #4]
 1042 0014 9B68     		ldr	r3, [r3, #8]
 1043 0016 43F48062 		orr	r2, r3, #1024
 1044 001a 7B68     		ldr	r3, [r7, #4]
 1045 001c 9A60     		str	r2, [r3, #8]
 1046 001e 05E0     		b	.L28
 1047              	.L29:
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC EOC rising on each regular channel conversion */
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 1048              		.loc 1 886 0
 1049 0020 7B68     		ldr	r3, [r7, #4]
 1050 0022 9B68     		ldr	r3, [r3, #8]
 1051 0024 23F48062 		bic	r2, r3, #1024
 1052 0028 7B68     		ldr	r3, [r7, #4]
 1053 002a 9A60     		str	r2, [r3, #8]
 1054              	.L28:
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1055              		.loc 1 888 0
 1056 002c 07F10C07 		add	r7, r7, #12
 1057 0030 BD46     		mov	sp, r7
 1058 0032 80BC     		pop	{r7}
 1059 0034 7047     		bx	lr
 1060              		.cfi_endproc
 1061              	.LFE124:
 1063 0036 00BF     		.section	.text.ADC_ContinuousModeCmd,"ax",%progbits
 1064              		.align	2
 1065              		.global	ADC_ContinuousModeCmd
 1066              		.thumb
 1067              		.thumb_func
 1069              	ADC_ContinuousModeCmd:
 1070              	.LFB125:
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC continuous conversion mode 
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC continuous conversion mode
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1071              		.loc 1 898 0
 1072              		.cfi_startproc
 1073              		@ args = 0, pretend = 0, frame = 8
 1074              		@ frame_needed = 1, uses_anonymous_args = 0
 1075              		@ link register save eliminated.
 1076 0000 80B4     		push	{r7}
 1077              	.LCFI44:
 1078              		.cfi_def_cfa_offset 4
 1079              		.cfi_offset 7, -4
 1080 0002 83B0     		sub	sp, sp, #12
 1081              	.LCFI45:
 1082              		.cfi_def_cfa_offset 16
 1083 0004 00AF     		add	r7, sp, #0
 1084              	.LCFI46:
 1085              		.cfi_def_cfa_register 7
 1086 0006 7860     		str	r0, [r7, #4]
 1087 0008 0B46     		mov	r3, r1
 1088 000a FB70     		strb	r3, [r7, #3]
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1089              		.loc 1 903 0
 1090 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1091 000e 002B     		cmp	r3, #0
 1092 0010 06D0     		beq	.L32
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC continuous conversion mode */
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 1093              		.loc 1 906 0
 1094 0012 7B68     		ldr	r3, [r7, #4]
 1095 0014 9B68     		ldr	r3, [r3, #8]
 1096 0016 43F00202 		orr	r2, r3, #2
 1097 001a 7B68     		ldr	r3, [r7, #4]
 1098 001c 9A60     		str	r2, [r3, #8]
 1099 001e 05E0     		b	.L31
 1100              	.L32:
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC continuous conversion mode */
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 1101              		.loc 1 911 0
 1102 0020 7B68     		ldr	r3, [r7, #4]
 1103 0022 9B68     		ldr	r3, [r3, #8]
 1104 0024 23F00202 		bic	r2, r3, #2
 1105 0028 7B68     		ldr	r3, [r7, #4]
 1106 002a 9A60     		str	r2, [r3, #8]
 1107              	.L31:
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1108              		.loc 1 913 0
 1109 002c 07F10C07 		add	r7, r7, #12
 1110 0030 BD46     		mov	sp, r7
 1111 0032 80BC     		pop	{r7}
 1112 0034 7047     		bx	lr
 1113              		.cfi_endproc
 1114              	.LFE125:
 1116 0036 00BF     		.section	.text.ADC_DiscModeChannelCountConfig,"ax",%progbits
 1117              		.align	2
 1118              		.global	ADC_DiscModeChannelCountConfig
 1119              		.thumb
 1120              		.thumb_func
 1122              	ADC_DiscModeChannelCountConfig:
 1123              	.LFB126:
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular group 
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel.
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel count value.
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This number must be between 1 and 8.
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1124              		.loc 1 924 0
 1125              		.cfi_startproc
 1126              		@ args = 0, pretend = 0, frame = 16
 1127              		@ frame_needed = 1, uses_anonymous_args = 0
 1128              		@ link register save eliminated.
 1129 0000 80B4     		push	{r7}
 1130              	.LCFI47:
 1131              		.cfi_def_cfa_offset 4
 1132              		.cfi_offset 7, -4
 1133 0002 85B0     		sub	sp, sp, #20
 1134              	.LCFI48:
 1135              		.cfi_def_cfa_offset 24
 1136 0004 00AF     		add	r7, sp, #0
 1137              	.LCFI49:
 1138              		.cfi_def_cfa_register 7
 1139 0006 7860     		str	r0, [r7, #4]
 1140 0008 0B46     		mov	r3, r1
 1141 000a FB70     		strb	r3, [r7, #3]
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 1142              		.loc 1 925 0
 1143 000c 4FF00003 		mov	r3, #0
 1144 0010 FB60     		str	r3, [r7, #12]
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 1145              		.loc 1 926 0
 1146 0012 4FF00003 		mov	r3, #0
 1147 0016 BB60     		str	r3, [r7, #8]
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
 1148              		.loc 1 933 0
 1149 0018 7B68     		ldr	r3, [r7, #4]
 1150 001a 5B68     		ldr	r3, [r3, #4]
 1151 001c FB60     		str	r3, [r7, #12]
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old discontinuous mode channel count */
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 1152              		.loc 1 936 0
 1153 001e FB68     		ldr	r3, [r7, #12]
 1154 0020 23F46043 		bic	r3, r3, #57344
 1155 0024 FB60     		str	r3, [r7, #12]
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the discontinuous mode channel count */
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Number - 1;
 1156              		.loc 1 939 0
 1157 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1158 0028 03F1FF33 		add	r3, r3, #-1
 1159 002c BB60     		str	r3, [r7, #8]
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 1160              		.loc 1 940 0
 1161 002e BB68     		ldr	r3, [r7, #8]
 1162 0030 4FEA4333 		lsl	r3, r3, #13
 1163 0034 FA68     		ldr	r2, [r7, #12]
 1164 0036 1343     		orrs	r3, r3, r2
 1165 0038 FB60     		str	r3, [r7, #12]
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 1166              		.loc 1 943 0
 1167 003a 7B68     		ldr	r3, [r7, #4]
 1168 003c FA68     		ldr	r2, [r7, #12]
 1169 003e 5A60     		str	r2, [r3, #4]
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1170              		.loc 1 944 0
 1171 0040 07F11407 		add	r7, r7, #20
 1172 0044 BD46     		mov	sp, r7
 1173 0046 80BC     		pop	{r7}
 1174 0048 7047     		bx	lr
 1175              		.cfi_endproc
 1176              	.LFE126:
 1178 004a 00BF     		.section	.text.ADC_DiscModeCmd,"ax",%progbits
 1179              		.align	2
 1180              		.global	ADC_DiscModeCmd
 1181              		.thumb
 1182              		.thumb_func
 1184              	ADC_DiscModeCmd:
 1185              	.LFB127:
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group channel 
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         for the specified ADC
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on 
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         regular group channel.
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1186              		.loc 1 956 0
 1187              		.cfi_startproc
 1188              		@ args = 0, pretend = 0, frame = 8
 1189              		@ frame_needed = 1, uses_anonymous_args = 0
 1190              		@ link register save eliminated.
 1191 0000 80B4     		push	{r7}
 1192              	.LCFI50:
 1193              		.cfi_def_cfa_offset 4
 1194              		.cfi_offset 7, -4
 1195 0002 83B0     		sub	sp, sp, #12
 1196              	.LCFI51:
 1197              		.cfi_def_cfa_offset 16
 1198 0004 00AF     		add	r7, sp, #0
 1199              	.LCFI52:
 1200              		.cfi_def_cfa_register 7
 1201 0006 7860     		str	r0, [r7, #4]
 1202 0008 0B46     		mov	r3, r1
 1203 000a FB70     		strb	r3, [r7, #3]
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1204              		.loc 1 961 0
 1205 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1206 000e 002B     		cmp	r3, #0
 1207 0010 06D0     		beq	.L36
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 1208              		.loc 1 964 0
 1209 0012 7B68     		ldr	r3, [r7, #4]
 1210 0014 5B68     		ldr	r3, [r3, #4]
 1211 0016 43F40062 		orr	r2, r3, #2048
 1212 001a 7B68     		ldr	r3, [r7, #4]
 1213 001c 5A60     		str	r2, [r3, #4]
 1214 001e 05E0     		b	.L35
 1215              	.L36:
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 1216              		.loc 1 969 0
 1217 0020 7B68     		ldr	r3, [r7, #4]
 1218 0022 5B68     		ldr	r3, [r3, #4]
 1219 0024 23F40062 		bic	r2, r3, #2048
 1220 0028 7B68     		ldr	r3, [r7, #4]
 1221 002a 5A60     		str	r2, [r3, #4]
 1222              	.L35:
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1223              		.loc 1 971 0
 1224 002c 07F10C07 		add	r7, r7, #12
 1225 0030 BD46     		mov	sp, r7
 1226 0032 80BC     		pop	{r7}
 1227 0034 7047     		bx	lr
 1228              		.cfi_endproc
 1229              	.LFE127:
 1231 0036 00BF     		.section	.text.ADC_GetConversionValue,"ax",%progbits
 1232              		.align	2
 1233              		.global	ADC_GetConversionValue
 1234              		.thumb
 1235              		.thumb_func
 1237              	ADC_GetConversionValue:
 1238              	.LFB128:
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1239              		.loc 1 979 0
 1240              		.cfi_startproc
 1241              		@ args = 0, pretend = 0, frame = 8
 1242              		@ frame_needed = 1, uses_anonymous_args = 0
 1243              		@ link register save eliminated.
 1244 0000 80B4     		push	{r7}
 1245              	.LCFI53:
 1246              		.cfi_def_cfa_offset 4
 1247              		.cfi_offset 7, -4
 1248 0002 83B0     		sub	sp, sp, #12
 1249              	.LCFI54:
 1250              		.cfi_def_cfa_offset 16
 1251 0004 00AF     		add	r7, sp, #0
 1252              	.LCFI55:
 1253              		.cfi_def_cfa_register 7
 1254 0006 7860     		str	r0, [r7, #4]
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the selected ADC conversion value */
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) ADCx->DR;
 1255              		.loc 1 984 0
 1256 0008 7B68     		ldr	r3, [r7, #4]
 1257 000a DB6C     		ldr	r3, [r3, #76]
 1258 000c 9BB2     		uxth	r3, r3
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1259              		.loc 1 985 0
 1260 000e 1846     		mov	r0, r3
 1261 0010 07F10C07 		add	r7, r7, #12
 1262 0014 BD46     		mov	sp, r7
 1263 0016 80BC     		pop	{r7}
 1264 0018 7047     		bx	lr
 1265              		.cfi_endproc
 1266              	.LFE128:
 1268 001a 00BF     		.section	.text.ADC_GetMultiModeConversionValue,"ax",%progbits
 1269              		.align	2
 1270              		.global	ADC_GetMultiModeConversionValue
 1271              		.thumb
 1272              		.thumb_func
 1274              	ADC_GetMultiModeConversionValue:
 1275              	.LFB129:
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADC1, ADC2 and ADC3 regular conversions results 
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         data in the selected multi mode.
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None  
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In dual mode, the value returned by this function is as following
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain the regular data of ADC1.
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain the regular data of ADC2.
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In triple mode, the value returned by this function is as following
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint32_t ADC_GetMultiModeConversionValue(void)
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1276              		.loc 1 1000 0
 1277              		.cfi_startproc
 1278              		@ args = 0, pretend = 0, frame = 0
 1279              		@ frame_needed = 1, uses_anonymous_args = 0
 1280              		@ link register save eliminated.
 1281 0000 80B4     		push	{r7}
 1282              	.LCFI56:
 1283              		.cfi_def_cfa_offset 4
 1284              		.cfi_offset 7, -4
 1285 0002 00AF     		add	r7, sp, #0
 1286              	.LCFI57:
 1287              		.cfi_def_cfa_register 7
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the multi mode conversion value */
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (*(__IO uint32_t *) CDR_ADDRESS);
 1288              		.loc 1 1002 0
 1289 0004 42F20833 		movw	r3, #8968
 1290 0008 C4F20103 		movt	r3, 16385
 1291 000c 1B68     		ldr	r3, [r3, #0]
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1292              		.loc 1 1003 0
 1293 000e 1846     		mov	r0, r3
 1294 0010 BD46     		mov	sp, r7
 1295 0012 80BC     		pop	{r7}
 1296 0014 7047     		bx	lr
 1297              		.cfi_endproc
 1298              	.LFE129:
 1300 0016 00BF     		.section	.text.ADC_DMACmd,"ax",%progbits
 1301              		.align	2
 1302              		.global	ADC_DMACmd
 1303              		.thumb
 1304              		.thumb_func
 1306              	ADC_DMACmd:
 1307              	.LFB130:
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group5 Regular Channels DMA Configuration functions
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels DMA Configuration functions 
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Regular Channels DMA Configuration functions
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the DMA for ADC regular 
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   channels.
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Since converted regular channel values are stored into a unique data register, 
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is useful to use DMA for conversion of more than one regular channel. This 
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   avoids the loss of the data already stored in the ADC Data register. 
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   When the DMA mode is enabled (using the ADC_DMACmd() function), after each
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   conversion of a regular channel, a DMA request is generated.
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for Independent ADC mode" 
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   configuration (using the ADC_DMARequestAfterLastTransferCmd() function), 
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for multi ADC mode" configuration 
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (using the void ADC_MultiModeDMARequestAfterLastTransferCmd() function), 
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1308              		.loc 1 1049 0
 1309              		.cfi_startproc
 1310              		@ args = 0, pretend = 0, frame = 8
 1311              		@ frame_needed = 1, uses_anonymous_args = 0
 1312              		@ link register save eliminated.
 1313 0000 80B4     		push	{r7}
 1314              	.LCFI58:
 1315              		.cfi_def_cfa_offset 4
 1316              		.cfi_offset 7, -4
 1317 0002 83B0     		sub	sp, sp, #12
 1318              	.LCFI59:
 1319              		.cfi_def_cfa_offset 16
 1320 0004 00AF     		add	r7, sp, #0
 1321              	.LCFI60:
 1322              		.cfi_def_cfa_register 7
 1323 0006 7860     		str	r0, [r7, #4]
 1324 0008 0B46     		mov	r3, r1
 1325 000a FB70     		strb	r3, [r7, #3]
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1326              		.loc 1 1053 0
 1327 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1328 000e 002B     		cmp	r3, #0
 1329 0010 06D0     		beq	.L41
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request */
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 1330              		.loc 1 1056 0
 1331 0012 7B68     		ldr	r3, [r7, #4]
 1332 0014 9B68     		ldr	r3, [r3, #8]
 1333 0016 43F48072 		orr	r2, r3, #256
 1334 001a 7B68     		ldr	r3, [r7, #4]
 1335 001c 9A60     		str	r2, [r3, #8]
 1336 001e 05E0     		b	.L40
 1337              	.L41:
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request */
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 1338              		.loc 1 1061 0
 1339 0020 7B68     		ldr	r3, [r7, #4]
 1340 0022 9B68     		ldr	r3, [r3, #8]
 1341 0024 23F48072 		bic	r2, r3, #256
 1342 0028 7B68     		ldr	r3, [r7, #4]
 1343 002a 9A60     		str	r2, [r3, #8]
 1344              	.L40:
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1345              		.loc 1 1063 0
 1346 002c 07F10C07 		add	r7, r7, #12
 1347 0030 BD46     		mov	sp, r7
 1348 0032 80BC     		pop	{r7}
 1349 0034 7047     		bx	lr
 1350              		.cfi_endproc
 1351              	.LFE130:
 1353 0036 00BF     		.section	.text.ADC_DMARequestAfterLastTransferCmd,"ax",%progbits
 1354              		.align	2
 1355              		.global	ADC_DMARequestAfterLastTransferCmd
 1356              		.thumb
 1357              		.thumb_func
 1359              	ADC_DMARequestAfterLastTransferCmd:
 1360              	.LFB131:
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer (Single-ADC mode)  
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1361              		.loc 1 1073 0
 1362              		.cfi_startproc
 1363              		@ args = 0, pretend = 0, frame = 8
 1364              		@ frame_needed = 1, uses_anonymous_args = 0
 1365              		@ link register save eliminated.
 1366 0000 80B4     		push	{r7}
 1367              	.LCFI61:
 1368              		.cfi_def_cfa_offset 4
 1369              		.cfi_offset 7, -4
 1370 0002 83B0     		sub	sp, sp, #12
 1371              	.LCFI62:
 1372              		.cfi_def_cfa_offset 16
 1373 0004 00AF     		add	r7, sp, #0
 1374              	.LCFI63:
 1375              		.cfi_def_cfa_register 7
 1376 0006 7860     		str	r0, [r7, #4]
 1377 0008 0B46     		mov	r3, r1
 1378 000a FB70     		strb	r3, [r7, #3]
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1379              		.loc 1 1077 0
 1380 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1381 000e 002B     		cmp	r3, #0
 1382 0010 06D0     		beq	.L44
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 1383              		.loc 1 1080 0
 1384 0012 7B68     		ldr	r3, [r7, #4]
 1385 0014 9B68     		ldr	r3, [r3, #8]
 1386 0016 43F40072 		orr	r2, r3, #512
 1387 001a 7B68     		ldr	r3, [r7, #4]
 1388 001c 9A60     		str	r2, [r3, #8]
 1389 001e 05E0     		b	.L43
 1390              	.L44:
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 1391              		.loc 1 1085 0
 1392 0020 7B68     		ldr	r3, [r7, #4]
 1393 0022 9B68     		ldr	r3, [r3, #8]
 1394 0024 23F40072 		bic	r2, r3, #512
 1395 0028 7B68     		ldr	r3, [r7, #4]
 1396 002a 9A60     		str	r2, [r3, #8]
 1397              	.L43:
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1398              		.loc 1 1087 0
 1399 002c 07F10C07 		add	r7, r7, #12
 1400 0030 BD46     		mov	sp, r7
 1401 0032 80BC     		pop	{r7}
 1402 0034 7047     		bx	lr
 1403              		.cfi_endproc
 1404              	.LFE131:
 1406 0036 00BF     		.section	.text.ADC_MultiModeDMARequestAfterLastTransferCmd,"ax",%progbits
 1407              		.align	2
 1408              		.global	ADC_MultiModeDMARequestAfterLastTransferCmd
 1409              		.thumb
 1410              		.thumb_func
 1412              	ADC_MultiModeDMARequestAfterLastTransferCmd:
 1413              	.LFB132:
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer in multi ADC mode       
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   if Enabled, DMA requests are issued as long as data are converted and 
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         DMA mode for multi ADC mode (selected using ADC_CommonInit() function 
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1414              		.loc 1 1100 0
 1415              		.cfi_startproc
 1416              		@ args = 0, pretend = 0, frame = 8
 1417              		@ frame_needed = 1, uses_anonymous_args = 0
 1418              		@ link register save eliminated.
 1419 0000 80B4     		push	{r7}
 1420              	.LCFI64:
 1421              		.cfi_def_cfa_offset 4
 1422              		.cfi_offset 7, -4
 1423 0002 83B0     		sub	sp, sp, #12
 1424              	.LCFI65:
 1425              		.cfi_def_cfa_offset 16
 1426 0004 00AF     		add	r7, sp, #0
 1427              	.LCFI66:
 1428              		.cfi_def_cfa_register 7
 1429 0006 0346     		mov	r3, r0
 1430 0008 FB71     		strb	r3, [r7, #7]
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1431              		.loc 1 1103 0
 1432 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1433 000c 002B     		cmp	r3, #0
 1434 000e 0CD0     		beq	.L47
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 1435              		.loc 1 1106 0
 1436 0010 4FF40C53 		mov	r3, #8960
 1437 0014 C4F20103 		movt	r3, 16385
 1438 0018 4FF40C52 		mov	r2, #8960
 1439 001c C4F20102 		movt	r2, 16385
 1440 0020 5268     		ldr	r2, [r2, #4]
 1441 0022 42F40052 		orr	r2, r2, #8192
 1442 0026 5A60     		str	r2, [r3, #4]
 1443 0028 0BE0     		b	.L46
 1444              	.L47:
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 1445              		.loc 1 1111 0
 1446 002a 4FF40C53 		mov	r3, #8960
 1447 002e C4F20103 		movt	r3, 16385
 1448 0032 4FF40C52 		mov	r2, #8960
 1449 0036 C4F20102 		movt	r2, 16385
 1450 003a 5268     		ldr	r2, [r2, #4]
 1451 003c 22F40052 		bic	r2, r2, #8192
 1452 0040 5A60     		str	r2, [r3, #4]
 1453              	.L46:
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1454              		.loc 1 1113 0
 1455 0042 07F10C07 		add	r7, r7, #12
 1456 0046 BD46     		mov	sp, r7
 1457 0048 80BC     		pop	{r7}
 1458 004a 7047     		bx	lr
 1459              		.cfi_endproc
 1460              	.LFE132:
 1462              		.section	.text.ADC_InjectedChannelConfig,"ax",%progbits
 1463              		.align	2
 1464              		.global	ADC_InjectedChannelConfig
 1465              		.thumb
 1466              		.thumb_func
 1468              	ADC_InjectedChannelConfig:
 1469              	.LFB133:
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group6 Injected channels Configuration functions
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Injected channels Configuration functions 
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      Injected channels Configuration functions
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provide functions allowing to configure the ADC Injected channels,
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration functions for Injected channels: This subsection provides 
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      functions allowing to configure the ADC injected channels :    
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the rank in the injected group sequencer for each channel
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the sampling time for each channel    
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Auto injected Mode  
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Discontinuous Mode 
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - scan mode activation  
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External/software trigger source   
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External trigger edge 
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - injected channels sequencer.
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Get the Specified Injected channel conversion data: This subsection 
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       provides an important function in the ADC peripheral since it returns the 
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       converted data of the specific injected channel.
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the injected group sequencer. 
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 4.
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1470              		.loc 1 1187 0
 1471              		.cfi_startproc
 1472              		@ args = 0, pretend = 0, frame = 24
 1473              		@ frame_needed = 1, uses_anonymous_args = 0
 1474              		@ link register save eliminated.
 1475 0000 80B4     		push	{r7}
 1476              	.LCFI67:
 1477              		.cfi_def_cfa_offset 4
 1478              		.cfi_offset 7, -4
 1479 0002 87B0     		sub	sp, sp, #28
 1480              	.LCFI68:
 1481              		.cfi_def_cfa_offset 32
 1482 0004 00AF     		add	r7, sp, #0
 1483              	.LCFI69:
 1484              		.cfi_def_cfa_register 7
 1485 0006 7860     		str	r0, [r7, #4]
 1486 0008 F970     		strb	r1, [r7, #3]
 1487 000a BA70     		strb	r2, [r7, #2]
 1488 000c 7B70     		strb	r3, [r7, #1]
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 1489              		.loc 1 1188 0
 1490 000e 4FF00003 		mov	r3, #0
 1491 0012 7B61     		str	r3, [r7, #20]
 1492 0014 4FF00003 		mov	r3, #0
 1493 0018 3B61     		str	r3, [r7, #16]
 1494 001a 4FF00003 		mov	r3, #0
 1495 001e FB60     		str	r3, [r7, #12]
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 1496              		.loc 1 1195 0
 1497 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1498 0022 092B     		cmp	r3, #9
 1499 0024 27D9     		bls	.L50
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 1500              		.loc 1 1198 0
 1501 0026 7B68     		ldr	r3, [r7, #4]
 1502 0028 DB68     		ldr	r3, [r3, #12]
 1503 002a 7B61     		str	r3, [r7, #20]
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 1504              		.loc 1 1200 0
 1505 002c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1506 002e 1346     		mov	r3, r2
 1507 0030 4FEA4303 		lsl	r3, r3, #1
 1508 0034 9B18     		adds	r3, r3, r2
 1509 0036 A3F11E03 		sub	r3, r3, #30
 1510 003a 4FF00702 		mov	r2, #7
 1511 003e 02FA03F3 		lsl	r3, r2, r3
 1512 0042 3B61     		str	r3, [r7, #16]
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 1513              		.loc 1 1202 0
 1514 0044 3B69     		ldr	r3, [r7, #16]
 1515 0046 6FEA0303 		mvn	r3, r3
 1516 004a 7A69     		ldr	r2, [r7, #20]
 1517 004c 1340     		ands	r3, r3, r2
 1518 004e 7B61     		str	r3, [r7, #20]
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 1519              		.loc 1 1204 0
 1520 0050 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 1521 0052 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1522 0054 1346     		mov	r3, r2
 1523 0056 4FEA4303 		lsl	r3, r3, #1
 1524 005a 9B18     		adds	r3, r3, r2
 1525 005c A3F11E03 		sub	r3, r3, #30
 1526 0060 01FA03F3 		lsl	r3, r1, r3
 1527 0064 3B61     		str	r3, [r7, #16]
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 1528              		.loc 1 1206 0
 1529 0066 7A69     		ldr	r2, [r7, #20]
 1530 0068 3B69     		ldr	r3, [r7, #16]
 1531 006a 1343     		orrs	r3, r3, r2
 1532 006c 7B61     		str	r3, [r7, #20]
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 1533              		.loc 1 1208 0
 1534 006e 7B68     		ldr	r3, [r7, #4]
 1535 0070 7A69     		ldr	r2, [r7, #20]
 1536 0072 DA60     		str	r2, [r3, #12]
 1537 0074 22E0     		b	.L51
 1538              	.L50:
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 1539              		.loc 1 1213 0
 1540 0076 7B68     		ldr	r3, [r7, #4]
 1541 0078 1B69     		ldr	r3, [r3, #16]
 1542 007a 7B61     		str	r3, [r7, #20]
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 1543              		.loc 1 1215 0
 1544 007c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1545 007e 1346     		mov	r3, r2
 1546 0080 4FEA4303 		lsl	r3, r3, #1
 1547 0084 9B18     		adds	r3, r3, r2
 1548 0086 4FF00702 		mov	r2, #7
 1549 008a 02FA03F3 		lsl	r3, r2, r3
 1550 008e 3B61     		str	r3, [r7, #16]
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 1551              		.loc 1 1217 0
 1552 0090 3B69     		ldr	r3, [r7, #16]
 1553 0092 6FEA0303 		mvn	r3, r3
 1554 0096 7A69     		ldr	r2, [r7, #20]
 1555 0098 1340     		ands	r3, r3, r2
 1556 009a 7B61     		str	r3, [r7, #20]
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 1557              		.loc 1 1219 0
 1558 009c 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 1559 009e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1560 00a0 1346     		mov	r3, r2
 1561 00a2 4FEA4303 		lsl	r3, r3, #1
 1562 00a6 9B18     		adds	r3, r3, r2
 1563 00a8 01FA03F3 		lsl	r3, r1, r3
 1564 00ac 3B61     		str	r3, [r7, #16]
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 1565              		.loc 1 1221 0
 1566 00ae 7A69     		ldr	r2, [r7, #20]
 1567 00b0 3B69     		ldr	r3, [r7, #16]
 1568 00b2 1343     		orrs	r3, r3, r2
 1569 00b4 7B61     		str	r3, [r7, #20]
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 1570              		.loc 1 1223 0
 1571 00b6 7B68     		ldr	r3, [r7, #4]
 1572 00b8 7A69     		ldr	r2, [r7, #20]
 1573 00ba 1A61     		str	r2, [r3, #16]
 1574              	.L51:
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Rank configuration */
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1575              		.loc 1 1227 0
 1576 00bc 7B68     		ldr	r3, [r7, #4]
 1577 00be 9B6B     		ldr	r3, [r3, #56]
 1578 00c0 7B61     		str	r3, [r7, #20]
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get JL value: Number = JL+1 */
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 1579              		.loc 1 1229 0
 1580 00c2 7B69     		ldr	r3, [r7, #20]
 1581 00c4 03F44013 		and	r3, r3, #3145728
 1582 00c8 4FEA1353 		lsr	r3, r3, #20
 1583 00cc FB60     		str	r3, [r7, #12]
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1584              		.loc 1 1231 0
 1585 00ce FB68     		ldr	r3, [r7, #12]
 1586 00d0 DBB2     		uxtb	r3, r3
 1587 00d2 6FEA0303 		mvn	r3, r3
 1588 00d6 DAB2     		uxtb	r2, r3
 1589 00d8 BB78     		ldrb	r3, [r7, #2]
 1590 00da D318     		adds	r3, r2, r3
 1591 00dc DBB2     		uxtb	r3, r3
 1592 00de 03F10303 		add	r3, r3, #3
 1593 00e2 DBB2     		uxtb	r3, r3
 1594 00e4 1A46     		mov	r2, r3
 1595 00e6 1346     		mov	r3, r2
 1596 00e8 4FEA8303 		lsl	r3, r3, #2
 1597 00ec 9B18     		adds	r3, r3, r2
 1598 00ee 4FF01F02 		mov	r2, #31
 1599 00f2 02FA03F3 		lsl	r3, r2, r3
 1600 00f6 3B61     		str	r3, [r7, #16]
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old JSQx bits for the selected rank */
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= ~tmpreg2;
 1601              		.loc 1 1233 0
 1602 00f8 3B69     		ldr	r3, [r7, #16]
 1603 00fa 6FEA0303 		mvn	r3, r3
 1604 00fe 7A69     		ldr	r2, [r7, #20]
 1605 0100 1340     		ands	r3, r3, r2
 1606 0102 7B61     		str	r3, [r7, #20]
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1607              		.loc 1 1235 0
 1608 0104 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 1609 0106 FB68     		ldr	r3, [r7, #12]
 1610 0108 DBB2     		uxtb	r3, r3
 1611 010a 6FEA0303 		mvn	r3, r3
 1612 010e DAB2     		uxtb	r2, r3
 1613 0110 BB78     		ldrb	r3, [r7, #2]
 1614 0112 D318     		adds	r3, r2, r3
 1615 0114 DBB2     		uxtb	r3, r3
 1616 0116 03F10303 		add	r3, r3, #3
 1617 011a DBB2     		uxtb	r3, r3
 1618 011c 1A46     		mov	r2, r3
 1619 011e 1346     		mov	r3, r2
 1620 0120 4FEA8303 		lsl	r3, r3, #2
 1621 0124 9B18     		adds	r3, r3, r2
 1622 0126 01FA03F3 		lsl	r3, r1, r3
 1623 012a 3B61     		str	r3, [r7, #16]
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the JSQx bits for the selected rank */
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2;
 1624              		.loc 1 1237 0
 1625 012c 7A69     		ldr	r2, [r7, #20]
 1626 012e 3B69     		ldr	r3, [r7, #16]
 1627 0130 1343     		orrs	r3, r3, r2
 1628 0132 7B61     		str	r3, [r7, #20]
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1629              		.loc 1 1239 0
 1630 0134 7B68     		ldr	r3, [r7, #4]
 1631 0136 7A69     		ldr	r2, [r7, #20]
 1632 0138 9A63     		str	r2, [r3, #56]
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1633              		.loc 1 1240 0
 1634 013a 07F11C07 		add	r7, r7, #28
 1635 013e BD46     		mov	sp, r7
 1636 0140 80BC     		pop	{r7}
 1637 0142 7047     		bx	lr
 1638              		.cfi_endproc
 1639              	.LFE133:
 1641              		.section	.text.ADC_InjectedSequencerLengthConfig,"ax",%progbits
 1642              		.align	2
 1643              		.global	ADC_InjectedSequencerLengthConfig
 1644              		.thumb
 1645              		.thumb_func
 1647              	ADC_InjectedSequencerLengthConfig:
 1648              	.LFB134:
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the sequencer length for injected channels
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Length: The sequencer length. 
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a number between 1 to 4.
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1649              		.loc 1 1250 0
 1650              		.cfi_startproc
 1651              		@ args = 0, pretend = 0, frame = 16
 1652              		@ frame_needed = 1, uses_anonymous_args = 0
 1653              		@ link register save eliminated.
 1654 0000 80B4     		push	{r7}
 1655              	.LCFI70:
 1656              		.cfi_def_cfa_offset 4
 1657              		.cfi_offset 7, -4
 1658 0002 85B0     		sub	sp, sp, #20
 1659              	.LCFI71:
 1660              		.cfi_def_cfa_offset 24
 1661 0004 00AF     		add	r7, sp, #0
 1662              	.LCFI72:
 1663              		.cfi_def_cfa_register 7
 1664 0006 7860     		str	r0, [r7, #4]
 1665 0008 0B46     		mov	r3, r1
 1666 000a FB70     		strb	r3, [r7, #3]
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 1667              		.loc 1 1251 0
 1668 000c 4FF00003 		mov	r3, #0
 1669 0010 FB60     		str	r3, [r7, #12]
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 1670              		.loc 1 1252 0
 1671 0012 4FF00003 		mov	r3, #0
 1672 0016 BB60     		str	r3, [r7, #8]
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1673              		.loc 1 1258 0
 1674 0018 7B68     		ldr	r3, [r7, #4]
 1675 001a 9B6B     		ldr	r3, [r3, #56]
 1676 001c FB60     		str	r3, [r7, #12]
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old injected sequence length JL bits */
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
 1677              		.loc 1 1261 0
 1678 001e FB68     		ldr	r3, [r7, #12]
 1679 0020 23F44013 		bic	r3, r3, #3145728
 1680 0024 FB60     		str	r3, [r7, #12]
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the injected sequence length JL bits */
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Length - 1; 
 1681              		.loc 1 1264 0
 1682 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1683 0028 03F1FF33 		add	r3, r3, #-1
 1684 002c BB60     		str	r3, [r7, #8]
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 1685              		.loc 1 1265 0
 1686 002e BB68     		ldr	r3, [r7, #8]
 1687 0030 4FEA0353 		lsl	r3, r3, #20
 1688 0034 FA68     		ldr	r2, [r7, #12]
 1689 0036 1343     		orrs	r3, r3, r2
 1690 0038 FB60     		str	r3, [r7, #12]
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1691              		.loc 1 1268 0
 1692 003a 7B68     		ldr	r3, [r7, #4]
 1693 003c FA68     		ldr	r2, [r7, #12]
 1694 003e 9A63     		str	r2, [r3, #56]
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1695              		.loc 1 1269 0
 1696 0040 07F11407 		add	r7, r7, #20
 1697 0044 BD46     		mov	sp, r7
 1698 0046 80BC     		pop	{r7}
 1699 0048 7047     		bx	lr
 1700              		.cfi_endproc
 1701              	.LFE134:
 1703 004a 00BF     		.section	.text.ADC_SetInjectedOffset,"ax",%progbits
 1704              		.align	2
 1705              		.global	ADC_SetInjectedOffset
 1706              		.thumb
 1707              		.thumb_func
 1709              	ADC_SetInjectedOffset:
 1710              	.LFB135:
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Set the injected channels conversion value offset
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12bit value.
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1711              		.loc 1 1285 0
 1712              		.cfi_startproc
 1713              		@ args = 0, pretend = 0, frame = 16
 1714              		@ frame_needed = 1, uses_anonymous_args = 0
 1715              		@ link register save eliminated.
 1716 0000 80B4     		push	{r7}
 1717              	.LCFI73:
 1718              		.cfi_def_cfa_offset 4
 1719              		.cfi_offset 7, -4
 1720 0002 85B0     		sub	sp, sp, #20
 1721              	.LCFI74:
 1722              		.cfi_def_cfa_offset 24
 1723 0004 00AF     		add	r7, sp, #0
 1724              	.LCFI75:
 1725              		.cfi_def_cfa_register 7
 1726 0006 7860     		str	r0, [r7, #4]
 1727 0008 1346     		mov	r3, r2
 1728 000a 0A46     		mov	r2, r1
 1729 000c FA70     		strb	r2, [r7, #3]
 1730 000e 3B80     		strh	r3, [r7, #0]	@ movhi
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     __IO uint32_t tmp = 0;
 1731              		.loc 1 1286 0
 1732 0010 4FF00003 		mov	r3, #0
 1733 0014 FB60     		str	r3, [r7, #12]
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 1734              		.loc 1 1292 0
 1735 0016 7B68     		ldr	r3, [r7, #4]
 1736 0018 FB60     		str	r3, [r7, #12]
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel;
 1737              		.loc 1 1293 0
 1738 001a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1739 001c FB68     		ldr	r3, [r7, #12]
 1740 001e D318     		adds	r3, r2, r3
 1741 0020 FB60     		str	r3, [r7, #12]
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the selected injected channel data offset */
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 1742              		.loc 1 1296 0
 1743 0022 FB68     		ldr	r3, [r7, #12]
 1744 0024 3A88     		ldrh	r2, [r7, #0]
 1745 0026 1A60     		str	r2, [r3, #0]
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1746              		.loc 1 1297 0
 1747 0028 07F11407 		add	r7, r7, #20
 1748 002c BD46     		mov	sp, r7
 1749 002e 80BC     		pop	{r7}
 1750 0030 7047     		bx	lr
 1751              		.cfi_endproc
 1752              	.LFE135:
 1754 0032 00BF     		.section	.text.ADC_ExternalTrigInjectedConvConfig,"ax",%progbits
 1755              		.align	2
 1756              		.global	ADC_ExternalTrigInjectedConvConfig
 1757              		.thumb
 1758              		.thumb_func
 1760              	ADC_ExternalTrigInjectedConvConfig:
 1761              	.LFB136:
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion.
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:                    
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected 
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected 
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected 
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected 
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC2: Timer3 capture compare2 selected 
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected 
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC1: Timer4 capture compare1 selected             
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC2: Timer4 capture compare2 selected 
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected             
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected 
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected             
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected                  
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC3: Timer8 capture compare3 selected             
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected  
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1762              		.loc 1 1323 0
 1763              		.cfi_startproc
 1764              		@ args = 0, pretend = 0, frame = 16
 1765              		@ frame_needed = 1, uses_anonymous_args = 0
 1766              		@ link register save eliminated.
 1767 0000 80B4     		push	{r7}
 1768              	.LCFI76:
 1769              		.cfi_def_cfa_offset 4
 1770              		.cfi_offset 7, -4
 1771 0002 85B0     		sub	sp, sp, #20
 1772              	.LCFI77:
 1773              		.cfi_def_cfa_offset 24
 1774 0004 00AF     		add	r7, sp, #0
 1775              	.LCFI78:
 1776              		.cfi_def_cfa_register 7
 1777 0006 7860     		str	r0, [r7, #4]
 1778 0008 3960     		str	r1, [r7, #0]
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 1779              		.loc 1 1324 0
 1780 000a 4FF00003 		mov	r3, #0
 1781 000e FB60     		str	r3, [r7, #12]
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1782              		.loc 1 1330 0
 1783 0010 7B68     		ldr	r3, [r7, #4]
 1784 0012 9B68     		ldr	r3, [r3, #8]
 1785 0014 FB60     		str	r3, [r7, #12]
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external event selection for injected group */
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTSEL_RESET;
 1786              		.loc 1 1333 0
 1787 0016 FB68     		ldr	r3, [r7, #12]
 1788 0018 23F47023 		bic	r3, r3, #983040
 1789 001c FB60     		str	r3, [r7, #12]
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the external event selection for injected group */
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 1790              		.loc 1 1336 0
 1791 001e FA68     		ldr	r2, [r7, #12]
 1792 0020 3B68     		ldr	r3, [r7, #0]
 1793 0022 1343     		orrs	r3, r3, r2
 1794 0024 FB60     		str	r3, [r7, #12]
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1795              		.loc 1 1339 0
 1796 0026 7B68     		ldr	r3, [r7, #4]
 1797 0028 FA68     		ldr	r2, [r7, #12]
 1798 002a 9A60     		str	r2, [r3, #8]
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1799              		.loc 1 1340 0
 1800 002c 07F11407 		add	r7, r7, #20
 1801 0030 BD46     		mov	sp, r7
 1802 0032 80BC     		pop	{r7}
 1803 0034 7047     		bx	lr
 1804              		.cfi_endproc
 1805              	.LFE136:
 1807 0036 00BF     		.section	.text.ADC_ExternalTrigInjectedConvEdgeConfig,"ax",%progbits
 1808              		.align	2
 1809              		.global	ADC_ExternalTrigInjectedConvEdgeConfig
 1810              		.thumb
 1811              		.thumb_func
 1813              	ADC_ExternalTrigInjectedConvEdgeConfig:
 1814              	.LFB137:
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger edge for injected channels conversion.
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConvEdge: specifies the ADC external trigger edge
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         to start injected conversion. 
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_None: external trigger disabled for 
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                     injected conversion
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Rising: detection on rising edge
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Falling: detection on falling edge
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                               and falling edge
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEd
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1815              		.loc 1 1357 0
 1816              		.cfi_startproc
 1817              		@ args = 0, pretend = 0, frame = 16
 1818              		@ frame_needed = 1, uses_anonymous_args = 0
 1819              		@ link register save eliminated.
 1820 0000 80B4     		push	{r7}
 1821              	.LCFI79:
 1822              		.cfi_def_cfa_offset 4
 1823              		.cfi_offset 7, -4
 1824 0002 85B0     		sub	sp, sp, #20
 1825              	.LCFI80:
 1826              		.cfi_def_cfa_offset 24
 1827 0004 00AF     		add	r7, sp, #0
 1828              	.LCFI81:
 1829              		.cfi_def_cfa_register 7
 1830 0006 7860     		str	r0, [r7, #4]
 1831 0008 3960     		str	r1, [r7, #0]
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 1832              		.loc 1 1358 0
 1833 000a 4FF00003 		mov	r3, #0
 1834 000e FB60     		str	r3, [r7, #12]
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1835              		.loc 1 1363 0
 1836 0010 7B68     		ldr	r3, [r7, #4]
 1837 0012 9B68     		ldr	r3, [r3, #8]
 1838 0014 FB60     		str	r3, [r7, #12]
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external trigger edge for injected group */
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTEN_RESET;
 1839              		.loc 1 1365 0
 1840 0016 FB68     		ldr	r3, [r7, #12]
 1841 0018 23F44013 		bic	r3, r3, #3145728
 1842 001c FB60     		str	r3, [r7, #12]
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the new external trigger edge for injected group */
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConvEdge;
 1843              		.loc 1 1367 0
 1844 001e FA68     		ldr	r2, [r7, #12]
 1845 0020 3B68     		ldr	r3, [r7, #0]
 1846 0022 1343     		orrs	r3, r3, r2
 1847 0024 FB60     		str	r3, [r7, #12]
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1848              		.loc 1 1369 0
 1849 0026 7B68     		ldr	r3, [r7, #4]
 1850 0028 FA68     		ldr	r2, [r7, #12]
 1851 002a 9A60     		str	r2, [r3, #8]
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1852              		.loc 1 1370 0
 1853 002c 07F11407 		add	r7, r7, #20
 1854 0030 BD46     		mov	sp, r7
 1855 0032 80BC     		pop	{r7}
 1856 0034 7047     		bx	lr
 1857              		.cfi_endproc
 1858              	.LFE137:
 1860 0036 00BF     		.section	.text.ADC_SoftwareStartInjectedConv,"ax",%progbits
 1861              		.align	2
 1862              		.global	ADC_SoftwareStartInjectedConv
 1863              		.thumb
 1864              		.thumb_func
 1866              	ADC_SoftwareStartInjectedConv:
 1867              	.LFB138:
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the injected channels.
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
1378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1868              		.loc 1 1378 0
 1869              		.cfi_startproc
 1870              		@ args = 0, pretend = 0, frame = 8
 1871              		@ frame_needed = 1, uses_anonymous_args = 0
 1872              		@ link register save eliminated.
 1873 0000 80B4     		push	{r7}
 1874              	.LCFI82:
 1875              		.cfi_def_cfa_offset 4
 1876              		.cfi_offset 7, -4
 1877 0002 83B0     		sub	sp, sp, #12
 1878              	.LCFI83:
 1879              		.cfi_def_cfa_offset 16
 1880 0004 00AF     		add	r7, sp, #0
 1881              	.LCFI84:
 1882              		.cfi_def_cfa_register 7
 1883 0006 7860     		str	r0, [r7, #4]
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for injected group */
1382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 1884              		.loc 1 1382 0
 1885 0008 7B68     		ldr	r3, [r7, #4]
 1886 000a 9B68     		ldr	r3, [r3, #8]
 1887 000c 43F48002 		orr	r2, r3, #4194304
 1888 0010 7B68     		ldr	r3, [r7, #4]
 1889 0012 9A60     		str	r2, [r3, #8]
1383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1890              		.loc 1 1383 0
 1891 0014 07F10C07 		add	r7, r7, #12
 1892 0018 BD46     		mov	sp, r7
 1893 001a 80BC     		pop	{r7}
 1894 001c 7047     		bx	lr
 1895              		.cfi_endproc
 1896              	.LFE138:
 1898 001e 00BF     		.section	.text.ADC_GetSoftwareStartInjectedConvCmdStatus,"ax",%progbits
 1899              		.align	2
 1900              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 1901              		.thumb
 1902              		.thumb_func
 1904              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 1905              	.LFB139:
1384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
1391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1906              		.loc 1 1391 0
 1907              		.cfi_startproc
 1908              		@ args = 0, pretend = 0, frame = 16
 1909              		@ frame_needed = 1, uses_anonymous_args = 0
 1910              		@ link register save eliminated.
 1911 0000 80B4     		push	{r7}
 1912              	.LCFI85:
 1913              		.cfi_def_cfa_offset 4
 1914              		.cfi_offset 7, -4
 1915 0002 85B0     		sub	sp, sp, #20
 1916              	.LCFI86:
 1917              		.cfi_def_cfa_offset 24
 1918 0004 00AF     		add	r7, sp, #0
 1919              	.LCFI87:
 1920              		.cfi_def_cfa_register 7
 1921 0006 7860     		str	r0, [r7, #4]
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 1922              		.loc 1 1392 0
 1923 0008 4FF00003 		mov	r3, #0
 1924 000c FB73     		strb	r3, [r7, #15]
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of JSWSTART bit */
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 1925              		.loc 1 1397 0
 1926 000e 7B68     		ldr	r3, [r7, #4]
 1927 0010 9B68     		ldr	r3, [r3, #8]
 1928 0012 03F48003 		and	r3, r3, #4194304
 1929 0016 002B     		cmp	r3, #0
 1930 0018 03D0     		beq	.L58
1398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is set */
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 1931              		.loc 1 1400 0
 1932 001a 4FF00103 		mov	r3, #1
 1933 001e FB73     		strb	r3, [r7, #15]
 1934 0020 02E0     		b	.L59
 1935              	.L58:
1401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is reset */
1405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 1936              		.loc 1 1405 0
 1937 0022 4FF00003 		mov	r3, #0
 1938 0026 FB73     		strb	r3, [r7, #15]
 1939              	.L59:
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the JSWSTART bit status */
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 1940              		.loc 1 1408 0
 1941 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1942              		.loc 1 1409 0
 1943 002a 1846     		mov	r0, r3
 1944 002c 07F11407 		add	r7, r7, #20
 1945 0030 BD46     		mov	sp, r7
 1946 0032 80BC     		pop	{r7}
 1947 0034 7047     		bx	lr
 1948              		.cfi_endproc
 1949              	.LFE139:
 1951 0036 00BF     		.section	.text.ADC_AutoInjectedConvCmd,"ax",%progbits
 1952              		.align	2
 1953              		.global	ADC_AutoInjectedConvCmd
 1954              		.thumb
 1955              		.thumb_func
 1957              	ADC_AutoInjectedConvCmd:
 1958              	.LFB140:
1410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group 
1413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         conversion after regular one.
1414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
1416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1959              		.loc 1 1420 0
 1960              		.cfi_startproc
 1961              		@ args = 0, pretend = 0, frame = 8
 1962              		@ frame_needed = 1, uses_anonymous_args = 0
 1963              		@ link register save eliminated.
 1964 0000 80B4     		push	{r7}
 1965              	.LCFI88:
 1966              		.cfi_def_cfa_offset 4
 1967              		.cfi_offset 7, -4
 1968 0002 83B0     		sub	sp, sp, #12
 1969              	.LCFI89:
 1970              		.cfi_def_cfa_offset 16
 1971 0004 00AF     		add	r7, sp, #0
 1972              	.LCFI90:
 1973              		.cfi_def_cfa_register 7
 1974 0006 7860     		str	r0, [r7, #4]
 1975 0008 0B46     		mov	r3, r1
 1976 000a FB70     		strb	r3, [r7, #3]
1421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1977              		.loc 1 1424 0
 1978 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1979 000e 002B     		cmp	r3, #0
 1980 0010 06D0     		beq	.L61
1425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
1427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 1981              		.loc 1 1427 0
 1982 0012 7B68     		ldr	r3, [r7, #4]
 1983 0014 5B68     		ldr	r3, [r3, #4]
 1984 0016 43F48062 		orr	r2, r3, #1024
 1985 001a 7B68     		ldr	r3, [r7, #4]
 1986 001c 5A60     		str	r2, [r3, #4]
 1987 001e 05E0     		b	.L60
 1988              	.L61:
1428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
1432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 1989              		.loc 1 1432 0
 1990 0020 7B68     		ldr	r3, [r7, #4]
 1991 0022 5B68     		ldr	r3, [r3, #4]
 1992 0024 23F48062 		bic	r2, r3, #1024
 1993 0028 7B68     		ldr	r3, [r7, #4]
 1994 002a 5A60     		str	r2, [r3, #4]
 1995              	.L60:
1433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1996              		.loc 1 1434 0
 1997 002c 07F10C07 		add	r7, r7, #12
 1998 0030 BD46     		mov	sp, r7
 1999 0032 80BC     		pop	{r7}
 2000 0034 7047     		bx	lr
 2001              		.cfi_endproc
 2002              	.LFE140:
 2004 0036 00BF     		.section	.text.ADC_InjectedDiscModeCmd,"ax",%progbits
 2005              		.align	2
 2006              		.global	ADC_InjectedDiscModeCmd
 2007              		.thumb
 2008              		.thumb_func
 2010              	ADC_InjectedDiscModeCmd:
 2011              	.LFB141:
1435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group 
1438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel for the specified ADC
1439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on injected
1441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         group channel.
1442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2012              		.loc 1 1446 0
 2013              		.cfi_startproc
 2014              		@ args = 0, pretend = 0, frame = 8
 2015              		@ frame_needed = 1, uses_anonymous_args = 0
 2016              		@ link register save eliminated.
 2017 0000 80B4     		push	{r7}
 2018              	.LCFI91:
 2019              		.cfi_def_cfa_offset 4
 2020              		.cfi_offset 7, -4
 2021 0002 83B0     		sub	sp, sp, #12
 2022              	.LCFI92:
 2023              		.cfi_def_cfa_offset 16
 2024 0004 00AF     		add	r7, sp, #0
 2025              	.LCFI93:
 2026              		.cfi_def_cfa_register 7
 2027 0006 7860     		str	r0, [r7, #4]
 2028 0008 0B46     		mov	r3, r1
 2029 000a FB70     		strb	r3, [r7, #3]
1447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 2030              		.loc 1 1450 0
 2031 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2032 000e 002B     		cmp	r3, #0
 2033 0010 06D0     		beq	.L64
1451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
1453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 2034              		.loc 1 1453 0
 2035 0012 7B68     		ldr	r3, [r7, #4]
 2036 0014 5B68     		ldr	r3, [r3, #4]
 2037 0016 43F48052 		orr	r2, r3, #4096
 2038 001a 7B68     		ldr	r3, [r7, #4]
 2039 001c 5A60     		str	r2, [r3, #4]
 2040 001e 05E0     		b	.L63
 2041              	.L64:
1454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
1458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 2042              		.loc 1 1458 0
 2043 0020 7B68     		ldr	r3, [r7, #4]
 2044 0022 5B68     		ldr	r3, [r3, #4]
 2045 0024 23F48052 		bic	r2, r3, #4096
 2046 0028 7B68     		ldr	r3, [r7, #4]
 2047 002a 5A60     		str	r2, [r3, #4]
 2048              	.L63:
1459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2049              		.loc 1 1460 0
 2050 002c 07F10C07 		add	r7, r7, #12
 2051 0030 BD46     		mov	sp, r7
 2052 0032 80BC     		pop	{r7}
 2053 0034 7047     		bx	lr
 2054              		.cfi_endproc
 2055              	.LFE141:
 2057 0036 00BF     		.section	.text.ADC_GetInjectedConversionValue,"ax",%progbits
 2058              		.align	2
 2059              		.global	ADC_GetInjectedConversionValue
 2060              		.thumb
 2061              		.thumb_func
 2063              	ADC_GetInjectedConversionValue:
 2064              	.LFB142:
1461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
1472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2065              		.loc 1 1474 0
 2066              		.cfi_startproc
 2067              		@ args = 0, pretend = 0, frame = 16
 2068              		@ frame_needed = 1, uses_anonymous_args = 0
 2069              		@ link register save eliminated.
 2070 0000 80B4     		push	{r7}
 2071              	.LCFI94:
 2072              		.cfi_def_cfa_offset 4
 2073              		.cfi_offset 7, -4
 2074 0002 85B0     		sub	sp, sp, #20
 2075              	.LCFI95:
 2076              		.cfi_def_cfa_offset 24
 2077 0004 00AF     		add	r7, sp, #0
 2078              	.LCFI96:
 2079              		.cfi_def_cfa_register 7
 2080 0006 7860     		str	r0, [r7, #4]
 2081 0008 0B46     		mov	r3, r1
 2082 000a FB70     		strb	r3, [r7, #3]
1475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   __IO uint32_t tmp = 0;
 2083              		.loc 1 1475 0
 2084 000c 4FF00003 		mov	r3, #0
 2085 0010 FB60     		str	r3, [r7, #12]
1476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 2086              		.loc 1 1481 0
 2087 0012 7B68     		ldr	r3, [r7, #4]
 2088 0014 FB60     		str	r3, [r7, #12]
1482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel + JDR_OFFSET;
 2089              		.loc 1 1482 0
 2090 0016 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2091 0018 FB68     		ldr	r3, [r7, #12]
 2092 001a D318     		adds	r3, r2, r3
 2093 001c 03F12803 		add	r3, r3, #40
 2094 0020 FB60     		str	r3, [r7, #12]
1483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Returns the selected injected channel conversion data value */
1485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp); 
 2095              		.loc 1 1485 0
 2096 0022 FB68     		ldr	r3, [r7, #12]
 2097 0024 1B68     		ldr	r3, [r3, #0]
 2098 0026 9BB2     		uxth	r3, r3
1486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2099              		.loc 1 1486 0
 2100 0028 1846     		mov	r0, r3
 2101 002a 07F11407 		add	r7, r7, #20
 2102 002e BD46     		mov	sp, r7
 2103 0030 80BC     		pop	{r7}
 2104 0032 7047     		bx	lr
 2105              		.cfi_endproc
 2106              	.LFE142:
 2108              		.section	.text.ADC_ITConfig,"ax",%progbits
 2109              		.align	2
 2110              		.global	ADC_ITConfig
 2111              		.thumb
 2112              		.thumb_func
 2114              	ADC_ITConfig:
 2115              	.LFB143:
1487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group7 Interrupts and flags management functions
1492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Interrupts and flags management functions
1493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Interrupts and flags management functions
1497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the ADC Interrupts and 
1500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   to get the status and clear flags and Interrupts pending bits.
1501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Each ADC provides 4 Interrupts sources and 6 Flags which can be divided into 
1503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   3 groups:
1504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   I. Flags and Interrupts for ADC regular channels
1506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_OVR : Overrun detection when regular converted data are lost
1510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_EOC : Regular channel end of conversion ==> to indicate (depending 
1512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               on EOCS bit, managed by ADC_EOCOnEachRegularChannelCmd() ) the end of:
1513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> a regular CHANNEL conversion 
1514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> sequence of regular GROUP conversions .
1515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      3. ADC_FLAG_STRT: Regular channel start ==> to indicate when regular CHANNEL 
1517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               conversion starts.
1518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_OVR : specifies the interrupt source for Overrun detection event.  
1522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_IT_EOC : specifies the interrupt source for Regular channel end of 
1523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      conversion event.
1524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   II. Flags and Interrupts for ADC Injected channels
1527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_JEOC : Injected channel end of conversion ==> to indicate at 
1531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                the end of injected GROUP conversion  
1532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_JSTRT: Injected channel start ==> to indicate hardware when 
1534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                injected GROUP conversion starts.
1535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_JEOC : specifies the interrupt source for Injected channel end of 
1539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       conversion event.     
1540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   III. General Flags and Interrupts for the ADC
1542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ================================================= 
1543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_AWD: Analog watchdog ==> to indicate if the converted voltage 
1546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               crosses the programmed thresholds values.
1547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_AWD : specifies the interrupt source for Analog watchdog event. 
1551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   The user should identify which mode will be used in his application to manage 
1554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   the ADC controller events: Polling mode or Interrupt mode.
1555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Polling Mode it is advised to use the following functions:
1557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_GetFlagStatus() : to check if flags events occur. 
1558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_ClearFlag()     : to clear the flags events.
1559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       
1560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Interrupt Mode it is advised to use the following functions:
1561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ITConfig()          : to enable or disable the interrupt source.
1562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_GetITStatus()       : to check if Interrupt occurs.
1563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ClearITPendingBit() : to clear the Interrupt pending Bit 
1564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                  (corresponding Flag). 
1565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
1570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
1572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt enable                       
1577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
1578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
1582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2116              		.loc 1 1582 0
 2117              		.cfi_startproc
 2118              		@ args = 0, pretend = 0, frame = 16
 2119              		@ frame_needed = 1, uses_anonymous_args = 0
 2120              		@ link register save eliminated.
 2121 0000 80B4     		push	{r7}
 2122              	.LCFI97:
 2123              		.cfi_def_cfa_offset 4
 2124              		.cfi_offset 7, -4
 2125 0002 85B0     		sub	sp, sp, #20
 2126              	.LCFI98:
 2127              		.cfi_def_cfa_offset 24
 2128 0004 00AF     		add	r7, sp, #0
 2129              	.LCFI99:
 2130              		.cfi_def_cfa_register 7
 2131 0006 7860     		str	r0, [r7, #4]
 2132 0008 1346     		mov	r3, r2
 2133 000a 0A46     		mov	r2, r1	@ movhi
 2134 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 2135 000e 7B70     		strb	r3, [r7, #1]
1583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0;
 2136              		.loc 1 1583 0
 2137 0010 4FF00003 		mov	r3, #0
 2138 0014 FB60     		str	r3, [r7, #12]
1584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)ADC_IT;
 2139              		.loc 1 1590 0
 2140 0016 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2141 0018 DBB2     		uxtb	r3, r3
 2142 001a FB60     		str	r3, [r7, #12]
1591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint32_t)0x01 << itmask;    
 2143              		.loc 1 1591 0
 2144 001c FB68     		ldr	r3, [r7, #12]
 2145 001e 4FF00102 		mov	r2, #1
 2146 0022 02FA03F3 		lsl	r3, r2, r3
 2147 0026 FB60     		str	r3, [r7, #12]
1592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 2148              		.loc 1 1593 0
 2149 0028 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2150 002a 002B     		cmp	r3, #0
 2151 002c 06D0     		beq	.L68
1594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC interrupts */
1596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= itmask;
 2152              		.loc 1 1596 0
 2153 002e 7B68     		ldr	r3, [r7, #4]
 2154 0030 5A68     		ldr	r2, [r3, #4]
 2155 0032 FB68     		ldr	r3, [r7, #12]
 2156 0034 1A43     		orrs	r2, r2, r3
 2157 0036 7B68     		ldr	r3, [r7, #4]
 2158 0038 5A60     		str	r2, [r3, #4]
 2159 003a 07E0     		b	.L67
 2160              	.L68:
1597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC interrupts */
1601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
 2161              		.loc 1 1601 0
 2162 003c 7B68     		ldr	r3, [r7, #4]
 2163 003e 5A68     		ldr	r2, [r3, #4]
 2164 0040 FB68     		ldr	r3, [r7, #12]
 2165 0042 6FEA0303 		mvn	r3, r3
 2166 0046 1A40     		ands	r2, r2, r3
 2167 0048 7B68     		ldr	r3, [r7, #4]
 2168 004a 5A60     		str	r2, [r3, #4]
 2169              	.L67:
1602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2170              		.loc 1 1603 0
 2171 004c 07F11407 		add	r7, r7, #20
 2172 0050 BD46     		mov	sp, r7
 2173 0052 80BC     		pop	{r7}
 2174 0054 7047     		bx	lr
 2175              		.cfi_endproc
 2176              	.LFE143:
 2178 0056 00BF     		.section	.text.ADC_GetFlagStatus,"ax",%progbits
 2179              		.align	2
 2180              		.global	ADC_GetFlagStatus
 2181              		.thumb
 2182              		.thumb_func
 2184              	ADC_GetFlagStatus:
 2185              	.LFB144:
1604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                                                 
1616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2186              		.loc 1 1619 0
 2187              		.cfi_startproc
 2188              		@ args = 0, pretend = 0, frame = 16
 2189              		@ frame_needed = 1, uses_anonymous_args = 0
 2190              		@ link register save eliminated.
 2191 0000 80B4     		push	{r7}
 2192              	.LCFI100:
 2193              		.cfi_def_cfa_offset 4
 2194              		.cfi_offset 7, -4
 2195 0002 85B0     		sub	sp, sp, #20
 2196              	.LCFI101:
 2197              		.cfi_def_cfa_offset 24
 2198 0004 00AF     		add	r7, sp, #0
 2199              	.LCFI102:
 2200              		.cfi_def_cfa_register 7
 2201 0006 7860     		str	r0, [r7, #4]
 2202 0008 0B46     		mov	r3, r1
 2203 000a FB70     		strb	r3, [r7, #3]
1620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 2204              		.loc 1 1620 0
 2205 000c 4FF00003 		mov	r3, #0
 2206 0010 FB73     		strb	r3, [r7, #15]
1621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC flag */
1626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 2207              		.loc 1 1626 0
 2208 0012 7B68     		ldr	r3, [r7, #4]
 2209 0014 1A68     		ldr	r2, [r3, #0]
 2210 0016 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2211 0018 1340     		ands	r3, r3, r2
 2212 001a 002B     		cmp	r3, #0
 2213 001c 03D0     		beq	.L71
1627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is set */
1629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 2214              		.loc 1 1629 0
 2215 001e 4FF00103 		mov	r3, #1
 2216 0022 FB73     		strb	r3, [r7, #15]
 2217 0024 02E0     		b	.L72
 2218              	.L71:
1630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is reset */
1634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 2219              		.loc 1 1634 0
 2220 0026 4FF00003 		mov	r3, #0
 2221 002a FB73     		strb	r3, [r7, #15]
 2222              	.L72:
1635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_FLAG status */
1637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 2223              		.loc 1 1637 0
 2224 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2225              		.loc 1 1638 0
 2226 002e 1846     		mov	r0, r3
 2227 0030 07F11407 		add	r7, r7, #20
 2228 0034 BD46     		mov	sp, r7
 2229 0036 80BC     		pop	{r7}
 2230 0038 7047     		bx	lr
 2231              		.cfi_endproc
 2232              	.LFE144:
 2234 003a 00BF     		.section	.text.ADC_ClearFlag,"ax",%progbits
 2235              		.align	2
 2236              		.global	ADC_ClearFlag
 2237              		.thumb
 2238              		.thumb_func
 2240              	ADC_ClearFlag:
 2241              	.LFB145:
1639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's pending flags.
1642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be any combination of the following values:
1645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                          
1651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2242              		.loc 1 1654 0
 2243              		.cfi_startproc
 2244              		@ args = 0, pretend = 0, frame = 8
 2245              		@ frame_needed = 1, uses_anonymous_args = 0
 2246              		@ link register save eliminated.
 2247 0000 80B4     		push	{r7}
 2248              	.LCFI103:
 2249              		.cfi_def_cfa_offset 4
 2250              		.cfi_offset 7, -4
 2251 0002 83B0     		sub	sp, sp, #12
 2252              	.LCFI104:
 2253              		.cfi_def_cfa_offset 16
 2254 0004 00AF     		add	r7, sp, #0
 2255              	.LCFI105:
 2256              		.cfi_def_cfa_register 7
 2257 0006 7860     		str	r0, [r7, #4]
 2258 0008 0B46     		mov	r3, r1
 2259 000a FB70     		strb	r3, [r7, #3]
1655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC flags */
1660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 2260              		.loc 1 1660 0
 2261 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2262 000e 6FEA0302 		mvn	r2, r3
 2263 0012 7B68     		ldr	r3, [r7, #4]
 2264 0014 1A60     		str	r2, [r3, #0]
1661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2265              		.loc 1 1661 0
 2266 0016 07F10C07 		add	r7, r7, #12
 2267 001a BD46     		mov	sp, r7
 2268 001c 80BC     		pop	{r7}
 2269 001e 7047     		bx	lr
 2270              		.cfi_endproc
 2271              	.LFE145:
 2273              		.section	.text.ADC_GetITStatus,"ax",%progbits
 2274              		.align	2
 2275              		.global	ADC_GetITStatus
 2276              		.thumb
 2277              		.thumb_func
 2279              	ADC_GetITStatus:
 2280              	.LFB146:
1662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx:   where x can be 1, 2 or 3 to select the ADC peripheral.
1666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                        
1672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2281              		.loc 1 1675 0
 2282              		.cfi_startproc
 2283              		@ args = 0, pretend = 0, frame = 24
 2284              		@ frame_needed = 1, uses_anonymous_args = 0
 2285              		@ link register save eliminated.
 2286 0000 80B4     		push	{r7}
 2287              	.LCFI106:
 2288              		.cfi_def_cfa_offset 4
 2289              		.cfi_offset 7, -4
 2290 0002 87B0     		sub	sp, sp, #28
 2291              	.LCFI107:
 2292              		.cfi_def_cfa_offset 32
 2293 0004 00AF     		add	r7, sp, #0
 2294              	.LCFI108:
 2295              		.cfi_def_cfa_register 7
 2296 0006 7860     		str	r0, [r7, #4]
 2297 0008 0B46     		mov	r3, r1
 2298 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ITStatus bitstatus = RESET;
 2299              		.loc 1 1676 0
 2300 000c 4FF00003 		mov	r3, #0
 2301 0010 FB75     		strb	r3, [r7, #23]
1677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
 2302              		.loc 1 1677 0
 2303 0012 4FF00003 		mov	r3, #0
 2304 0016 3B61     		str	r3, [r7, #16]
 2305 0018 4FF00003 		mov	r3, #0
 2306 001c FB60     		str	r3, [r7, #12]
1678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
1682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = ADC_IT >> 8;
 2307              		.loc 1 1684 0
 2308 001e 7B88     		ldrh	r3, [r7, #2]
 2309 0020 4FEA1323 		lsr	r3, r3, #8
 2310 0024 9BB2     		uxth	r3, r3
 2311 0026 3B61     		str	r3, [r7, #16]
1685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC_IT enable bit status */
1687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 2312              		.loc 1 1687 0
 2313 0028 7B68     		ldr	r3, [r7, #4]
 2314 002a 5A68     		ldr	r2, [r3, #4]
 2315 002c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2316 002e DBB2     		uxtb	r3, r3
 2317 0030 4FF00101 		mov	r1, #1
 2318 0034 01FA03F3 		lsl	r3, r1, r3
 2319 0038 1340     		ands	r3, r3, r2
 2320 003a FB60     		str	r3, [r7, #12]
1688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC interrupt */
1690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 2321              		.loc 1 1690 0
 2322 003c 7B68     		ldr	r3, [r7, #4]
 2323 003e 1A68     		ldr	r2, [r3, #0]
 2324 0040 3B69     		ldr	r3, [r7, #16]
 2325 0042 1340     		ands	r3, r3, r2
 2326 0044 002B     		cmp	r3, #0
 2327 0046 06D0     		beq	.L75
 2328              		.loc 1 1690 0 is_stmt 0 discriminator 1
 2329 0048 FB68     		ldr	r3, [r7, #12]
 2330 004a 002B     		cmp	r3, #0
 2331 004c 03D0     		beq	.L75
1691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is set */
1693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 2332              		.loc 1 1693 0 is_stmt 1
 2333 004e 4FF00103 		mov	r3, #1
 2334 0052 FB75     		strb	r3, [r7, #23]
 2335 0054 02E0     		b	.L76
 2336              	.L75:
1694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is reset */
1698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 2337              		.loc 1 1698 0
 2338 0056 4FF00003 		mov	r3, #0
 2339 005a FB75     		strb	r3, [r7, #23]
 2340              	.L76:
1699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_IT status */
1701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 2341              		.loc 1 1701 0
 2342 005c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2343              		.loc 1 1702 0
 2344 005e 1846     		mov	r0, r3
 2345 0060 07F11C07 		add	r7, r7, #28
 2346 0064 BD46     		mov	sp, r7
 2347 0066 80BC     		pop	{r7}
 2348 0068 7047     		bx	lr
 2349              		.cfi_endproc
 2350              	.LFE146:
 2352 006a 00BF     		.section	.text.ADC_ClearITPendingBit,"ax",%progbits
 2353              		.align	2
 2354              		.global	ADC_ClearITPendingBit
 2355              		.thumb
 2356              		.thumb_func
 2358              	ADC_ClearITPendingBit:
 2359              	.LFB147:
1703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                         
1713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2360              		.loc 1 1716 0
 2361              		.cfi_startproc
 2362              		@ args = 0, pretend = 0, frame = 16
 2363              		@ frame_needed = 1, uses_anonymous_args = 0
 2364              		@ link register save eliminated.
 2365 0000 80B4     		push	{r7}
 2366              	.LCFI109:
 2367              		.cfi_def_cfa_offset 4
 2368              		.cfi_offset 7, -4
 2369 0002 85B0     		sub	sp, sp, #20
 2370              	.LCFI110:
 2371              		.cfi_def_cfa_offset 24
 2372 0004 00AF     		add	r7, sp, #0
 2373              	.LCFI111:
 2374              		.cfi_def_cfa_register 7
 2375 0006 7860     		str	r0, [r7, #4]
 2376 0008 0B46     		mov	r3, r1
 2377 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t itmask = 0;
 2378              		.loc 1 1717 0
 2379 000c 4FF00003 		mov	r3, #0
 2380 0010 FB73     		strb	r3, [r7, #15]
1718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
 2381              		.loc 1 1722 0
 2382 0012 7B88     		ldrh	r3, [r7, #2]
 2383 0014 4FEA1323 		lsr	r3, r3, #8
 2384 0018 9BB2     		uxth	r3, r3
 2385 001a FB73     		strb	r3, [r7, #15]
1723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 2386              		.loc 1 1724 0
 2387 001c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2388 001e 6FEA0302 		mvn	r2, r3
 2389 0022 7B68     		ldr	r3, [r7, #4]
 2390 0024 1A60     		str	r2, [r3, #0]
1725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }                    
 2391              		.loc 1 1725 0
 2392 0026 07F11407 		add	r7, r7, #20
 2393 002a BD46     		mov	sp, r7
 2394 002c 80BC     		pop	{r7}
 2395 002e 7047     		bx	lr
 2396              		.cfi_endproc
 2397              	.LFE147:
 2399              		.text
 2400              	.Letext0:
 2401              		.file 2 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/i
 2402              		.file 3 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 2403              		.file 4 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_adc.h"
 2404              		.file 5 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_adc.c
     /tmp/ccUPxY0J.s:20     .text.ADC_DeInit:00000000 $t
     /tmp/ccUPxY0J.s:25     .text.ADC_DeInit:00000000 ADC_DeInit
     /tmp/ccUPxY0J.s:54     .text.ADC_Init:00000000 $t
     /tmp/ccUPxY0J.s:59     .text.ADC_Init:00000000 ADC_Init
     /tmp/ccUPxY0J.s:180    .text.ADC_StructInit:00000000 $t
     /tmp/ccUPxY0J.s:185    .text.ADC_StructInit:00000000 ADC_StructInit
     /tmp/ccUPxY0J.s:240    .text.ADC_CommonInit:00000000 $t
     /tmp/ccUPxY0J.s:245    .text.ADC_CommonInit:00000000 ADC_CommonInit
     /tmp/ccUPxY0J.s:312    .text.ADC_CommonStructInit:00000000 $t
     /tmp/ccUPxY0J.s:317    .text.ADC_CommonStructInit:00000000 ADC_CommonStructInit
     /tmp/ccUPxY0J.s:360    .text.ADC_Cmd:00000000 $t
     /tmp/ccUPxY0J.s:365    .text.ADC_Cmd:00000000 ADC_Cmd
     /tmp/ccUPxY0J.s:413    .text.ADC_AnalogWatchdogCmd:00000000 $t
     /tmp/ccUPxY0J.s:418    .text.ADC_AnalogWatchdogCmd:00000000 ADC_AnalogWatchdogCmd
     /tmp/ccUPxY0J.s:467    .text.ADC_AnalogWatchdogThresholdsConfig:00000000 $t
     /tmp/ccUPxY0J.s:472    .text.ADC_AnalogWatchdogThresholdsConfig:00000000 ADC_AnalogWatchdogThresholdsConfig
     /tmp/ccUPxY0J.s:511    .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 $t
     /tmp/ccUPxY0J.s:516    .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 ADC_AnalogWatchdogSingleChannelConfig
     /tmp/ccUPxY0J.s:565    .text.ADC_TempSensorVrefintCmd:00000000 $t
     /tmp/ccUPxY0J.s:570    .text.ADC_TempSensorVrefintCmd:00000000 ADC_TempSensorVrefintCmd
     /tmp/ccUPxY0J.s:621    .text.ADC_VBATCmd:00000000 $t
     /tmp/ccUPxY0J.s:626    .text.ADC_VBATCmd:00000000 ADC_VBATCmd
     /tmp/ccUPxY0J.s:677    .text.ADC_RegularChannelConfig:00000000 $t
     /tmp/ccUPxY0J.s:682    .text.ADC_RegularChannelConfig:00000000 ADC_RegularChannelConfig
     /tmp/ccUPxY0J.s:920    .text.ADC_SoftwareStartConv:00000000 $t
     /tmp/ccUPxY0J.s:925    .text.ADC_SoftwareStartConv:00000000 ADC_SoftwareStartConv
     /tmp/ccUPxY0J.s:958    .text.ADC_GetSoftwareStartConvStatus:00000000 $t
     /tmp/ccUPxY0J.s:963    .text.ADC_GetSoftwareStartConvStatus:00000000 ADC_GetSoftwareStartConvStatus
     /tmp/ccUPxY0J.s:1011   .text.ADC_EOCOnEachRegularChannelCmd:00000000 $t
     /tmp/ccUPxY0J.s:1016   .text.ADC_EOCOnEachRegularChannelCmd:00000000 ADC_EOCOnEachRegularChannelCmd
     /tmp/ccUPxY0J.s:1064   .text.ADC_ContinuousModeCmd:00000000 $t
     /tmp/ccUPxY0J.s:1069   .text.ADC_ContinuousModeCmd:00000000 ADC_ContinuousModeCmd
     /tmp/ccUPxY0J.s:1117   .text.ADC_DiscModeChannelCountConfig:00000000 $t
     /tmp/ccUPxY0J.s:1122   .text.ADC_DiscModeChannelCountConfig:00000000 ADC_DiscModeChannelCountConfig
     /tmp/ccUPxY0J.s:1179   .text.ADC_DiscModeCmd:00000000 $t
     /tmp/ccUPxY0J.s:1184   .text.ADC_DiscModeCmd:00000000 ADC_DiscModeCmd
     /tmp/ccUPxY0J.s:1232   .text.ADC_GetConversionValue:00000000 $t
     /tmp/ccUPxY0J.s:1237   .text.ADC_GetConversionValue:00000000 ADC_GetConversionValue
     /tmp/ccUPxY0J.s:1269   .text.ADC_GetMultiModeConversionValue:00000000 $t
     /tmp/ccUPxY0J.s:1274   .text.ADC_GetMultiModeConversionValue:00000000 ADC_GetMultiModeConversionValue
     /tmp/ccUPxY0J.s:1301   .text.ADC_DMACmd:00000000 $t
     /tmp/ccUPxY0J.s:1306   .text.ADC_DMACmd:00000000 ADC_DMACmd
     /tmp/ccUPxY0J.s:1354   .text.ADC_DMARequestAfterLastTransferCmd:00000000 $t
     /tmp/ccUPxY0J.s:1359   .text.ADC_DMARequestAfterLastTransferCmd:00000000 ADC_DMARequestAfterLastTransferCmd
     /tmp/ccUPxY0J.s:1407   .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000000 $t
     /tmp/ccUPxY0J.s:1412   .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000000 ADC_MultiModeDMARequestAfterLastTransferCmd
     /tmp/ccUPxY0J.s:1463   .text.ADC_InjectedChannelConfig:00000000 $t
     /tmp/ccUPxY0J.s:1468   .text.ADC_InjectedChannelConfig:00000000 ADC_InjectedChannelConfig
     /tmp/ccUPxY0J.s:1642   .text.ADC_InjectedSequencerLengthConfig:00000000 $t
     /tmp/ccUPxY0J.s:1647   .text.ADC_InjectedSequencerLengthConfig:00000000 ADC_InjectedSequencerLengthConfig
     /tmp/ccUPxY0J.s:1704   .text.ADC_SetInjectedOffset:00000000 $t
     /tmp/ccUPxY0J.s:1709   .text.ADC_SetInjectedOffset:00000000 ADC_SetInjectedOffset
     /tmp/ccUPxY0J.s:1755   .text.ADC_ExternalTrigInjectedConvConfig:00000000 $t
     /tmp/ccUPxY0J.s:1760   .text.ADC_ExternalTrigInjectedConvConfig:00000000 ADC_ExternalTrigInjectedConvConfig
     /tmp/ccUPxY0J.s:1808   .text.ADC_ExternalTrigInjectedConvEdgeConfig:00000000 $t
     /tmp/ccUPxY0J.s:1813   .text.ADC_ExternalTrigInjectedConvEdgeConfig:00000000 ADC_ExternalTrigInjectedConvEdgeConfig
     /tmp/ccUPxY0J.s:1861   .text.ADC_SoftwareStartInjectedConv:00000000 $t
     /tmp/ccUPxY0J.s:1866   .text.ADC_SoftwareStartInjectedConv:00000000 ADC_SoftwareStartInjectedConv
     /tmp/ccUPxY0J.s:1899   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 $t
     /tmp/ccUPxY0J.s:1904   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 ADC_GetSoftwareStartInjectedConvCmdStatus
     /tmp/ccUPxY0J.s:1952   .text.ADC_AutoInjectedConvCmd:00000000 $t
     /tmp/ccUPxY0J.s:1957   .text.ADC_AutoInjectedConvCmd:00000000 ADC_AutoInjectedConvCmd
     /tmp/ccUPxY0J.s:2005   .text.ADC_InjectedDiscModeCmd:00000000 $t
     /tmp/ccUPxY0J.s:2010   .text.ADC_InjectedDiscModeCmd:00000000 ADC_InjectedDiscModeCmd
     /tmp/ccUPxY0J.s:2058   .text.ADC_GetInjectedConversionValue:00000000 $t
     /tmp/ccUPxY0J.s:2063   .text.ADC_GetInjectedConversionValue:00000000 ADC_GetInjectedConversionValue
     /tmp/ccUPxY0J.s:2109   .text.ADC_ITConfig:00000000 $t
     /tmp/ccUPxY0J.s:2114   .text.ADC_ITConfig:00000000 ADC_ITConfig
     /tmp/ccUPxY0J.s:2179   .text.ADC_GetFlagStatus:00000000 $t
     /tmp/ccUPxY0J.s:2184   .text.ADC_GetFlagStatus:00000000 ADC_GetFlagStatus
     /tmp/ccUPxY0J.s:2235   .text.ADC_ClearFlag:00000000 $t
     /tmp/ccUPxY0J.s:2240   .text.ADC_ClearFlag:00000000 ADC_ClearFlag
     /tmp/ccUPxY0J.s:2274   .text.ADC_GetITStatus:00000000 $t
     /tmp/ccUPxY0J.s:2279   .text.ADC_GetITStatus:00000000 ADC_GetITStatus
     /tmp/ccUPxY0J.s:2353   .text.ADC_ClearITPendingBit:00000000 $t
     /tmp/ccUPxY0J.s:2358   .text.ADC_ClearITPendingBit:00000000 ADC_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
