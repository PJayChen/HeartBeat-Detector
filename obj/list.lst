   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"list.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.vListInitialise,"ax",%progbits
  20              		.align	2
  21              		.global	vListInitialise
  22              		.thumb
  23              		.thumb_func
  25              	vListInitialise:
  26              	.LFB110:
  27              		.file 1 "FreeRTOS/Source/list.c"
   1:FreeRTOS/Source/list.c **** /*
   2:FreeRTOS/Source/list.c ****     FreeRTOS V7.0.2 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:FreeRTOS/Source/list.c **** 
   4:FreeRTOS/Source/list.c **** 
   5:FreeRTOS/Source/list.c ****     ***************************************************************************
   6:FreeRTOS/Source/list.c ****      *                                                                       *
   7:FreeRTOS/Source/list.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:FreeRTOS/Source/list.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:FreeRTOS/Source/list.c ****      *    available.                                                         *
  10:FreeRTOS/Source/list.c ****      *                                                                       *
  11:FreeRTOS/Source/list.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:FreeRTOS/Source/list.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:FreeRTOS/Source/list.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:FreeRTOS/Source/list.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:FreeRTOS/Source/list.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:FreeRTOS/Source/list.c ****      *    for microcontrollers - completely free of charge!                  *
  17:FreeRTOS/Source/list.c ****      *                                                                       *
  18:FreeRTOS/Source/list.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:FreeRTOS/Source/list.c ****      *                                                                       *
  20:FreeRTOS/Source/list.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:FreeRTOS/Source/list.c ****      *                                                                       *
  22:FreeRTOS/Source/list.c ****     ***************************************************************************
  23:FreeRTOS/Source/list.c **** 
  24:FreeRTOS/Source/list.c **** 
  25:FreeRTOS/Source/list.c ****     This file is part of the FreeRTOS distribution.
  26:FreeRTOS/Source/list.c **** 
  27:FreeRTOS/Source/list.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:FreeRTOS/Source/list.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:FreeRTOS/Source/list.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:FreeRTOS/Source/list.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:FreeRTOS/Source/list.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:FreeRTOS/Source/list.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:FreeRTOS/Source/list.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:FreeRTOS/Source/list.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:FreeRTOS/Source/list.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:FreeRTOS/Source/list.c ****     more details. You should have received a copy of the GNU General Public
  37:FreeRTOS/Source/list.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:FreeRTOS/Source/list.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:FreeRTOS/Source/list.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:FreeRTOS/Source/list.c ****     FreeRTOS WEB site.
  41:FreeRTOS/Source/list.c **** 
  42:FreeRTOS/Source/list.c ****     1 tab == 4 spaces!
  43:FreeRTOS/Source/list.c **** 
  44:FreeRTOS/Source/list.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:FreeRTOS/Source/list.c ****     contact details.
  46:FreeRTOS/Source/list.c **** 
  47:FreeRTOS/Source/list.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:FreeRTOS/Source/list.c ****     critical systems.
  49:FreeRTOS/Source/list.c **** 
  50:FreeRTOS/Source/list.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:FreeRTOS/Source/list.c ****     licensing and training services.
  52:FreeRTOS/Source/list.c **** */
  53:FreeRTOS/Source/list.c **** 
  54:FreeRTOS/Source/list.c **** 
  55:FreeRTOS/Source/list.c **** #include <stdlib.h>
  56:FreeRTOS/Source/list.c **** #include "FreeRTOS.h"
  57:FreeRTOS/Source/list.c **** #include "list.h"
  58:FreeRTOS/Source/list.c **** 
  59:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------
  60:FreeRTOS/Source/list.c ****  * PUBLIC LIST API documented in list.h
  61:FreeRTOS/Source/list.c ****  *----------------------------------------------------------*/
  62:FreeRTOS/Source/list.c **** 
  63:FreeRTOS/Source/list.c **** void vListInitialise( xList *pxList )
  64:FreeRTOS/Source/list.c **** {
  28              		.loc 1 64 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  65:FreeRTOS/Source/list.c **** 	/* The list structure contains a list item which is used to mark the
  66:FreeRTOS/Source/list.c **** 	end of the list.  To initialise the list the list end is inserted
  67:FreeRTOS/Source/list.c **** 	as the only list entry. */
  68:FreeRTOS/Source/list.c **** 	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  44              		.loc 1 68 0
  45 0008 7B68     		ldr	r3, [r7, #4]
  46 000a 03F10802 		add	r2, r3, #8
  47 000e 7B68     		ldr	r3, [r7, #4]
  48 0010 5A60     		str	r2, [r3, #4]
  69:FreeRTOS/Source/list.c **** 
  70:FreeRTOS/Source/list.c **** 	/* The list end value is the highest possible value in the list to
  71:FreeRTOS/Source/list.c **** 	ensure it remains at the end of the list. */
  72:FreeRTOS/Source/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  49              		.loc 1 72 0
  50 0012 7B68     		ldr	r3, [r7, #4]
  51 0014 4FF0FF32 		mov	r2, #-1
  52 0018 9A60     		str	r2, [r3, #8]
  73:FreeRTOS/Source/list.c **** 
  74:FreeRTOS/Source/list.c **** 	/* The list end next and previous pointers point to itself so we know
  75:FreeRTOS/Source/list.c **** 	when the list is empty. */
  76:FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  53              		.loc 1 76 0
  54 001a 7B68     		ldr	r3, [r7, #4]
  55 001c 03F10802 		add	r2, r3, #8
  56 0020 7B68     		ldr	r3, [r7, #4]
  57 0022 DA60     		str	r2, [r3, #12]
  77:FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  58              		.loc 1 77 0
  59 0024 7B68     		ldr	r3, [r7, #4]
  60 0026 03F10802 		add	r2, r3, #8
  61 002a 7B68     		ldr	r3, [r7, #4]
  62 002c 1A61     		str	r2, [r3, #16]
  78:FreeRTOS/Source/list.c **** 
  79:FreeRTOS/Source/list.c **** 	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  63              		.loc 1 79 0
  64 002e 7B68     		ldr	r3, [r7, #4]
  65 0030 4FF00002 		mov	r2, #0
  66 0034 1A60     		str	r2, [r3, #0]
  80:FreeRTOS/Source/list.c **** }
  67              		.loc 1 80 0
  68 0036 07F10C07 		add	r7, r7, #12
  69 003a BD46     		mov	sp, r7
  70 003c 80BC     		pop	{r7}
  71 003e 7047     		bx	lr
  72              		.cfi_endproc
  73              	.LFE110:
  75              		.section	.text.vListInitialiseItem,"ax",%progbits
  76              		.align	2
  77              		.global	vListInitialiseItem
  78              		.thumb
  79              		.thumb_func
  81              	vListInitialiseItem:
  82              	.LFB111:
  81:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
  82:FreeRTOS/Source/list.c **** 
  83:FreeRTOS/Source/list.c **** void vListInitialiseItem( xListItem *pxItem )
  84:FreeRTOS/Source/list.c **** {
  83              		.loc 1 84 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 8
  86              		@ frame_needed = 1, uses_anonymous_args = 0
  87              		@ link register save eliminated.
  88 0000 80B4     		push	{r7}
  89              	.LCFI3:
  90              		.cfi_def_cfa_offset 4
  91              		.cfi_offset 7, -4
  92 0002 83B0     		sub	sp, sp, #12
  93              	.LCFI4:
  94              		.cfi_def_cfa_offset 16
  95 0004 00AF     		add	r7, sp, #0
  96              	.LCFI5:
  97              		.cfi_def_cfa_register 7
  98 0006 7860     		str	r0, [r7, #4]
  85:FreeRTOS/Source/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
  86:FreeRTOS/Source/list.c **** 	pxItem->pvContainer = NULL;
  99              		.loc 1 86 0
 100 0008 7B68     		ldr	r3, [r7, #4]
 101 000a 4FF00002 		mov	r2, #0
 102 000e 1A61     		str	r2, [r3, #16]
  87:FreeRTOS/Source/list.c **** }
 103              		.loc 1 87 0
 104 0010 07F10C07 		add	r7, r7, #12
 105 0014 BD46     		mov	sp, r7
 106 0016 80BC     		pop	{r7}
 107 0018 7047     		bx	lr
 108              		.cfi_endproc
 109              	.LFE111:
 111 001a 00BF     		.section	.text.vListInsertEnd,"ax",%progbits
 112              		.align	2
 113              		.global	vListInsertEnd
 114              		.thumb
 115              		.thumb_func
 117              	vListInsertEnd:
 118              	.LFB112:
  88:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
  89:FreeRTOS/Source/list.c **** 
  90:FreeRTOS/Source/list.c **** void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
  91:FreeRTOS/Source/list.c **** {
 119              		.loc 1 91 0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 16
 122              		@ frame_needed = 1, uses_anonymous_args = 0
 123              		@ link register save eliminated.
 124 0000 80B4     		push	{r7}
 125              	.LCFI6:
 126              		.cfi_def_cfa_offset 4
 127              		.cfi_offset 7, -4
 128 0002 85B0     		sub	sp, sp, #20
 129              	.LCFI7:
 130              		.cfi_def_cfa_offset 24
 131 0004 00AF     		add	r7, sp, #0
 132              	.LCFI8:
 133              		.cfi_def_cfa_register 7
 134 0006 7860     		str	r0, [r7, #4]
 135 0008 3960     		str	r1, [r7, #0]
  92:FreeRTOS/Source/list.c **** volatile xListItem * pxIndex;
  93:FreeRTOS/Source/list.c **** 
  94:FreeRTOS/Source/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
  95:FreeRTOS/Source/list.c **** 	makes the new list item the last item to be removed by a call to
  96:FreeRTOS/Source/list.c **** 	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
  97:FreeRTOS/Source/list.c **** 	the pxIndex member. */
  98:FreeRTOS/Source/list.c **** 	pxIndex = pxList->pxIndex;
 136              		.loc 1 98 0
 137 000a 7B68     		ldr	r3, [r7, #4]
 138 000c 5B68     		ldr	r3, [r3, #4]
 139 000e FB60     		str	r3, [r7, #12]
  99:FreeRTOS/Source/list.c **** 
 100:FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIndex->pxNext;
 140              		.loc 1 100 0
 141 0010 FB68     		ldr	r3, [r7, #12]
 142 0012 5A68     		ldr	r2, [r3, #4]
 143 0014 3B68     		ldr	r3, [r7, #0]
 144 0016 5A60     		str	r2, [r3, #4]
 101:FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxList->pxIndex;
 145              		.loc 1 101 0
 146 0018 7B68     		ldr	r3, [r7, #4]
 147 001a 5A68     		ldr	r2, [r3, #4]
 148 001c 3B68     		ldr	r3, [r7, #0]
 149 001e 9A60     		str	r2, [r3, #8]
 102:FreeRTOS/Source/list.c **** 	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 150              		.loc 1 102 0
 151 0020 FB68     		ldr	r3, [r7, #12]
 152 0022 5B68     		ldr	r3, [r3, #4]
 153 0024 3A68     		ldr	r2, [r7, #0]
 154 0026 9A60     		str	r2, [r3, #8]
 103:FreeRTOS/Source/list.c **** 	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 155              		.loc 1 103 0
 156 0028 FB68     		ldr	r3, [r7, #12]
 157 002a 3A68     		ldr	r2, [r7, #0]
 158 002c 5A60     		str	r2, [r3, #4]
 104:FreeRTOS/Source/list.c **** 	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 159              		.loc 1 104 0
 160 002e 7B68     		ldr	r3, [r7, #4]
 161 0030 3A68     		ldr	r2, [r7, #0]
 162 0032 5A60     		str	r2, [r3, #4]
 105:FreeRTOS/Source/list.c **** 
 106:FreeRTOS/Source/list.c **** 	/* Remember which list the item is in. */
 107:FreeRTOS/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 163              		.loc 1 107 0
 164 0034 3B68     		ldr	r3, [r7, #0]
 165 0036 7A68     		ldr	r2, [r7, #4]
 166 0038 1A61     		str	r2, [r3, #16]
 108:FreeRTOS/Source/list.c **** 
 109:FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 167              		.loc 1 109 0
 168 003a 7B68     		ldr	r3, [r7, #4]
 169 003c 1B68     		ldr	r3, [r3, #0]
 170 003e 03F10102 		add	r2, r3, #1
 171 0042 7B68     		ldr	r3, [r7, #4]
 172 0044 1A60     		str	r2, [r3, #0]
 110:FreeRTOS/Source/list.c **** }
 173              		.loc 1 110 0
 174 0046 07F11407 		add	r7, r7, #20
 175 004a BD46     		mov	sp, r7
 176 004c 80BC     		pop	{r7}
 177 004e 7047     		bx	lr
 178              		.cfi_endproc
 179              	.LFE112:
 181              		.section	.text.vListInsert,"ax",%progbits
 182              		.align	2
 183              		.global	vListInsert
 184              		.thumb
 185              		.thumb_func
 187              	vListInsert:
 188              	.LFB113:
 111:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 112:FreeRTOS/Source/list.c **** 
 113:FreeRTOS/Source/list.c **** void vListInsert( xList *pxList, xListItem *pxNewListItem )
 114:FreeRTOS/Source/list.c **** {
 189              		.loc 1 114 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 16
 192              		@ frame_needed = 1, uses_anonymous_args = 0
 193              		@ link register save eliminated.
 194 0000 80B4     		push	{r7}
 195              	.LCFI9:
 196              		.cfi_def_cfa_offset 4
 197              		.cfi_offset 7, -4
 198 0002 85B0     		sub	sp, sp, #20
 199              	.LCFI10:
 200              		.cfi_def_cfa_offset 24
 201 0004 00AF     		add	r7, sp, #0
 202              	.LCFI11:
 203              		.cfi_def_cfa_register 7
 204 0006 7860     		str	r0, [r7, #4]
 205 0008 3960     		str	r1, [r7, #0]
 115:FreeRTOS/Source/list.c **** volatile xListItem *pxIterator;
 116:FreeRTOS/Source/list.c **** portTickType xValueOfInsertion;
 117:FreeRTOS/Source/list.c **** 
 118:FreeRTOS/Source/list.c **** 	/* Insert the new list item into the list, sorted in ulListItem order. */
 119:FreeRTOS/Source/list.c **** 	xValueOfInsertion = pxNewListItem->xItemValue;
 206              		.loc 1 119 0
 207 000a 3B68     		ldr	r3, [r7, #0]
 208 000c 1B68     		ldr	r3, [r3, #0]
 209 000e BB60     		str	r3, [r7, #8]
 120:FreeRTOS/Source/list.c **** 
 121:FreeRTOS/Source/list.c **** 	/* If the list already contains a list item with the same item value then
 122:FreeRTOS/Source/list.c **** 	the new list item should be placed after it.  This ensures that TCB's which
 123:FreeRTOS/Source/list.c **** 	are stored in ready lists (all of which have the same ulListItem value)
 124:FreeRTOS/Source/list.c **** 	get an equal share of the CPU.  However, if the xItemValue is the same as
 125:FreeRTOS/Source/list.c **** 	the back marker the iteration loop below will not end.  This means we need
 126:FreeRTOS/Source/list.c **** 	to guard against this by checking the value first and modifying the
 127:FreeRTOS/Source/list.c **** 	algorithm slightly if necessary. */
 128:FreeRTOS/Source/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 210              		.loc 1 128 0
 211 0010 BB68     		ldr	r3, [r7, #8]
 212 0012 B3F1FF3F 		cmp	r3, #-1
 213 0016 03D1     		bne	.L5
 129:FreeRTOS/Source/list.c **** 	{
 130:FreeRTOS/Source/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 214              		.loc 1 130 0
 215 0018 7B68     		ldr	r3, [r7, #4]
 216 001a 1B69     		ldr	r3, [r3, #16]
 217 001c FB60     		str	r3, [r7, #12]
 218 001e 0DE0     		b	.L6
 219              	.L5:
 131:FreeRTOS/Source/list.c **** 	}
 132:FreeRTOS/Source/list.c **** 	else
 133:FreeRTOS/Source/list.c **** 	{
 134:FreeRTOS/Source/list.c **** 		/* *** NOTE ***********************************************************
 135:FreeRTOS/Source/list.c **** 		If you find your application is crashing here then likely causes are:
 136:FreeRTOS/Source/list.c **** 			1) Stack overflow -
 137:FreeRTOS/Source/list.c **** 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
 138:FreeRTOS/Source/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M3
 139:FreeRTOS/Source/list.c **** 			   parts where numerically high priority values denote low actual
 140:FreeRTOS/Source/list.c **** 			   interrupt priories, which can seem counter intuitive.  See
 141:FreeRTOS/Source/list.c **** 			   configMAX_SYSCALL_INTERRUPT_PRIORITY on http://www.freertos.org/a00110.html
 142:FreeRTOS/Source/list.c **** 			3) Calling an API function from within a critical section or when
 143:FreeRTOS/Source/list.c **** 			   the scheduler is suspended.
 144:FreeRTOS/Source/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 145:FreeRTOS/Source/list.c **** 			   before the scheduler has been started (are interrupts firing
 146:FreeRTOS/Source/list.c **** 			   before vTaskStartScheduler() has been called?).
 147:FreeRTOS/Source/list.c **** 		See http://www.freertos.org/FAQHelp.html for more tips.
 148:FreeRTOS/Source/list.c **** 		**********************************************************************/
 149:FreeRTOS/Source/list.c **** 		
 150:FreeRTOS/Source/list.c **** 		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValue
 220              		.loc 1 150 0
 221 0020 7B68     		ldr	r3, [r7, #4]
 222 0022 03F10803 		add	r3, r3, #8
 223 0026 FB60     		str	r3, [r7, #12]
 224 0028 02E0     		b	.L7
 225              	.L8:
 226              		.loc 1 150 0 is_stmt 0 discriminator 2
 227 002a FB68     		ldr	r3, [r7, #12]
 228 002c 5B68     		ldr	r3, [r3, #4]
 229 002e FB60     		str	r3, [r7, #12]
 230              	.L7:
 231              		.loc 1 150 0 discriminator 1
 232 0030 FB68     		ldr	r3, [r7, #12]
 233 0032 5B68     		ldr	r3, [r3, #4]
 234 0034 1A68     		ldr	r2, [r3, #0]
 235 0036 BB68     		ldr	r3, [r7, #8]
 236 0038 9A42     		cmp	r2, r3
 237 003a F6D9     		bls	.L8
 238              	.L6:
 151:FreeRTOS/Source/list.c **** 		{
 152:FreeRTOS/Source/list.c **** 			/* There is nothing to do here, we are just iterating to the
 153:FreeRTOS/Source/list.c **** 			wanted insertion position. */
 154:FreeRTOS/Source/list.c **** 		}
 155:FreeRTOS/Source/list.c **** 	}
 156:FreeRTOS/Source/list.c **** 
 157:FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 239              		.loc 1 157 0 is_stmt 1
 240 003c FB68     		ldr	r3, [r7, #12]
 241 003e 5A68     		ldr	r2, [r3, #4]
 242 0040 3B68     		ldr	r3, [r7, #0]
 243 0042 5A60     		str	r2, [r3, #4]
 158:FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 244              		.loc 1 158 0
 245 0044 3B68     		ldr	r3, [r7, #0]
 246 0046 5B68     		ldr	r3, [r3, #4]
 247 0048 3A68     		ldr	r2, [r7, #0]
 248 004a 9A60     		str	r2, [r3, #8]
 159:FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 249              		.loc 1 159 0
 250 004c 3B68     		ldr	r3, [r7, #0]
 251 004e FA68     		ldr	r2, [r7, #12]
 252 0050 9A60     		str	r2, [r3, #8]
 160:FreeRTOS/Source/list.c **** 	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 253              		.loc 1 160 0
 254 0052 FB68     		ldr	r3, [r7, #12]
 255 0054 3A68     		ldr	r2, [r7, #0]
 256 0056 5A60     		str	r2, [r3, #4]
 161:FreeRTOS/Source/list.c **** 
 162:FreeRTOS/Source/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 163:FreeRTOS/Source/list.c **** 	item later. */
 164:FreeRTOS/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 257              		.loc 1 164 0
 258 0058 3B68     		ldr	r3, [r7, #0]
 259 005a 7A68     		ldr	r2, [r7, #4]
 260 005c 1A61     		str	r2, [r3, #16]
 165:FreeRTOS/Source/list.c **** 
 166:FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 261              		.loc 1 166 0
 262 005e 7B68     		ldr	r3, [r7, #4]
 263 0060 1B68     		ldr	r3, [r3, #0]
 264 0062 03F10102 		add	r2, r3, #1
 265 0066 7B68     		ldr	r3, [r7, #4]
 266 0068 1A60     		str	r2, [r3, #0]
 167:FreeRTOS/Source/list.c **** }
 267              		.loc 1 167 0
 268 006a 07F11407 		add	r7, r7, #20
 269 006e BD46     		mov	sp, r7
 270 0070 80BC     		pop	{r7}
 271 0072 7047     		bx	lr
 272              		.cfi_endproc
 273              	.LFE113:
 275              		.section	.text.vListRemove,"ax",%progbits
 276              		.align	2
 277              		.global	vListRemove
 278              		.thumb
 279              		.thumb_func
 281              	vListRemove:
 282              	.LFB114:
 168:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 169:FreeRTOS/Source/list.c **** 
 170:FreeRTOS/Source/list.c **** void vListRemove( xListItem *pxItemToRemove )
 171:FreeRTOS/Source/list.c **** {
 283              		.loc 1 171 0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 16
 286              		@ frame_needed = 1, uses_anonymous_args = 0
 287              		@ link register save eliminated.
 288 0000 80B4     		push	{r7}
 289              	.LCFI12:
 290              		.cfi_def_cfa_offset 4
 291              		.cfi_offset 7, -4
 292 0002 85B0     		sub	sp, sp, #20
 293              	.LCFI13:
 294              		.cfi_def_cfa_offset 24
 295 0004 00AF     		add	r7, sp, #0
 296              	.LCFI14:
 297              		.cfi_def_cfa_register 7
 298 0006 7860     		str	r0, [r7, #4]
 172:FreeRTOS/Source/list.c **** xList * pxList;
 173:FreeRTOS/Source/list.c **** 
 174:FreeRTOS/Source/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 299              		.loc 1 174 0
 300 0008 7B68     		ldr	r3, [r7, #4]
 301 000a 5B68     		ldr	r3, [r3, #4]
 302 000c 7A68     		ldr	r2, [r7, #4]
 303 000e 9268     		ldr	r2, [r2, #8]
 304 0010 9A60     		str	r2, [r3, #8]
 175:FreeRTOS/Source/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 305              		.loc 1 175 0
 306 0012 7B68     		ldr	r3, [r7, #4]
 307 0014 9B68     		ldr	r3, [r3, #8]
 308 0016 7A68     		ldr	r2, [r7, #4]
 309 0018 5268     		ldr	r2, [r2, #4]
 310 001a 5A60     		str	r2, [r3, #4]
 176:FreeRTOS/Source/list.c **** 	
 177:FreeRTOS/Source/list.c **** 	/* The list item knows which list it is in.  Obtain the list from the list
 178:FreeRTOS/Source/list.c **** 	item. */
 179:FreeRTOS/Source/list.c **** 	pxList = ( xList * ) pxItemToRemove->pvContainer;
 311              		.loc 1 179 0
 312 001c 7B68     		ldr	r3, [r7, #4]
 313 001e 1B69     		ldr	r3, [r3, #16]
 314 0020 FB60     		str	r3, [r7, #12]
 180:FreeRTOS/Source/list.c **** 
 181:FreeRTOS/Source/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 182:FreeRTOS/Source/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 315              		.loc 1 182 0
 316 0022 FB68     		ldr	r3, [r7, #12]
 317 0024 5A68     		ldr	r2, [r3, #4]
 318 0026 7B68     		ldr	r3, [r7, #4]
 319 0028 9A42     		cmp	r2, r3
 320 002a 03D1     		bne	.L10
 183:FreeRTOS/Source/list.c **** 	{
 184:FreeRTOS/Source/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 321              		.loc 1 184 0
 322 002c 7B68     		ldr	r3, [r7, #4]
 323 002e 9A68     		ldr	r2, [r3, #8]
 324 0030 FB68     		ldr	r3, [r7, #12]
 325 0032 5A60     		str	r2, [r3, #4]
 326              	.L10:
 185:FreeRTOS/Source/list.c **** 	}
 186:FreeRTOS/Source/list.c **** 
 187:FreeRTOS/Source/list.c **** 	pxItemToRemove->pvContainer = NULL;
 327              		.loc 1 187 0
 328 0034 7B68     		ldr	r3, [r7, #4]
 329 0036 4FF00002 		mov	r2, #0
 330 003a 1A61     		str	r2, [r3, #16]
 188:FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )--;
 331              		.loc 1 188 0
 332 003c FB68     		ldr	r3, [r7, #12]
 333 003e 1B68     		ldr	r3, [r3, #0]
 334 0040 03F1FF32 		add	r2, r3, #-1
 335 0044 FB68     		ldr	r3, [r7, #12]
 336 0046 1A60     		str	r2, [r3, #0]
 189:FreeRTOS/Source/list.c **** }
 337              		.loc 1 189 0
 338 0048 07F11407 		add	r7, r7, #20
 339 004c BD46     		mov	sp, r7
 340 004e 80BC     		pop	{r7}
 341 0050 7047     		bx	lr
 342              		.cfi_endproc
 343              	.LFE114:
 345 0052 00BF     		.text
 346              	.Letext0:
 347              		.file 2 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/i
 348              		.file 3 "FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM4F/portmacro.h"
 349              		.file 4 "FreeRTOS/Source/include/list.h"
 350              		.file 5 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 list.c
     /tmp/cc2pJZlv.s:20     .text.vListInitialise:00000000 $t
     /tmp/cc2pJZlv.s:25     .text.vListInitialise:00000000 vListInitialise
     /tmp/cc2pJZlv.s:76     .text.vListInitialiseItem:00000000 $t
     /tmp/cc2pJZlv.s:81     .text.vListInitialiseItem:00000000 vListInitialiseItem
     /tmp/cc2pJZlv.s:112    .text.vListInsertEnd:00000000 $t
     /tmp/cc2pJZlv.s:117    .text.vListInsertEnd:00000000 vListInsertEnd
     /tmp/cc2pJZlv.s:182    .text.vListInsert:00000000 $t
     /tmp/cc2pJZlv.s:187    .text.vListInsert:00000000 vListInsert
     /tmp/cc2pJZlv.s:276    .text.vListRemove:00000000 $t
     /tmp/cc2pJZlv.s:281    .text.vListRemove:00000000 vListRemove
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
