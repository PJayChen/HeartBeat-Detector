   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_rcc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.data.APBAHBPrescTable,"aw",%progbits
  20              		.align	2
  23              	APBAHBPrescTable:
  24 0000 00       		.byte	0
  25 0001 00       		.byte	0
  26 0002 00       		.byte	0
  27 0003 00       		.byte	0
  28 0004 01       		.byte	1
  29 0005 02       		.byte	2
  30 0006 03       		.byte	3
  31 0007 04       		.byte	4
  32 0008 01       		.byte	1
  33 0009 02       		.byte	2
  34 000a 03       		.byte	3
  35 000b 04       		.byte	4
  36 000c 06       		.byte	6
  37 000d 07       		.byte	7
  38 000e 08       		.byte	8
  39 000f 09       		.byte	9
  40              		.section	.text.RCC_DeInit,"ax",%progbits
  41              		.align	2
  42              		.global	RCC_DeInit
  43              		.thumb
  44              		.thumb_func
  46              	RCC_DeInit:
  47              	.LFB110:
  48              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:           
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Internal/external clocks, PLL, CSS and MCO configuration
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - System, AHB and APB busses clocks configuration
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Peripheral clocks configuration
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Interrupts and flags management
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  @verbatim
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          ===================================================================
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                               RCC specific features
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          ===================================================================
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          After reset the device is running from Internal High Speed oscillator 
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          and I-Cache are disabled, and all peripherals are off except internal
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          SRAM, Flash and JTAG.
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             all peripherals mapped on these busses are running at HSI speed.
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *       	  - The clock for all peripherals is switched off, except the SRAM and FLASH.
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - All GPIOs are in input floating state, except the JTAG pins which
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             are assigned to be used for debug purpose.
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *        
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          Once the device started from reset, the user application has to:        
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the clock source to be used to drive the System clock
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             (if the application needs higher frequency/performance)
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the System clock frequency and Flash settings  
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the AHB and APB busses prescalers
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Enable the clock for the peripheral(s) to be used
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the clock source(s) for peripherals which clocks are not
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)      
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                        
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  @endverbatim
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @attention
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC 
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief RCC driver modules
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CR Register ---*/
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CFGR register bit mask */
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* RCC Flag Mask */
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* BDCR register base address */
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       Internal/external clocks, PLL, CSS and MCO configuration functions
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the internal/external clocks,
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   PLLs, CSS and MCO pins.
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      the PLL as System clock source.
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock source.
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   3. HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      through the PLL as System clock source. Can be used also as RTC clock source.
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   4. LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   5. PLL (clocked by HSI or HSE), featuring two different output clocks:
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       - The first output is used to generate the high speed system clock (up to 120 MHz)
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       - The second output is used to generate the clock for the USB OTG FS (48 MHz),
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   6. PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      high-quality audio performance on the I2S interface.
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   7. CSS (Clock security system), once enable and if a HSE clock failure occurs 
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      (HSE used directly or through PLL as System clock source), the System clock
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      is automatically switched to HSI and an interrupt is generated if enabled. 
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      exception vector.   
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   8. MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock (through a configurable prescaler) on PA8 pin.
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   9. MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock (through a configurable prescaler) on PC9 pin.
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - All interrupts disabled
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - Peripheral clocks
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_DeInit(void)
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
  49              		.loc 1 197 0
  50              		.cfi_startproc
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 1, uses_anonymous_args = 0
  53              		@ link register save eliminated.
  54 0000 80B4     		push	{r7}
  55              	.LCFI0:
  56              		.cfi_def_cfa_offset 4
  57              		.cfi_offset 7, -4
  58 0002 00AF     		add	r7, sp, #0
  59              	.LCFI1:
  60              		.cfi_def_cfa_register 7
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HSION bit */
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  61              		.loc 1 199 0
  62 0004 4FF46053 		mov	r3, #14336
  63 0008 C4F20203 		movt	r3, 16386
  64 000c 4FF46052 		mov	r2, #14336
  65 0010 C4F20202 		movt	r2, 16386
  66 0014 1268     		ldr	r2, [r2, #0]
  67 0016 42F00102 		orr	r2, r2, #1
  68 001a 1A60     		str	r2, [r3, #0]
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset CFGR register */
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
  69              		.loc 1 202 0
  70 001c 4FF46053 		mov	r3, #14336
  71 0020 C4F20203 		movt	r3, 16386
  72 0024 4FF00002 		mov	r2, #0
  73 0028 9A60     		str	r2, [r3, #8]
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  74              		.loc 1 205 0
  75 002a 4FF46053 		mov	r3, #14336
  76 002e C4F20203 		movt	r3, 16386
  77 0032 4FF46052 		mov	r2, #14336
  78 0036 C4F20202 		movt	r2, 16386
  79 003a 1268     		ldr	r2, [r2, #0]
  80 003c 22F08472 		bic	r2, r2, #17301504
  81 0040 22F48032 		bic	r2, r2, #65536
  82 0044 1A60     		str	r2, [r3, #0]
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
  83              		.loc 1 208 0
  84 0046 4FF46053 		mov	r3, #14336
  85 004a C4F20203 		movt	r3, 16386
  86 004e 43F21002 		movw	r2, #12304
  87 0052 C2F20042 		movt	r2, 9216
  88 0056 5A60     		str	r2, [r3, #4]
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  89              		.loc 1 211 0
  90 0058 4FF46053 		mov	r3, #14336
  91 005c C4F20203 		movt	r3, 16386
  92 0060 4FF46052 		mov	r2, #14336
  93 0064 C4F20202 		movt	r2, 16386
  94 0068 1268     		ldr	r2, [r2, #0]
  95 006a 22F48022 		bic	r2, r2, #262144
  96 006e 1A60     		str	r2, [r3, #0]
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Disable all interrupts */
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
  97              		.loc 1 214 0
  98 0070 4FF46053 		mov	r3, #14336
  99 0074 C4F20203 		movt	r3, 16386
 100 0078 4FF00002 		mov	r2, #0
 101 007c DA60     		str	r2, [r3, #12]
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 102              		.loc 1 215 0
 103 007e BD46     		mov	sp, r7
 104 0080 80BC     		pop	{r7}
 105 0082 7047     		bx	lr
 106              		.cfi_endproc
 107              	.LFE110:
 109              		.section	.text.RCC_HSEConfig,"ax",%progbits
 110              		.align	2
 111              		.global	RCC_HSEConfig
 112              		.thumb
 113              		.thumb_func
 115              	RCC_HSEConfig:
 116              	.LFB111:
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         function.    
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 117              		.loc 1 238 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 8
 120              		@ frame_needed = 1, uses_anonymous_args = 0
 121              		@ link register save eliminated.
 122 0000 80B4     		push	{r7}
 123              	.LCFI2:
 124              		.cfi_def_cfa_offset 4
 125              		.cfi_offset 7, -4
 126 0002 83B0     		sub	sp, sp, #12
 127              	.LCFI3:
 128              		.cfi_def_cfa_offset 16
 129 0004 00AF     		add	r7, sp, #0
 130              	.LCFI4:
 131              		.cfi_def_cfa_register 7
 132 0006 0346     		mov	r3, r0
 133 0008 FB71     		strb	r3, [r7, #7]
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 134              		.loc 1 243 0
 135 000a 43F60203 		movw	r3, #14338
 136 000e C4F20203 		movt	r3, 16386
 137 0012 4FF00002 		mov	r2, #0
 138 0016 1A70     		strb	r2, [r3, #0]
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 139              		.loc 1 246 0
 140 0018 43F60203 		movw	r3, #14338
 141 001c C4F20203 		movt	r3, 16386
 142 0020 FA79     		ldrb	r2, [r7, #7]
 143 0022 1A70     		strb	r2, [r3, #0]
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 144              		.loc 1 247 0
 145 0024 07F10C07 		add	r7, r7, #12
 146 0028 BD46     		mov	sp, r7
 147 002a 80BC     		pop	{r7}
 148 002c 7047     		bx	lr
 149              		.cfi_endproc
 150              	.LFE111:
 152 002e 00BF     		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 153              		.align	2
 154              		.global	RCC_WaitForHSEStartUp
 155              		.thumb
 156              		.thumb_func
 158              	RCC_WaitForHSEStartUp:
 159              	.LFB112:
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 160              		.loc 1 262 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 8
 163              		@ frame_needed = 1, uses_anonymous_args = 0
 164 0000 80B5     		push	{r7, lr}
 165              	.LCFI5:
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 14, -4
 168              		.cfi_offset 7, -8
 169 0002 82B0     		sub	sp, sp, #8
 170              	.LCFI6:
 171              		.cfi_def_cfa_offset 16
 172 0004 00AF     		add	r7, sp, #0
 173              	.LCFI7:
 174              		.cfi_def_cfa_register 7
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 175              		.loc 1 263 0
 176 0006 4FF00003 		mov	r3, #0
 177 000a 3B60     		str	r3, [r7, #0]
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 178              		.loc 1 264 0
 179 000c 4FF00003 		mov	r3, #0
 180 0010 FB71     		strb	r3, [r7, #7]
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 181              		.loc 1 265 0
 182 0012 4FF00003 		mov	r3, #0
 183 0016 BB71     		strb	r3, [r7, #6]
 184              	.L5:
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   do
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 185              		.loc 1 269 0 discriminator 1
 186 0018 4FF03100 		mov	r0, #49
 187 001c FFF7FEFF 		bl	RCC_GetFlagStatus
 188 0020 0346     		mov	r3, r0
 189 0022 BB71     		strb	r3, [r7, #6]
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     startupcounter++;
 190              		.loc 1 270 0 discriminator 1
 191 0024 3B68     		ldr	r3, [r7, #0]
 192 0026 03F10103 		add	r3, r3, #1
 193 002a 3B60     		str	r3, [r7, #0]
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 194              		.loc 1 271 0 discriminator 1
 195 002c 3B68     		ldr	r3, [r7, #0]
 196 002e B3F5A06F 		cmp	r3, #1280
 197 0032 02D0     		beq	.L4
 198 0034 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 199 0036 002B     		cmp	r3, #0
 200 0038 EED0     		beq	.L5
 201              	.L4:
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 202              		.loc 1 273 0
 203 003a 4FF03100 		mov	r0, #49
 204 003e FFF7FEFF 		bl	RCC_GetFlagStatus
 205 0042 0346     		mov	r3, r0
 206 0044 002B     		cmp	r3, #0
 207 0046 03D0     		beq	.L6
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = SUCCESS;
 208              		.loc 1 275 0
 209 0048 4FF00103 		mov	r3, #1
 210 004c FB71     		strb	r3, [r7, #7]
 211 004e 02E0     		b	.L7
 212              	.L6:
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = ERROR;
 213              		.loc 1 279 0
 214 0050 4FF00003 		mov	r3, #0
 215 0054 FB71     		strb	r3, [r7, #7]
 216              	.L7:
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return (status);
 217              		.loc 1 281 0
 218 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 219              		.loc 1 282 0
 220 0058 1846     		mov	r0, r3
 221 005a 07F10807 		add	r7, r7, #8
 222 005e BD46     		mov	sp, r7
 223 0060 80BD     		pop	{r7, pc}
 224              		.cfi_endproc
 225              	.LFE112:
 227 0062 00BF     		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 228              		.align	2
 229              		.global	RCC_AdjustHSICalibrationValue
 230              		.thumb
 231              		.thumb_func
 233              	RCC_AdjustHSICalibrationValue:
 234              	.LFB113:
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 235              		.loc 1 293 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 16
 238              		@ frame_needed = 1, uses_anonymous_args = 0
 239              		@ link register save eliminated.
 240 0000 80B4     		push	{r7}
 241              	.LCFI8:
 242              		.cfi_def_cfa_offset 4
 243              		.cfi_offset 7, -4
 244 0002 85B0     		sub	sp, sp, #20
 245              	.LCFI9:
 246              		.cfi_def_cfa_offset 24
 247 0004 00AF     		add	r7, sp, #0
 248              	.LCFI10:
 249              		.cfi_def_cfa_register 7
 250 0006 0346     		mov	r3, r0
 251 0008 FB71     		strb	r3, [r7, #7]
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 252              		.loc 1 294 0
 253 000a 4FF00003 		mov	r3, #0
 254 000e FB60     		str	r3, [r7, #12]
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
 255              		.loc 1 298 0
 256 0010 4FF46053 		mov	r3, #14336
 257 0014 C4F20203 		movt	r3, 16386
 258 0018 1B68     		ldr	r3, [r3, #0]
 259 001a FB60     		str	r3, [r7, #12]
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 260              		.loc 1 301 0
 261 001c FB68     		ldr	r3, [r7, #12]
 262 001e 23F0F803 		bic	r3, r3, #248
 263 0022 FB60     		str	r3, [r7, #12]
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 264              		.loc 1 304 0
 265 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 266 0026 4FEAC303 		lsl	r3, r3, #3
 267 002a FA68     		ldr	r2, [r7, #12]
 268 002c 1343     		orrs	r3, r3, r2
 269 002e FB60     		str	r3, [r7, #12]
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 270              		.loc 1 307 0
 271 0030 4FF46053 		mov	r3, #14336
 272 0034 C4F20203 		movt	r3, 16386
 273 0038 FA68     		ldr	r2, [r7, #12]
 274 003a 1A60     		str	r2, [r3, #0]
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 275              		.loc 1 308 0
 276 003c 07F11407 		add	r7, r7, #20
 277 0040 BD46     		mov	sp, r7
 278 0042 80BC     		pop	{r7}
 279 0044 7047     		bx	lr
 280              		.cfi_endproc
 281              	.LFE113:
 283 0046 00BF     		.section	.text.RCC_HSICmd,"ax",%progbits
 284              		.align	2
 285              		.global	RCC_HSICmd
 286              		.thumb
 287              		.thumb_func
 289              	RCC_HSICmd:
 290              	.LFB114:
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         system clock source.  
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles.  
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 291              		.loc 1 329 0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 8
 294              		@ frame_needed = 1, uses_anonymous_args = 0
 295              		@ link register save eliminated.
 296 0000 80B4     		push	{r7}
 297              	.LCFI11:
 298              		.cfi_def_cfa_offset 4
 299              		.cfi_offset 7, -4
 300 0002 83B0     		sub	sp, sp, #12
 301              	.LCFI12:
 302              		.cfi_def_cfa_offset 16
 303 0004 00AF     		add	r7, sp, #0
 304              	.LCFI13:
 305              		.cfi_def_cfa_register 7
 306 0006 0346     		mov	r3, r0
 307 0008 FB71     		strb	r3, [r7, #7]
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 308              		.loc 1 333 0
 309 000a 4FF00003 		mov	r3, #0
 310 000e C4F24723 		movt	r3, 16967
 311 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 312 0014 1A60     		str	r2, [r3, #0]
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 313              		.loc 1 334 0
 314 0016 07F10C07 		add	r7, r7, #12
 315 001a BD46     		mov	sp, r7
 316 001c 80BC     		pop	{r7}
 317 001e 7047     		bx	lr
 318              		.cfi_endproc
 319              	.LFE114:
 321              		.section	.text.RCC_LSEConfig,"ax",%progbits
 322              		.align	2
 323              		.global	RCC_LSEConfig
 324              		.thumb
 325              		.thumb_func
 327              	RCC_LSEConfig:
 328              	.LFB115:
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 329              		.loc 1 354 0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 8
 332              		@ frame_needed = 1, uses_anonymous_args = 0
 333              		@ link register save eliminated.
 334 0000 80B4     		push	{r7}
 335              	.LCFI14:
 336              		.cfi_def_cfa_offset 4
 337              		.cfi_offset 7, -4
 338 0002 83B0     		sub	sp, sp, #12
 339              	.LCFI15:
 340              		.cfi_def_cfa_offset 16
 341 0004 00AF     		add	r7, sp, #0
 342              	.LCFI16:
 343              		.cfi_def_cfa_register 7
 344 0006 0346     		mov	r3, r0
 345 0008 FB71     		strb	r3, [r7, #7]
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 346              		.loc 1 360 0
 347 000a 43F67003 		movw	r3, #14448
 348 000e C4F20203 		movt	r3, 16386
 349 0012 4FF00002 		mov	r2, #0
 350 0016 1A70     		strb	r2, [r3, #0]
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 351              		.loc 1 363 0
 352 0018 43F67003 		movw	r3, #14448
 353 001c C4F20203 		movt	r3, 16386
 354 0020 4FF00002 		mov	r2, #0
 355 0024 1A70     		strb	r2, [r3, #0]
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (RCC_LSE)
 356              		.loc 1 366 0
 357 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 358 0028 012B     		cmp	r3, #1
 359 002a 02D0     		beq	.L12
 360 002c 042B     		cmp	r3, #4
 361 002e 08D0     		beq	.L13
 362 0030 0FE0     		b	.L15
 363              	.L12:
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEON bit */
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 364              		.loc 1 370 0
 365 0032 43F67003 		movw	r3, #14448
 366 0036 C4F20203 		movt	r3, 16386
 367 003a 4FF00102 		mov	r2, #1
 368 003e 1A70     		strb	r2, [r3, #0]
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 369              		.loc 1 371 0
 370 0040 08E0     		b	.L10
 371              	.L13:
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 372              		.loc 1 374 0
 373 0042 43F67003 		movw	r3, #14448
 374 0046 C4F20203 		movt	r3, 16386
 375 004a 4FF00502 		mov	r2, #5
 376 004e 1A70     		strb	r2, [r3, #0]
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 377              		.loc 1 375 0
 378 0050 00E0     		b	.L10
 379              	.L15:
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 380              		.loc 1 377 0
 381 0052 00BF     		nop
 382              	.L10:
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 383              		.loc 1 379 0
 384 0054 07F10C07 		add	r7, r7, #12
 385 0058 BD46     		mov	sp, r7
 386 005a 80BC     		pop	{r7}
 387 005c 7047     		bx	lr
 388              		.cfi_endproc
 389              	.LFE115:
 391 005e 00BF     		.section	.text.RCC_LSICmd,"ax",%progbits
 392              		.align	2
 393              		.global	RCC_LSICmd
 394              		.thumb
 395              		.thumb_func
 397              	RCC_LSICmd:
 398              	.LFB116:
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles. 
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 399              		.loc 1 394 0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 8
 402              		@ frame_needed = 1, uses_anonymous_args = 0
 403              		@ link register save eliminated.
 404 0000 80B4     		push	{r7}
 405              	.LCFI17:
 406              		.cfi_def_cfa_offset 4
 407              		.cfi_offset 7, -4
 408 0002 83B0     		sub	sp, sp, #12
 409              	.LCFI18:
 410              		.cfi_def_cfa_offset 16
 411 0004 00AF     		add	r7, sp, #0
 412              	.LCFI19:
 413              		.cfi_def_cfa_register 7
 414 0006 0346     		mov	r3, r0
 415 0008 FB71     		strb	r3, [r7, #7]
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 416              		.loc 1 398 0
 417 000a 4FF46863 		mov	r3, #3712
 418 000e C4F24723 		movt	r3, 16967
 419 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 420 0014 1A60     		str	r2, [r3, #0]
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 421              		.loc 1 399 0
 422 0016 07F10C07 		add	r7, r7, #12
 423 001a BD46     		mov	sp, r7
 424 001c 80BC     		pop	{r7}
 425 001e 7047     		bx	lr
 426              		.cfi_endproc
 427              	.LFE116:
 429              		.section	.text.RCC_PLLConfig,"ax",%progbits
 430              		.align	2
 431              		.global	RCC_PLLConfig
 432              		.thumb
 433              		.thumb_func
 435              	RCC_PLLConfig:
 436              	.LFB117:
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 120 MHz on
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         correctly.
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 437              		.loc 1 437 0
 438              		.cfi_startproc
 439              		@ args = 4, pretend = 0, frame = 16
 440              		@ frame_needed = 1, uses_anonymous_args = 0
 441              		@ link register save eliminated.
 442 0000 80B4     		push	{r7}
 443              	.LCFI20:
 444              		.cfi_def_cfa_offset 4
 445              		.cfi_offset 7, -4
 446 0002 85B0     		sub	sp, sp, #20
 447              	.LCFI21:
 448              		.cfi_def_cfa_offset 24
 449 0004 00AF     		add	r7, sp, #0
 450              	.LCFI22:
 451              		.cfi_def_cfa_register 7
 452 0006 F860     		str	r0, [r7, #12]
 453 0008 B960     		str	r1, [r7, #8]
 454 000a 7A60     		str	r2, [r7, #4]
 455 000c 3B60     		str	r3, [r7, #0]
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 456              		.loc 1 445 0
 457 000e 4FF46053 		mov	r3, #14336
 458 0012 C4F20203 		movt	r3, 16386
 459 0016 7A68     		ldr	r2, [r7, #4]
 460 0018 4FEA8211 		lsl	r1, r2, #6
 461 001c BA68     		ldr	r2, [r7, #8]
 462 001e 1143     		orrs	r1, r1, r2
 463 0020 3A68     		ldr	r2, [r7, #0]
 464 0022 4FEA5202 		lsr	r2, r2, #1
 465 0026 02F1FF32 		add	r2, r2, #-1
 466 002a 4FEA0242 		lsl	r2, r2, #16
 467 002e 1143     		orrs	r1, r1, r2
 468 0030 FA68     		ldr	r2, [r7, #12]
 469 0032 1143     		orrs	r1, r1, r2
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 470              		.loc 1 446 0
 471 0034 BA69     		ldr	r2, [r7, #24]
 472 0036 4FEA0262 		lsl	r2, r2, #24
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 473              		.loc 1 445 0
 474 003a 0A43     		orrs	r2, r2, r1
 475 003c 5A60     		str	r2, [r3, #4]
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 476              		.loc 1 447 0
 477 003e 07F11407 		add	r7, r7, #20
 478 0042 BD46     		mov	sp, r7
 479 0044 80BC     		pop	{r7}
 480 0046 7047     		bx	lr
 481              		.cfi_endproc
 482              	.LFE117:
 484              		.section	.text.RCC_PLLCmd,"ax",%progbits
 485              		.align	2
 486              		.global	RCC_PLLCmd
 487              		.thumb
 488              		.thumb_func
 490              	RCC_PLLCmd:
 491              	.LFB118:
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used as system clock source.
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 492              		.loc 1 460 0
 493              		.cfi_startproc
 494              		@ args = 0, pretend = 0, frame = 8
 495              		@ frame_needed = 1, uses_anonymous_args = 0
 496              		@ link register save eliminated.
 497 0000 80B4     		push	{r7}
 498              	.LCFI23:
 499              		.cfi_def_cfa_offset 4
 500              		.cfi_offset 7, -4
 501 0002 83B0     		sub	sp, sp, #12
 502              	.LCFI24:
 503              		.cfi_def_cfa_offset 16
 504 0004 00AF     		add	r7, sp, #0
 505              	.LCFI25:
 506              		.cfi_def_cfa_register 7
 507 0006 0346     		mov	r3, r0
 508 0008 FB71     		strb	r3, [r7, #7]
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 509              		.loc 1 463 0
 510 000a 4FF06003 		mov	r3, #96
 511 000e C4F24723 		movt	r3, 16967
 512 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 513 0014 1A60     		str	r2, [r3, #0]
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 514              		.loc 1 464 0
 515 0016 07F10C07 		add	r7, r7, #12
 516 001a BD46     		mov	sp, r7
 517 001c 80BC     		pop	{r7}
 518 001e 7047     		bx	lr
 519              		.cfi_endproc
 520              	.LFE118:
 522              		.section	.text.RCC_PLLI2SConfig,"ax",%progbits
 523              		.align	2
 524              		.global	RCC_PLLI2SConfig
 525              		.thumb
 526              		.thumb_func
 528              	RCC_PLLI2SConfig:
 529              	.LFB119:
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S is available only in Silicon RevisionB and RevisionY.    
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 530              		.loc 1 487 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 8
 533              		@ frame_needed = 1, uses_anonymous_args = 0
 534              		@ link register save eliminated.
 535 0000 80B4     		push	{r7}
 536              	.LCFI26:
 537              		.cfi_def_cfa_offset 4
 538              		.cfi_offset 7, -4
 539 0002 83B0     		sub	sp, sp, #12
 540              	.LCFI27:
 541              		.cfi_def_cfa_offset 16
 542 0004 00AF     		add	r7, sp, #0
 543              	.LCFI28:
 544              		.cfi_def_cfa_register 7
 545 0006 7860     		str	r0, [r7, #4]
 546 0008 3960     		str	r1, [r7, #0]
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 547              		.loc 1 492 0
 548 000a 4FF46053 		mov	r3, #14336
 549 000e C4F20203 		movt	r3, 16386
 550 0012 7A68     		ldr	r2, [r7, #4]
 551 0014 4FEA8211 		lsl	r1, r2, #6
 552 0018 3A68     		ldr	r2, [r7, #0]
 553 001a 4FEA0272 		lsl	r2, r2, #28
 554 001e 0A43     		orrs	r2, r2, r1
 555 0020 C3F88420 		str	r2, [r3, #132]
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 556              		.loc 1 493 0
 557 0024 07F10C07 		add	r7, r7, #12
 558 0028 BD46     		mov	sp, r7
 559 002a 80BC     		pop	{r7}
 560 002c 7047     		bx	lr
 561              		.cfi_endproc
 562              	.LFE119:
 564 002e 00BF     		.section	.text.RCC_PLLI2SCmd,"ax",%progbits
 565              		.align	2
 566              		.global	RCC_PLLI2SCmd
 567              		.thumb
 568              		.thumb_func
 570              	RCC_PLLI2SCmd:
 571              	.LFB120:
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S.
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S is available only in RevisionB and RevisionY 
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 572              		.loc 1 503 0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 8
 575              		@ frame_needed = 1, uses_anonymous_args = 0
 576              		@ link register save eliminated.
 577 0000 80B4     		push	{r7}
 578              	.LCFI29:
 579              		.cfi_def_cfa_offset 4
 580              		.cfi_offset 7, -4
 581 0002 83B0     		sub	sp, sp, #12
 582              	.LCFI30:
 583              		.cfi_def_cfa_offset 16
 584 0004 00AF     		add	r7, sp, #0
 585              	.LCFI31:
 586              		.cfi_def_cfa_register 7
 587 0006 0346     		mov	r3, r0
 588 0008 FB71     		strb	r3, [r7, #7]
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 589              		.loc 1 506 0
 590 000a 4FF06803 		mov	r3, #104
 591 000e C4F24723 		movt	r3, 16967
 592 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 593 0014 1A60     		str	r2, [r3, #0]
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 594              		.loc 1 507 0
 595 0016 07F10C07 		add	r7, r7, #12
 596 001a BD46     		mov	sp, r7
 597 001c 80BC     		pop	{r7}
 598 001e 7047     		bx	lr
 599              		.cfi_endproc
 600              	.LFE120:
 602              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 603              		.align	2
 604              		.global	RCC_ClockSecuritySystemCmd
 605              		.thumb
 606              		.thumb_func
 608              	RCC_ClockSecuritySystemCmd:
 609              	.LFB121:
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 610              		.loc 1 521 0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 8
 613              		@ frame_needed = 1, uses_anonymous_args = 0
 614              		@ link register save eliminated.
 615 0000 80B4     		push	{r7}
 616              	.LCFI32:
 617              		.cfi_def_cfa_offset 4
 618              		.cfi_offset 7, -4
 619 0002 83B0     		sub	sp, sp, #12
 620              	.LCFI33:
 621              		.cfi_def_cfa_offset 16
 622 0004 00AF     		add	r7, sp, #0
 623              	.LCFI34:
 624              		.cfi_def_cfa_register 7
 625 0006 0346     		mov	r3, r0
 626 0008 FB71     		strb	r3, [r7, #7]
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 627              		.loc 1 524 0
 628 000a 4FF04C03 		mov	r3, #76
 629 000e C4F24723 		movt	r3, 16967
 630 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 631 0014 1A60     		str	r2, [r3, #0]
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 632              		.loc 1 525 0
 633 0016 07F10C07 		add	r7, r7, #12
 634 001a BD46     		mov	sp, r7
 635 001c 80BC     		pop	{r7}
 636 001e 7047     		bx	lr
 637              		.cfi_endproc
 638              	.LFE121:
 640              		.section	.text.RCC_MCO1Config,"ax",%progbits
 641              		.align	2
 642              		.global	RCC_MCO1Config
 643              		.thumb
 644              		.thumb_func
 646              	RCC_MCO1Config:
 647              	.LFB122:
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 648              		.loc 1 546 0
 649              		.cfi_startproc
 650              		@ args = 0, pretend = 0, frame = 16
 651              		@ frame_needed = 1, uses_anonymous_args = 0
 652              		@ link register save eliminated.
 653 0000 80B4     		push	{r7}
 654              	.LCFI35:
 655              		.cfi_def_cfa_offset 4
 656              		.cfi_offset 7, -4
 657 0002 85B0     		sub	sp, sp, #20
 658              	.LCFI36:
 659              		.cfi_def_cfa_offset 24
 660 0004 00AF     		add	r7, sp, #0
 661              	.LCFI37:
 662              		.cfi_def_cfa_register 7
 663 0006 7860     		str	r0, [r7, #4]
 664 0008 3960     		str	r1, [r7, #0]
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 665              		.loc 1 547 0
 666 000a 4FF00003 		mov	r3, #0
 667 000e FB60     		str	r3, [r7, #12]
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 668              		.loc 1 553 0
 669 0010 4FF46053 		mov	r3, #14336
 670 0014 C4F20203 		movt	r3, 16386
 671 0018 9B68     		ldr	r3, [r3, #8]
 672 001a FB60     		str	r3, [r7, #12]
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 673              		.loc 1 556 0
 674 001c FB68     		ldr	r3, [r7, #12]
 675 001e 23F0EC63 		bic	r3, r3, #123731968
 676 0022 FB60     		str	r3, [r7, #12]
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 677              		.loc 1 559 0
 678 0024 7A68     		ldr	r2, [r7, #4]
 679 0026 3B68     		ldr	r3, [r7, #0]
 680 0028 1343     		orrs	r3, r3, r2
 681 002a FA68     		ldr	r2, [r7, #12]
 682 002c 1343     		orrs	r3, r3, r2
 683 002e FB60     		str	r3, [r7, #12]
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 684              		.loc 1 562 0
 685 0030 4FF46053 		mov	r3, #14336
 686 0034 C4F20203 		movt	r3, 16386
 687 0038 FA68     		ldr	r2, [r7, #12]
 688 003a 9A60     		str	r2, [r3, #8]
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 689              		.loc 1 563 0
 690 003c 07F11407 		add	r7, r7, #20
 691 0040 BD46     		mov	sp, r7
 692 0042 80BC     		pop	{r7}
 693 0044 7047     		bx	lr
 694              		.cfi_endproc
 695              	.LFE122:
 697 0046 00BF     		.section	.text.RCC_MCO2Config,"ax",%progbits
 698              		.align	2
 699              		.global	RCC_MCO2Config
 700              		.thumb
 701              		.thumb_func
 703              	RCC_MCO2Config:
 704              	.LFB123:
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 705              		.loc 1 584 0
 706              		.cfi_startproc
 707              		@ args = 0, pretend = 0, frame = 16
 708              		@ frame_needed = 1, uses_anonymous_args = 0
 709              		@ link register save eliminated.
 710 0000 80B4     		push	{r7}
 711              	.LCFI38:
 712              		.cfi_def_cfa_offset 4
 713              		.cfi_offset 7, -4
 714 0002 85B0     		sub	sp, sp, #20
 715              	.LCFI39:
 716              		.cfi_def_cfa_offset 24
 717 0004 00AF     		add	r7, sp, #0
 718              	.LCFI40:
 719              		.cfi_def_cfa_register 7
 720 0006 7860     		str	r0, [r7, #4]
 721 0008 3960     		str	r1, [r7, #0]
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 722              		.loc 1 585 0
 723 000a 4FF00003 		mov	r3, #0
 724 000e FB60     		str	r3, [r7, #12]
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 725              		.loc 1 591 0
 726 0010 4FF46053 		mov	r3, #14336
 727 0014 C4F20203 		movt	r3, 16386
 728 0018 9B68     		ldr	r3, [r3, #8]
 729 001a FB60     		str	r3, [r7, #12]
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 730              		.loc 1 594 0
 731 001c FB68     		ldr	r3, [r7, #12]
 732 001e 23F07843 		bic	r3, r3, #-134217728
 733 0022 FB60     		str	r3, [r7, #12]
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 734              		.loc 1 597 0
 735 0024 7A68     		ldr	r2, [r7, #4]
 736 0026 3B68     		ldr	r3, [r7, #0]
 737 0028 1343     		orrs	r3, r3, r2
 738 002a FA68     		ldr	r2, [r7, #12]
 739 002c 1343     		orrs	r3, r3, r2
 740 002e FB60     		str	r3, [r7, #12]
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 741              		.loc 1 600 0
 742 0030 4FF46053 		mov	r3, #14336
 743 0034 C4F20203 		movt	r3, 16386
 744 0038 FA68     		ldr	r2, [r7, #12]
 745 003a 9A60     		str	r2, [r3, #8]
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 746              		.loc 1 601 0
 747 003c 07F11407 		add	r7, r7, #20
 748 0040 BD46     		mov	sp, r7
 749 0042 80BC     		pop	{r7}
 750 0044 7047     		bx	lr
 751              		.cfi_endproc
 752              	.LFE123:
 754 0046 00BF     		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 755              		.align	2
 756              		.global	RCC_SYSCLKConfig
 757              		.thumb
 758              		.thumb_func
 760              	RCC_SYSCLKConfig:
 761              	.LFB124:
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              System, AHB and APB busses clocks configuration functions
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the System, AHB, APB1 and 
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   APB2 busses clocks.
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      HSE and PLL.
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      The AHB clock (HCLK) is derived from System clock through configurable prescaler
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      and used to clock the CPU, memory and peripherals mapped on AHB bus (DMA, GPIO...).
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      APB1 (PCLK1) and APB2 (PCLK2) clocks are derived from AHB clock through 
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      configurable prescalers and used to clock the peripherals mapped on these busses.
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      You can use "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @note All the peripheral clocks are derived from the System clock (SYSCLK) except:
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           from an external clock mapped on the I2S_CKIN pin. 
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           You have to use RCC_I2SCLKConfig() function to configure this clock. 
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           functions to configure this clock. 
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           to work correctly, while the SDIO require a frequency equal or lower than
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           to 48. This clock is derived of the main PLL through PLLQ divider.
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - IWDG clock which is always the LSI clock.
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. The maximum frequency of the SYSCLK and HCLK is 120 MHz, PCLK2 60 MHz and PCLK1 30 MHz.
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      Depending on the device voltage range, the maximum frequency should be 
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      adapted accordingly:
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  | 
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 120|72 < HCLK <= 90  |64 < HCLK <= 80  |
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |      NA        |90 < HCLK <= 108 |80 < HCLK <= 96  | 
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |      NA        |108 < HCLK <= 120|96 < HCLK <= 112 | 
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |     NA         |     NA          |112 < HCLK <= 120| 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+    
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         currently used as system clock source. 
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 762              		.loc 1 689 0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 16
 765              		@ frame_needed = 1, uses_anonymous_args = 0
 766              		@ link register save eliminated.
 767 0000 80B4     		push	{r7}
 768              	.LCFI41:
 769              		.cfi_def_cfa_offset 4
 770              		.cfi_offset 7, -4
 771 0002 85B0     		sub	sp, sp, #20
 772              	.LCFI42:
 773              		.cfi_def_cfa_offset 24
 774 0004 00AF     		add	r7, sp, #0
 775              	.LCFI43:
 776              		.cfi_def_cfa_register 7
 777 0006 7860     		str	r0, [r7, #4]
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 778              		.loc 1 690 0
 779 0008 4FF00003 		mov	r3, #0
 780 000c FB60     		str	r3, [r7, #12]
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 781              		.loc 1 695 0
 782 000e 4FF46053 		mov	r3, #14336
 783 0012 C4F20203 		movt	r3, 16386
 784 0016 9B68     		ldr	r3, [r3, #8]
 785 0018 FB60     		str	r3, [r7, #12]
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 786              		.loc 1 698 0
 787 001a FB68     		ldr	r3, [r7, #12]
 788 001c 23F00303 		bic	r3, r3, #3
 789 0020 FB60     		str	r3, [r7, #12]
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 790              		.loc 1 701 0
 791 0022 FA68     		ldr	r2, [r7, #12]
 792 0024 7B68     		ldr	r3, [r7, #4]
 793 0026 1343     		orrs	r3, r3, r2
 794 0028 FB60     		str	r3, [r7, #12]
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 795              		.loc 1 704 0
 796 002a 4FF46053 		mov	r3, #14336
 797 002e C4F20203 		movt	r3, 16386
 798 0032 FA68     		ldr	r2, [r7, #12]
 799 0034 9A60     		str	r2, [r3, #8]
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 800              		.loc 1 705 0
 801 0036 07F11407 		add	r7, r7, #20
 802 003a BD46     		mov	sp, r7
 803 003c 80BC     		pop	{r7}
 804 003e 7047     		bx	lr
 805              		.cfi_endproc
 806              	.LFE124:
 808              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 809              		.align	2
 810              		.global	RCC_GetSYSCLKSource
 811              		.thumb
 812              		.thumb_func
 814              	RCC_GetSYSCLKSource:
 815              	.LFB125:
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the following:
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 816              		.loc 1 717 0
 817              		.cfi_startproc
 818              		@ args = 0, pretend = 0, frame = 0
 819              		@ frame_needed = 1, uses_anonymous_args = 0
 820              		@ link register save eliminated.
 821 0000 80B4     		push	{r7}
 822              	.LCFI44:
 823              		.cfi_def_cfa_offset 4
 824              		.cfi_offset 7, -4
 825 0002 00AF     		add	r7, sp, #0
 826              	.LCFI45:
 827              		.cfi_def_cfa_register 7
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 828              		.loc 1 718 0
 829 0004 4FF46053 		mov	r3, #14336
 830 0008 C4F20203 		movt	r3, 16386
 831 000c 9B68     		ldr	r3, [r3, #8]
 832 000e DBB2     		uxtb	r3, r3
 833 0010 03F00C03 		and	r3, r3, #12
 834 0014 DBB2     		uxtb	r3, r3
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 835              		.loc 1 719 0
 836 0016 1846     		mov	r0, r3
 837 0018 BD46     		mov	sp, r7
 838 001a 80BC     		pop	{r7}
 839 001c 7047     		bx	lr
 840              		.cfi_endproc
 841              	.LFE125:
 843 001e 00BF     		.section	.text.RCC_HCLKConfig,"ax",%progbits
 844              		.align	2
 845              		.global	RCC_HCLKConfig
 846              		.thumb
 847              		.thumb_func
 849              	RCC_HCLKConfig:
 850              	.LFB126:
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (for more details refer to section above
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 851              		.loc 1 742 0
 852              		.cfi_startproc
 853              		@ args = 0, pretend = 0, frame = 16
 854              		@ frame_needed = 1, uses_anonymous_args = 0
 855              		@ link register save eliminated.
 856 0000 80B4     		push	{r7}
 857              	.LCFI46:
 858              		.cfi_def_cfa_offset 4
 859              		.cfi_offset 7, -4
 860 0002 85B0     		sub	sp, sp, #20
 861              	.LCFI47:
 862              		.cfi_def_cfa_offset 24
 863 0004 00AF     		add	r7, sp, #0
 864              	.LCFI48:
 865              		.cfi_def_cfa_register 7
 866 0006 7860     		str	r0, [r7, #4]
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 867              		.loc 1 743 0
 868 0008 4FF00003 		mov	r3, #0
 869 000c FB60     		str	r3, [r7, #12]
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 870              		.loc 1 748 0
 871 000e 4FF46053 		mov	r3, #14336
 872 0012 C4F20203 		movt	r3, 16386
 873 0016 9B68     		ldr	r3, [r3, #8]
 874 0018 FB60     		str	r3, [r7, #12]
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 875              		.loc 1 751 0
 876 001a FB68     		ldr	r3, [r7, #12]
 877 001c 23F0F003 		bic	r3, r3, #240
 878 0020 FB60     		str	r3, [r7, #12]
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 879              		.loc 1 754 0
 880 0022 FA68     		ldr	r2, [r7, #12]
 881 0024 7B68     		ldr	r3, [r7, #4]
 882 0026 1343     		orrs	r3, r3, r2
 883 0028 FB60     		str	r3, [r7, #12]
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 884              		.loc 1 757 0
 885 002a 4FF46053 		mov	r3, #14336
 886 002e C4F20203 		movt	r3, 16386
 887 0032 FA68     		ldr	r2, [r7, #12]
 888 0034 9A60     		str	r2, [r3, #8]
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 889              		.loc 1 758 0
 890 0036 07F11407 		add	r7, r7, #20
 891 003a BD46     		mov	sp, r7
 892 003c 80BC     		pop	{r7}
 893 003e 7047     		bx	lr
 894              		.cfi_endproc
 895              	.LFE126:
 897              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 898              		.align	2
 899              		.global	RCC_PCLK1Config
 900              		.thumb
 901              		.thumb_func
 903              	RCC_PCLK1Config:
 904              	.LFB127:
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 905              		.loc 1 774 0
 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 16
 908              		@ frame_needed = 1, uses_anonymous_args = 0
 909              		@ link register save eliminated.
 910 0000 80B4     		push	{r7}
 911              	.LCFI49:
 912              		.cfi_def_cfa_offset 4
 913              		.cfi_offset 7, -4
 914 0002 85B0     		sub	sp, sp, #20
 915              	.LCFI50:
 916              		.cfi_def_cfa_offset 24
 917 0004 00AF     		add	r7, sp, #0
 918              	.LCFI51:
 919              		.cfi_def_cfa_register 7
 920 0006 7860     		str	r0, [r7, #4]
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 921              		.loc 1 775 0
 922 0008 4FF00003 		mov	r3, #0
 923 000c FB60     		str	r3, [r7, #12]
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 924              		.loc 1 780 0
 925 000e 4FF46053 		mov	r3, #14336
 926 0012 C4F20203 		movt	r3, 16386
 927 0016 9B68     		ldr	r3, [r3, #8]
 928 0018 FB60     		str	r3, [r7, #12]
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 929              		.loc 1 783 0
 930 001a FB68     		ldr	r3, [r7, #12]
 931 001c 23F4E053 		bic	r3, r3, #7168
 932 0020 FB60     		str	r3, [r7, #12]
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
 933              		.loc 1 786 0
 934 0022 FA68     		ldr	r2, [r7, #12]
 935 0024 7B68     		ldr	r3, [r7, #4]
 936 0026 1343     		orrs	r3, r3, r2
 937 0028 FB60     		str	r3, [r7, #12]
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 938              		.loc 1 789 0
 939 002a 4FF46053 		mov	r3, #14336
 940 002e C4F20203 		movt	r3, 16386
 941 0032 FA68     		ldr	r2, [r7, #12]
 942 0034 9A60     		str	r2, [r3, #8]
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 943              		.loc 1 790 0
 944 0036 07F11407 		add	r7, r7, #20
 945 003a BD46     		mov	sp, r7
 946 003c 80BC     		pop	{r7}
 947 003e 7047     		bx	lr
 948              		.cfi_endproc
 949              	.LFE127:
 951              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 952              		.align	2
 953              		.global	RCC_PCLK2Config
 954              		.thumb
 955              		.thumb_func
 957              	RCC_PCLK2Config:
 958              	.LFB128:
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 959              		.loc 1 805 0
 960              		.cfi_startproc
 961              		@ args = 0, pretend = 0, frame = 16
 962              		@ frame_needed = 1, uses_anonymous_args = 0
 963              		@ link register save eliminated.
 964 0000 80B4     		push	{r7}
 965              	.LCFI52:
 966              		.cfi_def_cfa_offset 4
 967              		.cfi_offset 7, -4
 968 0002 85B0     		sub	sp, sp, #20
 969              	.LCFI53:
 970              		.cfi_def_cfa_offset 24
 971 0004 00AF     		add	r7, sp, #0
 972              	.LCFI54:
 973              		.cfi_def_cfa_register 7
 974 0006 7860     		str	r0, [r7, #4]
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 975              		.loc 1 806 0
 976 0008 4FF00003 		mov	r3, #0
 977 000c FB60     		str	r3, [r7, #12]
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 978              		.loc 1 811 0
 979 000e 4FF46053 		mov	r3, #14336
 980 0012 C4F20203 		movt	r3, 16386
 981 0016 9B68     		ldr	r3, [r3, #8]
 982 0018 FB60     		str	r3, [r7, #12]
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 983              		.loc 1 814 0
 984 001a FB68     		ldr	r3, [r7, #12]
 985 001c 23F46043 		bic	r3, r3, #57344
 986 0020 FB60     		str	r3, [r7, #12]
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 987              		.loc 1 817 0
 988 0022 7B68     		ldr	r3, [r7, #4]
 989 0024 4FEAC303 		lsl	r3, r3, #3
 990 0028 FA68     		ldr	r2, [r7, #12]
 991 002a 1343     		orrs	r3, r3, r2
 992 002c FB60     		str	r3, [r7, #12]
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 993              		.loc 1 820 0
 994 002e 4FF46053 		mov	r3, #14336
 995 0032 C4F20203 		movt	r3, 16386
 996 0036 FA68     		ldr	r2, [r7, #12]
 997 0038 9A60     		str	r2, [r3, #8]
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 998              		.loc 1 821 0
 999 003a 07F11407 		add	r7, r7, #20
 1000 003e BD46     		mov	sp, r7
 1001 0040 80BC     		pop	{r7}
 1002 0042 7047     		bx	lr
 1003              		.cfi_endproc
 1004              	.LFE128:
 1006              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 1007              		.align	2
 1008              		.global	RCC_GetClocksFreq
 1009              		.thumb
 1010              		.thumb_func
 1012              	RCC_GetClocksFreq:
 1013              	.LFB129:
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.       
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         constant and the selected clock source:
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               in voltage and temperature.
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                have wrong result.
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         value for HSE crystal.
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          the clocks frequencies.
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *     
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1014              		.loc 1 857 0
 1015              		.cfi_startproc
 1016              		@ args = 0, pretend = 0, frame = 32
 1017              		@ frame_needed = 1, uses_anonymous_args = 0
 1018              		@ link register save eliminated.
 1019 0000 80B4     		push	{r7}
 1020              	.LCFI55:
 1021              		.cfi_def_cfa_offset 4
 1022              		.cfi_offset 7, -4
 1023 0002 89B0     		sub	sp, sp, #36
 1024              	.LCFI56:
 1025              		.cfi_def_cfa_offset 40
 1026 0004 00AF     		add	r7, sp, #0
 1027              	.LCFI57:
 1028              		.cfi_def_cfa_register 7
 1029 0006 7860     		str	r0, [r7, #4]
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 1030              		.loc 1 858 0
 1031 0008 4FF00003 		mov	r3, #0
 1032 000c BB61     		str	r3, [r7, #24]
 1033 000e 4FF00003 		mov	r3, #0
 1034 0012 7B61     		str	r3, [r7, #20]
 1035 0014 4FF00003 		mov	r3, #0
 1036 0018 FB61     		str	r3, [r7, #28]
 1037 001a 4FF00203 		mov	r3, #2
 1038 001e 3B61     		str	r3, [r7, #16]
 1039 0020 4FF00003 		mov	r3, #0
 1040 0024 FB60     		str	r3, [r7, #12]
 1041 0026 4FF00203 		mov	r3, #2
 1042 002a BB60     		str	r3, [r7, #8]
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 1043              		.loc 1 861 0
 1044 002c 4FF46053 		mov	r3, #14336
 1045 0030 C4F20203 		movt	r3, 16386
 1046 0034 9B68     		ldr	r3, [r3, #8]
 1047 0036 03F00C03 		and	r3, r3, #12
 1048 003a BB61     		str	r3, [r7, #24]
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (tmp)
 1049              		.loc 1 863 0
 1050 003c BB69     		ldr	r3, [r7, #24]
 1051 003e 042B     		cmp	r3, #4
 1052 0040 0AD0     		beq	.L32
 1053 0042 082B     		cmp	r3, #8
 1054 0044 0FD0     		beq	.L33
 1055 0046 002B     		cmp	r3, #0
 1056 0048 60D1     		bne	.L37
 1057              	.L31:
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x00:  /* HSI used as system clock source */
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1058              		.loc 1 866 0
 1059 004a 7A68     		ldr	r2, [r7, #4]
 1060 004c 4FF41053 		mov	r3, #9216
 1061 0050 C0F2F403 		movt	r3, 244
 1062 0054 1360     		str	r3, [r2, #0]
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1063              		.loc 1 867 0
 1064 0056 60E0     		b	.L34
 1065              	.L32:
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x04:  /* HSE used as system clock  source */
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 1066              		.loc 1 869 0
 1067 0058 7A68     		ldr	r2, [r7, #4]
 1068 005a 4FF49053 		mov	r3, #4608
 1069 005e C0F27A03 		movt	r3, 122
 1070 0062 1360     		str	r3, [r2, #0]
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1071              		.loc 1 870 0
 1072 0064 59E0     		b	.L34
 1073              	.L33:
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x08:  /* PLL used as system clock  source */
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          SYSCLK = PLL_VCO / PLLP
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          */    
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 1074              		.loc 1 876 0
 1075 0066 4FF46053 		mov	r3, #14336
 1076 006a C4F20203 		movt	r3, 16386
 1077 006e 5B68     		ldr	r3, [r3, #4]
 1078 0070 03F48003 		and	r3, r3, #4194304
 1079 0074 4FEA9353 		lsr	r3, r3, #22
 1080 0078 FB60     		str	r3, [r7, #12]
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 1081              		.loc 1 877 0
 1082 007a 4FF46053 		mov	r3, #14336
 1083 007e C4F20203 		movt	r3, 16386
 1084 0082 5B68     		ldr	r3, [r3, #4]
 1085 0084 03F03F03 		and	r3, r3, #63
 1086 0088 BB60     		str	r3, [r7, #8]
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       if (pllsource != 0)
 1087              		.loc 1 879 0
 1088 008a FB68     		ldr	r3, [r7, #12]
 1089 008c 002B     		cmp	r3, #0
 1090 008e 14D0     		beq	.L35
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         /* HSE used as PLL clock source */
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 1091              		.loc 1 882 0
 1092 0090 4FF49053 		mov	r3, #4608
 1093 0094 C0F27A03 		movt	r3, 122
 1094 0098 BA68     		ldr	r2, [r7, #8]
 1095 009a B3FBF2F2 		udiv	r2, r3, r2
 1096 009e 4FF46053 		mov	r3, #14336
 1097 00a2 C4F20203 		movt	r3, 16386
 1098 00a6 5968     		ldr	r1, [r3, #4]
 1099 00a8 47F6C073 		movw	r3, #32704
 1100 00ac 0B40     		ands	r3, r3, r1
 1101 00ae 4FEA9313 		lsr	r3, r3, #6
 1102 00b2 03FB02F3 		mul	r3, r3, r2
 1103 00b6 FB61     		str	r3, [r7, #28]
 1104 00b8 13E0     		b	.L36
 1105              	.L35:
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       else
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         /* HSI used as PLL clock source */
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 1106              		.loc 1 887 0
 1107 00ba 4FF41053 		mov	r3, #9216
 1108 00be C0F2F403 		movt	r3, 244
 1109 00c2 BA68     		ldr	r2, [r7, #8]
 1110 00c4 B3FBF2F2 		udiv	r2, r3, r2
 1111 00c8 4FF46053 		mov	r3, #14336
 1112 00cc C4F20203 		movt	r3, 16386
 1113 00d0 5968     		ldr	r1, [r3, #4]
 1114 00d2 47F6C073 		movw	r3, #32704
 1115 00d6 0B40     		ands	r3, r3, r1
 1116 00d8 4FEA9313 		lsr	r3, r3, #6
 1117 00dc 03FB02F3 		mul	r3, r3, r2
 1118 00e0 FB61     		str	r3, [r7, #28]
 1119              	.L36:
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 1120              		.loc 1 890 0
 1121 00e2 4FF46053 		mov	r3, #14336
 1122 00e6 C4F20203 		movt	r3, 16386
 1123 00ea 5B68     		ldr	r3, [r3, #4]
 1124 00ec 03F44033 		and	r3, r3, #196608
 1125 00f0 4FEA1343 		lsr	r3, r3, #16
 1126 00f4 03F10103 		add	r3, r3, #1
 1127 00f8 4FEA4303 		lsl	r3, r3, #1
 1128 00fc 3B61     		str	r3, [r7, #16]
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 1129              		.loc 1 891 0
 1130 00fe FA69     		ldr	r2, [r7, #28]
 1131 0100 3B69     		ldr	r3, [r7, #16]
 1132 0102 B2FBF3F2 		udiv	r2, r2, r3
 1133 0106 7B68     		ldr	r3, [r7, #4]
 1134 0108 1A60     		str	r2, [r3, #0]
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1135              		.loc 1 892 0
 1136 010a 06E0     		b	.L34
 1137              	.L37:
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1138              		.loc 1 894 0
 1139 010c 7A68     		ldr	r2, [r7, #4]
 1140 010e 4FF41053 		mov	r3, #9216
 1141 0112 C0F2F403 		movt	r3, 244
 1142 0116 1360     		str	r3, [r2, #0]
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1143              		.loc 1 895 0
 1144 0118 00BF     		nop
 1145              	.L34:
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 1146              		.loc 1 900 0
 1147 011a 4FF46053 		mov	r3, #14336
 1148 011e C4F20203 		movt	r3, 16386
 1149 0122 9B68     		ldr	r3, [r3, #8]
 1150 0124 03F0F003 		and	r3, r3, #240
 1151 0128 BB61     		str	r3, [r7, #24]
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 1152              		.loc 1 901 0
 1153 012a BB69     		ldr	r3, [r7, #24]
 1154 012c 4FEA1313 		lsr	r3, r3, #4
 1155 0130 BB61     		str	r3, [r7, #24]
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1156              		.loc 1 902 0
 1157 0132 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1158 0136 C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1159 013a BA69     		ldr	r2, [r7, #24]
 1160 013c 9B18     		adds	r3, r3, r2
 1161 013e 1B78     		ldrb	r3, [r3, #0]
 1162 0140 DBB2     		uxtb	r3, r3
 1163 0142 7B61     		str	r3, [r7, #20]
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1164              		.loc 1 904 0
 1165 0144 7B68     		ldr	r3, [r7, #4]
 1166 0146 1A68     		ldr	r2, [r3, #0]
 1167 0148 7B69     		ldr	r3, [r7, #20]
 1168 014a 22FA03F2 		lsr	r2, r2, r3
 1169 014e 7B68     		ldr	r3, [r7, #4]
 1170 0150 5A60     		str	r2, [r3, #4]
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 1171              		.loc 1 907 0
 1172 0152 4FF46053 		mov	r3, #14336
 1173 0156 C4F20203 		movt	r3, 16386
 1174 015a 9B68     		ldr	r3, [r3, #8]
 1175 015c 03F4E053 		and	r3, r3, #7168
 1176 0160 BB61     		str	r3, [r7, #24]
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 1177              		.loc 1 908 0
 1178 0162 BB69     		ldr	r3, [r7, #24]
 1179 0164 4FEA9323 		lsr	r3, r3, #10
 1180 0168 BB61     		str	r3, [r7, #24]
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1181              		.loc 1 909 0
 1182 016a 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1183 016e C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1184 0172 BA69     		ldr	r2, [r7, #24]
 1185 0174 9B18     		adds	r3, r3, r2
 1186 0176 1B78     		ldrb	r3, [r3, #0]
 1187 0178 DBB2     		uxtb	r3, r3
 1188 017a 7B61     		str	r3, [r7, #20]
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1189              		.loc 1 911 0
 1190 017c 7B68     		ldr	r3, [r7, #4]
 1191 017e 5A68     		ldr	r2, [r3, #4]
 1192 0180 7B69     		ldr	r3, [r7, #20]
 1193 0182 22FA03F2 		lsr	r2, r2, r3
 1194 0186 7B68     		ldr	r3, [r7, #4]
 1195 0188 9A60     		str	r2, [r3, #8]
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 1196              		.loc 1 914 0
 1197 018a 4FF46053 		mov	r3, #14336
 1198 018e C4F20203 		movt	r3, 16386
 1199 0192 9B68     		ldr	r3, [r3, #8]
 1200 0194 03F46043 		and	r3, r3, #57344
 1201 0198 BB61     		str	r3, [r7, #24]
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 1202              		.loc 1 915 0
 1203 019a BB69     		ldr	r3, [r7, #24]
 1204 019c 4FEA5333 		lsr	r3, r3, #13
 1205 01a0 BB61     		str	r3, [r7, #24]
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1206              		.loc 1 916 0
 1207 01a2 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1208 01a6 C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1209 01aa BA69     		ldr	r2, [r7, #24]
 1210 01ac 9B18     		adds	r3, r3, r2
 1211 01ae 1B78     		ldrb	r3, [r3, #0]
 1212 01b0 DBB2     		uxtb	r3, r3
 1213 01b2 7B61     		str	r3, [r7, #20]
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1214              		.loc 1 918 0
 1215 01b4 7B68     		ldr	r3, [r7, #4]
 1216 01b6 5A68     		ldr	r2, [r3, #4]
 1217 01b8 7B69     		ldr	r3, [r7, #20]
 1218 01ba 22FA03F2 		lsr	r2, r2, r3
 1219 01be 7B68     		ldr	r3, [r7, #4]
 1220 01c0 DA60     		str	r2, [r3, #12]
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1221              		.loc 1 919 0
 1222 01c2 07F12407 		add	r7, r7, #36
 1223 01c6 BD46     		mov	sp, r7
 1224 01c8 80BC     		pop	{r7}
 1225 01ca 7047     		bx	lr
 1226              		.cfi_endproc
 1227              	.LFE129:
 1229              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 1230              		.align	2
 1231              		.global	RCC_RTCCLKConfig
 1232              		.thumb
 1233              		.thumb_func
 1235              	RCC_RTCCLKConfig:
 1236              	.LFB130:
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                    Peripheral clocks configuration functions
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the Peripheral clocks. 
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. The RTC clock which is derived from the LSI, LSE or HSE clock divided by 2 to 31.
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. After restart from Reset or wakeup from STANDBY, all peripherals are off
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      except internal SRAM, Flash and JTAG. Before to start using a peripheral you
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      have to enable its interface clock. You can do this using RCC_AHBPeriphClockCmd()
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      , RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   3. To reset the peripherals configuration (to the default state after device reset)
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      RCC_APB1PeriphResetCmd() functions.
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   4. To further reduce power consumption in SLEEP mode the peripheral clocks can
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      be disabled prior to executing the WFI or WFE instructions. You can do this
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      using RCC_AHBPeriphClockLPModeCmd(), RCC_APB2PeriphClockLPModeCmd() and
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      RCC_APB1PeriphClockLPModeCmd() functions.  
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RTC clock source).
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1237              		.loc 1 982 0
 1238              		.cfi_startproc
 1239              		@ args = 0, pretend = 0, frame = 16
 1240              		@ frame_needed = 1, uses_anonymous_args = 0
 1241              		@ link register save eliminated.
 1242 0000 80B4     		push	{r7}
 1243              	.LCFI58:
 1244              		.cfi_def_cfa_offset 4
 1245              		.cfi_offset 7, -4
 1246 0002 85B0     		sub	sp, sp, #20
 1247              	.LCFI59:
 1248              		.cfi_def_cfa_offset 24
 1249 0004 00AF     		add	r7, sp, #0
 1250              	.LCFI60:
 1251              		.cfi_def_cfa_register 7
 1252 0006 7860     		str	r0, [r7, #4]
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1253              		.loc 1 983 0
 1254 0008 4FF00003 		mov	r3, #0
 1255 000c FB60     		str	r3, [r7, #12]
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 1256              		.loc 1 988 0
 1257 000e 7B68     		ldr	r3, [r7, #4]
 1258 0010 03F44073 		and	r3, r3, #768
 1259 0014 B3F5407F 		cmp	r3, #768
 1260 0018 17D1     		bne	.L39
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
 1261              		.loc 1 990 0
 1262 001a 4FF46053 		mov	r3, #14336
 1263 001e C4F20203 		movt	r3, 16386
 1264 0022 9B68     		ldr	r3, [r3, #8]
 1265 0024 FB60     		str	r3, [r7, #12]
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
 1266              		.loc 1 993 0
 1267 0026 FB68     		ldr	r3, [r7, #12]
 1268 0028 23F4F813 		bic	r3, r3, #2031616
 1269 002c FB60     		str	r3, [r7, #12]
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 1270              		.loc 1 996 0
 1271 002e 7B68     		ldr	r3, [r7, #4]
 1272 0030 23F07043 		bic	r3, r3, #-268435456
 1273 0034 23F44073 		bic	r3, r3, #768
 1274 0038 FA68     		ldr	r2, [r7, #12]
 1275 003a 1343     		orrs	r3, r3, r2
 1276 003c FB60     		str	r3, [r7, #12]
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Store the new value */
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
 1277              		.loc 1 999 0
 1278 003e 4FF46053 		mov	r3, #14336
 1279 0042 C4F20203 		movt	r3, 16386
 1280 0046 FA68     		ldr	r2, [r7, #12]
 1281 0048 9A60     		str	r2, [r3, #8]
 1282              	.L39:
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 1283              		.loc 1 1003 0
 1284 004a 4FF46053 		mov	r3, #14336
 1285 004e C4F20203 		movt	r3, 16386
 1286 0052 4FF46052 		mov	r2, #14336
 1287 0056 C4F20202 		movt	r2, 16386
 1288 005a 116F     		ldr	r1, [r2, #112]
 1289 005c 7A68     		ldr	r2, [r7, #4]
 1290 005e 4FEA0252 		lsl	r2, r2, #20
 1291 0062 4FEA1252 		lsr	r2, r2, #20
 1292 0066 0A43     		orrs	r2, r2, r1
 1293 0068 1A67     		str	r2, [r3, #112]
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1294              		.loc 1 1004 0
 1295 006a 07F11407 		add	r7, r7, #20
 1296 006e BD46     		mov	sp, r7
 1297 0070 80BC     		pop	{r7}
 1298 0072 7047     		bx	lr
 1299              		.cfi_endproc
 1300              	.LFE130:
 1302              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 1303              		.align	2
 1304              		.global	RCC_RTCCLKCmd
 1305              		.thumb
 1306              		.thumb_func
 1308              	RCC_RTCCLKCmd:
 1309              	.LFB131:
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1310              		.loc 1 1014 0
 1311              		.cfi_startproc
 1312              		@ args = 0, pretend = 0, frame = 8
 1313              		@ frame_needed = 1, uses_anonymous_args = 0
 1314              		@ link register save eliminated.
 1315 0000 80B4     		push	{r7}
 1316              	.LCFI61:
 1317              		.cfi_def_cfa_offset 4
 1318              		.cfi_offset 7, -4
 1319 0002 83B0     		sub	sp, sp, #12
 1320              	.LCFI62:
 1321              		.cfi_def_cfa_offset 16
 1322 0004 00AF     		add	r7, sp, #0
 1323              	.LCFI63:
 1324              		.cfi_def_cfa_register 7
 1325 0006 0346     		mov	r3, r0
 1326 0008 FB71     		strb	r3, [r7, #7]
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1327              		.loc 1 1018 0
 1328 000a 40F63C63 		movw	r3, #3644
 1329 000e C4F24723 		movt	r3, 16967
 1330 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1331 0014 1A60     		str	r2, [r3, #0]
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1332              		.loc 1 1019 0
 1333 0016 07F10C07 		add	r7, r7, #12
 1334 001a BD46     		mov	sp, r7
 1335 001c 80BC     		pop	{r7}
 1336 001e 7047     		bx	lr
 1337              		.cfi_endproc
 1338              	.LFE131:
 1340              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 1341              		.align	2
 1342              		.global	RCC_BackupResetCmd
 1343              		.thumb
 1344              		.thumb_func
 1346              	RCC_BackupResetCmd:
 1347              	.LFB132:
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1348              		.loc 1 1031 0
 1349              		.cfi_startproc
 1350              		@ args = 0, pretend = 0, frame = 8
 1351              		@ frame_needed = 1, uses_anonymous_args = 0
 1352              		@ link register save eliminated.
 1353 0000 80B4     		push	{r7}
 1354              	.LCFI64:
 1355              		.cfi_def_cfa_offset 4
 1356              		.cfi_offset 7, -4
 1357 0002 83B0     		sub	sp, sp, #12
 1358              	.LCFI65:
 1359              		.cfi_def_cfa_offset 16
 1360 0004 00AF     		add	r7, sp, #0
 1361              	.LCFI66:
 1362              		.cfi_def_cfa_register 7
 1363 0006 0346     		mov	r3, r0
 1364 0008 FB71     		strb	r3, [r7, #7]
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1365              		.loc 1 1034 0
 1366 000a 4FF46463 		mov	r3, #3648
 1367 000e C4F24723 		movt	r3, 16967
 1368 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1369 0014 1A60     		str	r2, [r3, #0]
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1370              		.loc 1 1035 0
 1371 0016 07F10C07 		add	r7, r7, #12
 1372 001a BD46     		mov	sp, r7
 1373 001c 80BC     		pop	{r7}
 1374 001e 7047     		bx	lr
 1375              		.cfi_endproc
 1376              	.LFE132:
 1378              		.section	.text.RCC_I2SCLKConfig,"ax",%progbits
 1379              		.align	2
 1380              		.global	RCC_I2SCLKConfig
 1381              		.thumb
 1382              		.thumb_func
 1384              	RCC_I2SCLKConfig:
 1385              	.LFB133:
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function applies only to Silicon RevisionB and RevisionY.
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1386              		.loc 1 1051 0
 1387              		.cfi_startproc
 1388              		@ args = 0, pretend = 0, frame = 8
 1389              		@ frame_needed = 1, uses_anonymous_args = 0
 1390              		@ link register save eliminated.
 1391 0000 80B4     		push	{r7}
 1392              	.LCFI67:
 1393              		.cfi_def_cfa_offset 4
 1394              		.cfi_offset 7, -4
 1395 0002 83B0     		sub	sp, sp, #12
 1396              	.LCFI68:
 1397              		.cfi_def_cfa_offset 16
 1398 0004 00AF     		add	r7, sp, #0
 1399              	.LCFI69:
 1400              		.cfi_def_cfa_register 7
 1401 0006 7860     		str	r0, [r7, #4]
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 1402              		.loc 1 1055 0
 1403 0008 4FF4AE73 		mov	r3, #348
 1404 000c C4F24723 		movt	r3, 16967
 1405 0010 7A68     		ldr	r2, [r7, #4]
 1406 0012 1A60     		str	r2, [r3, #0]
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1407              		.loc 1 1056 0
 1408 0014 07F10C07 		add	r7, r7, #12
 1409 0018 BD46     		mov	sp, r7
 1410 001a 80BC     		pop	{r7}
 1411 001c 7047     		bx	lr
 1412              		.cfi_endproc
 1413              	.LFE133:
 1415 001e 00BF     		.section	.text.RCC_AHB1PeriphClockCmd,"ax",%progbits
 1416              		.align	2
 1417              		.global	RCC_AHB1PeriphClockCmd
 1418              		.thumb
 1419              		.thumb_func
 1421              	RCC_AHB1PeriphClockCmd:
 1422              	.LFB134:
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.   
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1423              		.loc 1 1089 0
 1424              		.cfi_startproc
 1425              		@ args = 0, pretend = 0, frame = 8
 1426              		@ frame_needed = 1, uses_anonymous_args = 0
 1427              		@ link register save eliminated.
 1428 0000 80B4     		push	{r7}
 1429              	.LCFI70:
 1430              		.cfi_def_cfa_offset 4
 1431              		.cfi_offset 7, -4
 1432 0002 83B0     		sub	sp, sp, #12
 1433              	.LCFI71:
 1434              		.cfi_def_cfa_offset 16
 1435 0004 00AF     		add	r7, sp, #0
 1436              	.LCFI72:
 1437              		.cfi_def_cfa_register 7
 1438 0006 7860     		str	r0, [r7, #4]
 1439 0008 0B46     		mov	r3, r1
 1440 000a FB70     		strb	r3, [r7, #3]
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1441              		.loc 1 1094 0
 1442 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1443 000e 002B     		cmp	r3, #0
 1444 0010 0CD0     		beq	.L44
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
 1445              		.loc 1 1096 0
 1446 0012 4FF46053 		mov	r3, #14336
 1447 0016 C4F20203 		movt	r3, 16386
 1448 001a 4FF46052 		mov	r2, #14336
 1449 001e C4F20202 		movt	r2, 16386
 1450 0022 116B     		ldr	r1, [r2, #48]
 1451 0024 7A68     		ldr	r2, [r7, #4]
 1452 0026 0A43     		orrs	r2, r2, r1
 1453 0028 1A63     		str	r2, [r3, #48]
 1454 002a 0DE0     		b	.L43
 1455              	.L44:
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
 1456              		.loc 1 1100 0
 1457 002c 4FF46053 		mov	r3, #14336
 1458 0030 C4F20203 		movt	r3, 16386
 1459 0034 4FF46052 		mov	r2, #14336
 1460 0038 C4F20202 		movt	r2, 16386
 1461 003c 116B     		ldr	r1, [r2, #48]
 1462 003e 7A68     		ldr	r2, [r7, #4]
 1463 0040 6FEA0202 		mvn	r2, r2
 1464 0044 0A40     		ands	r2, r2, r1
 1465 0046 1A63     		str	r2, [r3, #48]
 1466              	.L43:
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1467              		.loc 1 1102 0
 1468 0048 07F10C07 		add	r7, r7, #12
 1469 004c BD46     		mov	sp, r7
 1470 004e 80BC     		pop	{r7}
 1471 0050 7047     		bx	lr
 1472              		.cfi_endproc
 1473              	.LFE134:
 1475 0052 00BF     		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 1476              		.align	2
 1477              		.global	RCC_AHB2PeriphClockCmd
 1478              		.thumb
 1479              		.thumb_func
 1481              	RCC_AHB2PeriphClockCmd:
 1482              	.LFB135:
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1483              		.loc 1 1121 0
 1484              		.cfi_startproc
 1485              		@ args = 0, pretend = 0, frame = 8
 1486              		@ frame_needed = 1, uses_anonymous_args = 0
 1487              		@ link register save eliminated.
 1488 0000 80B4     		push	{r7}
 1489              	.LCFI73:
 1490              		.cfi_def_cfa_offset 4
 1491              		.cfi_offset 7, -4
 1492 0002 83B0     		sub	sp, sp, #12
 1493              	.LCFI74:
 1494              		.cfi_def_cfa_offset 16
 1495 0004 00AF     		add	r7, sp, #0
 1496              	.LCFI75:
 1497              		.cfi_def_cfa_register 7
 1498 0006 7860     		str	r0, [r7, #4]
 1499 0008 0B46     		mov	r3, r1
 1500 000a FB70     		strb	r3, [r7, #3]
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1501              		.loc 1 1126 0
 1502 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1503 000e 002B     		cmp	r3, #0
 1504 0010 0CD0     		beq	.L47
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
 1505              		.loc 1 1128 0
 1506 0012 4FF46053 		mov	r3, #14336
 1507 0016 C4F20203 		movt	r3, 16386
 1508 001a 4FF46052 		mov	r2, #14336
 1509 001e C4F20202 		movt	r2, 16386
 1510 0022 516B     		ldr	r1, [r2, #52]
 1511 0024 7A68     		ldr	r2, [r7, #4]
 1512 0026 0A43     		orrs	r2, r2, r1
 1513 0028 5A63     		str	r2, [r3, #52]
 1514 002a 0DE0     		b	.L46
 1515              	.L47:
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
 1516              		.loc 1 1132 0
 1517 002c 4FF46053 		mov	r3, #14336
 1518 0030 C4F20203 		movt	r3, 16386
 1519 0034 4FF46052 		mov	r2, #14336
 1520 0038 C4F20202 		movt	r2, 16386
 1521 003c 516B     		ldr	r1, [r2, #52]
 1522 003e 7A68     		ldr	r2, [r7, #4]
 1523 0040 6FEA0202 		mvn	r2, r2
 1524 0044 0A40     		ands	r2, r2, r1
 1525 0046 5A63     		str	r2, [r3, #52]
 1526              	.L46:
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1527              		.loc 1 1134 0
 1528 0048 07F10C07 		add	r7, r7, #12
 1529 004c BD46     		mov	sp, r7
 1530 004e 80BC     		pop	{r7}
 1531 0050 7047     		bx	lr
 1532              		.cfi_endproc
 1533              	.LFE135:
 1535 0052 00BF     		.section	.text.RCC_AHB3PeriphClockCmd,"ax",%progbits
 1536              		.align	2
 1537              		.global	RCC_AHB3PeriphClockCmd
 1538              		.thumb
 1539              		.thumb_func
 1541              	RCC_AHB3PeriphClockCmd:
 1542              	.LFB136:
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1543              		.loc 1 1148 0
 1544              		.cfi_startproc
 1545              		@ args = 0, pretend = 0, frame = 8
 1546              		@ frame_needed = 1, uses_anonymous_args = 0
 1547              		@ link register save eliminated.
 1548 0000 80B4     		push	{r7}
 1549              	.LCFI76:
 1550              		.cfi_def_cfa_offset 4
 1551              		.cfi_offset 7, -4
 1552 0002 83B0     		sub	sp, sp, #12
 1553              	.LCFI77:
 1554              		.cfi_def_cfa_offset 16
 1555 0004 00AF     		add	r7, sp, #0
 1556              	.LCFI78:
 1557              		.cfi_def_cfa_register 7
 1558 0006 7860     		str	r0, [r7, #4]
 1559 0008 0B46     		mov	r3, r1
 1560 000a FB70     		strb	r3, [r7, #3]
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1561              		.loc 1 1153 0
 1562 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1563 000e 002B     		cmp	r3, #0
 1564 0010 0CD0     		beq	.L50
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
 1565              		.loc 1 1155 0
 1566 0012 4FF46053 		mov	r3, #14336
 1567 0016 C4F20203 		movt	r3, 16386
 1568 001a 4FF46052 		mov	r2, #14336
 1569 001e C4F20202 		movt	r2, 16386
 1570 0022 916B     		ldr	r1, [r2, #56]
 1571 0024 7A68     		ldr	r2, [r7, #4]
 1572 0026 0A43     		orrs	r2, r2, r1
 1573 0028 9A63     		str	r2, [r3, #56]
 1574 002a 0DE0     		b	.L49
 1575              	.L50:
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
 1576              		.loc 1 1159 0
 1577 002c 4FF46053 		mov	r3, #14336
 1578 0030 C4F20203 		movt	r3, 16386
 1579 0034 4FF46052 		mov	r2, #14336
 1580 0038 C4F20202 		movt	r2, 16386
 1581 003c 916B     		ldr	r1, [r2, #56]
 1582 003e 7A68     		ldr	r2, [r7, #4]
 1583 0040 6FEA0202 		mvn	r2, r2
 1584 0044 0A40     		ands	r2, r2, r1
 1585 0046 9A63     		str	r2, [r3, #56]
 1586              	.L49:
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1587              		.loc 1 1161 0
 1588 0048 07F10C07 		add	r7, r7, #12
 1589 004c BD46     		mov	sp, r7
 1590 004e 80BC     		pop	{r7}
 1591 0050 7047     		bx	lr
 1592              		.cfi_endproc
 1593              	.LFE136:
 1595 0052 00BF     		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1596              		.align	2
 1597              		.global	RCC_APB1PeriphClockCmd
 1598              		.thumb
 1599              		.thumb_func
 1601              	RCC_APB1PeriphClockCmd:
 1602              	.LFB137:
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1603              		.loc 1 1198 0
 1604              		.cfi_startproc
 1605              		@ args = 0, pretend = 0, frame = 8
 1606              		@ frame_needed = 1, uses_anonymous_args = 0
 1607              		@ link register save eliminated.
 1608 0000 80B4     		push	{r7}
 1609              	.LCFI79:
 1610              		.cfi_def_cfa_offset 4
 1611              		.cfi_offset 7, -4
 1612 0002 83B0     		sub	sp, sp, #12
 1613              	.LCFI80:
 1614              		.cfi_def_cfa_offset 16
 1615 0004 00AF     		add	r7, sp, #0
 1616              	.LCFI81:
 1617              		.cfi_def_cfa_register 7
 1618 0006 7860     		str	r0, [r7, #4]
 1619 0008 0B46     		mov	r3, r1
 1620 000a FB70     		strb	r3, [r7, #3]
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1621              		.loc 1 1203 0
 1622 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1623 000e 002B     		cmp	r3, #0
 1624 0010 0CD0     		beq	.L53
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1625              		.loc 1 1205 0
 1626 0012 4FF46053 		mov	r3, #14336
 1627 0016 C4F20203 		movt	r3, 16386
 1628 001a 4FF46052 		mov	r2, #14336
 1629 001e C4F20202 		movt	r2, 16386
 1630 0022 116C     		ldr	r1, [r2, #64]
 1631 0024 7A68     		ldr	r2, [r7, #4]
 1632 0026 0A43     		orrs	r2, r2, r1
 1633 0028 1A64     		str	r2, [r3, #64]
 1634 002a 0DE0     		b	.L52
 1635              	.L53:
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1636              		.loc 1 1209 0
 1637 002c 4FF46053 		mov	r3, #14336
 1638 0030 C4F20203 		movt	r3, 16386
 1639 0034 4FF46052 		mov	r2, #14336
 1640 0038 C4F20202 		movt	r2, 16386
 1641 003c 116C     		ldr	r1, [r2, #64]
 1642 003e 7A68     		ldr	r2, [r7, #4]
 1643 0040 6FEA0202 		mvn	r2, r2
 1644 0044 0A40     		ands	r2, r2, r1
 1645 0046 1A64     		str	r2, [r3, #64]
 1646              	.L52:
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1647              		.loc 1 1211 0
 1648 0048 07F10C07 		add	r7, r7, #12
 1649 004c BD46     		mov	sp, r7
 1650 004e 80BC     		pop	{r7}
 1651 0050 7047     		bx	lr
 1652              		.cfi_endproc
 1653              	.LFE137:
 1655 0052 00BF     		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1656              		.align	2
 1657              		.global	RCC_APB2PeriphClockCmd
 1658              		.thumb
 1659              		.thumb_func
 1661              	RCC_APB2PeriphClockCmd:
 1662              	.LFB138:
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1663              		.loc 1 1238 0
 1664              		.cfi_startproc
 1665              		@ args = 0, pretend = 0, frame = 8
 1666              		@ frame_needed = 1, uses_anonymous_args = 0
 1667              		@ link register save eliminated.
 1668 0000 80B4     		push	{r7}
 1669              	.LCFI82:
 1670              		.cfi_def_cfa_offset 4
 1671              		.cfi_offset 7, -4
 1672 0002 83B0     		sub	sp, sp, #12
 1673              	.LCFI83:
 1674              		.cfi_def_cfa_offset 16
 1675 0004 00AF     		add	r7, sp, #0
 1676              	.LCFI84:
 1677              		.cfi_def_cfa_register 7
 1678 0006 7860     		str	r0, [r7, #4]
 1679 0008 0B46     		mov	r3, r1
 1680 000a FB70     		strb	r3, [r7, #3]
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1681              		.loc 1 1243 0
 1682 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1683 000e 002B     		cmp	r3, #0
 1684 0010 0CD0     		beq	.L56
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1685              		.loc 1 1245 0
 1686 0012 4FF46053 		mov	r3, #14336
 1687 0016 C4F20203 		movt	r3, 16386
 1688 001a 4FF46052 		mov	r2, #14336
 1689 001e C4F20202 		movt	r2, 16386
 1690 0022 516C     		ldr	r1, [r2, #68]
 1691 0024 7A68     		ldr	r2, [r7, #4]
 1692 0026 0A43     		orrs	r2, r2, r1
 1693 0028 5A64     		str	r2, [r3, #68]
 1694 002a 0DE0     		b	.L55
 1695              	.L56:
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1696              		.loc 1 1249 0
 1697 002c 4FF46053 		mov	r3, #14336
 1698 0030 C4F20203 		movt	r3, 16386
 1699 0034 4FF46052 		mov	r2, #14336
 1700 0038 C4F20202 		movt	r2, 16386
 1701 003c 516C     		ldr	r1, [r2, #68]
 1702 003e 7A68     		ldr	r2, [r7, #4]
 1703 0040 6FEA0202 		mvn	r2, r2
 1704 0044 0A40     		ands	r2, r2, r1
 1705 0046 5A64     		str	r2, [r3, #68]
 1706              	.L55:
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1707              		.loc 1 1251 0
 1708 0048 07F10C07 		add	r7, r7, #12
 1709 004c BD46     		mov	sp, r7
 1710 004e 80BC     		pop	{r7}
 1711 0050 7047     		bx	lr
 1712              		.cfi_endproc
 1713              	.LFE138:
 1715 0052 00BF     		.section	.text.RCC_AHB1PeriphResetCmd,"ax",%progbits
 1716              		.align	2
 1717              		.global	RCC_AHB1PeriphResetCmd
 1718              		.thumb
 1719              		.thumb_func
 1721              	RCC_AHB1PeriphResetCmd:
 1722              	.LFB139:
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                  
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1723              		.loc 1 1277 0
 1724              		.cfi_startproc
 1725              		@ args = 0, pretend = 0, frame = 8
 1726              		@ frame_needed = 1, uses_anonymous_args = 0
 1727              		@ link register save eliminated.
 1728 0000 80B4     		push	{r7}
 1729              	.LCFI85:
 1730              		.cfi_def_cfa_offset 4
 1731              		.cfi_offset 7, -4
 1732 0002 83B0     		sub	sp, sp, #12
 1733              	.LCFI86:
 1734              		.cfi_def_cfa_offset 16
 1735 0004 00AF     		add	r7, sp, #0
 1736              	.LCFI87:
 1737              		.cfi_def_cfa_register 7
 1738 0006 7860     		str	r0, [r7, #4]
 1739 0008 0B46     		mov	r3, r1
 1740 000a FB70     		strb	r3, [r7, #3]
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1741              		.loc 1 1282 0
 1742 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1743 000e 002B     		cmp	r3, #0
 1744 0010 0CD0     		beq	.L59
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
 1745              		.loc 1 1284 0
 1746 0012 4FF46053 		mov	r3, #14336
 1747 0016 C4F20203 		movt	r3, 16386
 1748 001a 4FF46052 		mov	r2, #14336
 1749 001e C4F20202 		movt	r2, 16386
 1750 0022 1169     		ldr	r1, [r2, #16]
 1751 0024 7A68     		ldr	r2, [r7, #4]
 1752 0026 0A43     		orrs	r2, r2, r1
 1753 0028 1A61     		str	r2, [r3, #16]
 1754 002a 0DE0     		b	.L58
 1755              	.L59:
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 1756              		.loc 1 1288 0
 1757 002c 4FF46053 		mov	r3, #14336
 1758 0030 C4F20203 		movt	r3, 16386
 1759 0034 4FF46052 		mov	r2, #14336
 1760 0038 C4F20202 		movt	r2, 16386
 1761 003c 1169     		ldr	r1, [r2, #16]
 1762 003e 7A68     		ldr	r2, [r7, #4]
 1763 0040 6FEA0202 		mvn	r2, r2
 1764 0044 0A40     		ands	r2, r2, r1
 1765 0046 1A61     		str	r2, [r3, #16]
 1766              	.L58:
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1767              		.loc 1 1290 0
 1768 0048 07F10C07 		add	r7, r7, #12
 1769 004c BD46     		mov	sp, r7
 1770 004e 80BC     		pop	{r7}
 1771 0050 7047     		bx	lr
 1772              		.cfi_endproc
 1773              	.LFE139:
 1775 0052 00BF     		.section	.text.RCC_AHB2PeriphResetCmd,"ax",%progbits
 1776              		.align	2
 1777              		.global	RCC_AHB2PeriphResetCmd
 1778              		.thumb
 1779              		.thumb_func
 1781              	RCC_AHB2PeriphResetCmd:
 1782              	.LFB140:
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1783              		.loc 1 1306 0
 1784              		.cfi_startproc
 1785              		@ args = 0, pretend = 0, frame = 8
 1786              		@ frame_needed = 1, uses_anonymous_args = 0
 1787              		@ link register save eliminated.
 1788 0000 80B4     		push	{r7}
 1789              	.LCFI88:
 1790              		.cfi_def_cfa_offset 4
 1791              		.cfi_offset 7, -4
 1792 0002 83B0     		sub	sp, sp, #12
 1793              	.LCFI89:
 1794              		.cfi_def_cfa_offset 16
 1795 0004 00AF     		add	r7, sp, #0
 1796              	.LCFI90:
 1797              		.cfi_def_cfa_register 7
 1798 0006 7860     		str	r0, [r7, #4]
 1799 0008 0B46     		mov	r3, r1
 1800 000a FB70     		strb	r3, [r7, #3]
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1801              		.loc 1 1311 0
 1802 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1803 000e 002B     		cmp	r3, #0
 1804 0010 0CD0     		beq	.L62
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
 1805              		.loc 1 1313 0
 1806 0012 4FF46053 		mov	r3, #14336
 1807 0016 C4F20203 		movt	r3, 16386
 1808 001a 4FF46052 		mov	r2, #14336
 1809 001e C4F20202 		movt	r2, 16386
 1810 0022 5169     		ldr	r1, [r2, #20]
 1811 0024 7A68     		ldr	r2, [r7, #4]
 1812 0026 0A43     		orrs	r2, r2, r1
 1813 0028 5A61     		str	r2, [r3, #20]
 1814 002a 0DE0     		b	.L61
 1815              	.L62:
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 1816              		.loc 1 1317 0
 1817 002c 4FF46053 		mov	r3, #14336
 1818 0030 C4F20203 		movt	r3, 16386
 1819 0034 4FF46052 		mov	r2, #14336
 1820 0038 C4F20202 		movt	r2, 16386
 1821 003c 5169     		ldr	r1, [r2, #20]
 1822 003e 7A68     		ldr	r2, [r7, #4]
 1823 0040 6FEA0202 		mvn	r2, r2
 1824 0044 0A40     		ands	r2, r2, r1
 1825 0046 5A61     		str	r2, [r3, #20]
 1826              	.L61:
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1827              		.loc 1 1319 0
 1828 0048 07F10C07 		add	r7, r7, #12
 1829 004c BD46     		mov	sp, r7
 1830 004e 80BC     		pop	{r7}
 1831 0050 7047     		bx	lr
 1832              		.cfi_endproc
 1833              	.LFE140:
 1835 0052 00BF     		.section	.text.RCC_AHB3PeriphResetCmd,"ax",%progbits
 1836              		.align	2
 1837              		.global	RCC_AHB3PeriphResetCmd
 1838              		.thumb
 1839              		.thumb_func
 1841              	RCC_AHB3PeriphResetCmd:
 1842              	.LFB141:
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1843              		.loc 1 1330 0
 1844              		.cfi_startproc
 1845              		@ args = 0, pretend = 0, frame = 8
 1846              		@ frame_needed = 1, uses_anonymous_args = 0
 1847              		@ link register save eliminated.
 1848 0000 80B4     		push	{r7}
 1849              	.LCFI91:
 1850              		.cfi_def_cfa_offset 4
 1851              		.cfi_offset 7, -4
 1852 0002 83B0     		sub	sp, sp, #12
 1853              	.LCFI92:
 1854              		.cfi_def_cfa_offset 16
 1855 0004 00AF     		add	r7, sp, #0
 1856              	.LCFI93:
 1857              		.cfi_def_cfa_register 7
 1858 0006 7860     		str	r0, [r7, #4]
 1859 0008 0B46     		mov	r3, r1
 1860 000a FB70     		strb	r3, [r7, #3]
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1861              		.loc 1 1335 0
 1862 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1863 000e 002B     		cmp	r3, #0
 1864 0010 0CD0     		beq	.L65
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
 1865              		.loc 1 1337 0
 1866 0012 4FF46053 		mov	r3, #14336
 1867 0016 C4F20203 		movt	r3, 16386
 1868 001a 4FF46052 		mov	r2, #14336
 1869 001e C4F20202 		movt	r2, 16386
 1870 0022 9169     		ldr	r1, [r2, #24]
 1871 0024 7A68     		ldr	r2, [r7, #4]
 1872 0026 0A43     		orrs	r2, r2, r1
 1873 0028 9A61     		str	r2, [r3, #24]
 1874 002a 0DE0     		b	.L64
 1875              	.L65:
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 1876              		.loc 1 1341 0
 1877 002c 4FF46053 		mov	r3, #14336
 1878 0030 C4F20203 		movt	r3, 16386
 1879 0034 4FF46052 		mov	r2, #14336
 1880 0038 C4F20202 		movt	r2, 16386
 1881 003c 9169     		ldr	r1, [r2, #24]
 1882 003e 7A68     		ldr	r2, [r7, #4]
 1883 0040 6FEA0202 		mvn	r2, r2
 1884 0044 0A40     		ands	r2, r2, r1
 1885 0046 9A61     		str	r2, [r3, #24]
 1886              	.L64:
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1887              		.loc 1 1343 0
 1888 0048 07F10C07 		add	r7, r7, #12
 1889 004c BD46     		mov	sp, r7
 1890 004e 80BC     		pop	{r7}
 1891 0050 7047     		bx	lr
 1892              		.cfi_endproc
 1893              	.LFE141:
 1895 0052 00BF     		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1896              		.align	2
 1897              		.global	RCC_APB1PeriphResetCmd
 1898              		.thumb
 1899              		.thumb_func
 1901              	RCC_APB1PeriphResetCmd:
 1902              	.LFB142:
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1903              		.loc 1 1377 0
 1904              		.cfi_startproc
 1905              		@ args = 0, pretend = 0, frame = 8
 1906              		@ frame_needed = 1, uses_anonymous_args = 0
 1907              		@ link register save eliminated.
 1908 0000 80B4     		push	{r7}
 1909              	.LCFI94:
 1910              		.cfi_def_cfa_offset 4
 1911              		.cfi_offset 7, -4
 1912 0002 83B0     		sub	sp, sp, #12
 1913              	.LCFI95:
 1914              		.cfi_def_cfa_offset 16
 1915 0004 00AF     		add	r7, sp, #0
 1916              	.LCFI96:
 1917              		.cfi_def_cfa_register 7
 1918 0006 7860     		str	r0, [r7, #4]
 1919 0008 0B46     		mov	r3, r1
 1920 000a FB70     		strb	r3, [r7, #3]
1378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1921              		.loc 1 1381 0
 1922 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1923 000e 002B     		cmp	r3, #0
 1924 0010 0CD0     		beq	.L68
1382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1925              		.loc 1 1383 0
 1926 0012 4FF46053 		mov	r3, #14336
 1927 0016 C4F20203 		movt	r3, 16386
 1928 001a 4FF46052 		mov	r2, #14336
 1929 001e C4F20202 		movt	r2, 16386
 1930 0022 116A     		ldr	r1, [r2, #32]
 1931 0024 7A68     		ldr	r2, [r7, #4]
 1932 0026 0A43     		orrs	r2, r2, r1
 1933 0028 1A62     		str	r2, [r3, #32]
 1934 002a 0DE0     		b	.L67
 1935              	.L68:
1384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1936              		.loc 1 1387 0
 1937 002c 4FF46053 		mov	r3, #14336
 1938 0030 C4F20203 		movt	r3, 16386
 1939 0034 4FF46052 		mov	r2, #14336
 1940 0038 C4F20202 		movt	r2, 16386
 1941 003c 116A     		ldr	r1, [r2, #32]
 1942 003e 7A68     		ldr	r2, [r7, #4]
 1943 0040 6FEA0202 		mvn	r2, r2
 1944 0044 0A40     		ands	r2, r2, r1
 1945 0046 1A62     		str	r2, [r3, #32]
 1946              	.L67:
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1947              		.loc 1 1389 0
 1948 0048 07F10C07 		add	r7, r7, #12
 1949 004c BD46     		mov	sp, r7
 1950 004e 80BC     		pop	{r7}
 1951 0050 7047     		bx	lr
 1952              		.cfi_endproc
 1953              	.LFE142:
 1955 0052 00BF     		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1956              		.align	2
 1957              		.global	RCC_APB2PeriphResetCmd
 1958              		.thumb
 1959              		.thumb_func
 1961              	RCC_APB2PeriphResetCmd:
 1962              	.LFB143:
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1963              		.loc 1 1413 0
 1964              		.cfi_startproc
 1965              		@ args = 0, pretend = 0, frame = 8
 1966              		@ frame_needed = 1, uses_anonymous_args = 0
 1967              		@ link register save eliminated.
 1968 0000 80B4     		push	{r7}
 1969              	.LCFI97:
 1970              		.cfi_def_cfa_offset 4
 1971              		.cfi_offset 7, -4
 1972 0002 83B0     		sub	sp, sp, #12
 1973              	.LCFI98:
 1974              		.cfi_def_cfa_offset 16
 1975 0004 00AF     		add	r7, sp, #0
 1976              	.LCFI99:
 1977              		.cfi_def_cfa_register 7
 1978 0006 7860     		str	r0, [r7, #4]
 1979 0008 0B46     		mov	r3, r1
 1980 000a FB70     		strb	r3, [r7, #3]
1414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
1416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1981              		.loc 1 1417 0
 1982 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1983 000e 002B     		cmp	r3, #0
 1984 0010 0CD0     		beq	.L71
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 1985              		.loc 1 1419 0
 1986 0012 4FF46053 		mov	r3, #14336
 1987 0016 C4F20203 		movt	r3, 16386
 1988 001a 4FF46052 		mov	r2, #14336
 1989 001e C4F20202 		movt	r2, 16386
 1990 0022 516A     		ldr	r1, [r2, #36]
 1991 0024 7A68     		ldr	r2, [r7, #4]
 1992 0026 0A43     		orrs	r2, r2, r1
 1993 0028 5A62     		str	r2, [r3, #36]
 1994 002a 0DE0     		b	.L70
 1995              	.L71:
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1996              		.loc 1 1423 0
 1997 002c 4FF46053 		mov	r3, #14336
 1998 0030 C4F20203 		movt	r3, 16386
 1999 0034 4FF46052 		mov	r2, #14336
 2000 0038 C4F20202 		movt	r2, 16386
 2001 003c 516A     		ldr	r1, [r2, #36]
 2002 003e 7A68     		ldr	r2, [r7, #4]
 2003 0040 6FEA0202 		mvn	r2, r2
 2004 0044 0A40     		ands	r2, r2, r1
 2005 0046 5A62     		str	r2, [r3, #36]
 2006              	.L70:
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2007              		.loc 1 1425 0
 2008 0048 07F10C07 		add	r7, r7, #12
 2009 004c BD46     		mov	sp, r7
 2010 004e 80BC     		pop	{r7}
 2011 0050 7047     		bx	lr
 2012              		.cfi_endproc
 2013              	.LFE143:
 2015 0052 00BF     		.section	.text.RCC_AHB1PeriphClockLPModeCmd,"ax",%progbits
 2016              		.align	2
 2017              		.global	RCC_AHB1PeriphClockLPModeCmd
 2018              		.thumb
 2019              		.thumb_func
 2021              	RCC_AHB1PeriphClockLPModeCmd:
 2022              	.LFB144:
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
1429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2023              		.loc 1 1459 0
 2024              		.cfi_startproc
 2025              		@ args = 0, pretend = 0, frame = 8
 2026              		@ frame_needed = 1, uses_anonymous_args = 0
 2027              		@ link register save eliminated.
 2028 0000 80B4     		push	{r7}
 2029              	.LCFI100:
 2030              		.cfi_def_cfa_offset 4
 2031              		.cfi_offset 7, -4
 2032 0002 83B0     		sub	sp, sp, #12
 2033              	.LCFI101:
 2034              		.cfi_def_cfa_offset 16
 2035 0004 00AF     		add	r7, sp, #0
 2036              	.LCFI102:
 2037              		.cfi_def_cfa_register 7
 2038 0006 7860     		str	r0, [r7, #4]
 2039 0008 0B46     		mov	r3, r1
 2040 000a FB70     		strb	r3, [r7, #3]
1460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
1462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2041              		.loc 1 1463 0
 2042 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2043 000e 002B     		cmp	r3, #0
 2044 0010 0CD0     		beq	.L74
1464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
 2045              		.loc 1 1465 0
 2046 0012 4FF46053 		mov	r3, #14336
 2047 0016 C4F20203 		movt	r3, 16386
 2048 001a 4FF46052 		mov	r2, #14336
 2049 001e C4F20202 		movt	r2, 16386
 2050 0022 116D     		ldr	r1, [r2, #80]
 2051 0024 7A68     		ldr	r2, [r7, #4]
 2052 0026 0A43     		orrs	r2, r2, r1
 2053 0028 1A65     		str	r2, [r3, #80]
 2054 002a 0DE0     		b	.L73
 2055              	.L74:
1466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 2056              		.loc 1 1469 0
 2057 002c 4FF46053 		mov	r3, #14336
 2058 0030 C4F20203 		movt	r3, 16386
 2059 0034 4FF46052 		mov	r2, #14336
 2060 0038 C4F20202 		movt	r2, 16386
 2061 003c 116D     		ldr	r1, [r2, #80]
 2062 003e 7A68     		ldr	r2, [r7, #4]
 2063 0040 6FEA0202 		mvn	r2, r2
 2064 0044 0A40     		ands	r2, r2, r1
 2065 0046 1A65     		str	r2, [r3, #80]
 2066              	.L73:
1470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2067              		.loc 1 1471 0
 2068 0048 07F10C07 		add	r7, r7, #12
 2069 004c BD46     		mov	sp, r7
 2070 004e 80BC     		pop	{r7}
 2071 0050 7047     		bx	lr
 2072              		.cfi_endproc
 2073              	.LFE144:
 2075 0052 00BF     		.section	.text.RCC_AHB2PeriphClockLPModeCmd,"ax",%progbits
 2076              		.align	2
 2077              		.global	RCC_AHB2PeriphClockLPModeCmd
 2078              		.thumb
 2079              		.thumb_func
 2081              	RCC_AHB2PeriphClockLPModeCmd:
 2082              	.LFB145:
1472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
1475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           power consumption.
1477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
1486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2083              		.loc 1 1491 0
 2084              		.cfi_startproc
 2085              		@ args = 0, pretend = 0, frame = 8
 2086              		@ frame_needed = 1, uses_anonymous_args = 0
 2087              		@ link register save eliminated.
 2088 0000 80B4     		push	{r7}
 2089              	.LCFI103:
 2090              		.cfi_def_cfa_offset 4
 2091              		.cfi_offset 7, -4
 2092 0002 83B0     		sub	sp, sp, #12
 2093              	.LCFI104:
 2094              		.cfi_def_cfa_offset 16
 2095 0004 00AF     		add	r7, sp, #0
 2096              	.LCFI105:
 2097              		.cfi_def_cfa_register 7
 2098 0006 7860     		str	r0, [r7, #4]
 2099 0008 0B46     		mov	r3, r1
 2100 000a FB70     		strb	r3, [r7, #3]
1492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2101              		.loc 1 1495 0
 2102 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2103 000e 002B     		cmp	r3, #0
 2104 0010 0CD0     		beq	.L77
1496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
 2105              		.loc 1 1497 0
 2106 0012 4FF46053 		mov	r3, #14336
 2107 0016 C4F20203 		movt	r3, 16386
 2108 001a 4FF46052 		mov	r2, #14336
 2109 001e C4F20202 		movt	r2, 16386
 2110 0022 516D     		ldr	r1, [r2, #84]
 2111 0024 7A68     		ldr	r2, [r7, #4]
 2112 0026 0A43     		orrs	r2, r2, r1
 2113 0028 5A65     		str	r2, [r3, #84]
 2114 002a 0DE0     		b	.L76
 2115              	.L77:
1498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 2116              		.loc 1 1501 0
 2117 002c 4FF46053 		mov	r3, #14336
 2118 0030 C4F20203 		movt	r3, 16386
 2119 0034 4FF46052 		mov	r2, #14336
 2120 0038 C4F20202 		movt	r2, 16386
 2121 003c 516D     		ldr	r1, [r2, #84]
 2122 003e 7A68     		ldr	r2, [r7, #4]
 2123 0040 6FEA0202 		mvn	r2, r2
 2124 0044 0A40     		ands	r2, r2, r1
 2125 0046 5A65     		str	r2, [r3, #84]
 2126              	.L76:
1502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2127              		.loc 1 1503 0
 2128 0048 07F10C07 		add	r7, r7, #12
 2129 004c BD46     		mov	sp, r7
 2130 004e 80BC     		pop	{r7}
 2131 0050 7047     		bx	lr
 2132              		.cfi_endproc
 2133              	.LFE145:
 2135 0052 00BF     		.section	.text.RCC_AHB3PeriphClockLPModeCmd,"ax",%progbits
 2136              		.align	2
 2137              		.global	RCC_AHB3PeriphClockLPModeCmd
 2138              		.thumb
 2139              		.thumb_func
 2141              	RCC_AHB3PeriphClockLPModeCmd:
 2142              	.LFB146:
1504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
1507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2143              		.loc 1 1518 0
 2144              		.cfi_startproc
 2145              		@ args = 0, pretend = 0, frame = 8
 2146              		@ frame_needed = 1, uses_anonymous_args = 0
 2147              		@ link register save eliminated.
 2148 0000 80B4     		push	{r7}
 2149              	.LCFI106:
 2150              		.cfi_def_cfa_offset 4
 2151              		.cfi_offset 7, -4
 2152 0002 83B0     		sub	sp, sp, #12
 2153              	.LCFI107:
 2154              		.cfi_def_cfa_offset 16
 2155 0004 00AF     		add	r7, sp, #0
 2156              	.LCFI108:
 2157              		.cfi_def_cfa_register 7
 2158 0006 7860     		str	r0, [r7, #4]
 2159 0008 0B46     		mov	r3, r1
 2160 000a FB70     		strb	r3, [r7, #3]
1519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2161              		.loc 1 1522 0
 2162 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2163 000e 002B     		cmp	r3, #0
 2164 0010 0CD0     		beq	.L80
1523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
 2165              		.loc 1 1524 0
 2166 0012 4FF46053 		mov	r3, #14336
 2167 0016 C4F20203 		movt	r3, 16386
 2168 001a 4FF46052 		mov	r2, #14336
 2169 001e C4F20202 		movt	r2, 16386
 2170 0022 916D     		ldr	r1, [r2, #88]
 2171 0024 7A68     		ldr	r2, [r7, #4]
 2172 0026 0A43     		orrs	r2, r2, r1
 2173 0028 9A65     		str	r2, [r3, #88]
 2174 002a 0DE0     		b	.L79
 2175              	.L80:
1525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 2176              		.loc 1 1528 0
 2177 002c 4FF46053 		mov	r3, #14336
 2178 0030 C4F20203 		movt	r3, 16386
 2179 0034 4FF46052 		mov	r2, #14336
 2180 0038 C4F20202 		movt	r2, 16386
 2181 003c 916D     		ldr	r1, [r2, #88]
 2182 003e 7A68     		ldr	r2, [r7, #4]
 2183 0040 6FEA0202 		mvn	r2, r2
 2184 0044 0A40     		ands	r2, r2, r1
 2185 0046 9A65     		str	r2, [r3, #88]
 2186              	.L79:
1529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2187              		.loc 1 1530 0
 2188 0048 07F10C07 		add	r7, r7, #12
 2189 004c BD46     		mov	sp, r7
 2190 004e 80BC     		pop	{r7}
 2191 0050 7047     		bx	lr
 2192              		.cfi_endproc
 2193              	.LFE146:
 2195 0052 00BF     		.section	.text.RCC_APB1PeriphClockLPModeCmd,"ax",%progbits
 2196              		.align	2
 2197              		.global	RCC_APB1PeriphClockLPModeCmd
 2198              		.thumb
 2199              		.thumb_func
 2201              	RCC_APB1PeriphClockLPModeCmd:
 2202              	.LFB147:
1531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
1534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2203              		.loc 1 1568 0
 2204              		.cfi_startproc
 2205              		@ args = 0, pretend = 0, frame = 8
 2206              		@ frame_needed = 1, uses_anonymous_args = 0
 2207              		@ link register save eliminated.
 2208 0000 80B4     		push	{r7}
 2209              	.LCFI109:
 2210              		.cfi_def_cfa_offset 4
 2211              		.cfi_offset 7, -4
 2212 0002 83B0     		sub	sp, sp, #12
 2213              	.LCFI110:
 2214              		.cfi_def_cfa_offset 16
 2215 0004 00AF     		add	r7, sp, #0
 2216              	.LCFI111:
 2217              		.cfi_def_cfa_register 7
 2218 0006 7860     		str	r0, [r7, #4]
 2219 0008 0B46     		mov	r3, r1
 2220 000a FB70     		strb	r3, [r7, #3]
1569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2221              		.loc 1 1572 0
 2222 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2223 000e 002B     		cmp	r3, #0
 2224 0010 0CD0     		beq	.L83
1573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
 2225              		.loc 1 1574 0
 2226 0012 4FF46053 		mov	r3, #14336
 2227 0016 C4F20203 		movt	r3, 16386
 2228 001a 4FF46052 		mov	r2, #14336
 2229 001e C4F20202 		movt	r2, 16386
 2230 0022 116E     		ldr	r1, [r2, #96]
 2231 0024 7A68     		ldr	r2, [r7, #4]
 2232 0026 0A43     		orrs	r2, r2, r1
 2233 0028 1A66     		str	r2, [r3, #96]
 2234 002a 0DE0     		b	.L82
 2235              	.L83:
1575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
 2236              		.loc 1 1578 0
 2237 002c 4FF46053 		mov	r3, #14336
 2238 0030 C4F20203 		movt	r3, 16386
 2239 0034 4FF46052 		mov	r2, #14336
 2240 0038 C4F20202 		movt	r2, 16386
 2241 003c 116E     		ldr	r1, [r2, #96]
 2242 003e 7A68     		ldr	r2, [r7, #4]
 2243 0040 6FEA0202 		mvn	r2, r2
 2244 0044 0A40     		ands	r2, r2, r1
 2245 0046 1A66     		str	r2, [r3, #96]
 2246              	.L82:
1579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2247              		.loc 1 1580 0
 2248 0048 07F10C07 		add	r7, r7, #12
 2249 004c BD46     		mov	sp, r7
 2250 004e 80BC     		pop	{r7}
 2251 0050 7047     		bx	lr
 2252              		.cfi_endproc
 2253              	.LFE147:
 2255 0052 00BF     		.section	.text.RCC_APB2PeriphClockLPModeCmd,"ax",%progbits
 2256              		.align	2
 2257              		.global	RCC_APB2PeriphClockLPModeCmd
 2258              		.thumb
 2259              		.thumb_func
 2261              	RCC_APB2PeriphClockLPModeCmd:
 2262              	.LFB148:
1581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
1584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2263              		.loc 1 1608 0
 2264              		.cfi_startproc
 2265              		@ args = 0, pretend = 0, frame = 8
 2266              		@ frame_needed = 1, uses_anonymous_args = 0
 2267              		@ link register save eliminated.
 2268 0000 80B4     		push	{r7}
 2269              	.LCFI112:
 2270              		.cfi_def_cfa_offset 4
 2271              		.cfi_offset 7, -4
 2272 0002 83B0     		sub	sp, sp, #12
 2273              	.LCFI113:
 2274              		.cfi_def_cfa_offset 16
 2275 0004 00AF     		add	r7, sp, #0
 2276              	.LCFI114:
 2277              		.cfi_def_cfa_register 7
 2278 0006 7860     		str	r0, [r7, #4]
 2279 0008 0B46     		mov	r3, r1
 2280 000a FB70     		strb	r3, [r7, #3]
1609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2281              		.loc 1 1612 0
 2282 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2283 000e 002B     		cmp	r3, #0
 2284 0010 0CD0     		beq	.L86
1613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
 2285              		.loc 1 1614 0
 2286 0012 4FF46053 		mov	r3, #14336
 2287 0016 C4F20203 		movt	r3, 16386
 2288 001a 4FF46052 		mov	r2, #14336
 2289 001e C4F20202 		movt	r2, 16386
 2290 0022 516E     		ldr	r1, [r2, #100]
 2291 0024 7A68     		ldr	r2, [r7, #4]
 2292 0026 0A43     		orrs	r2, r2, r1
 2293 0028 5A66     		str	r2, [r3, #100]
 2294 002a 0DE0     		b	.L85
 2295              	.L86:
1615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
 2296              		.loc 1 1618 0
 2297 002c 4FF46053 		mov	r3, #14336
 2298 0030 C4F20203 		movt	r3, 16386
 2299 0034 4FF46052 		mov	r2, #14336
 2300 0038 C4F20202 		movt	r2, 16386
 2301 003c 516E     		ldr	r1, [r2, #100]
 2302 003e 7A68     		ldr	r2, [r7, #4]
 2303 0040 6FEA0202 		mvn	r2, r2
 2304 0044 0A40     		ands	r2, r2, r1
 2305 0046 5A66     		str	r2, [r3, #100]
 2306              	.L85:
1619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2307              		.loc 1 1620 0
 2308 0048 07F10C07 		add	r7, r7, #12
 2309 004c BD46     		mov	sp, r7
 2310 004e 80BC     		pop	{r7}
 2311 0050 7047     		bx	lr
 2312              		.cfi_endproc
 2313              	.LFE148:
 2315 0052 00BF     		.section	.text.RCC_ITConfig,"ax",%progbits
 2316              		.align	2
 2317              		.global	RCC_ITConfig
 2318              		.thumb
 2319              		.thumb_func
 2321              	RCC_ITConfig:
 2322              	.LFB149:
1621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
1624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
1627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
1628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
1629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
1630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
1631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                    Interrupts and flags management functions
1632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
1633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
1635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
1636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
1640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
1641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
1649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
1653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2323              		.loc 1 1653 0
 2324              		.cfi_startproc
 2325              		@ args = 0, pretend = 0, frame = 8
 2326              		@ frame_needed = 1, uses_anonymous_args = 0
 2327              		@ link register save eliminated.
 2328 0000 80B4     		push	{r7}
 2329              	.LCFI115:
 2330              		.cfi_def_cfa_offset 4
 2331              		.cfi_offset 7, -4
 2332 0002 83B0     		sub	sp, sp, #12
 2333              	.LCFI116:
 2334              		.cfi_def_cfa_offset 16
 2335 0004 00AF     		add	r7, sp, #0
 2336              	.LCFI117:
 2337              		.cfi_def_cfa_register 7
 2338 0006 0246     		mov	r2, r0
 2339 0008 0B46     		mov	r3, r1
 2340 000a FA71     		strb	r2, [r7, #7]
 2341 000c BB71     		strb	r3, [r7, #6]
1654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
1656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2342              		.loc 1 1657 0
 2343 000e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2344 0010 002B     		cmp	r3, #0
 2345 0012 0ED0     		beq	.L89
1658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
1660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 2346              		.loc 1 1660 0
 2347 0014 43F60D03 		movw	r3, #14349
 2348 0018 C4F20203 		movt	r3, 16386
 2349 001c 43F60D02 		movw	r2, #14349
 2350 0020 C4F20202 		movt	r2, 16386
 2351 0024 1278     		ldrb	r2, [r2, #0]
 2352 0026 D1B2     		uxtb	r1, r2
 2353 0028 FA79     		ldrb	r2, [r7, #7]
 2354 002a 0A43     		orrs	r2, r2, r1
 2355 002c D2B2     		uxtb	r2, r2
 2356 002e 1A70     		strb	r2, [r3, #0]
 2357 0030 10E0     		b	.L88
 2358              	.L89:
1661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
1665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 2359              		.loc 1 1665 0
 2360 0032 43F60D03 		movw	r3, #14349
 2361 0036 C4F20203 		movt	r3, 16386
 2362 003a 43F60D02 		movw	r2, #14349
 2363 003e C4F20202 		movt	r2, 16386
 2364 0042 1278     		ldrb	r2, [r2, #0]
 2365 0044 D1B2     		uxtb	r1, r2
 2366 0046 FA79     		ldrb	r2, [r7, #7]
 2367 0048 6FEA0202 		mvn	r2, r2
 2368 004c D2B2     		uxtb	r2, r2
 2369 004e 0A40     		ands	r2, r2, r1
 2370 0050 D2B2     		uxtb	r2, r2
 2371 0052 1A70     		strb	r2, [r3, #0]
 2372              	.L88:
1666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2373              		.loc 1 1667 0
 2374 0054 07F10C07 		add	r7, r7, #12
 2375 0058 BD46     		mov	sp, r7
 2376 005a 80BC     		pop	{r7}
 2377 005c 7047     		bx	lr
 2378              		.cfi_endproc
 2379              	.LFE149:
 2381 005e 00BF     		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 2382              		.align	2
 2383              		.global	RCC_GetFlagStatus
 2384              		.thumb
 2385              		.thumb_func
 2387              	RCC_GetFlagStatus:
 2388              	.LFB150:
1668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
1676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
1677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
1680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
1681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
1682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
1683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
1686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2389              		.loc 1 1689 0
 2390              		.cfi_startproc
 2391              		@ args = 0, pretend = 0, frame = 24
 2392              		@ frame_needed = 1, uses_anonymous_args = 0
 2393              		@ link register save eliminated.
 2394 0000 80B4     		push	{r7}
 2395              	.LCFI118:
 2396              		.cfi_def_cfa_offset 4
 2397              		.cfi_offset 7, -4
 2398 0002 87B0     		sub	sp, sp, #28
 2399              	.LCFI119:
 2400              		.cfi_def_cfa_offset 32
 2401 0004 00AF     		add	r7, sp, #0
 2402              	.LCFI120:
 2403              		.cfi_def_cfa_register 7
 2404 0006 0346     		mov	r3, r0
 2405 0008 FB71     		strb	r3, [r7, #7]
1690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
 2406              		.loc 1 1690 0
 2407 000a 4FF00003 		mov	r3, #0
 2408 000e FB60     		str	r3, [r7, #12]
1691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
 2409              		.loc 1 1691 0
 2410 0010 4FF00003 		mov	r3, #0
 2411 0014 7B61     		str	r3, [r7, #20]
1692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
 2412              		.loc 1 1692 0
 2413 0016 4FF00003 		mov	r3, #0
 2414 001a FB74     		strb	r3, [r7, #19]
1693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the RCC register index */
1698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 2415              		.loc 1 1698 0
 2416 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2417 001e 4FEA5313 		lsr	r3, r3, #5
 2418 0022 DBB2     		uxtb	r3, r3
 2419 0024 FB60     		str	r3, [r7, #12]
1699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 2420              		.loc 1 1699 0
 2421 0026 FB68     		ldr	r3, [r7, #12]
 2422 0028 012B     		cmp	r3, #1
 2423 002a 06D1     		bne	.L92
1700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CR;
 2424              		.loc 1 1701 0
 2425 002c 4FF46053 		mov	r3, #14336
 2426 0030 C4F20203 		movt	r3, 16386
 2427 0034 1B68     		ldr	r3, [r3, #0]
 2428 0036 7B61     		str	r3, [r7, #20]
 2429 0038 0FE0     		b	.L93
 2430              	.L92:
1702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 2431              		.loc 1 1703 0
 2432 003a FB68     		ldr	r3, [r7, #12]
 2433 003c 022B     		cmp	r3, #2
 2434 003e 06D1     		bne	.L94
1704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
 2435              		.loc 1 1705 0
 2436 0040 4FF46053 		mov	r3, #14336
 2437 0044 C4F20203 		movt	r3, 16386
 2438 0048 1B6F     		ldr	r3, [r3, #112]
 2439 004a 7B61     		str	r3, [r7, #20]
 2440 004c 05E0     		b	.L93
 2441              	.L94:
1706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
1708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
 2442              		.loc 1 1709 0
 2443 004e 4FF46053 		mov	r3, #14336
 2444 0052 C4F20203 		movt	r3, 16386
 2445 0056 5B6F     		ldr	r3, [r3, #116]
 2446 0058 7B61     		str	r3, [r7, #20]
 2447              	.L93:
1710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the flag position */
1713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 2448              		.loc 1 1713 0
 2449 005a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2450 005c 03F01F03 		and	r3, r3, #31
 2451 0060 FB60     		str	r3, [r7, #12]
1714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 2452              		.loc 1 1714 0
 2453 0062 FB68     		ldr	r3, [r7, #12]
 2454 0064 7A69     		ldr	r2, [r7, #20]
 2455 0066 22FA03F3 		lsr	r3, r2, r3
 2456 006a 03F00103 		and	r3, r3, #1
 2457 006e DBB2     		uxtb	r3, r3
 2458 0070 002B     		cmp	r3, #0
 2459 0072 03D0     		beq	.L95
1715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 2460              		.loc 1 1716 0
 2461 0074 4FF00103 		mov	r3, #1
 2462 0078 FB74     		strb	r3, [r7, #19]
 2463 007a 02E0     		b	.L96
 2464              	.L95:
1717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2465              		.loc 1 1720 0
 2466 007c 4FF00003 		mov	r3, #0
 2467 0080 FB74     		strb	r3, [r7, #19]
 2468              	.L96:
1721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the flag status */
1723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return bitstatus;
 2469              		.loc 1 1723 0
 2470 0082 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2471              		.loc 1 1724 0
 2472 0084 1846     		mov	r0, r3
 2473 0086 07F11C07 		add	r7, r7, #28
 2474 008a BD46     		mov	sp, r7
 2475 008c 80BC     		pop	{r7}
 2476 008e 7047     		bx	lr
 2477              		.cfi_endproc
 2478              	.LFE150:
 2480              		.section	.text.RCC_ClearFlag,"ax",%progbits
 2481              		.align	2
 2482              		.global	RCC_ClearFlag
 2483              		.thumb
 2484              		.thumb_func
 2486              	RCC_ClearFlag:
 2487              	.LFB151:
1725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
1728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
1729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
1731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
1734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2488              		.loc 1 1734 0
 2489              		.cfi_startproc
 2490              		@ args = 0, pretend = 0, frame = 0
 2491              		@ frame_needed = 1, uses_anonymous_args = 0
 2492              		@ link register save eliminated.
 2493 0000 80B4     		push	{r7}
 2494              	.LCFI121:
 2495              		.cfi_def_cfa_offset 4
 2496              		.cfi_offset 7, -4
 2497 0002 00AF     		add	r7, sp, #0
 2498              	.LCFI122:
 2499              		.cfi_def_cfa_register 7
1735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 2500              		.loc 1 1736 0
 2501 0004 4FF46053 		mov	r3, #14336
 2502 0008 C4F20203 		movt	r3, 16386
 2503 000c 4FF46052 		mov	r2, #14336
 2504 0010 C4F20202 		movt	r2, 16386
 2505 0014 526F     		ldr	r2, [r2, #116]
 2506 0016 42F08072 		orr	r2, r2, #16777216
 2507 001a 5A67     		str	r2, [r3, #116]
1737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2508              		.loc 1 1737 0
 2509 001c BD46     		mov	sp, r7
 2510 001e 80BC     		pop	{r7}
 2511 0020 7047     		bx	lr
 2512              		.cfi_endproc
 2513              	.LFE151:
 2515 0022 00BF     		.section	.text.RCC_GetITStatus,"ax",%progbits
 2516              		.align	2
 2517              		.global	RCC_GetITStatus
 2518              		.thumb
 2519              		.thumb_func
 2521              	RCC_GetITStatus:
 2522              	.LFB152:
1738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2523              		.loc 1 1753 0
 2524              		.cfi_startproc
 2525              		@ args = 0, pretend = 0, frame = 16
 2526              		@ frame_needed = 1, uses_anonymous_args = 0
 2527              		@ link register save eliminated.
 2528 0000 80B4     		push	{r7}
 2529              	.LCFI123:
 2530              		.cfi_def_cfa_offset 4
 2531              		.cfi_offset 7, -4
 2532 0002 85B0     		sub	sp, sp, #20
 2533              	.LCFI124:
 2534              		.cfi_def_cfa_offset 24
 2535 0004 00AF     		add	r7, sp, #0
 2536              	.LCFI125:
 2537              		.cfi_def_cfa_register 7
 2538 0006 0346     		mov	r3, r0
 2539 0008 FB71     		strb	r3, [r7, #7]
1754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
 2540              		.loc 1 1754 0
 2541 000a 4FF00003 		mov	r3, #0
 2542 000e FB73     		strb	r3, [r7, #15]
1755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
1760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 2543              		.loc 1 1760 0
 2544 0010 4FF46053 		mov	r3, #14336
 2545 0014 C4F20203 		movt	r3, 16386
 2546 0018 DA68     		ldr	r2, [r3, #12]
 2547 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2548 001c 1340     		ands	r3, r3, r2
 2549 001e 002B     		cmp	r3, #0
 2550 0020 03D0     		beq	.L99
1761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 2551              		.loc 1 1762 0
 2552 0022 4FF00103 		mov	r3, #1
 2553 0026 FB73     		strb	r3, [r7, #15]
 2554 0028 02E0     		b	.L100
 2555              	.L99:
1763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2556              		.loc 1 1766 0
 2557 002a 4FF00003 		mov	r3, #0
 2558 002e FB73     		strb	r3, [r7, #15]
 2559              	.L100:
1767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
1769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return  bitstatus;
 2560              		.loc 1 1769 0
 2561 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2562              		.loc 1 1770 0
 2563 0032 1846     		mov	r0, r3
 2564 0034 07F11407 		add	r7, r7, #20
 2565 0038 BD46     		mov	sp, r7
 2566 003a 80BC     		pop	{r7}
 2567 003c 7047     		bx	lr
 2568              		.cfi_endproc
 2569              	.LFE152:
 2571 003e 00BF     		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 2572              		.align	2
 2573              		.global	RCC_ClearITPendingBit
 2574              		.thumb
 2575              		.thumb_func
 2577              	RCC_ClearITPendingBit:
 2578              	.LFB153:
1771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2579              		.loc 1 1786 0
 2580              		.cfi_startproc
 2581              		@ args = 0, pretend = 0, frame = 8
 2582              		@ frame_needed = 1, uses_anonymous_args = 0
 2583              		@ link register save eliminated.
 2584 0000 80B4     		push	{r7}
 2585              	.LCFI126:
 2586              		.cfi_def_cfa_offset 4
 2587              		.cfi_offset 7, -4
 2588 0002 83B0     		sub	sp, sp, #12
 2589              	.LCFI127:
 2590              		.cfi_def_cfa_offset 16
 2591 0004 00AF     		add	r7, sp, #0
 2592              	.LCFI128:
 2593              		.cfi_def_cfa_register 7
 2594 0006 0346     		mov	r3, r0
 2595 0008 FB71     		strb	r3, [r7, #7]
1787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      pending bits */
1792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 2596              		.loc 1 1792 0
 2597 000a 43F60E03 		movw	r3, #14350
 2598 000e C4F20203 		movt	r3, 16386
 2599 0012 FA79     		ldrb	r2, [r7, #7]
 2600 0014 1A70     		strb	r2, [r3, #0]
1793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2601              		.loc 1 1793 0
 2602 0016 07F10C07 		add	r7, r7, #12
 2603 001a BD46     		mov	sp, r7
 2604 001c 80BC     		pop	{r7}
 2605 001e 7047     		bx	lr
 2606              		.cfi_endproc
 2607              	.LFE153:
 2609              		.text
 2610              	.Letext0:
 2611              		.file 2 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/i
 2612              		.file 3 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 2613              		.file 4 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 2614              		.file 5 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rcc.c
     /tmp/ccgJkb29.s:20     .data.APBAHBPrescTable:00000000 $d
     /tmp/ccgJkb29.s:23     .data.APBAHBPrescTable:00000000 APBAHBPrescTable
     /tmp/ccgJkb29.s:41     .text.RCC_DeInit:00000000 $t
     /tmp/ccgJkb29.s:46     .text.RCC_DeInit:00000000 RCC_DeInit
     /tmp/ccgJkb29.s:110    .text.RCC_HSEConfig:00000000 $t
     /tmp/ccgJkb29.s:115    .text.RCC_HSEConfig:00000000 RCC_HSEConfig
     /tmp/ccgJkb29.s:153    .text.RCC_WaitForHSEStartUp:00000000 $t
     /tmp/ccgJkb29.s:158    .text.RCC_WaitForHSEStartUp:00000000 RCC_WaitForHSEStartUp
     /tmp/ccgJkb29.s:2387   .text.RCC_GetFlagStatus:00000000 RCC_GetFlagStatus
     /tmp/ccgJkb29.s:228    .text.RCC_AdjustHSICalibrationValue:00000000 $t
     /tmp/ccgJkb29.s:233    .text.RCC_AdjustHSICalibrationValue:00000000 RCC_AdjustHSICalibrationValue
     /tmp/ccgJkb29.s:284    .text.RCC_HSICmd:00000000 $t
     /tmp/ccgJkb29.s:289    .text.RCC_HSICmd:00000000 RCC_HSICmd
     /tmp/ccgJkb29.s:322    .text.RCC_LSEConfig:00000000 $t
     /tmp/ccgJkb29.s:327    .text.RCC_LSEConfig:00000000 RCC_LSEConfig
     /tmp/ccgJkb29.s:392    .text.RCC_LSICmd:00000000 $t
     /tmp/ccgJkb29.s:397    .text.RCC_LSICmd:00000000 RCC_LSICmd
     /tmp/ccgJkb29.s:430    .text.RCC_PLLConfig:00000000 $t
     /tmp/ccgJkb29.s:435    .text.RCC_PLLConfig:00000000 RCC_PLLConfig
     /tmp/ccgJkb29.s:485    .text.RCC_PLLCmd:00000000 $t
     /tmp/ccgJkb29.s:490    .text.RCC_PLLCmd:00000000 RCC_PLLCmd
     /tmp/ccgJkb29.s:523    .text.RCC_PLLI2SConfig:00000000 $t
     /tmp/ccgJkb29.s:528    .text.RCC_PLLI2SConfig:00000000 RCC_PLLI2SConfig
     /tmp/ccgJkb29.s:565    .text.RCC_PLLI2SCmd:00000000 $t
     /tmp/ccgJkb29.s:570    .text.RCC_PLLI2SCmd:00000000 RCC_PLLI2SCmd
     /tmp/ccgJkb29.s:603    .text.RCC_ClockSecuritySystemCmd:00000000 $t
     /tmp/ccgJkb29.s:608    .text.RCC_ClockSecuritySystemCmd:00000000 RCC_ClockSecuritySystemCmd
     /tmp/ccgJkb29.s:641    .text.RCC_MCO1Config:00000000 $t
     /tmp/ccgJkb29.s:646    .text.RCC_MCO1Config:00000000 RCC_MCO1Config
     /tmp/ccgJkb29.s:698    .text.RCC_MCO2Config:00000000 $t
     /tmp/ccgJkb29.s:703    .text.RCC_MCO2Config:00000000 RCC_MCO2Config
     /tmp/ccgJkb29.s:755    .text.RCC_SYSCLKConfig:00000000 $t
     /tmp/ccgJkb29.s:760    .text.RCC_SYSCLKConfig:00000000 RCC_SYSCLKConfig
     /tmp/ccgJkb29.s:809    .text.RCC_GetSYSCLKSource:00000000 $t
     /tmp/ccgJkb29.s:814    .text.RCC_GetSYSCLKSource:00000000 RCC_GetSYSCLKSource
     /tmp/ccgJkb29.s:844    .text.RCC_HCLKConfig:00000000 $t
     /tmp/ccgJkb29.s:849    .text.RCC_HCLKConfig:00000000 RCC_HCLKConfig
     /tmp/ccgJkb29.s:898    .text.RCC_PCLK1Config:00000000 $t
     /tmp/ccgJkb29.s:903    .text.RCC_PCLK1Config:00000000 RCC_PCLK1Config
     /tmp/ccgJkb29.s:952    .text.RCC_PCLK2Config:00000000 $t
     /tmp/ccgJkb29.s:957    .text.RCC_PCLK2Config:00000000 RCC_PCLK2Config
     /tmp/ccgJkb29.s:1007   .text.RCC_GetClocksFreq:00000000 $t
     /tmp/ccgJkb29.s:1012   .text.RCC_GetClocksFreq:00000000 RCC_GetClocksFreq
     /tmp/ccgJkb29.s:1230   .text.RCC_RTCCLKConfig:00000000 $t
     /tmp/ccgJkb29.s:1235   .text.RCC_RTCCLKConfig:00000000 RCC_RTCCLKConfig
     /tmp/ccgJkb29.s:1303   .text.RCC_RTCCLKCmd:00000000 $t
     /tmp/ccgJkb29.s:1308   .text.RCC_RTCCLKCmd:00000000 RCC_RTCCLKCmd
     /tmp/ccgJkb29.s:1341   .text.RCC_BackupResetCmd:00000000 $t
     /tmp/ccgJkb29.s:1346   .text.RCC_BackupResetCmd:00000000 RCC_BackupResetCmd
     /tmp/ccgJkb29.s:1379   .text.RCC_I2SCLKConfig:00000000 $t
     /tmp/ccgJkb29.s:1384   .text.RCC_I2SCLKConfig:00000000 RCC_I2SCLKConfig
     /tmp/ccgJkb29.s:1416   .text.RCC_AHB1PeriphClockCmd:00000000 $t
     /tmp/ccgJkb29.s:1421   .text.RCC_AHB1PeriphClockCmd:00000000 RCC_AHB1PeriphClockCmd
     /tmp/ccgJkb29.s:1476   .text.RCC_AHB2PeriphClockCmd:00000000 $t
     /tmp/ccgJkb29.s:1481   .text.RCC_AHB2PeriphClockCmd:00000000 RCC_AHB2PeriphClockCmd
     /tmp/ccgJkb29.s:1536   .text.RCC_AHB3PeriphClockCmd:00000000 $t
     /tmp/ccgJkb29.s:1541   .text.RCC_AHB3PeriphClockCmd:00000000 RCC_AHB3PeriphClockCmd
     /tmp/ccgJkb29.s:1596   .text.RCC_APB1PeriphClockCmd:00000000 $t
     /tmp/ccgJkb29.s:1601   .text.RCC_APB1PeriphClockCmd:00000000 RCC_APB1PeriphClockCmd
     /tmp/ccgJkb29.s:1656   .text.RCC_APB2PeriphClockCmd:00000000 $t
     /tmp/ccgJkb29.s:1661   .text.RCC_APB2PeriphClockCmd:00000000 RCC_APB2PeriphClockCmd
     /tmp/ccgJkb29.s:1716   .text.RCC_AHB1PeriphResetCmd:00000000 $t
     /tmp/ccgJkb29.s:1721   .text.RCC_AHB1PeriphResetCmd:00000000 RCC_AHB1PeriphResetCmd
     /tmp/ccgJkb29.s:1776   .text.RCC_AHB2PeriphResetCmd:00000000 $t
     /tmp/ccgJkb29.s:1781   .text.RCC_AHB2PeriphResetCmd:00000000 RCC_AHB2PeriphResetCmd
     /tmp/ccgJkb29.s:1836   .text.RCC_AHB3PeriphResetCmd:00000000 $t
     /tmp/ccgJkb29.s:1841   .text.RCC_AHB3PeriphResetCmd:00000000 RCC_AHB3PeriphResetCmd
     /tmp/ccgJkb29.s:1896   .text.RCC_APB1PeriphResetCmd:00000000 $t
     /tmp/ccgJkb29.s:1901   .text.RCC_APB1PeriphResetCmd:00000000 RCC_APB1PeriphResetCmd
     /tmp/ccgJkb29.s:1956   .text.RCC_APB2PeriphResetCmd:00000000 $t
     /tmp/ccgJkb29.s:1961   .text.RCC_APB2PeriphResetCmd:00000000 RCC_APB2PeriphResetCmd
     /tmp/ccgJkb29.s:2016   .text.RCC_AHB1PeriphClockLPModeCmd:00000000 $t
     /tmp/ccgJkb29.s:2021   .text.RCC_AHB1PeriphClockLPModeCmd:00000000 RCC_AHB1PeriphClockLPModeCmd
     /tmp/ccgJkb29.s:2076   .text.RCC_AHB2PeriphClockLPModeCmd:00000000 $t
     /tmp/ccgJkb29.s:2081   .text.RCC_AHB2PeriphClockLPModeCmd:00000000 RCC_AHB2PeriphClockLPModeCmd
     /tmp/ccgJkb29.s:2136   .text.RCC_AHB3PeriphClockLPModeCmd:00000000 $t
     /tmp/ccgJkb29.s:2141   .text.RCC_AHB3PeriphClockLPModeCmd:00000000 RCC_AHB3PeriphClockLPModeCmd
     /tmp/ccgJkb29.s:2196   .text.RCC_APB1PeriphClockLPModeCmd:00000000 $t
     /tmp/ccgJkb29.s:2201   .text.RCC_APB1PeriphClockLPModeCmd:00000000 RCC_APB1PeriphClockLPModeCmd
     /tmp/ccgJkb29.s:2256   .text.RCC_APB2PeriphClockLPModeCmd:00000000 $t
     /tmp/ccgJkb29.s:2261   .text.RCC_APB2PeriphClockLPModeCmd:00000000 RCC_APB2PeriphClockLPModeCmd
     /tmp/ccgJkb29.s:2316   .text.RCC_ITConfig:00000000 $t
     /tmp/ccgJkb29.s:2321   .text.RCC_ITConfig:00000000 RCC_ITConfig
     /tmp/ccgJkb29.s:2382   .text.RCC_GetFlagStatus:00000000 $t
     /tmp/ccgJkb29.s:2481   .text.RCC_ClearFlag:00000000 $t
     /tmp/ccgJkb29.s:2486   .text.RCC_ClearFlag:00000000 RCC_ClearFlag
     /tmp/ccgJkb29.s:2516   .text.RCC_GetITStatus:00000000 $t
     /tmp/ccgJkb29.s:2521   .text.RCC_GetITStatus:00000000 RCC_GetITStatus
     /tmp/ccgJkb29.s:2572   .text.RCC_ClearITPendingBit:00000000 $t
     /tmp/ccgJkb29.s:2577   .text.RCC_ClearITPendingBit:00000000 RCC_ClearITPendingBit
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
