   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	pxCurrentTCB
  20              		.section	.bss.pxCurrentTCB,"aw",%nobits
  21              		.align	2
  24              	pxCurrentTCB:
  25 0000 00000000 		.space	4
  26              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  27              		.align	2
  30              	pxReadyTasksLists:
  31 0000 00000000 		.space	100
  31      00000000 
  31      00000000 
  31      00000000 
  31      00000000 
  32              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  33              		.align	2
  36              	xDelayedTaskList1:
  37 0000 00000000 		.space	20
  37      00000000 
  37      00000000 
  37      00000000 
  37      00000000 
  38              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  39              		.align	2
  42              	xDelayedTaskList2:
  43 0000 00000000 		.space	20
  43      00000000 
  43      00000000 
  43      00000000 
  43      00000000 
  44              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  45              		.align	2
  48              	pxDelayedTaskList:
  49 0000 00000000 		.space	4
  50              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  51              		.align	2
  54              	pxOverflowDelayedTaskList:
  55 0000 00000000 		.space	4
  56              		.section	.bss.xPendingReadyList,"aw",%nobits
  57              		.align	2
  60              	xPendingReadyList:
  61 0000 00000000 		.space	20
  61      00000000 
  61      00000000 
  61      00000000 
  61      00000000 
  62              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  63              		.align	2
  66              	xTasksWaitingTermination:
  67 0000 00000000 		.space	20
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              		.section	.bss.uxTasksDeleted,"aw",%nobits
  69              		.align	2
  72              	uxTasksDeleted:
  73 0000 00000000 		.space	4
  74              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  75              		.align	2
  78              	xSuspendedTaskList:
  79 0000 00000000 		.space	20
  79      00000000 
  79      00000000 
  79      00000000 
  79      00000000 
  80              		.section	.bss.xIdleTaskHandle,"aw",%nobits
  81              		.align	2
  84              	xIdleTaskHandle:
  85 0000 00000000 		.space	4
  86              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  87              		.align	2
  90              	uxCurrentNumberOfTasks:
  91 0000 00000000 		.space	4
  92              		.section	.bss.xTickCount,"aw",%nobits
  93              		.align	2
  96              	xTickCount:
  97 0000 00000000 		.space	4
  98              		.section	.bss.uxTopUsedPriority,"aw",%nobits
  99              		.align	2
 102              	uxTopUsedPriority:
 103 0000 00000000 		.space	4
 104              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 105              		.align	2
 108              	uxTopReadyPriority:
 109 0000 00000000 		.space	4
 110              		.section	.bss.xSchedulerRunning,"aw",%nobits
 111              		.align	2
 114              	xSchedulerRunning:
 115 0000 00000000 		.space	4
 116              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 117              		.align	2
 120              	uxSchedulerSuspended:
 121 0000 00000000 		.space	4
 122              		.section	.bss.uxMissedTicks,"aw",%nobits
 123              		.align	2
 126              	uxMissedTicks:
 127 0000 00000000 		.space	4
 128              		.section	.bss.xMissedYield,"aw",%nobits
 129              		.align	2
 132              	xMissedYield:
 133 0000 00000000 		.space	4
 134              		.section	.bss.xNumOfOverflows,"aw",%nobits
 135              		.align	2
 138              	xNumOfOverflows:
 139 0000 00000000 		.space	4
 140              		.section	.bss.uxTaskNumber,"aw",%nobits
 141              		.align	2
 144              	uxTaskNumber:
 145 0000 00000000 		.space	4
 146              		.section	.data.xNextTaskUnblockTime,"aw",%progbits
 147              		.align	2
 150              	xNextTaskUnblockTime:
 151 0000 FFFFFFFF 		.word	-1
 152              		.section	.bss.pcStatsString,"aw",%nobits
 153              		.align	2
 156              	pcStatsString:
 157 0000 00000000 		.space	50
 157      00000000 
 157      00000000 
 157      00000000 
 157      00000000 
 158 0032 0000     		.section	.bss.ulTaskSwitchedInTime,"aw",%nobits
 159              		.align	2
 162              	ulTaskSwitchedInTime:
 163 0000 00000000 		.space	4
 164              		.section	.text.xTaskGenericCreate,"ax",%progbits
 165              		.align	2
 166              		.global	xTaskGenericCreate
 167              		.thumb
 168              		.thumb_func
 170              	xTaskGenericCreate:
 171              	.LFB110:
 172              		.file 1 "FreeRTOS/Source/tasks.c"
   1:FreeRTOS/Source/tasks.c **** /*
   2:FreeRTOS/Source/tasks.c ****     FreeRTOS V7.0.2 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:FreeRTOS/Source/tasks.c **** 	
   4:FreeRTOS/Source/tasks.c **** 
   5:FreeRTOS/Source/tasks.c ****     ***************************************************************************
   6:FreeRTOS/Source/tasks.c ****      *                                                                       *
   7:FreeRTOS/Source/tasks.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:FreeRTOS/Source/tasks.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:FreeRTOS/Source/tasks.c ****      *    available.                                                         *
  10:FreeRTOS/Source/tasks.c ****      *                                                                       *
  11:FreeRTOS/Source/tasks.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:FreeRTOS/Source/tasks.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:FreeRTOS/Source/tasks.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:FreeRTOS/Source/tasks.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:FreeRTOS/Source/tasks.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:FreeRTOS/Source/tasks.c ****      *    for microcontrollers - completely free of charge!                  *
  17:FreeRTOS/Source/tasks.c ****      *                                                                       *
  18:FreeRTOS/Source/tasks.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:FreeRTOS/Source/tasks.c ****      *                                                                       *
  20:FreeRTOS/Source/tasks.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:FreeRTOS/Source/tasks.c ****      *                                                                       *
  22:FreeRTOS/Source/tasks.c ****     ***************************************************************************
  23:FreeRTOS/Source/tasks.c **** 
  24:FreeRTOS/Source/tasks.c **** 
  25:FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
  26:FreeRTOS/Source/tasks.c **** 
  27:FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:FreeRTOS/Source/tasks.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:FreeRTOS/Source/tasks.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:FreeRTOS/Source/tasks.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:FreeRTOS/Source/tasks.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:FreeRTOS/Source/tasks.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:FreeRTOS/Source/tasks.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:FreeRTOS/Source/tasks.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:FreeRTOS/Source/tasks.c ****     more details. You should have received a copy of the GNU General Public
  37:FreeRTOS/Source/tasks.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:FreeRTOS/Source/tasks.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:FreeRTOS/Source/tasks.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:FreeRTOS/Source/tasks.c ****     FreeRTOS WEB site.
  41:FreeRTOS/Source/tasks.c **** 
  42:FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  43:FreeRTOS/Source/tasks.c **** 
  44:FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:FreeRTOS/Source/tasks.c ****     contact details.
  46:FreeRTOS/Source/tasks.c **** 
  47:FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:FreeRTOS/Source/tasks.c ****     critical systems.
  49:FreeRTOS/Source/tasks.c **** 
  50:FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:FreeRTOS/Source/tasks.c ****     licensing and training services.
  52:FreeRTOS/Source/tasks.c **** */
  53:FreeRTOS/Source/tasks.c **** 
  54:FreeRTOS/Source/tasks.c **** 
  55:FreeRTOS/Source/tasks.c **** #include <stdio.h>
  56:FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  57:FreeRTOS/Source/tasks.c **** #include <string.h>
  58:FreeRTOS/Source/tasks.c **** 
  59:FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  60:FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  61:FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  62:FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  63:FreeRTOS/Source/tasks.c **** 
  64:FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  65:FreeRTOS/Source/tasks.c **** #include "task.h"
  66:FreeRTOS/Source/tasks.c **** #include "timers.h"
  67:FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  68:FreeRTOS/Source/tasks.c **** 
  69:FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  70:FreeRTOS/Source/tasks.c **** 
  71:FreeRTOS/Source/tasks.c **** /*
  72:FreeRTOS/Source/tasks.c ****  * Macro to define the amount of stack available to the idle task.
  73:FreeRTOS/Source/tasks.c ****  */
  74:FreeRTOS/Source/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
  75:FreeRTOS/Source/tasks.c **** 
  76:FreeRTOS/Source/tasks.c **** /*
  77:FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated to each task,
  78:FreeRTOS/Source/tasks.c ****  * and stores the context of the task.
  79:FreeRTOS/Source/tasks.c ****  */
  80:FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
  81:FreeRTOS/Source/tasks.c **** {
  82:FreeRTOS/Source/tasks.c **** 	volatile portSTACK_TYPE	*pxTopOfStack;		/*< Points to the location of the last item placed on the 
  83:FreeRTOS/Source/tasks.c **** 
  84:FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
  85:FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS xMPUSettings;				/*< The MPU settings are defined as part of the port layer.  THIS 
  86:FreeRTOS/Source/tasks.c **** 	#endif	
  87:FreeRTOS/Source/tasks.c **** 	
  88:FreeRTOS/Source/tasks.c **** 	xListItem				xGenericListItem;	/*< List item used to place the TCB in ready and blocked queues. */
  89:FreeRTOS/Source/tasks.c **** 	xListItem				xEventListItem;		/*< List item used to place the TCB in event lists. */
  90:FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE	uxPriority;			/*< The priority of the task where 0 is the lowest priority. 
  91:FreeRTOS/Source/tasks.c **** 	portSTACK_TYPE			*pxStack;			/*< Points to the start of the stack. */
  92:FreeRTOS/Source/tasks.c **** 	signed char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when c
  93:FreeRTOS/Source/tasks.c **** 
  94:FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
  95:FreeRTOS/Source/tasks.c **** 		portSTACK_TYPE *pxEndOfStack;			/*< Used for stack overflow checking on architectures where the s
  96:FreeRTOS/Source/tasks.c **** 	#endif
  97:FreeRTOS/Source/tasks.c **** 
  98:FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
  99:FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE uxCriticalNesting;
 100:FreeRTOS/Source/tasks.c **** 	#endif
 101:FreeRTOS/Source/tasks.c **** 
 102:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 103:FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE	uxTCBNumber;	/*< This is used for tracing the scheduler and making debuggi
 104:FreeRTOS/Source/tasks.c **** 	#endif
 105:FreeRTOS/Source/tasks.c **** 
 106:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 107:FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE uxBasePriority;	/*< The priority last assigned to the task - used by the p
 108:FreeRTOS/Source/tasks.c **** 	#endif
 109:FreeRTOS/Source/tasks.c **** 
 110:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 111:FreeRTOS/Source/tasks.c **** 		pdTASK_HOOK_CODE pxTaskTag;
 112:FreeRTOS/Source/tasks.c **** 	#endif
 113:FreeRTOS/Source/tasks.c **** 
 114:FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 115:FreeRTOS/Source/tasks.c **** 		unsigned long ulRunTimeCounter;		/*< Used for calculating how much CPU time each task is utilisin
 116:FreeRTOS/Source/tasks.c **** 	#endif
 117:FreeRTOS/Source/tasks.c **** 
 118:FreeRTOS/Source/tasks.c **** } tskTCB;
 119:FreeRTOS/Source/tasks.c **** 
 120:FreeRTOS/Source/tasks.c **** 
 121:FreeRTOS/Source/tasks.c **** /*
 122:FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require data to be viewed to be global, rather
 123:FreeRTOS/Source/tasks.c ****  * than file scope.
 124:FreeRTOS/Source/tasks.c ****  */
 125:FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 126:FreeRTOS/Source/tasks.c **** 	#define static
 127:FreeRTOS/Source/tasks.c **** #endif
 128:FreeRTOS/Source/tasks.c **** 
 129:FreeRTOS/Source/tasks.c **** /*lint -e956 */
 130:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA tskTCB * volatile pxCurrentTCB = NULL;
 131:FreeRTOS/Source/tasks.c **** 
 132:FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 133:FreeRTOS/Source/tasks.c **** 
 134:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList pxReadyTasksLists[ configMAX_PRIORITIES ];	/*< Prioritised ready tasks
 135:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList1;							/*< Delayed tasks. */
 136:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList2;							/*< Delayed tasks (two lists are used - one f
 137:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList * volatile pxDelayedTaskList ;				/*< Points to the delayed task list 
 138:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task 
 139:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xPendingReadyList;							/*< Tasks that have been readied while the sc
 140:FreeRTOS/Source/tasks.c **** 
 141:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 142:FreeRTOS/Source/tasks.c **** 
 143:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xList xTasksWaitingTermination;				/*< Tasks that have been deleted - but t
 144:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTasksDeleted = ( unsigned portBASE_TYPE )
 145:FreeRTOS/Source/tasks.c **** 
 146:FreeRTOS/Source/tasks.c **** #endif
 147:FreeRTOS/Source/tasks.c **** 
 148:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 149:FreeRTOS/Source/tasks.c **** 
 150:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xList xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 151:FreeRTOS/Source/tasks.c **** 
 152:FreeRTOS/Source/tasks.c **** #endif
 153:FreeRTOS/Source/tasks.c **** 
 154:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 155:FreeRTOS/Source/tasks.c **** 	
 156:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xTaskHandle xIdleTaskHandle = NULL;
 157:FreeRTOS/Source/tasks.c **** 	
 158:FreeRTOS/Source/tasks.c **** #endif
 159:FreeRTOS/Source/tasks.c **** 
 160:FreeRTOS/Source/tasks.c **** /* File private variables. --------------------------------*/
 161:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxCurrentNumberOfTasks 	= ( unsigned portBAS
 162:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portTickType xTickCount 						= ( portTickType ) 0U;
 163:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTopUsedPriority	 				= tskIDLE_PRIORITY;
 164:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTopReadyPriority 		= tskIDLE_PRIORITY;
 165:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile signed portBASE_TYPE xSchedulerRunning 			= pdFALSE;
 166:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxSchedulerSuspended	 	= ( unsigned portBASE
 167:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxMissedTicks 			= ( unsigned portBASE_TYPE 
 168:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xMissedYield 						= ( portBASE_TYPE ) pdFALSE;
 169:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xNumOfOverflows 					= ( portBASE_TYPE ) 0;
 170:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTaskNumber 						= ( unsigned portBASE_TYPE ) 0U;
 171:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static portTickType xNextTaskUnblockTime						= ( portTickType ) portMAX_DELAY;
 172:FreeRTOS/Source/tasks.c **** 
 173:FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 174:FreeRTOS/Source/tasks.c **** 
 175:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static char pcStatsString[ 50 ] ;
 176:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static unsigned long ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/co
 177:FreeRTOS/Source/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList
 178:FreeRTOS/Source/tasks.c **** 
 179:FreeRTOS/Source/tasks.c **** #endif
 180:FreeRTOS/Source/tasks.c **** 
 181:FreeRTOS/Source/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 182:FreeRTOS/Source/tasks.c **** 
 183:FreeRTOS/Source/tasks.c **** /*
 184:FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 185:FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 186:FreeRTOS/Source/tasks.c ****  */
 187:FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 188:FreeRTOS/Source/tasks.c **** 
 189:FreeRTOS/Source/tasks.c **** /*
 190:FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 191:FreeRTOS/Source/tasks.c ****  */
 192:FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( ( signed char ) 'B' )
 193:FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( ( signed char ) 'R' )
 194:FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( ( signed char ) 'D' )
 195:FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( ( signed char ) 'S' )
 196:FreeRTOS/Source/tasks.c **** 
 197:FreeRTOS/Source/tasks.c **** /*
 198:FreeRTOS/Source/tasks.c ****  * Macros and private variables used by the trace facility.
 199:FreeRTOS/Source/tasks.c ****  */
 200:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 201:FreeRTOS/Source/tasks.c **** 
 202:FreeRTOS/Source/tasks.c **** 	#define tskSIZE_OF_EACH_TRACE_LINE			( ( unsigned long ) ( sizeof( unsigned long ) + sizeof( unsig
 203:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile signed char * volatile pcTraceBuffer;
 204:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static signed char *pcTraceBufferStart;
 205:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static signed char *pcTraceBufferEnd;
 206:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static signed portBASE_TYPE xTracing = pdFALSE;
 207:FreeRTOS/Source/tasks.c **** 	static unsigned portBASE_TYPE uxPreviousTask = 255U;
 208:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static char pcStatusString[ 50 ];
 209:FreeRTOS/Source/tasks.c **** 
 210:FreeRTOS/Source/tasks.c **** #endif
 211:FreeRTOS/Source/tasks.c **** 
 212:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:FreeRTOS/Source/tasks.c **** 
 214:FreeRTOS/Source/tasks.c **** /*
 215:FreeRTOS/Source/tasks.c ****  * Macro that writes a trace of scheduler activity to a buffer.  This trace
 216:FreeRTOS/Source/tasks.c ****  * shows which task is running when and is very useful as a debugging tool.
 217:FreeRTOS/Source/tasks.c ****  * As this macro is called each context switch it is a good idea to undefine
 218:FreeRTOS/Source/tasks.c ****  * it if not using the facility.
 219:FreeRTOS/Source/tasks.c ****  */
 220:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 221:FreeRTOS/Source/tasks.c **** 
 222:FreeRTOS/Source/tasks.c **** 	#define vWriteTraceToBuffer()																	\
 223:FreeRTOS/Source/tasks.c **** 	{																								\
 224:FreeRTOS/Source/tasks.c **** 		if( xTracing != pdFALSE )																	\
 225:FreeRTOS/Source/tasks.c **** 		{																							\
 226:FreeRTOS/Source/tasks.c **** 			if( uxPreviousTask != pxCurrentTCB->uxTCBNumber )										\
 227:FreeRTOS/Source/tasks.c **** 			{																						\
 228:FreeRTOS/Source/tasks.c **** 				if( ( pcTraceBuffer + tskSIZE_OF_EACH_TRACE_LINE ) < pcTraceBufferEnd )				\
 229:FreeRTOS/Source/tasks.c **** 				{																					\
 230:FreeRTOS/Source/tasks.c **** 					uxPreviousTask = pxCurrentTCB->uxTCBNumber;										\
 231:FreeRTOS/Source/tasks.c **** 					*( unsigned long * ) pcTraceBuffer = ( unsigned long ) xTickCount;				\
 232:FreeRTOS/Source/tasks.c **** 					pcTraceBuffer += sizeof( unsigned long );										\
 233:FreeRTOS/Source/tasks.c **** 					*( unsigned long * ) pcTraceBuffer = ( unsigned long ) uxPreviousTask;			\
 234:FreeRTOS/Source/tasks.c **** 					pcTraceBuffer += sizeof( unsigned long );										\
 235:FreeRTOS/Source/tasks.c **** 				}																					\
 236:FreeRTOS/Source/tasks.c **** 				else																				\
 237:FreeRTOS/Source/tasks.c **** 				{																					\
 238:FreeRTOS/Source/tasks.c **** 					xTracing = pdFALSE;																\
 239:FreeRTOS/Source/tasks.c **** 				}																					\
 240:FreeRTOS/Source/tasks.c **** 			}																						\
 241:FreeRTOS/Source/tasks.c **** 		}																							\
 242:FreeRTOS/Source/tasks.c **** 	}
 243:FreeRTOS/Source/tasks.c **** 
 244:FreeRTOS/Source/tasks.c **** #else
 245:FreeRTOS/Source/tasks.c **** 
 246:FreeRTOS/Source/tasks.c **** 	#define vWriteTraceToBuffer()
 247:FreeRTOS/Source/tasks.c **** 
 248:FreeRTOS/Source/tasks.c **** #endif
 249:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 250:FreeRTOS/Source/tasks.c **** 
 251:FreeRTOS/Source/tasks.c **** /*
 252:FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready queue for
 253:FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.  One quirk of this is
 254:FreeRTOS/Source/tasks.c ****  * that if the task being inserted is at the same priority as the currently
 255:FreeRTOS/Source/tasks.c ****  * executing task, then it will only be rescheduled after the currently
 256:FreeRTOS/Source/tasks.c ****  * executing task has been rescheduled.
 257:FreeRTOS/Source/tasks.c ****  */
 258:FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyQueue( pxTCB )																					\
 259:FreeRTOS/Source/tasks.c **** 	if( ( pxTCB )->uxPriority > uxTopReadyPriority )																	\
 260:FreeRTOS/Source/tasks.c **** 	{																													\
 261:FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = ( pxTCB )->uxPriority;																		\
 262:FreeRTOS/Source/tasks.c **** 	}																													\
 263:FreeRTOS/Source/tasks.c **** 	vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGeneri
 264:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 265:FreeRTOS/Source/tasks.c **** 
 266:FreeRTOS/Source/tasks.c **** /*
 267:FreeRTOS/Source/tasks.c ****  * Macro that looks at the list of tasks that are currently delayed to see if
 268:FreeRTOS/Source/tasks.c ****  * any require waking.
 269:FreeRTOS/Source/tasks.c ****  *
 270:FreeRTOS/Source/tasks.c ****  * Tasks are stored in the queue in the order of their wake time - meaning
 271:FreeRTOS/Source/tasks.c ****  * once one tasks has been found whose timer has not expired we need not look
 272:FreeRTOS/Source/tasks.c ****  * any further down the list.
 273:FreeRTOS/Source/tasks.c ****  */
 274:FreeRTOS/Source/tasks.c **** #define prvCheckDelayedTasks()															\
 275:FreeRTOS/Source/tasks.c **** {																						\
 276:FreeRTOS/Source/tasks.c **** portTickType xItemValue;																\
 277:FreeRTOS/Source/tasks.c **** 																						\
 278:FreeRTOS/Source/tasks.c **** 	/* Is the tick count greater than or equal to the wake time of the first			\
 279:FreeRTOS/Source/tasks.c **** 	task referenced from the delayed tasks list? */										\
 280:FreeRTOS/Source/tasks.c **** 	if( xTickCount >= xNextTaskUnblockTime )											\
 281:FreeRTOS/Source/tasks.c **** 	{																					\
 282:FreeRTOS/Source/tasks.c **** 		for( ;; )																		\
 283:FreeRTOS/Source/tasks.c **** 		{																				\
 284:FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )						\
 285:FreeRTOS/Source/tasks.c **** 			{																			\
 286:FreeRTOS/Source/tasks.c **** 				/* The delayed list is empty.  Set xNextTaskUnblockTime to the			\
 287:FreeRTOS/Source/tasks.c **** 				maximum possible value so it is extremely unlikely that the				\
 288:FreeRTOS/Source/tasks.c **** 				if( xTickCount >= xNextTaskUnblockTime ) test will pass next			\
 289:FreeRTOS/Source/tasks.c **** 				time through. */														\
 290:FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = portMAX_DELAY;									\
 291:FreeRTOS/Source/tasks.c **** 				break;																	\
 292:FreeRTOS/Source/tasks.c **** 			}																			\
 293:FreeRTOS/Source/tasks.c **** 			else																		\
 294:FreeRTOS/Source/tasks.c **** 			{																			\
 295:FreeRTOS/Source/tasks.c **** 				/* The delayed list is not empty, get the value of the item at			\
 296:FreeRTOS/Source/tasks.c **** 				the head of the delayed list.  This is the time at which the			\
 297:FreeRTOS/Source/tasks.c **** 				task at the head of the delayed list should be removed from				\
 298:FreeRTOS/Source/tasks.c **** 				the Blocked state. */													\
 299:FreeRTOS/Source/tasks.c **** 				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );	\
 300:FreeRTOS/Source/tasks.c **** 				xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );	\
 301:FreeRTOS/Source/tasks.c **** 																						\
 302:FreeRTOS/Source/tasks.c **** 				if( xTickCount < xItemValue )											\
 303:FreeRTOS/Source/tasks.c **** 				{																		\
 304:FreeRTOS/Source/tasks.c **** 					/* It is not time to unblock this item yet, but the item			\
 305:FreeRTOS/Source/tasks.c **** 					value is the time at which the task at the head of the				\
 306:FreeRTOS/Source/tasks.c **** 					blocked list should be removed from the Blocked state -				\
 307:FreeRTOS/Source/tasks.c **** 					so record the item value in xNextTaskUnblockTime. */				\
 308:FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xItemValue;									\
 309:FreeRTOS/Source/tasks.c **** 					break;																\
 310:FreeRTOS/Source/tasks.c **** 				}																		\
 311:FreeRTOS/Source/tasks.c **** 																						\
 312:FreeRTOS/Source/tasks.c **** 				/* It is time to remove the item from the Blocked state. */				\
 313:FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xGenericListItem ) );							\
 314:FreeRTOS/Source/tasks.c **** 																						\
 315:FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also? */								\
 316:FreeRTOS/Source/tasks.c **** 				if( pxTCB->xEventListItem.pvContainer != NULL )							\
 317:FreeRTOS/Source/tasks.c **** 				{																		\
 318:FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xEventListItem ) );							\
 319:FreeRTOS/Source/tasks.c **** 				}																		\
 320:FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );										\
 321:FreeRTOS/Source/tasks.c **** 			}																			\
 322:FreeRTOS/Source/tasks.c **** 		}																				\
 323:FreeRTOS/Source/tasks.c **** 	}																					\
 324:FreeRTOS/Source/tasks.c **** }
 325:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 326:FreeRTOS/Source/tasks.c **** 
 327:FreeRTOS/Source/tasks.c **** /*
 328:FreeRTOS/Source/tasks.c ****  * Several functions take an xTaskHandle parameter that can optionally be NULL,
 329:FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 330:FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 331:FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 332:FreeRTOS/Source/tasks.c ****  */
 333:FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( tskTCB * ) pxCurrentTCB : ( 
 334:FreeRTOS/Source/tasks.c **** 
 335:FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 336:FreeRTOS/Source/tasks.c **** extern void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName );
 337:FreeRTOS/Source/tasks.c **** extern void vApplicationTickHook( void );
 338:FreeRTOS/Source/tasks.c **** 		
 339:FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 340:FreeRTOS/Source/tasks.c **** 
 341:FreeRTOS/Source/tasks.c **** /*
 342:FreeRTOS/Source/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 343:FreeRTOS/Source/tasks.c ****  * into the TCB structure.
 344:FreeRTOS/Source/tasks.c ****  */
 345:FreeRTOS/Source/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
 346:FreeRTOS/Source/tasks.c **** 
 347:FreeRTOS/Source/tasks.c **** /*
 348:FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 349:FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 350:FreeRTOS/Source/tasks.c ****  */
 351:FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 352:FreeRTOS/Source/tasks.c **** 
 353:FreeRTOS/Source/tasks.c **** /*
 354:FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 355:FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 356:FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 357:FreeRTOS/Source/tasks.c ****  *
 358:FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 359:FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 360:FreeRTOS/Source/tasks.c ****  *
 361:FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 362:FreeRTOS/Source/tasks.c ****  *
 363:FreeRTOS/Source/tasks.c ****  */
 364:FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 365:FreeRTOS/Source/tasks.c **** 
 366:FreeRTOS/Source/tasks.c **** /*
 367:FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 368:FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 369:FreeRTOS/Source/tasks.c ****  *
 370:FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 371:FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 372:FreeRTOS/Source/tasks.c ****  */
 373:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 374:FreeRTOS/Source/tasks.c **** 
 375:FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB ) PRIVILEGED_FUNCTION;
 376:FreeRTOS/Source/tasks.c **** 
 377:FreeRTOS/Source/tasks.c **** #endif
 378:FreeRTOS/Source/tasks.c **** 
 379:FreeRTOS/Source/tasks.c **** /*
 380:FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 381:FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 382:FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 383:FreeRTOS/Source/tasks.c ****  */
 384:FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 385:FreeRTOS/Source/tasks.c **** 
 386:FreeRTOS/Source/tasks.c **** /*
 387:FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 388:FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 389:FreeRTOS/Source/tasks.c ****  */
 390:FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake ) PRIVILEGED_FUNCTION;
 391:FreeRTOS/Source/tasks.c **** 
 392:FreeRTOS/Source/tasks.c **** /*
 393:FreeRTOS/Source/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 394:FreeRTOS/Source/tasks.c ****  * allocation was successful.
 395:FreeRTOS/Source/tasks.c ****  */
 396:FreeRTOS/Source/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
 397:FreeRTOS/Source/tasks.c **** 
 398:FreeRTOS/Source/tasks.c **** /*
 399:FreeRTOS/Source/tasks.c ****  * Called from vTaskList.  vListTasks details all the tasks currently under
 400:FreeRTOS/Source/tasks.c ****  * control of the scheduler.  The tasks may be in one of a number of lists.
 401:FreeRTOS/Source/tasks.c ****  * prvListTaskWithinSingleList accepts a list and details the tasks from
 402:FreeRTOS/Source/tasks.c ****  * within just that list.
 403:FreeRTOS/Source/tasks.c ****  *
 404:FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 405:FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 406:FreeRTOS/Source/tasks.c ****  */
 407:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 408:FreeRTOS/Source/tasks.c **** 
 409:FreeRTOS/Source/tasks.c **** 	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed c
 410:FreeRTOS/Source/tasks.c **** 
 411:FreeRTOS/Source/tasks.c **** #endif
 412:FreeRTOS/Source/tasks.c **** 
 413:FreeRTOS/Source/tasks.c **** /*
 414:FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 415:FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 416:FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 417:FreeRTOS/Source/tasks.c ****  */
 418:FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 419:FreeRTOS/Source/tasks.c **** 
 420:FreeRTOS/Source/tasks.c **** 	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte ) PRIVILEGED_F
 421:FreeRTOS/Source/tasks.c **** 
 422:FreeRTOS/Source/tasks.c **** #endif
 423:FreeRTOS/Source/tasks.c **** 
 424:FreeRTOS/Source/tasks.c **** 
 425:FreeRTOS/Source/tasks.c **** /*lint +e956 */
 426:FreeRTOS/Source/tasks.c **** 
 427:FreeRTOS/Source/tasks.c **** 
 428:FreeRTOS/Source/tasks.c **** 
 429:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
 430:FreeRTOS/Source/tasks.c ****  * TASK CREATION API documented in task.h
 431:FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
 432:FreeRTOS/Source/tasks.c **** 
 433:FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, 
 434:FreeRTOS/Source/tasks.c **** {
 173              		.loc 1 434 0
 174              		.cfi_startproc
 175              		@ args = 16, pretend = 0, frame = 32
 176              		@ frame_needed = 1, uses_anonymous_args = 0
 177 0000 80B5     		push	{r7, lr}
 178              	.LCFI0:
 179              		.cfi_def_cfa_offset 8
 180              		.cfi_offset 14, -4
 181              		.cfi_offset 7, -8
 182 0002 8AB0     		sub	sp, sp, #40
 183              	.LCFI1:
 184              		.cfi_def_cfa_offset 48
 185 0004 02AF     		add	r7, sp, #8
 186              	.LCFI2:
 187              		.cfi_def_cfa 7, 40
 188 0006 F860     		str	r0, [r7, #12]
 189 0008 B960     		str	r1, [r7, #8]
 190 000a 3B60     		str	r3, [r7, #0]
 191 000c 1346     		mov	r3, r2	@ movhi
 192 000e FB80     		strh	r3, [r7, #6]	@ movhi
 435:FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xReturn;
 436:FreeRTOS/Source/tasks.c **** tskTCB * pxNewTCB;
 437:FreeRTOS/Source/tasks.c **** 
 438:FreeRTOS/Source/tasks.c **** 	configASSERT( pxTaskCode );
 439:FreeRTOS/Source/tasks.c **** 	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );
 440:FreeRTOS/Source/tasks.c **** 
 441:FreeRTOS/Source/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 442:FreeRTOS/Source/tasks.c **** 	checking that the allocation was successful. */
 443:FreeRTOS/Source/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 193              		.loc 1 443 0
 194 0010 FB88     		ldrh	r3, [r7, #6]
 195 0012 1846     		mov	r0, r3
 196 0014 396B     		ldr	r1, [r7, #48]
 197 0016 FFF7FEFF 		bl	prvAllocateTCBAndStack
 198 001a B861     		str	r0, [r7, #24]
 444:FreeRTOS/Source/tasks.c **** 
 445:FreeRTOS/Source/tasks.c **** 	if( pxNewTCB != NULL )
 199              		.loc 1 445 0
 200 001c BB69     		ldr	r3, [r7, #24]
 201 001e 002B     		cmp	r3, #0
 202 0020 00F0A580 		beq	.L2
 203              	.LBB2:
 446:FreeRTOS/Source/tasks.c **** 	{
 447:FreeRTOS/Source/tasks.c **** 		portSTACK_TYPE *pxTopOfStack;
 448:FreeRTOS/Source/tasks.c **** 
 449:FreeRTOS/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 450:FreeRTOS/Source/tasks.c **** 			/* Should the task be created in privileged mode? */
 451:FreeRTOS/Source/tasks.c **** 			portBASE_TYPE xRunPrivileged;
 452:FreeRTOS/Source/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 453:FreeRTOS/Source/tasks.c **** 			{
 454:FreeRTOS/Source/tasks.c **** 				xRunPrivileged = pdTRUE;
 455:FreeRTOS/Source/tasks.c **** 			}
 456:FreeRTOS/Source/tasks.c **** 			else
 457:FreeRTOS/Source/tasks.c **** 			{
 458:FreeRTOS/Source/tasks.c **** 				xRunPrivileged = pdFALSE;
 459:FreeRTOS/Source/tasks.c **** 			}
 460:FreeRTOS/Source/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 461:FreeRTOS/Source/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 462:FreeRTOS/Source/tasks.c **** 
 463:FreeRTOS/Source/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 464:FreeRTOS/Source/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or visa versa.
 465:FreeRTOS/Source/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 466:FreeRTOS/Source/tasks.c **** 		required by the port. */
 467:FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 468:FreeRTOS/Source/tasks.c **** 		{
 469:FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 204              		.loc 1 469 0
 205 0024 BB69     		ldr	r3, [r7, #24]
 206 0026 1A6B     		ldr	r2, [r3, #48]
 207 0028 FB88     		ldrh	r3, [r7, #6]
 208 002a 03F1FF33 		add	r3, r3, #-1
 209 002e 4FEA8303 		lsl	r3, r3, #2
 210 0032 D318     		adds	r3, r2, r3
 211 0034 7B61     		str	r3, [r7, #20]
 470:FreeRTOS/Source/tasks.c **** 			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINT
 212              		.loc 1 470 0
 213 0036 7B69     		ldr	r3, [r7, #20]
 214 0038 23F00703 		bic	r3, r3, #7
 215 003c 7B61     		str	r3, [r7, #20]
 471:FreeRTOS/Source/tasks.c **** 
 472:FreeRTOS/Source/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 473:FreeRTOS/Source/tasks.c **** 			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) =
 474:FreeRTOS/Source/tasks.c **** 		}
 475:FreeRTOS/Source/tasks.c **** 		#else
 476:FreeRTOS/Source/tasks.c **** 		{
 477:FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 478:FreeRTOS/Source/tasks.c **** 			
 479:FreeRTOS/Source/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 480:FreeRTOS/Source/tasks.c **** 			configASSERT( ( ( ( unsigned long ) pxNewTCB->pxStack & ( unsigned long ) portBYTE_ALIGNMENT_MAS
 481:FreeRTOS/Source/tasks.c **** 
 482:FreeRTOS/Source/tasks.c **** 			/* If we want to use stack checking on architectures that use
 483:FreeRTOS/Source/tasks.c **** 			a positive stack growth direction then we also need to store the
 484:FreeRTOS/Source/tasks.c **** 			other extreme of the stack space. */
 485:FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 486:FreeRTOS/Source/tasks.c **** 		}
 487:FreeRTOS/Source/tasks.c **** 		#endif
 488:FreeRTOS/Source/tasks.c **** 
 489:FreeRTOS/Source/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 490:FreeRTOS/Source/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 216              		.loc 1 490 0
 217 003e FB88     		ldrh	r3, [r7, #6]
 218 0040 0093     		str	r3, [sp, #0]
 219 0042 B869     		ldr	r0, [r7, #24]
 220 0044 B968     		ldr	r1, [r7, #8]
 221 0046 BA6A     		ldr	r2, [r7, #40]
 222 0048 7B6B     		ldr	r3, [r7, #52]
 223 004a FFF7FEFF 		bl	prvInitialiseTCBVariables
 491:FreeRTOS/Source/tasks.c **** 
 492:FreeRTOS/Source/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 493:FreeRTOS/Source/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 494:FreeRTOS/Source/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 495:FreeRTOS/Source/tasks.c **** 		the	top of stack variable is updated. */
 496:FreeRTOS/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 497:FreeRTOS/Source/tasks.c **** 		{
 498:FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 499:FreeRTOS/Source/tasks.c **** 		}
 500:FreeRTOS/Source/tasks.c **** 		#else
 501:FreeRTOS/Source/tasks.c **** 		{
 502:FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 224              		.loc 1 502 0
 225 004e 7869     		ldr	r0, [r7, #20]
 226 0050 F968     		ldr	r1, [r7, #12]
 227 0052 3A68     		ldr	r2, [r7, #0]
 228 0054 FFF7FEFF 		bl	pxPortInitialiseStack
 229 0058 0246     		mov	r2, r0
 230 005a BB69     		ldr	r3, [r7, #24]
 231 005c 1A60     		str	r2, [r3, #0]
 503:FreeRTOS/Source/tasks.c **** 		}
 504:FreeRTOS/Source/tasks.c **** 		#endif
 505:FreeRTOS/Source/tasks.c **** 
 506:FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the initialised stack. */
 507:FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT
 508:FreeRTOS/Source/tasks.c **** 
 509:FreeRTOS/Source/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 232              		.loc 1 509 0
 233 005e FB6A     		ldr	r3, [r7, #44]
 234 0060 002B     		cmp	r3, #0
 235 0062 02D0     		beq	.L3
 510:FreeRTOS/Source/tasks.c **** 		{
 511:FreeRTOS/Source/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 512:FreeRTOS/Source/tasks.c **** 			task can use this as a handle to delete the task later if
 513:FreeRTOS/Source/tasks.c **** 			required.*/
 514:FreeRTOS/Source/tasks.c **** 			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 236              		.loc 1 514 0
 237 0064 FB6A     		ldr	r3, [r7, #44]
 238 0066 BA69     		ldr	r2, [r7, #24]
 239 0068 1A60     		str	r2, [r3, #0]
 240              	.L3:
 515:FreeRTOS/Source/tasks.c **** 		}
 516:FreeRTOS/Source/tasks.c **** 		
 517:FreeRTOS/Source/tasks.c **** 		/* We are going to manipulate the task queues to add this task to a
 518:FreeRTOS/Source/tasks.c **** 		ready list, so must make sure no interrupts occur. */
 519:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 241              		.loc 1 519 0
 242 006a FFF7FEFF 		bl	vPortEnterCritical
 520:FreeRTOS/Source/tasks.c **** 		{
 521:FreeRTOS/Source/tasks.c **** 			uxCurrentNumberOfTasks++;
 243              		.loc 1 521 0
 244 006e 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 245 0072 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 246 0076 1B68     		ldr	r3, [r3, #0]
 247 0078 03F10102 		add	r2, r3, #1
 248 007c 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 249 0080 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 250 0084 1A60     		str	r2, [r3, #0]
 522:FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB == NULL )
 251              		.loc 1 522 0
 252 0086 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 253 008a C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 254 008e 1B68     		ldr	r3, [r3, #0]
 255 0090 002B     		cmp	r3, #0
 256 0092 0FD1     		bne	.L4
 523:FreeRTOS/Source/tasks.c **** 			{
 524:FreeRTOS/Source/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 525:FreeRTOS/Source/tasks.c **** 				the suspended state - make this the current task. */
 526:FreeRTOS/Source/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 257              		.loc 1 526 0
 258 0094 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 259 0098 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 260 009c BA69     		ldr	r2, [r7, #24]
 261 009e 1A60     		str	r2, [r3, #0]
 527:FreeRTOS/Source/tasks.c **** 
 528:FreeRTOS/Source/tasks.c **** 				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 262              		.loc 1 528 0
 263 00a0 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 264 00a4 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 265 00a8 1B68     		ldr	r3, [r3, #0]
 266 00aa 012B     		cmp	r3, #1
 267 00ac 18D1     		bne	.L5
 529:FreeRTOS/Source/tasks.c **** 				{
 530:FreeRTOS/Source/tasks.c **** 					/* This is the first task to be created so do the preliminary
 531:FreeRTOS/Source/tasks.c **** 					initialisation required.  We will not recover if this call
 532:FreeRTOS/Source/tasks.c **** 					fails, but we will report the failure. */
 533:FreeRTOS/Source/tasks.c **** 					prvInitialiseTaskLists();
 268              		.loc 1 533 0
 269 00ae FFF7FEFF 		bl	prvInitialiseTaskLists
 270 00b2 15E0     		b	.L5
 271              	.L4:
 534:FreeRTOS/Source/tasks.c **** 				}
 535:FreeRTOS/Source/tasks.c **** 			}
 536:FreeRTOS/Source/tasks.c **** 			else
 537:FreeRTOS/Source/tasks.c **** 			{
 538:FreeRTOS/Source/tasks.c **** 				/* If the scheduler is not already running, make this task the
 539:FreeRTOS/Source/tasks.c **** 				current task if it is the highest priority task to be created
 540:FreeRTOS/Source/tasks.c **** 				so far. */
 541:FreeRTOS/Source/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 272              		.loc 1 541 0
 273 00b4 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 274 00b8 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 275 00bc 1B68     		ldr	r3, [r3, #0]
 276 00be 002B     		cmp	r3, #0
 277 00c0 0ED1     		bne	.L5
 542:FreeRTOS/Source/tasks.c **** 				{
 543:FreeRTOS/Source/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 278              		.loc 1 543 0
 279 00c2 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 280 00c6 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 281 00ca 1B68     		ldr	r3, [r3, #0]
 282 00cc DA6A     		ldr	r2, [r3, #44]
 283 00ce BB6A     		ldr	r3, [r7, #40]
 284 00d0 9A42     		cmp	r2, r3
 285 00d2 05D8     		bhi	.L5
 544:FreeRTOS/Source/tasks.c **** 					{
 545:FreeRTOS/Source/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 286              		.loc 1 545 0
 287 00d4 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 288 00d8 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 289 00dc BA69     		ldr	r2, [r7, #24]
 290 00de 1A60     		str	r2, [r3, #0]
 291              	.L5:
 546:FreeRTOS/Source/tasks.c **** 					}
 547:FreeRTOS/Source/tasks.c **** 				}
 548:FreeRTOS/Source/tasks.c **** 			}
 549:FreeRTOS/Source/tasks.c **** 
 550:FreeRTOS/Source/tasks.c **** 			/* Remember the top priority to make context switching faster.  Use
 551:FreeRTOS/Source/tasks.c **** 			the priority in pxNewTCB as this has been capped to a valid value. */
 552:FreeRTOS/Source/tasks.c **** 			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 292              		.loc 1 552 0
 293 00e0 BB69     		ldr	r3, [r7, #24]
 294 00e2 DA6A     		ldr	r2, [r3, #44]
 295 00e4 40F20003 		movw	r3, #:lower16:uxTopUsedPriority
 296 00e8 C0F20003 		movt	r3, #:upper16:uxTopUsedPriority
 297 00ec 1B68     		ldr	r3, [r3, #0]
 298 00ee 9A42     		cmp	r2, r3
 299 00f0 06D9     		bls	.L6
 553:FreeRTOS/Source/tasks.c **** 			{
 554:FreeRTOS/Source/tasks.c **** 				uxTopUsedPriority = pxNewTCB->uxPriority;
 300              		.loc 1 554 0
 301 00f2 BB69     		ldr	r3, [r7, #24]
 302 00f4 DA6A     		ldr	r2, [r3, #44]
 303 00f6 40F20003 		movw	r3, #:lower16:uxTopUsedPriority
 304 00fa C0F20003 		movt	r3, #:upper16:uxTopUsedPriority
 305 00fe 1A60     		str	r2, [r3, #0]
 306              	.L6:
 555:FreeRTOS/Source/tasks.c **** 			}
 556:FreeRTOS/Source/tasks.c **** 
 557:FreeRTOS/Source/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 558:FreeRTOS/Source/tasks.c **** 			{
 559:FreeRTOS/Source/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 560:FreeRTOS/Source/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 561:FreeRTOS/Source/tasks.c **** 			}
 562:FreeRTOS/Source/tasks.c **** 			#endif
 563:FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 307              		.loc 1 563 0
 308 0100 40F20003 		movw	r3, #:lower16:uxTaskNumber
 309 0104 C0F20003 		movt	r3, #:upper16:uxTaskNumber
 310 0108 1B68     		ldr	r3, [r3, #0]
 311 010a 03F10102 		add	r2, r3, #1
 312 010e 40F20003 		movw	r3, #:lower16:uxTaskNumber
 313 0112 C0F20003 		movt	r3, #:upper16:uxTaskNumber
 314 0116 1A60     		str	r2, [r3, #0]
 564:FreeRTOS/Source/tasks.c **** 
 565:FreeRTOS/Source/tasks.c **** 			prvAddTaskToReadyQueue( pxNewTCB );
 315              		.loc 1 565 0
 316 0118 BB69     		ldr	r3, [r7, #24]
 317 011a DA6A     		ldr	r2, [r3, #44]
 318 011c 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 319 0120 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 320 0124 1B68     		ldr	r3, [r3, #0]
 321 0126 9A42     		cmp	r2, r3
 322 0128 06D9     		bls	.L7
 323              		.loc 1 565 0 is_stmt 0 discriminator 1
 324 012a BB69     		ldr	r3, [r7, #24]
 325 012c DA6A     		ldr	r2, [r3, #44]
 326 012e 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 327 0132 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 328 0136 1A60     		str	r2, [r3, #0]
 329              	.L7:
 330              		.loc 1 565 0 discriminator 2
 331 0138 BB69     		ldr	r3, [r7, #24]
 332 013a DA6A     		ldr	r2, [r3, #44]
 333 013c 1346     		mov	r3, r2
 334 013e 4FEA8303 		lsl	r3, r3, #2
 335 0142 9B18     		adds	r3, r3, r2
 336 0144 4FEA8303 		lsl	r3, r3, #2
 337 0148 1A46     		mov	r2, r3
 338 014a 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 339 014e C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 340 0152 D218     		adds	r2, r2, r3
 341 0154 BB69     		ldr	r3, [r7, #24]
 342 0156 03F10403 		add	r3, r3, #4
 343 015a 1046     		mov	r0, r2
 344 015c 1946     		mov	r1, r3
 345 015e FFF7FEFF 		bl	vListInsertEnd
 566:FreeRTOS/Source/tasks.c **** 
 567:FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 346              		.loc 1 567 0 is_stmt 1 discriminator 2
 347 0162 4FF00103 		mov	r3, #1
 348 0166 FB61     		str	r3, [r7, #28]
 568:FreeRTOS/Source/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 569:FreeRTOS/Source/tasks.c **** 		}
 570:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 349              		.loc 1 570 0 discriminator 2
 350 0168 FFF7FEFF 		bl	vPortExitCritical
 351 016c 02E0     		b	.L8
 352              	.L2:
 353              	.LBE2:
 571:FreeRTOS/Source/tasks.c **** 	}
 572:FreeRTOS/Source/tasks.c **** 	else
 573:FreeRTOS/Source/tasks.c **** 	{
 574:FreeRTOS/Source/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 354              		.loc 1 574 0
 355 016e 4FF0FF33 		mov	r3, #-1
 356 0172 FB61     		str	r3, [r7, #28]
 357              	.L8:
 575:FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE_FAILED();
 576:FreeRTOS/Source/tasks.c **** 	}
 577:FreeRTOS/Source/tasks.c **** 
 578:FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 358              		.loc 1 578 0
 359 0174 FB69     		ldr	r3, [r7, #28]
 360 0176 012B     		cmp	r3, #1
 361 0178 11D1     		bne	.L9
 579:FreeRTOS/Source/tasks.c **** 	{
 580:FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 362              		.loc 1 580 0
 363 017a 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 364 017e C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 365 0182 1B68     		ldr	r3, [r3, #0]
 366 0184 002B     		cmp	r3, #0
 367 0186 0AD0     		beq	.L9
 581:FreeRTOS/Source/tasks.c **** 		{
 582:FreeRTOS/Source/tasks.c **** 			/* If the created task is of a higher priority than the current task
 583:FreeRTOS/Source/tasks.c **** 			then it should run now. */
 584:FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 368              		.loc 1 584 0
 369 0188 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 370 018c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 371 0190 1B68     		ldr	r3, [r3, #0]
 372 0192 DA6A     		ldr	r2, [r3, #44]
 373 0194 BB6A     		ldr	r3, [r7, #40]
 374 0196 9A42     		cmp	r2, r3
 375 0198 01D2     		bcs	.L9
 585:FreeRTOS/Source/tasks.c **** 			{
 586:FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 376              		.loc 1 586 0
 377 019a FFF7FEFF 		bl	vPortYieldFromISR
 378              	.L9:
 587:FreeRTOS/Source/tasks.c **** 			}
 588:FreeRTOS/Source/tasks.c **** 		}
 589:FreeRTOS/Source/tasks.c **** 	}
 590:FreeRTOS/Source/tasks.c **** 
 591:FreeRTOS/Source/tasks.c **** 	return xReturn;
 379              		.loc 1 591 0
 380 019e FB69     		ldr	r3, [r7, #28]
 592:FreeRTOS/Source/tasks.c **** }
 381              		.loc 1 592 0
 382 01a0 1846     		mov	r0, r3
 383 01a2 07F12007 		add	r7, r7, #32
 384 01a6 BD46     		mov	sp, r7
 385 01a8 80BD     		pop	{r7, pc}
 386              		.cfi_endproc
 387              	.LFE110:
 389 01aa 00BF     		.section	.text.vTaskDelete,"ax",%progbits
 390              		.align	2
 391              		.global	vTaskDelete
 392              		.thumb
 393              		.thumb_func
 395              	vTaskDelete:
 396              	.LFB111:
 593:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 594:FreeRTOS/Source/tasks.c **** 
 595:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 596:FreeRTOS/Source/tasks.c **** 
 597:FreeRTOS/Source/tasks.c **** 	void vTaskDelete( xTaskHandle pxTaskToDelete )
 598:FreeRTOS/Source/tasks.c **** 	{
 397              		.loc 1 598 0
 398              		.cfi_startproc
 399              		@ args = 0, pretend = 0, frame = 16
 400              		@ frame_needed = 1, uses_anonymous_args = 0
 401 0000 80B5     		push	{r7, lr}
 402              	.LCFI3:
 403              		.cfi_def_cfa_offset 8
 404              		.cfi_offset 14, -4
 405              		.cfi_offset 7, -8
 406 0002 84B0     		sub	sp, sp, #16
 407              	.LCFI4:
 408              		.cfi_def_cfa_offset 24
 409 0004 00AF     		add	r7, sp, #0
 410              	.LCFI5:
 411              		.cfi_def_cfa_register 7
 412 0006 7860     		str	r0, [r7, #4]
 599:FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 600:FreeRTOS/Source/tasks.c **** 
 601:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 413              		.loc 1 601 0
 414 0008 FFF7FEFF 		bl	vPortEnterCritical
 602:FreeRTOS/Source/tasks.c **** 		{
 603:FreeRTOS/Source/tasks.c **** 			/* Ensure a yield is performed if the current task is being
 604:FreeRTOS/Source/tasks.c **** 			deleted. */
 605:FreeRTOS/Source/tasks.c **** 			if( pxTaskToDelete == pxCurrentTCB )
 415              		.loc 1 605 0
 416 000c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 417 0010 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 418 0014 1B68     		ldr	r3, [r3, #0]
 419 0016 7A68     		ldr	r2, [r7, #4]
 420 0018 9A42     		cmp	r2, r3
 421 001a 02D1     		bne	.L11
 606:FreeRTOS/Source/tasks.c **** 			{
 607:FreeRTOS/Source/tasks.c **** 				pxTaskToDelete = NULL;
 422              		.loc 1 607 0
 423 001c 4FF00003 		mov	r3, #0
 424 0020 7B60     		str	r3, [r7, #4]
 425              	.L11:
 608:FreeRTOS/Source/tasks.c **** 			}
 609:FreeRTOS/Source/tasks.c **** 
 610:FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are deleting ourselves. */
 611:FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
 426              		.loc 1 611 0
 427 0022 7B68     		ldr	r3, [r7, #4]
 428 0024 002B     		cmp	r3, #0
 429 0026 05D1     		bne	.L12
 430              		.loc 1 611 0 is_stmt 0 discriminator 1
 431 0028 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 432 002c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 433 0030 1B68     		ldr	r3, [r3, #0]
 434 0032 00E0     		b	.L13
 435              	.L12:
 436              		.loc 1 611 0 discriminator 2
 437 0034 7B68     		ldr	r3, [r7, #4]
 438              	.L13:
 439              		.loc 1 611 0 discriminator 3
 440 0036 FB60     		str	r3, [r7, #12]
 612:FreeRTOS/Source/tasks.c **** 
 613:FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 614:FreeRTOS/Source/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 615:FreeRTOS/Source/tasks.c **** 			the termination list and free up any memory allocated by the
 616:FreeRTOS/Source/tasks.c **** 			scheduler for the TCB and stack. */
 617:FreeRTOS/Source/tasks.c **** 			vListRemove( &( pxTCB->xGenericListItem ) );
 441              		.loc 1 617 0 is_stmt 1 discriminator 3
 442 0038 FB68     		ldr	r3, [r7, #12]
 443 003a 03F10403 		add	r3, r3, #4
 444 003e 1846     		mov	r0, r3
 445 0040 FFF7FEFF 		bl	vListRemove
 618:FreeRTOS/Source/tasks.c **** 
 619:FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
 620:FreeRTOS/Source/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer != NULL )
 446              		.loc 1 620 0 discriminator 3
 447 0044 FB68     		ldr	r3, [r7, #12]
 448 0046 9B6A     		ldr	r3, [r3, #40]
 449 0048 002B     		cmp	r3, #0
 450 004a 05D0     		beq	.L14
 621:FreeRTOS/Source/tasks.c **** 			{
 622:FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xEventListItem ) );
 451              		.loc 1 622 0
 452 004c FB68     		ldr	r3, [r7, #12]
 453 004e 03F11803 		add	r3, r3, #24
 454 0052 1846     		mov	r0, r3
 455 0054 FFF7FEFF 		bl	vListRemove
 456              	.L14:
 623:FreeRTOS/Source/tasks.c **** 			}
 624:FreeRTOS/Source/tasks.c **** 
 625:FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 457              		.loc 1 625 0
 458 0058 FB68     		ldr	r3, [r7, #12]
 459 005a 03F10403 		add	r3, r3, #4
 460 005e 40F20000 		movw	r0, #:lower16:xTasksWaitingTermination
 461 0062 C0F20000 		movt	r0, #:upper16:xTasksWaitingTermination
 462 0066 1946     		mov	r1, r3
 463 0068 FFF7FEFF 		bl	vListInsertEnd
 626:FreeRTOS/Source/tasks.c **** 
 627:FreeRTOS/Source/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 628:FreeRTOS/Source/tasks.c **** 			there is a task that has been deleted and that it should therefore
 629:FreeRTOS/Source/tasks.c **** 			check the xTasksWaitingTermination list. */
 630:FreeRTOS/Source/tasks.c **** 			++uxTasksDeleted;
 464              		.loc 1 630 0
 465 006c 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 466 0070 C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 467 0074 1B68     		ldr	r3, [r3, #0]
 468 0076 03F10102 		add	r2, r3, #1
 469 007a 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 470 007e C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 471 0082 1A60     		str	r2, [r3, #0]
 631:FreeRTOS/Source/tasks.c **** 
 632:FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 633:FreeRTOS/Source/tasks.c **** 			can detect that the task lists need re-generating. */
 634:FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 472              		.loc 1 634 0
 473 0084 40F20003 		movw	r3, #:lower16:uxTaskNumber
 474 0088 C0F20003 		movt	r3, #:upper16:uxTaskNumber
 475 008c 1B68     		ldr	r3, [r3, #0]
 476 008e 03F10102 		add	r2, r3, #1
 477 0092 40F20003 		movw	r3, #:lower16:uxTaskNumber
 478 0096 C0F20003 		movt	r3, #:upper16:uxTaskNumber
 479 009a 1A60     		str	r2, [r3, #0]
 635:FreeRTOS/Source/tasks.c **** 
 636:FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
 637:FreeRTOS/Source/tasks.c **** 		}
 638:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 480              		.loc 1 638 0
 481 009c FFF7FEFF 		bl	vPortExitCritical
 639:FreeRTOS/Source/tasks.c **** 
 640:FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if we have just deleted the current task. */
 641:FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 482              		.loc 1 641 0
 483 00a0 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 484 00a4 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 485 00a8 1B68     		ldr	r3, [r3, #0]
 486 00aa 002B     		cmp	r3, #0
 487 00ac 04D0     		beq	.L10
 642:FreeRTOS/Source/tasks.c **** 		{
 643:FreeRTOS/Source/tasks.c **** 			if( ( void * ) pxTaskToDelete == NULL )
 488              		.loc 1 643 0
 489 00ae 7B68     		ldr	r3, [r7, #4]
 490 00b0 002B     		cmp	r3, #0
 491 00b2 01D1     		bne	.L10
 644:FreeRTOS/Source/tasks.c **** 			{
 645:FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 492              		.loc 1 645 0
 493 00b4 FFF7FEFF 		bl	vPortYieldFromISR
 494              	.L10:
 646:FreeRTOS/Source/tasks.c **** 			}
 647:FreeRTOS/Source/tasks.c **** 		}
 648:FreeRTOS/Source/tasks.c **** 	}
 495              		.loc 1 648 0
 496 00b8 07F11007 		add	r7, r7, #16
 497 00bc BD46     		mov	sp, r7
 498 00be 80BD     		pop	{r7, pc}
 499              		.cfi_endproc
 500              	.LFE111:
 502              		.section	.text.vTaskDelayUntil,"ax",%progbits
 503              		.align	2
 504              		.global	vTaskDelayUntil
 505              		.thumb
 506              		.thumb_func
 508              	vTaskDelayUntil:
 509              	.LFB112:
 649:FreeRTOS/Source/tasks.c **** 
 650:FreeRTOS/Source/tasks.c **** #endif
 651:FreeRTOS/Source/tasks.c **** 
 652:FreeRTOS/Source/tasks.c **** 
 653:FreeRTOS/Source/tasks.c **** 
 654:FreeRTOS/Source/tasks.c **** 
 655:FreeRTOS/Source/tasks.c **** 
 656:FreeRTOS/Source/tasks.c **** 
 657:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
 658:FreeRTOS/Source/tasks.c ****  * TASK CONTROL API documented in task.h
 659:FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
 660:FreeRTOS/Source/tasks.c **** 
 661:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 662:FreeRTOS/Source/tasks.c **** 
 663:FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
 664:FreeRTOS/Source/tasks.c **** 	{
 510              		.loc 1 664 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 24
 513              		@ frame_needed = 1, uses_anonymous_args = 0
 514 0000 80B5     		push	{r7, lr}
 515              	.LCFI6:
 516              		.cfi_def_cfa_offset 8
 517              		.cfi_offset 14, -4
 518              		.cfi_offset 7, -8
 519 0002 86B0     		sub	sp, sp, #24
 520              	.LCFI7:
 521              		.cfi_def_cfa_offset 32
 522 0004 00AF     		add	r7, sp, #0
 523              	.LCFI8:
 524              		.cfi_def_cfa_register 7
 525 0006 7860     		str	r0, [r7, #4]
 526 0008 3960     		str	r1, [r7, #0]
 665:FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
 666:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 527              		.loc 1 666 0
 528 000a 4FF00003 		mov	r3, #0
 529 000e 7B61     		str	r3, [r7, #20]
 667:FreeRTOS/Source/tasks.c **** 
 668:FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 669:FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 670:FreeRTOS/Source/tasks.c **** 
 671:FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 530              		.loc 1 671 0
 531 0010 FFF7FEFF 		bl	vTaskSuspendAll
 672:FreeRTOS/Source/tasks.c **** 		{
 673:FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 674:FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 532              		.loc 1 674 0
 533 0014 7B68     		ldr	r3, [r7, #4]
 534 0016 1A68     		ldr	r2, [r3, #0]
 535 0018 3B68     		ldr	r3, [r7, #0]
 536 001a D318     		adds	r3, r2, r3
 537 001c 3B61     		str	r3, [r7, #16]
 675:FreeRTOS/Source/tasks.c **** 
 676:FreeRTOS/Source/tasks.c **** 			if( xTickCount < *pxPreviousWakeTime )
 538              		.loc 1 676 0
 539 001e 7B68     		ldr	r3, [r7, #4]
 540 0020 1A68     		ldr	r2, [r3, #0]
 541 0022 40F20003 		movw	r3, #:lower16:xTickCount
 542 0026 C0F20003 		movt	r3, #:upper16:xTickCount
 543 002a 1B68     		ldr	r3, [r3, #0]
 544 002c 9A42     		cmp	r2, r3
 545 002e 10D9     		bls	.L17
 677:FreeRTOS/Source/tasks.c **** 			{
 678:FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
 679:FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
 680:FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 681:FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
 682:FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
 683:FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 546              		.loc 1 683 0
 547 0030 7B68     		ldr	r3, [r7, #4]
 548 0032 1A68     		ldr	r2, [r3, #0]
 549 0034 3B69     		ldr	r3, [r7, #16]
 550 0036 9A42     		cmp	r2, r3
 551 0038 1BD9     		bls	.L18
 552              		.loc 1 683 0 is_stmt 0 discriminator 1
 553 003a 40F20003 		movw	r3, #:lower16:xTickCount
 554 003e C0F20003 		movt	r3, #:upper16:xTickCount
 555 0042 1B68     		ldr	r3, [r3, #0]
 556 0044 3A69     		ldr	r2, [r7, #16]
 557 0046 9A42     		cmp	r2, r3
 558 0048 13D9     		bls	.L18
 684:FreeRTOS/Source/tasks.c **** 				{
 685:FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 559              		.loc 1 685 0 is_stmt 1
 560 004a 4FF00103 		mov	r3, #1
 561 004e 7B61     		str	r3, [r7, #20]
 562 0050 0FE0     		b	.L18
 563              	.L17:
 686:FreeRTOS/Source/tasks.c **** 				}
 687:FreeRTOS/Source/tasks.c **** 			}
 688:FreeRTOS/Source/tasks.c **** 			else
 689:FreeRTOS/Source/tasks.c **** 			{
 690:FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 691:FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 692:FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
 693:FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 564              		.loc 1 693 0
 565 0052 7B68     		ldr	r3, [r7, #4]
 566 0054 1A68     		ldr	r2, [r3, #0]
 567 0056 3B69     		ldr	r3, [r7, #16]
 568 0058 9A42     		cmp	r2, r3
 569 005a 07D8     		bhi	.L19
 570              		.loc 1 693 0 is_stmt 0 discriminator 1
 571 005c 40F20003 		movw	r3, #:lower16:xTickCount
 572 0060 C0F20003 		movt	r3, #:upper16:xTickCount
 573 0064 1B68     		ldr	r3, [r3, #0]
 574 0066 3A69     		ldr	r2, [r7, #16]
 575 0068 9A42     		cmp	r2, r3
 576 006a 02D9     		bls	.L18
 577              	.L19:
 694:FreeRTOS/Source/tasks.c **** 				{
 695:FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 578              		.loc 1 695 0 is_stmt 1
 579 006c 4FF00103 		mov	r3, #1
 580 0070 7B61     		str	r3, [r7, #20]
 581              	.L18:
 696:FreeRTOS/Source/tasks.c **** 				}
 697:FreeRTOS/Source/tasks.c **** 			}
 698:FreeRTOS/Source/tasks.c **** 
 699:FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
 700:FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 582              		.loc 1 700 0
 583 0072 7B68     		ldr	r3, [r7, #4]
 584 0074 3A69     		ldr	r2, [r7, #16]
 585 0076 1A60     		str	r2, [r3, #0]
 701:FreeRTOS/Source/tasks.c **** 
 702:FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 586              		.loc 1 702 0
 587 0078 7B69     		ldr	r3, [r7, #20]
 588 007a 002B     		cmp	r3, #0
 589 007c 0CD0     		beq	.L20
 703:FreeRTOS/Source/tasks.c **** 			{
 704:FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL();
 705:FreeRTOS/Source/tasks.c **** 
 706:FreeRTOS/Source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 707:FreeRTOS/Source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 708:FreeRTOS/Source/tasks.c **** 				both lists. */
 709:FreeRTOS/Source/tasks.c **** 				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 590              		.loc 1 709 0
 591 007e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 592 0082 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 593 0086 1B68     		ldr	r3, [r3, #0]
 594 0088 03F10403 		add	r3, r3, #4
 595 008c 1846     		mov	r0, r3
 596 008e FFF7FEFF 		bl	vListRemove
 710:FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 597              		.loc 1 710 0
 598 0092 3869     		ldr	r0, [r7, #16]
 599 0094 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 600              	.L20:
 711:FreeRTOS/Source/tasks.c **** 			}
 712:FreeRTOS/Source/tasks.c **** 		}
 713:FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 601              		.loc 1 713 0
 602 0098 FFF7FEFF 		bl	xTaskResumeAll
 603 009c F860     		str	r0, [r7, #12]
 714:FreeRTOS/Source/tasks.c **** 
 715:FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 716:FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
 717:FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 604              		.loc 1 717 0
 605 009e FB68     		ldr	r3, [r7, #12]
 606 00a0 002B     		cmp	r3, #0
 607 00a2 01D1     		bne	.L16
 718:FreeRTOS/Source/tasks.c **** 		{
 719:FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 608              		.loc 1 719 0
 609 00a4 FFF7FEFF 		bl	vPortYieldFromISR
 610              	.L16:
 720:FreeRTOS/Source/tasks.c **** 		}
 721:FreeRTOS/Source/tasks.c **** 	}
 611              		.loc 1 721 0
 612 00a8 07F11807 		add	r7, r7, #24
 613 00ac BD46     		mov	sp, r7
 614 00ae 80BD     		pop	{r7, pc}
 615              		.cfi_endproc
 616              	.LFE112:
 618              		.section	.text.vTaskDelay,"ax",%progbits
 619              		.align	2
 620              		.global	vTaskDelay
 621              		.thumb
 622              		.thumb_func
 624              	vTaskDelay:
 625              	.LFB113:
 722:FreeRTOS/Source/tasks.c **** 
 723:FreeRTOS/Source/tasks.c **** #endif
 724:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 725:FreeRTOS/Source/tasks.c **** 
 726:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 727:FreeRTOS/Source/tasks.c **** 
 728:FreeRTOS/Source/tasks.c **** 	void vTaskDelay( portTickType xTicksToDelay )
 729:FreeRTOS/Source/tasks.c **** 	{
 626              		.loc 1 729 0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 16
 629              		@ frame_needed = 1, uses_anonymous_args = 0
 630 0000 80B5     		push	{r7, lr}
 631              	.LCFI9:
 632              		.cfi_def_cfa_offset 8
 633              		.cfi_offset 14, -4
 634              		.cfi_offset 7, -8
 635 0002 84B0     		sub	sp, sp, #16
 636              	.LCFI10:
 637              		.cfi_def_cfa_offset 24
 638 0004 00AF     		add	r7, sp, #0
 639              	.LCFI11:
 640              		.cfi_def_cfa_register 7
 641 0006 7860     		str	r0, [r7, #4]
 730:FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
 731:FreeRTOS/Source/tasks.c **** 	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 642              		.loc 1 731 0
 643 0008 4FF00003 		mov	r3, #0
 644 000c FB60     		str	r3, [r7, #12]
 732:FreeRTOS/Source/tasks.c **** 
 733:FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 734:FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( portTickType ) 0U )
 645              		.loc 1 734 0
 646 000e 7B68     		ldr	r3, [r7, #4]
 647 0010 002B     		cmp	r3, #0
 648 0012 19D0     		beq	.L23
 735:FreeRTOS/Source/tasks.c **** 		{
 736:FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 649              		.loc 1 736 0
 650 0014 FFF7FEFF 		bl	vTaskSuspendAll
 737:FreeRTOS/Source/tasks.c **** 			{
 738:FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
 739:FreeRTOS/Source/tasks.c **** 
 740:FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
 741:FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
 742:FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
 743:FreeRTOS/Source/tasks.c **** 				is resumed.
 744:FreeRTOS/Source/tasks.c **** 
 745:FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
 746:FreeRTOS/Source/tasks.c **** 				executing task. */
 747:FreeRTOS/Source/tasks.c **** 
 748:FreeRTOS/Source/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 749:FreeRTOS/Source/tasks.c **** 				not a problem. */
 750:FreeRTOS/Source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 651              		.loc 1 750 0
 652 0018 40F20003 		movw	r3, #:lower16:xTickCount
 653 001c C0F20003 		movt	r3, #:upper16:xTickCount
 654 0020 1A68     		ldr	r2, [r3, #0]
 655 0022 7B68     		ldr	r3, [r7, #4]
 656 0024 D318     		adds	r3, r2, r3
 657 0026 BB60     		str	r3, [r7, #8]
 751:FreeRTOS/Source/tasks.c **** 
 752:FreeRTOS/Source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 753:FreeRTOS/Source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 754:FreeRTOS/Source/tasks.c **** 				both lists. */
 755:FreeRTOS/Source/tasks.c **** 				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 658              		.loc 1 755 0
 659 0028 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 660 002c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 661 0030 1B68     		ldr	r3, [r3, #0]
 662 0032 03F10403 		add	r3, r3, #4
 663 0036 1846     		mov	r0, r3
 664 0038 FFF7FEFF 		bl	vListRemove
 756:FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 665              		.loc 1 756 0
 666 003c B868     		ldr	r0, [r7, #8]
 667 003e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 757:FreeRTOS/Source/tasks.c **** 			}
 758:FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 668              		.loc 1 758 0
 669 0042 FFF7FEFF 		bl	xTaskResumeAll
 670 0046 F860     		str	r0, [r7, #12]
 671              	.L23:
 759:FreeRTOS/Source/tasks.c **** 		}
 760:FreeRTOS/Source/tasks.c **** 
 761:FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 762:FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
 763:FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 672              		.loc 1 763 0
 673 0048 FB68     		ldr	r3, [r7, #12]
 674 004a 002B     		cmp	r3, #0
 675 004c 01D1     		bne	.L22
 764:FreeRTOS/Source/tasks.c **** 		{
 765:FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 676              		.loc 1 765 0
 677 004e FFF7FEFF 		bl	vPortYieldFromISR
 678              	.L22:
 766:FreeRTOS/Source/tasks.c **** 		}
 767:FreeRTOS/Source/tasks.c **** 	}
 679              		.loc 1 767 0
 680 0052 07F11007 		add	r7, r7, #16
 681 0056 BD46     		mov	sp, r7
 682 0058 80BD     		pop	{r7, pc}
 683              		.cfi_endproc
 684              	.LFE113:
 686 005a 00BF     		.section	.text.uxTaskPriorityGet,"ax",%progbits
 687              		.align	2
 688              		.global	uxTaskPriorityGet
 689              		.thumb
 690              		.thumb_func
 692              	uxTaskPriorityGet:
 693              	.LFB114:
 768:FreeRTOS/Source/tasks.c **** 
 769:FreeRTOS/Source/tasks.c **** #endif
 770:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 771:FreeRTOS/Source/tasks.c **** 
 772:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
 773:FreeRTOS/Source/tasks.c **** 
 774:FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
 775:FreeRTOS/Source/tasks.c **** 	{
 694              		.loc 1 775 0
 695              		.cfi_startproc
 696              		@ args = 0, pretend = 0, frame = 16
 697              		@ frame_needed = 1, uses_anonymous_args = 0
 698 0000 80B5     		push	{r7, lr}
 699              	.LCFI12:
 700              		.cfi_def_cfa_offset 8
 701              		.cfi_offset 14, -4
 702              		.cfi_offset 7, -8
 703 0002 84B0     		sub	sp, sp, #16
 704              	.LCFI13:
 705              		.cfi_def_cfa_offset 24
 706 0004 00AF     		add	r7, sp, #0
 707              	.LCFI14:
 708              		.cfi_def_cfa_register 7
 709 0006 7860     		str	r0, [r7, #4]
 776:FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 777:FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
 778:FreeRTOS/Source/tasks.c **** 
 779:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 710              		.loc 1 779 0
 711 0008 FFF7FEFF 		bl	vPortEnterCritical
 780:FreeRTOS/Source/tasks.c **** 		{
 781:FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are changing the
 782:FreeRTOS/Source/tasks.c **** 			priority of the calling function. */
 783:FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 712              		.loc 1 783 0
 713 000c 7B68     		ldr	r3, [r7, #4]
 714 000e 002B     		cmp	r3, #0
 715 0010 05D1     		bne	.L26
 716              		.loc 1 783 0 is_stmt 0 discriminator 1
 717 0012 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 718 0016 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 719 001a 1B68     		ldr	r3, [r3, #0]
 720 001c 00E0     		b	.L27
 721              	.L26:
 722              		.loc 1 783 0 discriminator 2
 723 001e 7B68     		ldr	r3, [r7, #4]
 724              	.L27:
 725              		.loc 1 783 0 discriminator 3
 726 0020 FB60     		str	r3, [r7, #12]
 784:FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 727              		.loc 1 784 0 is_stmt 1 discriminator 3
 728 0022 FB68     		ldr	r3, [r7, #12]
 729 0024 DB6A     		ldr	r3, [r3, #44]
 730 0026 BB60     		str	r3, [r7, #8]
 785:FreeRTOS/Source/tasks.c **** 		}
 786:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 731              		.loc 1 786 0 discriminator 3
 732 0028 FFF7FEFF 		bl	vPortExitCritical
 787:FreeRTOS/Source/tasks.c **** 
 788:FreeRTOS/Source/tasks.c **** 		return uxReturn;
 733              		.loc 1 788 0 discriminator 3
 734 002c BB68     		ldr	r3, [r7, #8]
 789:FreeRTOS/Source/tasks.c **** 	}
 735              		.loc 1 789 0 discriminator 3
 736 002e 1846     		mov	r0, r3
 737 0030 07F11007 		add	r7, r7, #16
 738 0034 BD46     		mov	sp, r7
 739 0036 80BD     		pop	{r7, pc}
 740              		.cfi_endproc
 741              	.LFE114:
 743              		.section	.text.vTaskPrioritySet,"ax",%progbits
 744              		.align	2
 745              		.global	vTaskPrioritySet
 746              		.thumb
 747              		.thumb_func
 749              	vTaskPrioritySet:
 750              	.LFB115:
 790:FreeRTOS/Source/tasks.c **** 
 791:FreeRTOS/Source/tasks.c **** #endif
 792:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 793:FreeRTOS/Source/tasks.c **** 
 794:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
 795:FreeRTOS/Source/tasks.c **** 
 796:FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
 797:FreeRTOS/Source/tasks.c **** 	{
 751              		.loc 1 797 0
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 24
 754              		@ frame_needed = 1, uses_anonymous_args = 0
 755 0000 80B5     		push	{r7, lr}
 756              	.LCFI15:
 757              		.cfi_def_cfa_offset 8
 758              		.cfi_offset 14, -4
 759              		.cfi_offset 7, -8
 760 0002 86B0     		sub	sp, sp, #24
 761              	.LCFI16:
 762              		.cfi_def_cfa_offset 32
 763 0004 00AF     		add	r7, sp, #0
 764              	.LCFI17:
 765              		.cfi_def_cfa_register 7
 766 0006 7860     		str	r0, [r7, #4]
 767 0008 3960     		str	r1, [r7, #0]
 798:FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 799:FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxCurrentPriority;
 800:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 768              		.loc 1 800 0
 769 000a 4FF00003 		mov	r3, #0
 770 000e 7B61     		str	r3, [r7, #20]
 801:FreeRTOS/Source/tasks.c **** 
 802:FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 803:FreeRTOS/Source/tasks.c **** 
 804:FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
 805:FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= configMAX_PRIORITIES )
 771              		.loc 1 805 0
 772 0010 3B68     		ldr	r3, [r7, #0]
 773 0012 042B     		cmp	r3, #4
 774 0014 02D9     		bls	.L29
 806:FreeRTOS/Source/tasks.c **** 		{
 807:FreeRTOS/Source/tasks.c **** 			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 775              		.loc 1 807 0
 776 0016 4FF00403 		mov	r3, #4
 777 001a 3B60     		str	r3, [r7, #0]
 778              	.L29:
 808:FreeRTOS/Source/tasks.c **** 		}
 809:FreeRTOS/Source/tasks.c **** 
 810:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 779              		.loc 1 810 0
 780 001c FFF7FEFF 		bl	vPortEnterCritical
 811:FreeRTOS/Source/tasks.c **** 		{
 812:FreeRTOS/Source/tasks.c **** 			if( pxTask == pxCurrentTCB )
 781              		.loc 1 812 0
 782 0020 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 783 0024 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 784 0028 1B68     		ldr	r3, [r3, #0]
 785 002a 7A68     		ldr	r2, [r7, #4]
 786 002c 9A42     		cmp	r2, r3
 787 002e 02D1     		bne	.L30
 813:FreeRTOS/Source/tasks.c **** 			{
 814:FreeRTOS/Source/tasks.c **** 				pxTask = NULL;
 788              		.loc 1 814 0
 789 0030 4FF00003 		mov	r3, #0
 790 0034 7B60     		str	r3, [r7, #4]
 791              	.L30:
 815:FreeRTOS/Source/tasks.c **** 			}
 816:FreeRTOS/Source/tasks.c **** 
 817:FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are changing the
 818:FreeRTOS/Source/tasks.c **** 			priority of the calling function. */
 819:FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 792              		.loc 1 819 0
 793 0036 7B68     		ldr	r3, [r7, #4]
 794 0038 002B     		cmp	r3, #0
 795 003a 05D1     		bne	.L31
 796              		.loc 1 819 0 is_stmt 0 discriminator 1
 797 003c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 798 0040 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 799 0044 1B68     		ldr	r3, [r3, #0]
 800 0046 00E0     		b	.L32
 801              	.L31:
 802              		.loc 1 819 0 discriminator 2
 803 0048 7B68     		ldr	r3, [r7, #4]
 804              	.L32:
 805              		.loc 1 819 0 discriminator 3
 806 004a 3B61     		str	r3, [r7, #16]
 820:FreeRTOS/Source/tasks.c **** 
 821:FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTask, uxNewPriority );
 822:FreeRTOS/Source/tasks.c **** 
 823:FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
 824:FreeRTOS/Source/tasks.c **** 			{
 825:FreeRTOS/Source/tasks.c **** 				uxCurrentPriority = pxTCB->uxBasePriority;
 807              		.loc 1 825 0 is_stmt 1 discriminator 3
 808 004c 3B69     		ldr	r3, [r7, #16]
 809 004e 5B6C     		ldr	r3, [r3, #68]
 810 0050 FB60     		str	r3, [r7, #12]
 826:FreeRTOS/Source/tasks.c **** 			}
 827:FreeRTOS/Source/tasks.c **** 			#else
 828:FreeRTOS/Source/tasks.c **** 			{
 829:FreeRTOS/Source/tasks.c **** 				uxCurrentPriority = pxTCB->uxPriority;
 830:FreeRTOS/Source/tasks.c **** 			}
 831:FreeRTOS/Source/tasks.c **** 			#endif
 832:FreeRTOS/Source/tasks.c **** 
 833:FreeRTOS/Source/tasks.c **** 			if( uxCurrentPriority != uxNewPriority )
 811              		.loc 1 833 0 discriminator 3
 812 0052 FA68     		ldr	r2, [r7, #12]
 813 0054 3B68     		ldr	r3, [r7, #0]
 814 0056 9A42     		cmp	r2, r3
 815 0058 62D0     		beq	.L33
 834:FreeRTOS/Source/tasks.c **** 			{
 835:FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
 836:FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
 837:FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentPriority )
 816              		.loc 1 837 0
 817 005a 3A68     		ldr	r2, [r7, #0]
 818 005c FB68     		ldr	r3, [r7, #12]
 819 005e 9A42     		cmp	r2, r3
 820 0060 06D9     		bls	.L34
 838:FreeRTOS/Source/tasks.c **** 				{
 839:FreeRTOS/Source/tasks.c **** 					if( pxTask != NULL )
 821              		.loc 1 839 0
 822 0062 7B68     		ldr	r3, [r7, #4]
 823 0064 002B     		cmp	r3, #0
 824 0066 09D0     		beq	.L35
 840:FreeRTOS/Source/tasks.c **** 					{
 841:FreeRTOS/Source/tasks.c **** 						/* The priority of another task is being raised.  If we
 842:FreeRTOS/Source/tasks.c **** 						were raising the priority of the currently running task
 843:FreeRTOS/Source/tasks.c **** 						there would be no need to switch as it must have already
 844:FreeRTOS/Source/tasks.c **** 						been the highest priority task. */
 845:FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 825              		.loc 1 845 0
 826 0068 4FF00103 		mov	r3, #1
 827 006c 7B61     		str	r3, [r7, #20]
 828 006e 05E0     		b	.L35
 829              	.L34:
 846:FreeRTOS/Source/tasks.c **** 					}
 847:FreeRTOS/Source/tasks.c **** 				}
 848:FreeRTOS/Source/tasks.c **** 				else if( pxTask == NULL )
 830              		.loc 1 848 0
 831 0070 7B68     		ldr	r3, [r7, #4]
 832 0072 002B     		cmp	r3, #0
 833 0074 02D1     		bne	.L35
 849:FreeRTOS/Source/tasks.c **** 				{
 850:FreeRTOS/Source/tasks.c **** 					/* Setting our own priority down means there may now be another
 851:FreeRTOS/Source/tasks.c **** 					task of higher priority that is ready to execute. */
 852:FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 834              		.loc 1 852 0
 835 0076 4FF00103 		mov	r3, #1
 836 007a 7B61     		str	r3, [r7, #20]
 837              	.L35:
 853:FreeRTOS/Source/tasks.c **** 				}
 854:FreeRTOS/Source/tasks.c **** 
 855:FreeRTOS/Source/tasks.c **** 
 856:FreeRTOS/Source/tasks.c **** 
 857:FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
 858:FreeRTOS/Source/tasks.c **** 				{
 859:FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
 860:FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
 861:FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 838              		.loc 1 861 0
 839 007c 3B69     		ldr	r3, [r7, #16]
 840 007e 5A6C     		ldr	r2, [r3, #68]
 841 0080 3B69     		ldr	r3, [r7, #16]
 842 0082 DB6A     		ldr	r3, [r3, #44]
 843 0084 9A42     		cmp	r2, r3
 844 0086 02D1     		bne	.L36
 862:FreeRTOS/Source/tasks.c **** 					{
 863:FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 845              		.loc 1 863 0
 846 0088 3B69     		ldr	r3, [r7, #16]
 847 008a 3A68     		ldr	r2, [r7, #0]
 848 008c DA62     		str	r2, [r3, #44]
 849              	.L36:
 864:FreeRTOS/Source/tasks.c **** 					}
 865:FreeRTOS/Source/tasks.c **** 
 866:FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
 867:FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 850              		.loc 1 867 0
 851 008e 3B69     		ldr	r3, [r7, #16]
 852 0090 3A68     		ldr	r2, [r7, #0]
 853 0092 5A64     		str	r2, [r3, #68]
 868:FreeRTOS/Source/tasks.c **** 				}
 869:FreeRTOS/Source/tasks.c **** 				#else
 870:FreeRTOS/Source/tasks.c **** 				{
 871:FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
 872:FreeRTOS/Source/tasks.c **** 				}
 873:FreeRTOS/Source/tasks.c **** 				#endif
 874:FreeRTOS/Source/tasks.c **** 
 875:FreeRTOS/Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) 
 854              		.loc 1 875 0
 855 0094 3B68     		ldr	r3, [r7, #0]
 856 0096 C3F10502 		rsb	r2, r3, #5
 857 009a 3B69     		ldr	r3, [r7, #16]
 858 009c 9A61     		str	r2, [r3, #24]
 876:FreeRTOS/Source/tasks.c **** 
 877:FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
 878:FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
 879:FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
 880:FreeRTOS/Source/tasks.c **** 				in the queue appropriate to its new priority. */
 881:FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericLis
 859              		.loc 1 881 0
 860 009e 3B69     		ldr	r3, [r7, #16]
 861 00a0 5969     		ldr	r1, [r3, #20]
 862 00a2 FA68     		ldr	r2, [r7, #12]
 863 00a4 1346     		mov	r3, r2
 864 00a6 4FEA8303 		lsl	r3, r3, #2
 865 00aa 9B18     		adds	r3, r3, r2
 866 00ac 4FEA8303 		lsl	r3, r3, #2
 867 00b0 1A46     		mov	r2, r3
 868 00b2 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 869 00b6 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 870 00ba D318     		adds	r3, r2, r3
 871 00bc 9942     		cmp	r1, r3
 872 00be 2AD1     		bne	.L37
 882:FreeRTOS/Source/tasks.c **** 				{
 883:FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
 884:FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
 885:FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
 886:FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 873              		.loc 1 886 0
 874 00c0 3B69     		ldr	r3, [r7, #16]
 875 00c2 03F10403 		add	r3, r3, #4
 876 00c6 1846     		mov	r0, r3
 877 00c8 FFF7FEFF 		bl	vListRemove
 887:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 878              		.loc 1 887 0
 879 00cc 3B69     		ldr	r3, [r7, #16]
 880 00ce DA6A     		ldr	r2, [r3, #44]
 881 00d0 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 882 00d4 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 883 00d8 1B68     		ldr	r3, [r3, #0]
 884 00da 9A42     		cmp	r2, r3
 885 00dc 06D9     		bls	.L38
 886              		.loc 1 887 0 is_stmt 0 discriminator 1
 887 00de 3B69     		ldr	r3, [r7, #16]
 888 00e0 DA6A     		ldr	r2, [r3, #44]
 889 00e2 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 890 00e6 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 891 00ea 1A60     		str	r2, [r3, #0]
 892              	.L38:
 893              		.loc 1 887 0 discriminator 2
 894 00ec 3B69     		ldr	r3, [r7, #16]
 895 00ee DA6A     		ldr	r2, [r3, #44]
 896 00f0 1346     		mov	r3, r2
 897 00f2 4FEA8303 		lsl	r3, r3, #2
 898 00f6 9B18     		adds	r3, r3, r2
 899 00f8 4FEA8303 		lsl	r3, r3, #2
 900 00fc 1A46     		mov	r2, r3
 901 00fe 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 902 0102 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 903 0106 D218     		adds	r2, r2, r3
 904 0108 3B69     		ldr	r3, [r7, #16]
 905 010a 03F10403 		add	r3, r3, #4
 906 010e 1046     		mov	r0, r2
 907 0110 1946     		mov	r1, r3
 908 0112 FFF7FEFF 		bl	vListInsertEnd
 909              	.L37:
 888:FreeRTOS/Source/tasks.c **** 				}
 889:FreeRTOS/Source/tasks.c **** 
 890:FreeRTOS/Source/tasks.c **** 				if( xYieldRequired == pdTRUE )
 910              		.loc 1 890 0 is_stmt 1
 911 0116 7B69     		ldr	r3, [r7, #20]
 912 0118 012B     		cmp	r3, #1
 913 011a 01D1     		bne	.L33
 891:FreeRTOS/Source/tasks.c **** 				{
 892:FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 914              		.loc 1 892 0
 915 011c FFF7FEFF 		bl	vPortYieldFromISR
 916              	.L33:
 893:FreeRTOS/Source/tasks.c **** 				}
 894:FreeRTOS/Source/tasks.c **** 			}
 895:FreeRTOS/Source/tasks.c **** 		}
 896:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 917              		.loc 1 896 0
 918 0120 FFF7FEFF 		bl	vPortExitCritical
 897:FreeRTOS/Source/tasks.c **** 	}
 919              		.loc 1 897 0
 920 0124 07F11807 		add	r7, r7, #24
 921 0128 BD46     		mov	sp, r7
 922 012a 80BD     		pop	{r7, pc}
 923              		.cfi_endproc
 924              	.LFE115:
 926              		.section	.text.vTaskSuspend,"ax",%progbits
 927              		.align	2
 928              		.global	vTaskSuspend
 929              		.thumb
 930              		.thumb_func
 932              	vTaskSuspend:
 933              	.LFB116:
 898:FreeRTOS/Source/tasks.c **** 
 899:FreeRTOS/Source/tasks.c **** #endif
 900:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 901:FreeRTOS/Source/tasks.c **** 
 902:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 903:FreeRTOS/Source/tasks.c **** 
 904:FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
 905:FreeRTOS/Source/tasks.c **** 	{
 934              		.loc 1 905 0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 16
 937              		@ frame_needed = 1, uses_anonymous_args = 0
 938 0000 80B5     		push	{r7, lr}
 939              	.LCFI18:
 940              		.cfi_def_cfa_offset 8
 941              		.cfi_offset 14, -4
 942              		.cfi_offset 7, -8
 943 0002 84B0     		sub	sp, sp, #16
 944              	.LCFI19:
 945              		.cfi_def_cfa_offset 24
 946 0004 00AF     		add	r7, sp, #0
 947              	.LCFI20:
 948              		.cfi_def_cfa_register 7
 949 0006 7860     		str	r0, [r7, #4]
 906:FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 907:FreeRTOS/Source/tasks.c **** 
 908:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 950              		.loc 1 908 0
 951 0008 FFF7FEFF 		bl	vPortEnterCritical
 909:FreeRTOS/Source/tasks.c **** 		{
 910:FreeRTOS/Source/tasks.c **** 			/* Ensure a yield is performed if the current task is being
 911:FreeRTOS/Source/tasks.c **** 			suspended. */
 912:FreeRTOS/Source/tasks.c **** 			if( pxTaskToSuspend == pxCurrentTCB )
 952              		.loc 1 912 0
 953 000c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 954 0010 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 955 0014 1B68     		ldr	r3, [r3, #0]
 956 0016 7A68     		ldr	r2, [r7, #4]
 957 0018 9A42     		cmp	r2, r3
 958 001a 02D1     		bne	.L40
 913:FreeRTOS/Source/tasks.c **** 			{
 914:FreeRTOS/Source/tasks.c **** 				pxTaskToSuspend = NULL;
 959              		.loc 1 914 0
 960 001c 4FF00003 		mov	r3, #0
 961 0020 7B60     		str	r3, [r7, #4]
 962              	.L40:
 915:FreeRTOS/Source/tasks.c **** 			}
 916:FreeRTOS/Source/tasks.c **** 
 917:FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are suspending ourselves. */
 918:FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
 963              		.loc 1 918 0
 964 0022 7B68     		ldr	r3, [r7, #4]
 965 0024 002B     		cmp	r3, #0
 966 0026 05D1     		bne	.L41
 967              		.loc 1 918 0 is_stmt 0 discriminator 1
 968 0028 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 969 002c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 970 0030 1B68     		ldr	r3, [r3, #0]
 971 0032 00E0     		b	.L42
 972              	.L41:
 973              		.loc 1 918 0 discriminator 2
 974 0034 7B68     		ldr	r3, [r7, #4]
 975              	.L42:
 976              		.loc 1 918 0 discriminator 3
 977 0036 FB60     		str	r3, [r7, #12]
 919:FreeRTOS/Source/tasks.c **** 
 920:FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
 921:FreeRTOS/Source/tasks.c **** 
 922:FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the	suspended list. */
 923:FreeRTOS/Source/tasks.c **** 			vListRemove( &( pxTCB->xGenericListItem ) );
 978              		.loc 1 923 0 is_stmt 1 discriminator 3
 979 0038 FB68     		ldr	r3, [r7, #12]
 980 003a 03F10403 		add	r3, r3, #4
 981 003e 1846     		mov	r0, r3
 982 0040 FFF7FEFF 		bl	vListRemove
 924:FreeRTOS/Source/tasks.c **** 
 925:FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
 926:FreeRTOS/Source/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer != NULL )
 983              		.loc 1 926 0 discriminator 3
 984 0044 FB68     		ldr	r3, [r7, #12]
 985 0046 9B6A     		ldr	r3, [r3, #40]
 986 0048 002B     		cmp	r3, #0
 987 004a 05D0     		beq	.L43
 927:FreeRTOS/Source/tasks.c **** 			{
 928:FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xEventListItem ) );
 988              		.loc 1 928 0
 989 004c FB68     		ldr	r3, [r7, #12]
 990 004e 03F11803 		add	r3, r3, #24
 991 0052 1846     		mov	r0, r3
 992 0054 FFF7FEFF 		bl	vListRemove
 993              	.L43:
 929:FreeRTOS/Source/tasks.c **** 			}
 930:FreeRTOS/Source/tasks.c **** 
 931:FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 994              		.loc 1 931 0
 995 0058 FB68     		ldr	r3, [r7, #12]
 996 005a 03F10403 		add	r3, r3, #4
 997 005e 40F20000 		movw	r0, #:lower16:xSuspendedTaskList
 998 0062 C0F20000 		movt	r0, #:upper16:xSuspendedTaskList
 999 0066 1946     		mov	r1, r3
 1000 0068 FFF7FEFF 		bl	vListInsertEnd
 932:FreeRTOS/Source/tasks.c **** 		}
 933:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1001              		.loc 1 933 0
 1002 006c FFF7FEFF 		bl	vPortExitCritical
 934:FreeRTOS/Source/tasks.c **** 
 935:FreeRTOS/Source/tasks.c **** 		if( ( void * ) pxTaskToSuspend == NULL )
 1003              		.loc 1 935 0
 1004 0070 7B68     		ldr	r3, [r7, #4]
 1005 0072 002B     		cmp	r3, #0
 1006 0074 1FD1     		bne	.L39
 936:FreeRTOS/Source/tasks.c **** 		{
 937:FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1007              		.loc 1 937 0
 1008 0076 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 1009 007a C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 1010 007e 1B68     		ldr	r3, [r3, #0]
 1011 0080 002B     		cmp	r3, #0
 1012 0082 02D0     		beq	.L45
 938:FreeRTOS/Source/tasks.c **** 			{
 939:FreeRTOS/Source/tasks.c **** 				/* We have just suspended the current task. */
 940:FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1013              		.loc 1 940 0
 1014 0084 FFF7FEFF 		bl	vPortYieldFromISR
 1015 0088 15E0     		b	.L39
 1016              	.L45:
 941:FreeRTOS/Source/tasks.c **** 			}
 942:FreeRTOS/Source/tasks.c **** 			else
 943:FreeRTOS/Source/tasks.c **** 			{
 944:FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
 945:FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
 946:FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
 947:FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 1017              		.loc 1 947 0
 1018 008a 40F20003 		movw	r3, #:lower16:xSuspendedTaskList
 1019 008e C0F20003 		movt	r3, #:upper16:xSuspendedTaskList
 1020 0092 1A68     		ldr	r2, [r3, #0]
 1021 0094 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 1022 0098 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 1023 009c 1B68     		ldr	r3, [r3, #0]
 1024 009e 9A42     		cmp	r2, r3
 1025 00a0 07D1     		bne	.L46
 948:FreeRTOS/Source/tasks.c **** 				{
 949:FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
 950:FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
 951:FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
 952:FreeRTOS/Source/tasks.c **** 					is. */
 953:FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
 1026              		.loc 1 953 0
 1027 00a2 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1028 00a6 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1029 00aa 4FF00002 		mov	r2, #0
 1030 00ae 1A60     		str	r2, [r3, #0]
 1031 00b0 01E0     		b	.L39
 1032              	.L46:
 954:FreeRTOS/Source/tasks.c **** 				}
 955:FreeRTOS/Source/tasks.c **** 				else
 956:FreeRTOS/Source/tasks.c **** 				{
 957:FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
 1033              		.loc 1 957 0
 1034 00b2 FFF7FEFF 		bl	vTaskSwitchContext
 1035              	.L39:
 958:FreeRTOS/Source/tasks.c **** 				}
 959:FreeRTOS/Source/tasks.c **** 			}
 960:FreeRTOS/Source/tasks.c **** 		}
 961:FreeRTOS/Source/tasks.c **** 	}
 1036              		.loc 1 961 0
 1037 00b6 07F11007 		add	r7, r7, #16
 1038 00ba BD46     		mov	sp, r7
 1039 00bc 80BD     		pop	{r7, pc}
 1040              		.cfi_endproc
 1041              	.LFE116:
 1043 00be 00BF     		.section	.text.xTaskIsTaskSuspended,"ax",%progbits
 1044              		.align	2
 1045              		.global	xTaskIsTaskSuspended
 1046              		.thumb
 1047              		.thumb_func
 1049              	xTaskIsTaskSuspended:
 1050              	.LFB117:
 962:FreeRTOS/Source/tasks.c **** 
 963:FreeRTOS/Source/tasks.c **** #endif
 964:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 965:FreeRTOS/Source/tasks.c **** 
 966:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 967:FreeRTOS/Source/tasks.c **** 
 968:FreeRTOS/Source/tasks.c **** 	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
 969:FreeRTOS/Source/tasks.c **** 	{
 1051              		.loc 1 969 0
 1052              		.cfi_startproc
 1053              		@ args = 0, pretend = 0, frame = 16
 1054              		@ frame_needed = 1, uses_anonymous_args = 0
 1055              		@ link register save eliminated.
 1056 0000 80B4     		push	{r7}
 1057              	.LCFI21:
 1058              		.cfi_def_cfa_offset 4
 1059              		.cfi_offset 7, -4
 1060 0002 85B0     		sub	sp, sp, #20
 1061              	.LCFI22:
 1062              		.cfi_def_cfa_offset 24
 1063 0004 00AF     		add	r7, sp, #0
 1064              	.LCFI23:
 1065              		.cfi_def_cfa_register 7
 1066 0006 7860     		str	r0, [r7, #4]
 970:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn = pdFALSE;
 1067              		.loc 1 970 0
 1068 0008 4FF00003 		mov	r3, #0
 1069 000c FB60     		str	r3, [r7, #12]
 971:FreeRTOS/Source/tasks.c **** 	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 1070              		.loc 1 971 0
 1071 000e 7B68     		ldr	r3, [r7, #4]
 1072 0010 BB60     		str	r3, [r7, #8]
 972:FreeRTOS/Source/tasks.c **** 
 973:FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
 974:FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 975:FreeRTOS/Source/tasks.c **** 
 976:FreeRTOS/Source/tasks.c **** 		/* Is the task we are attempting to resume actually in the
 977:FreeRTOS/Source/tasks.c **** 		suspended list? */
 978:FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 1073              		.loc 1 978 0
 1074 0012 BB68     		ldr	r3, [r7, #8]
 1075 0014 5A69     		ldr	r2, [r3, #20]
 1076 0016 40F20003 		movw	r3, #:lower16:xSuspendedTaskList
 1077 001a C0F20003 		movt	r3, #:upper16:xSuspendedTaskList
 1078 001e 9A42     		cmp	r2, r3
 1079 0020 0ED1     		bne	.L48
 979:FreeRTOS/Source/tasks.c **** 		{
 980:FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
 981:FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
 1080              		.loc 1 981 0
 1081 0022 BB68     		ldr	r3, [r7, #8]
 1082 0024 9A6A     		ldr	r2, [r3, #40]
 1083 0026 40F20003 		movw	r3, #:lower16:xPendingReadyList
 1084 002a C0F20003 		movt	r3, #:upper16:xPendingReadyList
 1085 002e 9A42     		cmp	r2, r3
 1086 0030 06D0     		beq	.L48
 982:FreeRTOS/Source/tasks.c **** 			{
 983:FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the
 984:FreeRTOS/Source/tasks.c **** 				Suspended state?  It is possible to be in the suspended
 985:FreeRTOS/Source/tasks.c **** 				list because it is blocked on a task with no timeout
 986:FreeRTOS/Source/tasks.c **** 				specified. */
 987:FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
 1087              		.loc 1 987 0
 1088 0032 BB68     		ldr	r3, [r7, #8]
 1089 0034 9B6A     		ldr	r3, [r3, #40]
 1090 0036 002B     		cmp	r3, #0
 1091 0038 02D1     		bne	.L48
 988:FreeRTOS/Source/tasks.c **** 				{
 989:FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 1092              		.loc 1 989 0
 1093 003a 4FF00103 		mov	r3, #1
 1094 003e FB60     		str	r3, [r7, #12]
 1095              	.L48:
 990:FreeRTOS/Source/tasks.c **** 				}
 991:FreeRTOS/Source/tasks.c **** 			}
 992:FreeRTOS/Source/tasks.c **** 		}
 993:FreeRTOS/Source/tasks.c **** 
 994:FreeRTOS/Source/tasks.c **** 		return xReturn;
 1096              		.loc 1 994 0
 1097 0040 FB68     		ldr	r3, [r7, #12]
 995:FreeRTOS/Source/tasks.c **** 	}
 1098              		.loc 1 995 0
 1099 0042 1846     		mov	r0, r3
 1100 0044 07F11407 		add	r7, r7, #20
 1101 0048 BD46     		mov	sp, r7
 1102 004a 80BC     		pop	{r7}
 1103 004c 7047     		bx	lr
 1104              		.cfi_endproc
 1105              	.LFE117:
 1107 004e 00BF     		.section	.text.vTaskResume,"ax",%progbits
 1108              		.align	2
 1109              		.global	vTaskResume
 1110              		.thumb
 1111              		.thumb_func
 1113              	vTaskResume:
 1114              	.LFB118:
 996:FreeRTOS/Source/tasks.c **** 
 997:FreeRTOS/Source/tasks.c **** #endif
 998:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 999:FreeRTOS/Source/tasks.c **** 
1000:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1001:FreeRTOS/Source/tasks.c **** 
1002:FreeRTOS/Source/tasks.c **** 	void vTaskResume( xTaskHandle pxTaskToResume )
1003:FreeRTOS/Source/tasks.c **** 	{
 1115              		.loc 1 1003 0
 1116              		.cfi_startproc
 1117              		@ args = 0, pretend = 0, frame = 16
 1118              		@ frame_needed = 1, uses_anonymous_args = 0
 1119 0000 80B5     		push	{r7, lr}
 1120              	.LCFI24:
 1121              		.cfi_def_cfa_offset 8
 1122              		.cfi_offset 14, -4
 1123              		.cfi_offset 7, -8
 1124 0002 84B0     		sub	sp, sp, #16
 1125              	.LCFI25:
 1126              		.cfi_def_cfa_offset 24
 1127 0004 00AF     		add	r7, sp, #0
 1128              	.LCFI26:
 1129              		.cfi_def_cfa_register 7
 1130 0006 7860     		str	r0, [r7, #4]
1004:FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1005:FreeRTOS/Source/tasks.c **** 
1006:FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1007:FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskToResume );
1008:FreeRTOS/Source/tasks.c **** 
1009:FreeRTOS/Source/tasks.c **** 		/* Remove the task from whichever list it is currently in, and place
1010:FreeRTOS/Source/tasks.c **** 		it in the ready list. */
1011:FreeRTOS/Source/tasks.c **** 		pxTCB = ( tskTCB * ) pxTaskToResume;
 1131              		.loc 1 1011 0
 1132 0008 7B68     		ldr	r3, [r7, #4]
 1133 000a FB60     		str	r3, [r7, #12]
1012:FreeRTOS/Source/tasks.c **** 
1013:FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1014:FreeRTOS/Source/tasks.c **** 		currently executing task. */
1015:FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1134              		.loc 1 1015 0
 1135 000c FB68     		ldr	r3, [r7, #12]
 1136 000e 002B     		cmp	r3, #0
 1137 0010 48D0     		beq	.L49
 1138              		.loc 1 1015 0 is_stmt 0 discriminator 1
 1139 0012 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1140 0016 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1141 001a 1B68     		ldr	r3, [r3, #0]
 1142 001c FA68     		ldr	r2, [r7, #12]
 1143 001e 9A42     		cmp	r2, r3
 1144 0020 40D0     		beq	.L49
1016:FreeRTOS/Source/tasks.c **** 		{
1017:FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1145              		.loc 1 1017 0 is_stmt 1
 1146 0022 FFF7FEFF 		bl	vPortEnterCritical
1018:FreeRTOS/Source/tasks.c **** 			{
1019:FreeRTOS/Source/tasks.c **** 				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1147              		.loc 1 1019 0
 1148 0026 F868     		ldr	r0, [r7, #12]
 1149 0028 FFF7FEFF 		bl	xTaskIsTaskSuspended
 1150 002c 0346     		mov	r3, r0
 1151 002e 012B     		cmp	r3, #1
 1152 0030 36D1     		bne	.L51
1020:FreeRTOS/Source/tasks.c **** 				{
1021:FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1022:FreeRTOS/Source/tasks.c **** 
1023:FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1024:FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1025:FreeRTOS/Source/tasks.c **** 					vListRemove(  &( pxTCB->xGenericListItem ) );
 1153              		.loc 1 1025 0
 1154 0032 FB68     		ldr	r3, [r7, #12]
 1155 0034 03F10403 		add	r3, r3, #4
 1156 0038 1846     		mov	r0, r3
 1157 003a FFF7FEFF 		bl	vListRemove
1026:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 1158              		.loc 1 1026 0
 1159 003e FB68     		ldr	r3, [r7, #12]
 1160 0040 DA6A     		ldr	r2, [r3, #44]
 1161 0042 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1162 0046 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1163 004a 1B68     		ldr	r3, [r3, #0]
 1164 004c 9A42     		cmp	r2, r3
 1165 004e 06D9     		bls	.L52
 1166              		.loc 1 1026 0 is_stmt 0 discriminator 1
 1167 0050 FB68     		ldr	r3, [r7, #12]
 1168 0052 DA6A     		ldr	r2, [r3, #44]
 1169 0054 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1170 0058 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1171 005c 1A60     		str	r2, [r3, #0]
 1172              	.L52:
 1173              		.loc 1 1026 0 discriminator 2
 1174 005e FB68     		ldr	r3, [r7, #12]
 1175 0060 DA6A     		ldr	r2, [r3, #44]
 1176 0062 1346     		mov	r3, r2
 1177 0064 4FEA8303 		lsl	r3, r3, #2
 1178 0068 9B18     		adds	r3, r3, r2
 1179 006a 4FEA8303 		lsl	r3, r3, #2
 1180 006e 1A46     		mov	r2, r3
 1181 0070 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 1182 0074 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 1183 0078 D218     		adds	r2, r2, r3
 1184 007a FB68     		ldr	r3, [r7, #12]
 1185 007c 03F10403 		add	r3, r3, #4
 1186 0080 1046     		mov	r0, r2
 1187 0082 1946     		mov	r1, r3
 1188 0084 FFF7FEFF 		bl	vListInsertEnd
1027:FreeRTOS/Source/tasks.c **** 
1028:FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1029:FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1189              		.loc 1 1029 0 is_stmt 1 discriminator 2
 1190 0088 FB68     		ldr	r3, [r7, #12]
 1191 008a DA6A     		ldr	r2, [r3, #44]
 1192 008c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1193 0090 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1194 0094 1B68     		ldr	r3, [r3, #0]
 1195 0096 DB6A     		ldr	r3, [r3, #44]
 1196 0098 9A42     		cmp	r2, r3
 1197 009a 01D3     		bcc	.L51
1030:FreeRTOS/Source/tasks.c **** 					{
1031:FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run, but
1032:FreeRTOS/Source/tasks.c **** 						will leave the lists in the correct state for the next yield. */
1033:FreeRTOS/Source/tasks.c **** 						portYIELD_WITHIN_API();
 1198              		.loc 1 1033 0
 1199 009c FFF7FEFF 		bl	vPortYieldFromISR
 1200              	.L51:
1034:FreeRTOS/Source/tasks.c **** 					}
1035:FreeRTOS/Source/tasks.c **** 				}
1036:FreeRTOS/Source/tasks.c **** 			}
1037:FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1201              		.loc 1 1037 0
 1202 00a0 FFF7FEFF 		bl	vPortExitCritical
 1203              	.L49:
1038:FreeRTOS/Source/tasks.c **** 		}
1039:FreeRTOS/Source/tasks.c **** 	}
 1204              		.loc 1 1039 0
 1205 00a4 07F11007 		add	r7, r7, #16
 1206 00a8 BD46     		mov	sp, r7
 1207 00aa 80BD     		pop	{r7, pc}
 1208              		.cfi_endproc
 1209              	.LFE118:
 1211              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1212              		.align	2
 1213              		.global	xTaskResumeFromISR
 1214              		.thumb
 1215              		.thumb_func
 1217              	xTaskResumeFromISR:
 1218              	.LFB119:
1040:FreeRTOS/Source/tasks.c **** 
1041:FreeRTOS/Source/tasks.c **** #endif
1042:FreeRTOS/Source/tasks.c **** 
1043:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1044:FreeRTOS/Source/tasks.c **** 
1045:FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1046:FreeRTOS/Source/tasks.c **** 
1047:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
1048:FreeRTOS/Source/tasks.c **** 	{
 1219              		.loc 1 1048 0
 1220              		.cfi_startproc
 1221              		@ args = 0, pretend = 0, frame = 16
 1222              		@ frame_needed = 1, uses_anonymous_args = 0
 1223 0000 80B5     		push	{r7, lr}
 1224              	.LCFI27:
 1225              		.cfi_def_cfa_offset 8
 1226              		.cfi_offset 14, -4
 1227              		.cfi_offset 7, -8
 1228 0002 84B0     		sub	sp, sp, #16
 1229              	.LCFI28:
 1230              		.cfi_def_cfa_offset 24
 1231 0004 00AF     		add	r7, sp, #0
 1232              	.LCFI29:
 1233              		.cfi_def_cfa_register 7
 1234 0006 7860     		str	r0, [r7, #4]
1049:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 1235              		.loc 1 1049 0
 1236 0008 4FF00003 		mov	r3, #0
 1237 000c FB60     		str	r3, [r7, #12]
1050:FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1051:FreeRTOS/Source/tasks.c **** 
1052:FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskToResume );
1053:FreeRTOS/Source/tasks.c **** 
1054:FreeRTOS/Source/tasks.c **** 		pxTCB = ( tskTCB * ) pxTaskToResume;
 1238              		.loc 1 1054 0
 1239 000e 7B68     		ldr	r3, [r7, #4]
 1240 0010 BB60     		str	r3, [r7, #8]
1055:FreeRTOS/Source/tasks.c **** 
1056:FreeRTOS/Source/tasks.c **** 		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1241              		.loc 1 1056 0
 1242 0012 B868     		ldr	r0, [r7, #8]
 1243 0014 FFF7FEFF 		bl	xTaskIsTaskSuspended
 1244 0018 0346     		mov	r3, r0
 1245 001a 012B     		cmp	r3, #1
 1246 001c 49D1     		bne	.L54
1057:FreeRTOS/Source/tasks.c **** 		{
1058:FreeRTOS/Source/tasks.c **** 			traceTASK_RESUME_FROM_ISR( pxTCB );
1059:FreeRTOS/Source/tasks.c **** 
1060:FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1247              		.loc 1 1060 0
 1248 001e 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1249 0022 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1250 0026 1B68     		ldr	r3, [r3, #0]
 1251 0028 002B     		cmp	r3, #0
 1252 002a 38D1     		bne	.L55
1061:FreeRTOS/Source/tasks.c **** 			{
1062:FreeRTOS/Source/tasks.c **** 				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
 1253              		.loc 1 1062 0
 1254 002c BB68     		ldr	r3, [r7, #8]
 1255 002e DA6A     		ldr	r2, [r3, #44]
 1256 0030 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1257 0034 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1258 0038 1B68     		ldr	r3, [r3, #0]
 1259 003a DB6A     		ldr	r3, [r3, #44]
 1260 003c 9A42     		cmp	r2, r3
 1261 003e 34BF     		ite	cc
 1262 0040 0023     		movcc	r3, #0
 1263 0042 0123     		movcs	r3, #1
 1264 0044 FB60     		str	r3, [r7, #12]
1063:FreeRTOS/Source/tasks.c **** 				vListRemove(  &( pxTCB->xGenericListItem ) );
 1265              		.loc 1 1063 0
 1266 0046 BB68     		ldr	r3, [r7, #8]
 1267 0048 03F10403 		add	r3, r3, #4
 1268 004c 1846     		mov	r0, r3
 1269 004e FFF7FEFF 		bl	vListRemove
1064:FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 1270              		.loc 1 1064 0
 1271 0052 BB68     		ldr	r3, [r7, #8]
 1272 0054 DA6A     		ldr	r2, [r3, #44]
 1273 0056 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1274 005a C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1275 005e 1B68     		ldr	r3, [r3, #0]
 1276 0060 9A42     		cmp	r2, r3
 1277 0062 06D9     		bls	.L56
 1278              		.loc 1 1064 0 is_stmt 0 discriminator 1
 1279 0064 BB68     		ldr	r3, [r7, #8]
 1280 0066 DA6A     		ldr	r2, [r3, #44]
 1281 0068 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1282 006c C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1283 0070 1A60     		str	r2, [r3, #0]
 1284              	.L56:
 1285              		.loc 1 1064 0 discriminator 2
 1286 0072 BB68     		ldr	r3, [r7, #8]
 1287 0074 DA6A     		ldr	r2, [r3, #44]
 1288 0076 1346     		mov	r3, r2
 1289 0078 4FEA8303 		lsl	r3, r3, #2
 1290 007c 9B18     		adds	r3, r3, r2
 1291 007e 4FEA8303 		lsl	r3, r3, #2
 1292 0082 1A46     		mov	r2, r3
 1293 0084 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 1294 0088 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 1295 008c D218     		adds	r2, r2, r3
 1296 008e BB68     		ldr	r3, [r7, #8]
 1297 0090 03F10403 		add	r3, r3, #4
 1298 0094 1046     		mov	r0, r2
 1299 0096 1946     		mov	r1, r3
 1300 0098 FFF7FEFF 		bl	vListInsertEnd
 1301 009c 09E0     		b	.L54
 1302              	.L55:
1065:FreeRTOS/Source/tasks.c **** 			}
1066:FreeRTOS/Source/tasks.c **** 			else
1067:FreeRTOS/Source/tasks.c **** 			{
1068:FreeRTOS/Source/tasks.c **** 				/* We cannot access the delayed or ready lists, so will hold this
1069:FreeRTOS/Source/tasks.c **** 				task pending until the scheduler is resumed, at which point a
1070:FreeRTOS/Source/tasks.c **** 				yield will be performed if necessary. */
1071:FreeRTOS/Source/tasks.c **** 				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1303              		.loc 1 1071 0 is_stmt 1
 1304 009e BB68     		ldr	r3, [r7, #8]
 1305 00a0 03F11803 		add	r3, r3, #24
 1306 00a4 40F20000 		movw	r0, #:lower16:xPendingReadyList
 1307 00a8 C0F20000 		movt	r0, #:upper16:xPendingReadyList
 1308 00ac 1946     		mov	r1, r3
 1309 00ae FFF7FEFF 		bl	vListInsertEnd
 1310              	.L54:
1072:FreeRTOS/Source/tasks.c **** 			}
1073:FreeRTOS/Source/tasks.c **** 		}
1074:FreeRTOS/Source/tasks.c **** 
1075:FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 1311              		.loc 1 1075 0
 1312 00b2 FB68     		ldr	r3, [r7, #12]
1076:FreeRTOS/Source/tasks.c **** 	}
 1313              		.loc 1 1076 0
 1314 00b4 1846     		mov	r0, r3
 1315 00b6 07F11007 		add	r7, r7, #16
 1316 00ba BD46     		mov	sp, r7
 1317 00bc 80BD     		pop	{r7, pc}
 1318              		.cfi_endproc
 1319              	.LFE119:
 1321 00be 00BF     		.section	.rodata
 1322              		.align	2
 1323              	.LC0:
 1324 0000 49444C45 		.ascii	"IDLE\000"
 1324      00
 1325              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1326              		.align	2
 1327              		.global	vTaskStartScheduler
 1328              		.thumb
 1329              		.thumb_func
 1331              	vTaskStartScheduler:
 1332              	.LFB120:
1077:FreeRTOS/Source/tasks.c **** 
1078:FreeRTOS/Source/tasks.c **** #endif
1079:FreeRTOS/Source/tasks.c **** 
1080:FreeRTOS/Source/tasks.c **** 
1081:FreeRTOS/Source/tasks.c **** 
1082:FreeRTOS/Source/tasks.c **** 
1083:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
1084:FreeRTOS/Source/tasks.c ****  * PUBLIC SCHEDULER CONTROL documented in task.h
1085:FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
1086:FreeRTOS/Source/tasks.c **** 
1087:FreeRTOS/Source/tasks.c **** 
1088:FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1089:FreeRTOS/Source/tasks.c **** {
 1333              		.loc 1 1089 0
 1334              		.cfi_startproc
 1335              		@ args = 0, pretend = 0, frame = 8
 1336              		@ frame_needed = 1, uses_anonymous_args = 0
 1337 0000 80B5     		push	{r7, lr}
 1338              	.LCFI30:
 1339              		.cfi_def_cfa_offset 8
 1340              		.cfi_offset 14, -4
 1341              		.cfi_offset 7, -8
 1342 0002 86B0     		sub	sp, sp, #24
 1343              	.LCFI31:
 1344              		.cfi_def_cfa_offset 32
 1345 0004 04AF     		add	r7, sp, #16
 1346              	.LCFI32:
 1347              		.cfi_def_cfa 7, 16
1090:FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
1091:FreeRTOS/Source/tasks.c **** 
1092:FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1093:FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1094:FreeRTOS/Source/tasks.c **** 	{
1095:FreeRTOS/Source/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1096:FreeRTOS/Source/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1097:FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
 1348              		.loc 1 1097 0
 1349 0006 4FF00003 		mov	r3, #0
 1350 000a 0093     		str	r3, [sp, #0]
 1351 000c 40F20003 		movw	r3, #:lower16:xIdleTaskHandle
 1352 0010 C0F20003 		movt	r3, #:upper16:xIdleTaskHandle
 1353 0014 0193     		str	r3, [sp, #4]
 1354 0016 4FF00003 		mov	r3, #0
 1355 001a 0293     		str	r3, [sp, #8]
 1356 001c 4FF00003 		mov	r3, #0
 1357 0020 0393     		str	r3, [sp, #12]
 1358 0022 40F20000 		movw	r0, #:lower16:prvIdleTask
 1359 0026 C0F20000 		movt	r0, #:upper16:prvIdleTask
 1360 002a 40F20001 		movw	r1, #:lower16:.LC0
 1361 002e C0F20001 		movt	r1, #:upper16:.LC0
 1362 0032 4FF48072 		mov	r2, #256
 1363 0036 4FF00003 		mov	r3, #0
 1364 003a FFF7FEFF 		bl	xTaskGenericCreate
 1365 003e 7860     		str	r0, [r7, #4]
1098:FreeRTOS/Source/tasks.c **** 	}
1099:FreeRTOS/Source/tasks.c **** 	#else
1100:FreeRTOS/Source/tasks.c **** 	{
1101:FreeRTOS/Source/tasks.c **** 		/* Create the idle task without storing its handle. */
1102:FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
1103:FreeRTOS/Source/tasks.c **** 	}
1104:FreeRTOS/Source/tasks.c **** 	#endif
1105:FreeRTOS/Source/tasks.c **** 
1106:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1107:FreeRTOS/Source/tasks.c **** 	{
1108:FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
 1366              		.loc 1 1108 0
 1367 0040 7B68     		ldr	r3, [r7, #4]
 1368 0042 012B     		cmp	r3, #1
 1369 0044 02D1     		bne	.L58
1109:FreeRTOS/Source/tasks.c **** 		{
1110:FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 1370              		.loc 1 1110 0
 1371 0046 FFF7FEFF 		bl	xTimerCreateTimerTask
 1372 004a 7860     		str	r0, [r7, #4]
 1373              	.L58:
1111:FreeRTOS/Source/tasks.c **** 		}
1112:FreeRTOS/Source/tasks.c **** 	}
1113:FreeRTOS/Source/tasks.c **** 	#endif
1114:FreeRTOS/Source/tasks.c **** 
1115:FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 1374              		.loc 1 1115 0
 1375 004c 7B68     		ldr	r3, [r7, #4]
 1376 004e 012B     		cmp	r3, #1
 1377 0050 15D1     		bne	.L57
1116:FreeRTOS/Source/tasks.c **** 	{
1117:FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1118:FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1119:FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1120:FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1121:FreeRTOS/Source/tasks.c **** 		starts to run.
1122:FreeRTOS/Source/tasks.c **** 
1123:FreeRTOS/Source/tasks.c **** 		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
1124:FreeRTOS/Source/tasks.c **** 		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
1125:FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
 1378              		.loc 1 1125 0
 1379              	@ 1125 "FreeRTOS/Source/tasks.c" 1
 1380 0052 4FF0BF00 			mov r0, #191								
 1381 0056 80F31188 		msr basepri, r0							
 1382              	
 1383              	@ 0 "" 2
1126:FreeRTOS/Source/tasks.c **** 
1127:FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1384              		.loc 1 1127 0
 1385              		.thumb
 1386 005a 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 1387 005e C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 1388 0062 4FF00102 		mov	r2, #1
 1389 0066 1A60     		str	r2, [r3, #0]
1128:FreeRTOS/Source/tasks.c **** 		xTickCount = ( portTickType ) 0U;
 1390              		.loc 1 1128 0
 1391 0068 40F20003 		movw	r3, #:lower16:xTickCount
 1392 006c C0F20003 		movt	r3, #:upper16:xTickCount
 1393 0070 4FF00002 		mov	r2, #0
 1394 0074 1A60     		str	r2, [r3, #0]
1129:FreeRTOS/Source/tasks.c **** 
1130:FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1131:FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1132:FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1133:FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 1395              		.loc 1 1133 0
 1396 0076 FFF7FEFF 		bl	init_us_timer
1134:FreeRTOS/Source/tasks.c **** 		
1135:FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1136:FreeRTOS/Source/tasks.c **** 		portable interface. */
1137:FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 1397              		.loc 1 1137 0
 1398 007a FFF7FEFF 		bl	xPortStartScheduler
 1399              	.L57:
1138:FreeRTOS/Source/tasks.c **** 		{
1139:FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1140:FreeRTOS/Source/tasks.c **** 			function will not return. */
1141:FreeRTOS/Source/tasks.c **** 		}
1142:FreeRTOS/Source/tasks.c **** 		else
1143:FreeRTOS/Source/tasks.c **** 		{
1144:FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1145:FreeRTOS/Source/tasks.c **** 		}
1146:FreeRTOS/Source/tasks.c **** 	}
1147:FreeRTOS/Source/tasks.c **** 
1148:FreeRTOS/Source/tasks.c **** 	/* This line will only be reached if the kernel could not be started. */
1149:FreeRTOS/Source/tasks.c **** 	configASSERT( xReturn );
1150:FreeRTOS/Source/tasks.c **** }
 1400              		.loc 1 1150 0
 1401 007e 07F10807 		add	r7, r7, #8
 1402 0082 BD46     		mov	sp, r7
 1403 0084 80BD     		pop	{r7, pc}
 1404              		.cfi_endproc
 1405              	.LFE120:
 1407 0086 00BF     		.section	.text.vTaskEndScheduler,"ax",%progbits
 1408              		.align	2
 1409              		.global	vTaskEndScheduler
 1410              		.thumb
 1411              		.thumb_func
 1413              	vTaskEndScheduler:
 1414              	.LFB121:
1151:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1152:FreeRTOS/Source/tasks.c **** 
1153:FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1154:FreeRTOS/Source/tasks.c **** {
 1415              		.loc 1 1154 0
 1416              		.cfi_startproc
 1417              		@ args = 0, pretend = 0, frame = 0
 1418              		@ frame_needed = 1, uses_anonymous_args = 0
 1419 0000 80B5     		push	{r7, lr}
 1420              	.LCFI33:
 1421              		.cfi_def_cfa_offset 8
 1422              		.cfi_offset 14, -4
 1423              		.cfi_offset 7, -8
 1424 0002 00AF     		add	r7, sp, #0
 1425              	.LCFI34:
 1426              		.cfi_def_cfa_register 7
1155:FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1156:FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1157:FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1158:FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
 1427              		.loc 1 1158 0
 1428              	@ 1158 "FreeRTOS/Source/tasks.c" 1
 1429 0004 4FF0BF00 			mov r0, #191								
 1430 0008 80F31188 		msr basepri, r0							
 1431              	
 1432              	@ 0 "" 2
1159:FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1433              		.loc 1 1159 0
 1434              		.thumb
 1435 000c 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 1436 0010 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 1437 0014 4FF00002 		mov	r2, #0
 1438 0018 1A60     		str	r2, [r3, #0]
1160:FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1439              		.loc 1 1160 0
 1440 001a FFF7FEFF 		bl	vPortEndScheduler
1161:FreeRTOS/Source/tasks.c **** }
 1441              		.loc 1 1161 0
 1442 001e 80BD     		pop	{r7, pc}
 1443              		.cfi_endproc
 1444              	.LFE121:
 1446              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1447              		.align	2
 1448              		.global	vTaskSuspendAll
 1449              		.thumb
 1450              		.thumb_func
 1452              	vTaskSuspendAll:
 1453              	.LFB122:
1162:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1163:FreeRTOS/Source/tasks.c **** 
1164:FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1165:FreeRTOS/Source/tasks.c **** {
 1454              		.loc 1 1165 0
 1455              		.cfi_startproc
 1456              		@ args = 0, pretend = 0, frame = 0
 1457              		@ frame_needed = 1, uses_anonymous_args = 0
 1458              		@ link register save eliminated.
 1459 0000 80B4     		push	{r7}
 1460              	.LCFI35:
 1461              		.cfi_def_cfa_offset 4
 1462              		.cfi_offset 7, -4
 1463 0002 00AF     		add	r7, sp, #0
 1464              	.LCFI36:
 1465              		.cfi_def_cfa_register 7
1166:FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1167:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE. */
1168:FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 1466              		.loc 1 1168 0
 1467 0004 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1468 0008 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1469 000c 1B68     		ldr	r3, [r3, #0]
 1470 000e 03F10102 		add	r2, r3, #1
 1471 0012 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1472 0016 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1473 001a 1A60     		str	r2, [r3, #0]
1169:FreeRTOS/Source/tasks.c **** }
 1474              		.loc 1 1169 0
 1475 001c BD46     		mov	sp, r7
 1476 001e 80BC     		pop	{r7}
 1477 0020 7047     		bx	lr
 1478              		.cfi_endproc
 1479              	.LFE122:
 1481 0022 00BF     		.section	.text.xTaskResumeAll,"ax",%progbits
 1482              		.align	2
 1483              		.global	xTaskResumeAll
 1484              		.thumb
 1485              		.thumb_func
 1487              	xTaskResumeAll:
 1488              	.LFB123:
1170:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1171:FreeRTOS/Source/tasks.c **** 
1172:FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskResumeAll( void )
1173:FreeRTOS/Source/tasks.c **** {
 1489              		.loc 1 1173 0
 1490              		.cfi_startproc
 1491              		@ args = 0, pretend = 0, frame = 8
 1492              		@ frame_needed = 1, uses_anonymous_args = 0
 1493 0000 90B5     		push	{r4, r7, lr}
 1494              	.LCFI37:
 1495              		.cfi_def_cfa_offset 12
 1496              		.cfi_offset 14, -4
 1497              		.cfi_offset 7, -8
 1498              		.cfi_offset 4, -12
 1499 0002 83B0     		sub	sp, sp, #12
 1500              	.LCFI38:
 1501              		.cfi_def_cfa_offset 24
 1502 0004 00AF     		add	r7, sp, #0
 1503              	.LCFI39:
 1504              		.cfi_def_cfa_register 7
1174:FreeRTOS/Source/tasks.c **** register tskTCB *pxTCB;
1175:FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 1505              		.loc 1 1175 0
 1506 0006 4FF00003 		mov	r3, #0
 1507 000a 7B60     		str	r3, [r7, #4]
1176:FreeRTOS/Source/tasks.c **** 
1177:FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1178:FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
1179:FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
1180:FreeRTOS/Source/tasks.c **** 
1181:FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1182:FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1183:FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1184:FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1185:FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
1186:FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 1508              		.loc 1 1186 0
 1509 000c FFF7FEFF 		bl	vPortEnterCritical
1187:FreeRTOS/Source/tasks.c **** 	{
1188:FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 1510              		.loc 1 1188 0
 1511 0010 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1512 0014 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1513 0018 1B68     		ldr	r3, [r3, #0]
 1514 001a 03F1FF32 		add	r2, r3, #-1
 1515 001e 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1516 0022 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1517 0026 1A60     		str	r2, [r3, #0]
1189:FreeRTOS/Source/tasks.c **** 
1190:FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1518              		.loc 1 1190 0
 1519 0028 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1520 002c C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1521 0030 1B68     		ldr	r3, [r3, #0]
 1522 0032 002B     		cmp	r3, #0
 1523 0034 40F08580 		bne	.L63
1191:FreeRTOS/Source/tasks.c **** 		{
1192:FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 1524              		.loc 1 1192 0
 1525 0038 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 1526 003c C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 1527 0040 1B68     		ldr	r3, [r3, #0]
 1528 0042 002B     		cmp	r3, #0
 1529 0044 7DD0     		beq	.L63
 1530              	.LBB3:
1193:FreeRTOS/Source/tasks.c **** 			{
1194:FreeRTOS/Source/tasks.c **** 				portBASE_TYPE xYieldRequired = pdFALSE;
 1531              		.loc 1 1194 0
 1532 0046 4FF00003 		mov	r3, #0
 1533 004a 3B60     		str	r3, [r7, #0]
1195:FreeRTOS/Source/tasks.c **** 
1196:FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
1197:FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
1198:FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 1534              		.loc 1 1198 0
 1535 004c 3CE0     		b	.L64
 1536              	.L66:
1199:FreeRTOS/Source/tasks.c **** 				{
1200:FreeRTOS/Source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 1537              		.loc 1 1200 0
 1538 004e 40F20003 		movw	r3, #:lower16:xPendingReadyList
 1539 0052 C0F20003 		movt	r3, #:upper16:xPendingReadyList
 1540 0056 DB68     		ldr	r3, [r3, #12]
 1541 0058 DC68     		ldr	r4, [r3, #12]
1201:FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xEventListItem ) );
 1542              		.loc 1 1201 0
 1543 005a 04F11803 		add	r3, r4, #24
 1544 005e 1846     		mov	r0, r3
 1545 0060 FFF7FEFF 		bl	vListRemove
1202:FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 1546              		.loc 1 1202 0
 1547 0064 04F10403 		add	r3, r4, #4
 1548 0068 1846     		mov	r0, r3
 1549 006a FFF7FEFF 		bl	vListRemove
1203:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 1550              		.loc 1 1203 0
 1551 006e E26A     		ldr	r2, [r4, #44]
 1552 0070 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1553 0074 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1554 0078 1B68     		ldr	r3, [r3, #0]
 1555 007a 9A42     		cmp	r2, r3
 1556 007c 05D9     		bls	.L65
 1557              		.loc 1 1203 0 is_stmt 0 discriminator 1
 1558 007e E26A     		ldr	r2, [r4, #44]
 1559 0080 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1560 0084 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1561 0088 1A60     		str	r2, [r3, #0]
 1562              	.L65:
 1563              		.loc 1 1203 0 discriminator 2
 1564 008a E26A     		ldr	r2, [r4, #44]
 1565 008c 1346     		mov	r3, r2
 1566 008e 4FEA8303 		lsl	r3, r3, #2
 1567 0092 9B18     		adds	r3, r3, r2
 1568 0094 4FEA8303 		lsl	r3, r3, #2
 1569 0098 1A46     		mov	r2, r3
 1570 009a 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 1571 009e C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 1572 00a2 D218     		adds	r2, r2, r3
 1573 00a4 04F10403 		add	r3, r4, #4
 1574 00a8 1046     		mov	r0, r2
 1575 00aa 1946     		mov	r1, r3
 1576 00ac FFF7FEFF 		bl	vListInsertEnd
1204:FreeRTOS/Source/tasks.c **** 
1205:FreeRTOS/Source/tasks.c **** 					/* If we have moved a task that has a priority higher than
1206:FreeRTOS/Source/tasks.c **** 					the current task then we should yield. */
1207:FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1577              		.loc 1 1207 0 is_stmt 1 discriminator 2
 1578 00b0 E26A     		ldr	r2, [r4, #44]
 1579 00b2 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1580 00b6 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1581 00ba 1B68     		ldr	r3, [r3, #0]
 1582 00bc DB6A     		ldr	r3, [r3, #44]
 1583 00be 9A42     		cmp	r2, r3
 1584 00c0 02D3     		bcc	.L64
1208:FreeRTOS/Source/tasks.c **** 					{
1209:FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1585              		.loc 1 1209 0
 1586 00c2 4FF00103 		mov	r3, #1
 1587 00c6 3B60     		str	r3, [r7, #0]
 1588              	.L64:
1198:FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 1589              		.loc 1 1198 0 discriminator 1
 1590 00c8 40F20003 		movw	r3, #:lower16:xPendingReadyList
 1591 00cc C0F20003 		movt	r3, #:upper16:xPendingReadyList
 1592 00d0 1B68     		ldr	r3, [r3, #0]
 1593 00d2 002B     		cmp	r3, #0
 1594 00d4 BBD1     		bne	.L66
1210:FreeRTOS/Source/tasks.c **** 					}
1211:FreeRTOS/Source/tasks.c **** 				}
1212:FreeRTOS/Source/tasks.c **** 
1213:FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1214:FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does not
1215:FreeRTOS/Source/tasks.c **** 				slip, and that any delayed tasks are resumed at the correct time. */
1216:FreeRTOS/Source/tasks.c **** 				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1595              		.loc 1 1216 0
 1596 00d6 40F20003 		movw	r3, #:lower16:uxMissedTicks
 1597 00da C0F20003 		movt	r3, #:upper16:uxMissedTicks
 1598 00de 1B68     		ldr	r3, [r3, #0]
 1599 00e0 002B     		cmp	r3, #0
 1600 00e2 18D0     		beq	.L67
1217:FreeRTOS/Source/tasks.c **** 				{
1218:FreeRTOS/Source/tasks.c **** 					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1601              		.loc 1 1218 0
 1602 00e4 0DE0     		b	.L68
 1603              	.L69:
1219:FreeRTOS/Source/tasks.c **** 					{
1220:FreeRTOS/Source/tasks.c **** 						vTaskIncrementTick();
 1604              		.loc 1 1220 0
 1605 00e6 FFF7FEFF 		bl	vTaskIncrementTick
1221:FreeRTOS/Source/tasks.c **** 						--uxMissedTicks;
 1606              		.loc 1 1221 0
 1607 00ea 40F20003 		movw	r3, #:lower16:uxMissedTicks
 1608 00ee C0F20003 		movt	r3, #:upper16:uxMissedTicks
 1609 00f2 1B68     		ldr	r3, [r3, #0]
 1610 00f4 03F1FF32 		add	r2, r3, #-1
 1611 00f8 40F20003 		movw	r3, #:lower16:uxMissedTicks
 1612 00fc C0F20003 		movt	r3, #:upper16:uxMissedTicks
 1613 0100 1A60     		str	r2, [r3, #0]
 1614              	.L68:
1218:FreeRTOS/Source/tasks.c **** 					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1615              		.loc 1 1218 0 discriminator 1
 1616 0102 40F20003 		movw	r3, #:lower16:uxMissedTicks
 1617 0106 C0F20003 		movt	r3, #:upper16:uxMissedTicks
 1618 010a 1B68     		ldr	r3, [r3, #0]
 1619 010c 002B     		cmp	r3, #0
 1620 010e EAD1     		bne	.L69
1222:FreeRTOS/Source/tasks.c **** 					}
1223:FreeRTOS/Source/tasks.c **** 
1224:FreeRTOS/Source/tasks.c **** 					/* As we have processed some ticks it is appropriate to yield
1225:FreeRTOS/Source/tasks.c **** 					to ensure the highest priority task that is ready to run is
1226:FreeRTOS/Source/tasks.c **** 					the task actually running. */
1227:FreeRTOS/Source/tasks.c **** 					#if configUSE_PREEMPTION == 1
1228:FreeRTOS/Source/tasks.c **** 					{
1229:FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1621              		.loc 1 1229 0
 1622 0110 4FF00103 		mov	r3, #1
 1623 0114 3B60     		str	r3, [r7, #0]
 1624              	.L67:
1230:FreeRTOS/Source/tasks.c **** 					}
1231:FreeRTOS/Source/tasks.c **** 					#endif
1232:FreeRTOS/Source/tasks.c **** 				}
1233:FreeRTOS/Source/tasks.c **** 
1234:FreeRTOS/Source/tasks.c **** 				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 1625              		.loc 1 1234 0
 1626 0116 3B68     		ldr	r3, [r7, #0]
 1627 0118 012B     		cmp	r3, #1
 1628 011a 06D0     		beq	.L70
 1629              		.loc 1 1234 0 is_stmt 0 discriminator 1
 1630 011c 40F20003 		movw	r3, #:lower16:xMissedYield
 1631 0120 C0F20003 		movt	r3, #:upper16:xMissedYield
 1632 0124 1B68     		ldr	r3, [r3, #0]
 1633 0126 012B     		cmp	r3, #1
 1634 0128 0BD1     		bne	.L63
 1635              	.L70:
1235:FreeRTOS/Source/tasks.c **** 				{
1236:FreeRTOS/Source/tasks.c **** 					xAlreadyYielded = pdTRUE;
 1636              		.loc 1 1236 0 is_stmt 1
 1637 012a 4FF00103 		mov	r3, #1
 1638 012e 7B60     		str	r3, [r7, #4]
1237:FreeRTOS/Source/tasks.c **** 					xMissedYield = pdFALSE;
 1639              		.loc 1 1237 0
 1640 0130 40F20003 		movw	r3, #:lower16:xMissedYield
 1641 0134 C0F20003 		movt	r3, #:upper16:xMissedYield
 1642 0138 4FF00002 		mov	r2, #0
 1643 013c 1A60     		str	r2, [r3, #0]
1238:FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 1644              		.loc 1 1238 0
 1645 013e FFF7FEFF 		bl	vPortYieldFromISR
 1646              	.L63:
 1647              	.LBE3:
1239:FreeRTOS/Source/tasks.c **** 				}
1240:FreeRTOS/Source/tasks.c **** 			}
1241:FreeRTOS/Source/tasks.c **** 		}
1242:FreeRTOS/Source/tasks.c **** 	}
1243:FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 1648              		.loc 1 1243 0
 1649 0142 FFF7FEFF 		bl	vPortExitCritical
1244:FreeRTOS/Source/tasks.c **** 
1245:FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 1650              		.loc 1 1245 0
 1651 0146 7B68     		ldr	r3, [r7, #4]
1246:FreeRTOS/Source/tasks.c **** }
 1652              		.loc 1 1246 0
 1653 0148 1846     		mov	r0, r3
 1654 014a 07F10C07 		add	r7, r7, #12
 1655 014e BD46     		mov	sp, r7
 1656 0150 90BD     		pop	{r4, r7, pc}
 1657              		.cfi_endproc
 1658              	.LFE123:
 1660 0152 00BF     		.section	.text.xTaskGetTickCount,"ax",%progbits
 1661              		.align	2
 1662              		.global	xTaskGetTickCount
 1663              		.thumb
 1664              		.thumb_func
 1666              	xTaskGetTickCount:
 1667              	.LFB124:
1247:FreeRTOS/Source/tasks.c **** 
1248:FreeRTOS/Source/tasks.c **** 
1249:FreeRTOS/Source/tasks.c **** 
1250:FreeRTOS/Source/tasks.c **** 
1251:FreeRTOS/Source/tasks.c **** 
1252:FreeRTOS/Source/tasks.c **** 
1253:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
1254:FreeRTOS/Source/tasks.c ****  * PUBLIC TASK UTILITIES documented in task.h
1255:FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
1256:FreeRTOS/Source/tasks.c **** 
1257:FreeRTOS/Source/tasks.c **** 
1258:FreeRTOS/Source/tasks.c **** 
1259:FreeRTOS/Source/tasks.c **** portTickType xTaskGetTickCount( void )
1260:FreeRTOS/Source/tasks.c **** {
 1668              		.loc 1 1260 0
 1669              		.cfi_startproc
 1670              		@ args = 0, pretend = 0, frame = 8
 1671              		@ frame_needed = 1, uses_anonymous_args = 0
 1672 0000 80B5     		push	{r7, lr}
 1673              	.LCFI40:
 1674              		.cfi_def_cfa_offset 8
 1675              		.cfi_offset 14, -4
 1676              		.cfi_offset 7, -8
 1677 0002 82B0     		sub	sp, sp, #8
 1678              	.LCFI41:
 1679              		.cfi_def_cfa_offset 16
 1680 0004 00AF     		add	r7, sp, #0
 1681              	.LCFI42:
 1682              		.cfi_def_cfa_register 7
1261:FreeRTOS/Source/tasks.c **** portTickType xTicks;
1262:FreeRTOS/Source/tasks.c **** 
1263:FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1264:FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 1683              		.loc 1 1264 0
 1684 0006 FFF7FEFF 		bl	vPortEnterCritical
1265:FreeRTOS/Source/tasks.c **** 	{
1266:FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 1685              		.loc 1 1266 0
 1686 000a 40F20003 		movw	r3, #:lower16:xTickCount
 1687 000e C0F20003 		movt	r3, #:upper16:xTickCount
 1688 0012 1B68     		ldr	r3, [r3, #0]
 1689 0014 7B60     		str	r3, [r7, #4]
1267:FreeRTOS/Source/tasks.c **** 	}
1268:FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 1690              		.loc 1 1268 0
 1691 0016 FFF7FEFF 		bl	vPortExitCritical
1269:FreeRTOS/Source/tasks.c **** 
1270:FreeRTOS/Source/tasks.c **** 	return xTicks;
 1692              		.loc 1 1270 0
 1693 001a 7B68     		ldr	r3, [r7, #4]
1271:FreeRTOS/Source/tasks.c **** }
 1694              		.loc 1 1271 0
 1695 001c 1846     		mov	r0, r3
 1696 001e 07F10807 		add	r7, r7, #8
 1697 0022 BD46     		mov	sp, r7
 1698 0024 80BD     		pop	{r7, pc}
 1699              		.cfi_endproc
 1700              	.LFE124:
 1702 0026 00BF     		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1703              		.align	2
 1704              		.global	xTaskGetTickCountFromISR
 1705              		.thumb
 1706              		.thumb_func
 1708              	xTaskGetTickCountFromISR:
 1709              	.LFB125:
1272:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1273:FreeRTOS/Source/tasks.c **** 
1274:FreeRTOS/Source/tasks.c **** portTickType xTaskGetTickCountFromISR( void )
1275:FreeRTOS/Source/tasks.c **** {
 1710              		.loc 1 1275 0
 1711              		.cfi_startproc
 1712              		@ args = 0, pretend = 0, frame = 8
 1713              		@ frame_needed = 1, uses_anonymous_args = 0
 1714              		@ link register save eliminated.
 1715 0000 80B4     		push	{r7}
 1716              	.LCFI43:
 1717              		.cfi_def_cfa_offset 4
 1718              		.cfi_offset 7, -4
 1719 0002 83B0     		sub	sp, sp, #12
 1720              	.LCFI44:
 1721              		.cfi_def_cfa_offset 16
 1722 0004 00AF     		add	r7, sp, #0
 1723              	.LCFI45:
 1724              		.cfi_def_cfa_register 7
1276:FreeRTOS/Source/tasks.c **** portTickType xReturn;
1277:FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
1278:FreeRTOS/Source/tasks.c **** 
1279:FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1725              		.loc 1 1279 0
 1726 0006 4FF00003 		mov	r3, #0
 1727 000a 7B60     		str	r3, [r7, #4]
 1728              	@ 1279 "FreeRTOS/Source/tasks.c" 1
 1729 000c 4FF0BF00 			mov r0, #191								
 1730 0010 80F31188 		msr basepri, r0							
 1731              	
 1732              	@ 0 "" 2
1280:FreeRTOS/Source/tasks.c **** 	xReturn = xTickCount;
 1733              		.loc 1 1280 0
 1734              		.thumb
 1735 0014 40F20003 		movw	r3, #:lower16:xTickCount
 1736 0018 C0F20003 		movt	r3, #:upper16:xTickCount
 1737 001c 1B68     		ldr	r3, [r3, #0]
 1738 001e 3B60     		str	r3, [r7, #0]
1281:FreeRTOS/Source/tasks.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1739              		.loc 1 1281 0
 1740              	@ 1281 "FreeRTOS/Source/tasks.c" 1
 1741 0020 4FF00000 			mov r0, #0					
 1742 0024 80F31188 		msr basepri, r0				
 1743              	
 1744              	@ 0 "" 2
1282:FreeRTOS/Source/tasks.c **** 
1283:FreeRTOS/Source/tasks.c **** 	return xReturn;
 1745              		.loc 1 1283 0
 1746              		.thumb
 1747 0028 3B68     		ldr	r3, [r7, #0]
1284:FreeRTOS/Source/tasks.c **** }
 1748              		.loc 1 1284 0
 1749 002a 1846     		mov	r0, r3
 1750 002c 07F10C07 		add	r7, r7, #12
 1751 0030 BD46     		mov	sp, r7
 1752 0032 80BC     		pop	{r7}
 1753 0034 7047     		bx	lr
 1754              		.cfi_endproc
 1755              	.LFE125:
 1757 0036 00BF     		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1758              		.align	2
 1759              		.global	uxTaskGetNumberOfTasks
 1760              		.thumb
 1761              		.thumb_func
 1763              	uxTaskGetNumberOfTasks:
 1764              	.LFB126:
1285:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1286:FreeRTOS/Source/tasks.c **** 
1287:FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
1288:FreeRTOS/Source/tasks.c **** {
 1765              		.loc 1 1288 0
 1766              		.cfi_startproc
 1767              		@ args = 0, pretend = 0, frame = 0
 1768              		@ frame_needed = 1, uses_anonymous_args = 0
 1769              		@ link register save eliminated.
 1770 0000 80B4     		push	{r7}
 1771              	.LCFI46:
 1772              		.cfi_def_cfa_offset 4
 1773              		.cfi_offset 7, -4
 1774 0002 00AF     		add	r7, sp, #0
 1775              	.LCFI47:
 1776              		.cfi_def_cfa_register 7
1289:FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
1290:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE. */
1291:FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 1777              		.loc 1 1291 0
 1778 0004 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 1779 0008 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 1780 000c 1B68     		ldr	r3, [r3, #0]
1292:FreeRTOS/Source/tasks.c **** }
 1781              		.loc 1 1292 0
 1782 000e 1846     		mov	r0, r3
 1783 0010 BD46     		mov	sp, r7
 1784 0012 80BC     		pop	{r7}
 1785 0014 7047     		bx	lr
 1786              		.cfi_endproc
 1787              	.LFE126:
 1789 0016 00BF     		.section	.rodata
 1790 0005 000000   		.align	2
 1791              	.LC1:
 1792 0008 0D0A00   		.ascii	"\015\012\000"
 1793              		.section	.text.vTaskGetRunTimeStats,"ax",%progbits
 1794              		.align	2
 1795              		.global	vTaskGetRunTimeStats
 1796              		.thumb
 1797              		.thumb_func
 1799              	vTaskGetRunTimeStats:
 1800              	.LFB127:
1293:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1294:FreeRTOS/Source/tasks.c **** 
1295:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1296:FreeRTOS/Source/tasks.c **** 
1297:FreeRTOS/Source/tasks.c **** 	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
1298:FreeRTOS/Source/tasks.c **** 	{
1299:FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1300:FreeRTOS/Source/tasks.c **** 
1301:FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1302:FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1303:FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1304:FreeRTOS/Source/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1305:FreeRTOS/Source/tasks.c **** 	}
1306:FreeRTOS/Source/tasks.c **** 
1307:FreeRTOS/Source/tasks.c **** #endif
1308:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1309:FreeRTOS/Source/tasks.c **** 
1310:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1311:FreeRTOS/Source/tasks.c **** 
1312:FreeRTOS/Source/tasks.c **** 	void vTaskList( signed char *pcWriteBuffer )
1313:FreeRTOS/Source/tasks.c **** 	{
1314:FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1315:FreeRTOS/Source/tasks.c **** 
1316:FreeRTOS/Source/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1317:FreeRTOS/Source/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1318:FreeRTOS/Source/tasks.c **** 
1319:FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1320:FreeRTOS/Source/tasks.c **** 		{
1321:FreeRTOS/Source/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB and
1322:FreeRTOS/Source/tasks.c **** 			report the task name, state and stack high water mark. */
1323:FreeRTOS/Source/tasks.c **** 
1324:FreeRTOS/Source/tasks.c **** 			*pcWriteBuffer = ( signed char ) 0x00;
1325:FreeRTOS/Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
1326:FreeRTOS/Source/tasks.c **** 
1327:FreeRTOS/Source/tasks.c **** 			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
1328:FreeRTOS/Source/tasks.c **** 
1329:FreeRTOS/Source/tasks.c **** 			do
1330:FreeRTOS/Source/tasks.c **** 			{
1331:FreeRTOS/Source/tasks.c **** 				uxQueue--;
1332:FreeRTOS/Source/tasks.c **** 
1333:FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
1334:FreeRTOS/Source/tasks.c **** 				{
1335:FreeRTOS/Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tsk
1336:FreeRTOS/Source/tasks.c **** 				}
1337:FreeRTOS/Source/tasks.c **** 			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
1338:FreeRTOS/Source/tasks.c **** 
1339:FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
1340:FreeRTOS/Source/tasks.c **** 			{
1341:FreeRTOS/Source/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
1342:FreeRTOS/Source/tasks.c **** 			}
1343:FreeRTOS/Source/tasks.c **** 
1344:FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
1345:FreeRTOS/Source/tasks.c **** 			{
1346:FreeRTOS/Source/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_C
1347:FreeRTOS/Source/tasks.c **** 			}
1348:FreeRTOS/Source/tasks.c **** 
1349:FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
1350:FreeRTOS/Source/tasks.c **** 			{
1351:FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
1352:FreeRTOS/Source/tasks.c **** 				{
1353:FreeRTOS/Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, &xTasksWaitingTermination, tskDELETED_CHAR );
1354:FreeRTOS/Source/tasks.c **** 				}
1355:FreeRTOS/Source/tasks.c **** 			}
1356:FreeRTOS/Source/tasks.c **** 			#endif
1357:FreeRTOS/Source/tasks.c **** 
1358:FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1359:FreeRTOS/Source/tasks.c **** 			{
1360:FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
1361:FreeRTOS/Source/tasks.c **** 				{
1362:FreeRTOS/Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, &xSuspendedTaskList, tskSUSPENDED_CHAR );
1363:FreeRTOS/Source/tasks.c **** 				}
1364:FreeRTOS/Source/tasks.c **** 			}
1365:FreeRTOS/Source/tasks.c **** 			#endif
1366:FreeRTOS/Source/tasks.c **** 		}
1367:FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
1368:FreeRTOS/Source/tasks.c **** 	}
1369:FreeRTOS/Source/tasks.c **** 
1370:FreeRTOS/Source/tasks.c **** #endif
1371:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1372:FreeRTOS/Source/tasks.c **** 
1373:FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
1374:FreeRTOS/Source/tasks.c **** 
1375:FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( signed char *pcWriteBuffer )
1376:FreeRTOS/Source/tasks.c **** 	{
 1801              		.loc 1 1376 0
 1802              		.cfi_startproc
 1803              		@ args = 0, pretend = 0, frame = 16
 1804              		@ frame_needed = 1, uses_anonymous_args = 0
 1805 0000 90B5     		push	{r4, r7, lr}
 1806              	.LCFI48:
 1807              		.cfi_def_cfa_offset 12
 1808              		.cfi_offset 14, -4
 1809              		.cfi_offset 7, -8
 1810              		.cfi_offset 4, -12
 1811 0002 85B0     		sub	sp, sp, #20
 1812              	.LCFI49:
 1813              		.cfi_def_cfa_offset 32
 1814 0004 00AF     		add	r7, sp, #0
 1815              	.LCFI50:
 1816              		.cfi_def_cfa_register 7
 1817 0006 7860     		str	r0, [r7, #4]
1377:FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1378:FreeRTOS/Source/tasks.c **** 	unsigned long ulTotalRunTime;
1379:FreeRTOS/Source/tasks.c **** 
1380:FreeRTOS/Source/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1381:FreeRTOS/Source/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1382:FreeRTOS/Source/tasks.c **** 
1383:FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 1818              		.loc 1 1383 0
 1819 0008 FFF7FEFF 		bl	vTaskSuspendAll
1384:FreeRTOS/Source/tasks.c **** 		{
1385:FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1386:FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
1387:FreeRTOS/Source/tasks.c **** 			#else
1388:FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 1820              		.loc 1 1388 0
 1821 000c FFF7FEFF 		bl	get_us_time
 1822 0010 0246     		mov	r2, r0
 1823 0012 0B46     		mov	r3, r1
 1824 0014 1346     		mov	r3, r2
 1825 0016 BB60     		str	r3, [r7, #8]
1389:FreeRTOS/Source/tasks.c **** 			#endif
1390:FreeRTOS/Source/tasks.c **** 
1391:FreeRTOS/Source/tasks.c **** 			/* Divide ulTotalRunTime by 100 to make the percentage caluclations
1392:FreeRTOS/Source/tasks.c **** 			simpler in the prvGenerateRunTimeStatsForTasksInList() function. */
1393:FreeRTOS/Source/tasks.c **** 			ulTotalRunTime /= 100UL;
 1826              		.loc 1 1393 0
 1827 0018 BA68     		ldr	r2, [r7, #8]
 1828 001a 48F21F53 		movw	r3, #34079
 1829 001e C5F2EB13 		movt	r3, 20971
 1830 0022 A3FB0213 		umull	r1, r3, r3, r2
 1831 0026 4FEA5313 		lsr	r3, r3, #5
 1832 002a BB60     		str	r3, [r7, #8]
1394:FreeRTOS/Source/tasks.c **** 			
1395:FreeRTOS/Source/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB,
1396:FreeRTOS/Source/tasks.c **** 			generating a table of run timer percentages in the provided
1397:FreeRTOS/Source/tasks.c **** 			buffer. */
1398:FreeRTOS/Source/tasks.c **** 
1399:FreeRTOS/Source/tasks.c **** 			*pcWriteBuffer = ( signed char ) 0x00;
 1833              		.loc 1 1399 0
 1834 002c 7B68     		ldr	r3, [r7, #4]
 1835 002e 4FF00002 		mov	r2, #0
 1836 0032 1A70     		strb	r2, [r3, #0]
1400:FreeRTOS/Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
 1837              		.loc 1 1400 0
 1838 0034 7C68     		ldr	r4, [r7, #4]
 1839 0036 2046     		mov	r0, r4
 1840 0038 FFF7FEFF 		bl	strlen
 1841 003c 0346     		mov	r3, r0
 1842 003e E218     		adds	r2, r4, r3
 1843 0040 40F20003 		movw	r3, #:lower16:.LC1
 1844 0044 C0F20003 		movt	r3, #:upper16:.LC1
 1845 0048 1988     		ldrh	r1, [r3, #0]	@ unaligned
 1846 004a 9B78     		ldrb	r3, [r3, #2]
 1847 004c 1180     		strh	r1, [r2, #0]	@ unaligned
 1848 004e 9370     		strb	r3, [r2, #2]
1401:FreeRTOS/Source/tasks.c **** 
1402:FreeRTOS/Source/tasks.c **** 			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
 1849              		.loc 1 1402 0
 1850 0050 40F20003 		movw	r3, #:lower16:uxTopUsedPriority
 1851 0054 C0F20003 		movt	r3, #:upper16:uxTopUsedPriority
 1852 0058 1B68     		ldr	r3, [r3, #0]
 1853 005a 03F10103 		add	r3, r3, #1
 1854 005e FB60     		str	r3, [r7, #12]
 1855              	.L76:
1403:FreeRTOS/Source/tasks.c **** 
1404:FreeRTOS/Source/tasks.c **** 			do
1405:FreeRTOS/Source/tasks.c **** 			{
1406:FreeRTOS/Source/tasks.c **** 				uxQueue--;
 1856              		.loc 1 1406 0
 1857 0060 FB68     		ldr	r3, [r7, #12]
 1858 0062 03F1FF33 		add	r3, r3, #-1
 1859 0066 FB60     		str	r3, [r7, #12]
1407:FreeRTOS/Source/tasks.c **** 
1408:FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
 1860              		.loc 1 1408 0
 1861 0068 FA68     		ldr	r2, [r7, #12]
 1862 006a 1346     		mov	r3, r2
 1863 006c 4FEA8303 		lsl	r3, r3, #2
 1864 0070 9B18     		adds	r3, r3, r2
 1865 0072 4FEA8303 		lsl	r3, r3, #2
 1866 0076 1A46     		mov	r2, r3
 1867 0078 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 1868 007c C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 1869 0080 D318     		adds	r3, r2, r3
 1870 0082 1B68     		ldr	r3, [r3, #0]
 1871 0084 002B     		cmp	r3, #0
 1872 0086 13D0     		beq	.L75
1409:FreeRTOS/Source/tasks.c **** 				{
1410:FreeRTOS/Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueu
 1873              		.loc 1 1410 0
 1874 0088 FA68     		ldr	r2, [r7, #12]
 1875 008a 1346     		mov	r3, r2
 1876 008c 4FEA8303 		lsl	r3, r3, #2
 1877 0090 9B18     		adds	r3, r3, r2
 1878 0092 4FEA8303 		lsl	r3, r3, #2
 1879 0096 1A46     		mov	r2, r3
 1880 0098 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 1881 009c C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 1882 00a0 D318     		adds	r3, r2, r3
 1883 00a2 7868     		ldr	r0, [r7, #4]
 1884 00a4 1946     		mov	r1, r3
 1885 00a6 BA68     		ldr	r2, [r7, #8]
 1886 00a8 4FF05203 		mov	r3, #82
 1887 00ac FFF7FEFF 		bl	prvGenerateRunTimeStatsForTasksInList
 1888              	.L75:
1411:FreeRTOS/Source/tasks.c **** 				}
1412:FreeRTOS/Source/tasks.c **** 			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
 1889              		.loc 1 1412 0
 1890 00b0 FB68     		ldr	r3, [r7, #12]
 1891 00b2 002B     		cmp	r3, #0
 1892 00b4 D4D1     		bne	.L76
1413:FreeRTOS/Source/tasks.c **** 
1414:FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
 1893              		.loc 1 1414 0
 1894 00b6 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 1895 00ba C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 1896 00be 1B68     		ldr	r3, [r3, #0]
 1897 00c0 1B68     		ldr	r3, [r3, #0]
 1898 00c2 002B     		cmp	r3, #0
 1899 00c4 0BD0     		beq	.L77
1415:FreeRTOS/Source/tasks.c **** 			{
1416:FreeRTOS/Source/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, ulTotalRun
 1900              		.loc 1 1416 0
 1901 00c6 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 1902 00ca C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 1903 00ce 1B68     		ldr	r3, [r3, #0]
 1904 00d0 7868     		ldr	r0, [r7, #4]
 1905 00d2 1946     		mov	r1, r3
 1906 00d4 BA68     		ldr	r2, [r7, #8]
 1907 00d6 4FF04203 		mov	r3, #66
 1908 00da FFF7FEFF 		bl	prvGenerateRunTimeStatsForTasksInList
 1909              	.L77:
1417:FreeRTOS/Source/tasks.c **** 			}
1418:FreeRTOS/Source/tasks.c **** 
1419:FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
 1910              		.loc 1 1419 0
 1911 00de 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 1912 00e2 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 1913 00e6 1B68     		ldr	r3, [r3, #0]
 1914 00e8 1B68     		ldr	r3, [r3, #0]
 1915 00ea 002B     		cmp	r3, #0
 1916 00ec 0BD0     		beq	.L78
1420:FreeRTOS/Source/tasks.c **** 			{
1421:FreeRTOS/Source/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, ul
 1917              		.loc 1 1421 0
 1918 00ee 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 1919 00f2 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 1920 00f6 1B68     		ldr	r3, [r3, #0]
 1921 00f8 7868     		ldr	r0, [r7, #4]
 1922 00fa 1946     		mov	r1, r3
 1923 00fc BA68     		ldr	r2, [r7, #8]
 1924 00fe 4FF04203 		mov	r3, #66
 1925 0102 FFF7FEFF 		bl	prvGenerateRunTimeStatsForTasksInList
 1926              	.L78:
1422:FreeRTOS/Source/tasks.c **** 			}
1423:FreeRTOS/Source/tasks.c **** 
1424:FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1425:FreeRTOS/Source/tasks.c **** 			{
1426:FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
 1927              		.loc 1 1426 0
 1928 0106 40F20003 		movw	r3, #:lower16:xTasksWaitingTermination
 1929 010a C0F20003 		movt	r3, #:upper16:xTasksWaitingTermination
 1930 010e 1B68     		ldr	r3, [r3, #0]
 1931 0110 002B     		cmp	r3, #0
 1932 0112 09D0     		beq	.L79
1427:FreeRTOS/Source/tasks.c **** 				{
1428:FreeRTOS/Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xTasksWaitingTermination, ulTotalRunTim
 1933              		.loc 1 1428 0
 1934 0114 7868     		ldr	r0, [r7, #4]
 1935 0116 40F20001 		movw	r1, #:lower16:xTasksWaitingTermination
 1936 011a C0F20001 		movt	r1, #:upper16:xTasksWaitingTermination
 1937 011e BA68     		ldr	r2, [r7, #8]
 1938 0120 4FF04403 		mov	r3, #68
 1939 0124 FFF7FEFF 		bl	prvGenerateRunTimeStatsForTasksInList
 1940              	.L79:
1429:FreeRTOS/Source/tasks.c **** 				}
1430:FreeRTOS/Source/tasks.c **** 			}
1431:FreeRTOS/Source/tasks.c **** 			#endif
1432:FreeRTOS/Source/tasks.c **** 
1433:FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1434:FreeRTOS/Source/tasks.c **** 			{
1435:FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
 1941              		.loc 1 1435 0
 1942 0128 40F20003 		movw	r3, #:lower16:xSuspendedTaskList
 1943 012c C0F20003 		movt	r3, #:upper16:xSuspendedTaskList
 1944 0130 1B68     		ldr	r3, [r3, #0]
 1945 0132 002B     		cmp	r3, #0
 1946 0134 09D0     		beq	.L80
1436:FreeRTOS/Source/tasks.c **** 				{
1437:FreeRTOS/Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xSuspendedTaskList, ulTotalRunTime, tsk
 1947              		.loc 1 1437 0
 1948 0136 7868     		ldr	r0, [r7, #4]
 1949 0138 40F20001 		movw	r1, #:lower16:xSuspendedTaskList
 1950 013c C0F20001 		movt	r1, #:upper16:xSuspendedTaskList
 1951 0140 BA68     		ldr	r2, [r7, #8]
 1952 0142 4FF05303 		mov	r3, #83
 1953 0146 FFF7FEFF 		bl	prvGenerateRunTimeStatsForTasksInList
 1954              	.L80:
1438:FreeRTOS/Source/tasks.c **** 				}
1439:FreeRTOS/Source/tasks.c **** 			}
1440:FreeRTOS/Source/tasks.c **** 			#endif
1441:FreeRTOS/Source/tasks.c **** 		}
1442:FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
 1955              		.loc 1 1442 0
 1956 014a FFF7FEFF 		bl	xTaskResumeAll
1443:FreeRTOS/Source/tasks.c **** 	}
 1957              		.loc 1 1443 0
 1958 014e 07F11407 		add	r7, r7, #20
 1959 0152 BD46     		mov	sp, r7
 1960 0154 90BD     		pop	{r4, r7, pc}
 1961              		.cfi_endproc
 1962              	.LFE127:
 1964 0156 00BF     		.section	.text.xTaskGetIdleTaskHandle,"ax",%progbits
 1965              		.align	2
 1966              		.global	xTaskGetIdleTaskHandle
 1967              		.thumb
 1968              		.thumb_func
 1970              	xTaskGetIdleTaskHandle:
 1971              	.LFB128:
1444:FreeRTOS/Source/tasks.c **** 
1445:FreeRTOS/Source/tasks.c **** #endif
1446:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1447:FreeRTOS/Source/tasks.c **** 
1448:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1449:FreeRTOS/Source/tasks.c **** 
1450:FreeRTOS/Source/tasks.c **** 	void vTaskStartTrace( signed char * pcBuffer, unsigned long ulBufferSize )
1451:FreeRTOS/Source/tasks.c **** 	{
1452:FreeRTOS/Source/tasks.c **** 		configASSERT( pcBuffer );
1453:FreeRTOS/Source/tasks.c **** 		configASSERT( ulBufferSize );
1454:FreeRTOS/Source/tasks.c **** 
1455:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1456:FreeRTOS/Source/tasks.c **** 		{
1457:FreeRTOS/Source/tasks.c **** 			pcTraceBuffer = ( signed char * )pcBuffer;
1458:FreeRTOS/Source/tasks.c **** 			pcTraceBufferStart = pcBuffer;
1459:FreeRTOS/Source/tasks.c **** 			pcTraceBufferEnd = pcBuffer + ( ulBufferSize - tskSIZE_OF_EACH_TRACE_LINE );
1460:FreeRTOS/Source/tasks.c **** 			xTracing = pdTRUE;
1461:FreeRTOS/Source/tasks.c **** 		}
1462:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1463:FreeRTOS/Source/tasks.c **** 	}
1464:FreeRTOS/Source/tasks.c **** 
1465:FreeRTOS/Source/tasks.c **** #endif
1466:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1467:FreeRTOS/Source/tasks.c **** 
1468:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1469:FreeRTOS/Source/tasks.c **** 
1470:FreeRTOS/Source/tasks.c **** 	unsigned long ulTaskEndTrace( void )
1471:FreeRTOS/Source/tasks.c **** 	{
1472:FreeRTOS/Source/tasks.c **** 	unsigned long ulBufferLength;
1473:FreeRTOS/Source/tasks.c **** 
1474:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1475:FreeRTOS/Source/tasks.c **** 			xTracing = pdFALSE;
1476:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1477:FreeRTOS/Source/tasks.c **** 
1478:FreeRTOS/Source/tasks.c **** 		ulBufferLength = ( unsigned long ) ( pcTraceBuffer - pcTraceBufferStart );
1479:FreeRTOS/Source/tasks.c **** 
1480:FreeRTOS/Source/tasks.c **** 		return ulBufferLength;
1481:FreeRTOS/Source/tasks.c **** 	}
1482:FreeRTOS/Source/tasks.c **** 
1483:FreeRTOS/Source/tasks.c **** #endif
1484:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1485:FreeRTOS/Source/tasks.c **** 
1486:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1487:FreeRTOS/Source/tasks.c **** 
1488:FreeRTOS/Source/tasks.c **** 	xTaskHandle xTaskGetIdleTaskHandle( void )
1489:FreeRTOS/Source/tasks.c **** 	{
 1972              		.loc 1 1489 0
 1973              		.cfi_startproc
 1974              		@ args = 0, pretend = 0, frame = 0
 1975              		@ frame_needed = 1, uses_anonymous_args = 0
 1976              		@ link register save eliminated.
 1977 0000 80B4     		push	{r7}
 1978              	.LCFI51:
 1979              		.cfi_def_cfa_offset 4
 1980              		.cfi_offset 7, -4
 1981 0002 00AF     		add	r7, sp, #0
 1982              	.LCFI52:
 1983              		.cfi_def_cfa_register 7
1490:FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1491:FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1492:FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1493:FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
 1984              		.loc 1 1493 0
 1985 0004 40F20003 		movw	r3, #:lower16:xIdleTaskHandle
 1986 0008 C0F20003 		movt	r3, #:upper16:xIdleTaskHandle
 1987 000c 1B68     		ldr	r3, [r3, #0]
1494:FreeRTOS/Source/tasks.c **** 	}
 1988              		.loc 1 1494 0
 1989 000e 1846     		mov	r0, r3
 1990 0010 BD46     		mov	sp, r7
 1991 0012 80BC     		pop	{r7}
 1992 0014 7047     		bx	lr
 1993              		.cfi_endproc
 1994              	.LFE128:
 1996 0016 00BF     		.section	.text.vTaskIncrementTick,"ax",%progbits
 1997              		.align	2
 1998              		.global	vTaskIncrementTick
 1999              		.thumb
 2000              		.thumb_func
 2002              	vTaskIncrementTick:
 2003              	.LFB129:
1495:FreeRTOS/Source/tasks.c **** 	
1496:FreeRTOS/Source/tasks.c **** #endif
1497:FreeRTOS/Source/tasks.c **** 
1498:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
1499:FreeRTOS/Source/tasks.c ****  * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
1500:FreeRTOS/Source/tasks.c ****  * documented in task.h
1501:FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
1502:FreeRTOS/Source/tasks.c **** 
1503:FreeRTOS/Source/tasks.c **** void vTaskIncrementTick( void )
1504:FreeRTOS/Source/tasks.c **** {
 2004              		.loc 1 1504 0
 2005              		.cfi_startproc
 2006              		@ args = 0, pretend = 0, frame = 16
 2007              		@ frame_needed = 1, uses_anonymous_args = 0
 2008 0000 80B5     		push	{r7, lr}
 2009              	.LCFI53:
 2010              		.cfi_def_cfa_offset 8
 2011              		.cfi_offset 14, -4
 2012              		.cfi_offset 7, -8
 2013 0002 84B0     		sub	sp, sp, #16
 2014              	.LCFI54:
 2015              		.cfi_def_cfa_offset 24
 2016 0004 00AF     		add	r7, sp, #0
 2017              	.LCFI55:
 2018              		.cfi_def_cfa_register 7
1505:FreeRTOS/Source/tasks.c **** tskTCB * pxTCB;
1506:FreeRTOS/Source/tasks.c **** 
1507:FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1508:FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1509:FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
1510:FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 2019              		.loc 1 1510 0
 2020 0006 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 2021 000a C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 2022 000e 1B68     		ldr	r3, [r3, #0]
 2023 0010 002B     		cmp	r3, #0
 2024 0012 40F0C080 		bne	.L83
1511:FreeRTOS/Source/tasks.c **** 	{
1512:FreeRTOS/Source/tasks.c **** 		++xTickCount;
 2025              		.loc 1 1512 0
 2026 0016 40F20003 		movw	r3, #:lower16:xTickCount
 2027 001a C0F20003 		movt	r3, #:upper16:xTickCount
 2028 001e 1B68     		ldr	r3, [r3, #0]
 2029 0020 03F10102 		add	r2, r3, #1
 2030 0024 40F20003 		movw	r3, #:lower16:xTickCount
 2031 0028 C0F20003 		movt	r3, #:upper16:xTickCount
 2032 002c 1A60     		str	r2, [r3, #0]
1513:FreeRTOS/Source/tasks.c **** 		if( xTickCount == ( portTickType ) 0U )
 2033              		.loc 1 1513 0
 2034 002e 40F20003 		movw	r3, #:lower16:xTickCount
 2035 0032 C0F20003 		movt	r3, #:upper16:xTickCount
 2036 0036 1B68     		ldr	r3, [r3, #0]
 2037 0038 002B     		cmp	r3, #0
 2038 003a 40D1     		bne	.L84
 2039              	.LBB4:
1514:FreeRTOS/Source/tasks.c **** 		{
1515:FreeRTOS/Source/tasks.c **** 			xList *pxTemp;
1516:FreeRTOS/Source/tasks.c **** 
1517:FreeRTOS/Source/tasks.c **** 			/* Tick count has overflowed so we need to swap the delay lists.
1518:FreeRTOS/Source/tasks.c **** 			If there are any items in pxDelayedTaskList here then there is
1519:FreeRTOS/Source/tasks.c **** 			an error! */
1520:FreeRTOS/Source/tasks.c **** 			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
1521:FreeRTOS/Source/tasks.c **** 			
1522:FreeRTOS/Source/tasks.c **** 			pxTemp = pxDelayedTaskList;
 2040              		.loc 1 1522 0
 2041 003c 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2042 0040 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2043 0044 1B68     		ldr	r3, [r3, #0]
 2044 0046 FB60     		str	r3, [r7, #12]
1523:FreeRTOS/Source/tasks.c **** 			pxDelayedTaskList = pxOverflowDelayedTaskList;
 2045              		.loc 1 1523 0
 2046 0048 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 2047 004c C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 2048 0050 1A68     		ldr	r2, [r3, #0]
 2049 0052 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2050 0056 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2051 005a 1A60     		str	r2, [r3, #0]
1524:FreeRTOS/Source/tasks.c **** 			pxOverflowDelayedTaskList = pxTemp;
 2052              		.loc 1 1524 0
 2053 005c 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 2054 0060 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 2055 0064 FA68     		ldr	r2, [r7, #12]
 2056 0066 1A60     		str	r2, [r3, #0]
1525:FreeRTOS/Source/tasks.c **** 			xNumOfOverflows++;
 2057              		.loc 1 1525 0
 2058 0068 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 2059 006c C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 2060 0070 1B68     		ldr	r3, [r3, #0]
 2061 0072 03F10102 		add	r2, r3, #1
 2062 0076 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 2063 007a C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 2064 007e 1A60     		str	r2, [r3, #0]
1526:FreeRTOS/Source/tasks.c **** 	
1527:FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2065              		.loc 1 1527 0
 2066 0080 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2067 0084 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2068 0088 1B68     		ldr	r3, [r3, #0]
 2069 008a 1B68     		ldr	r3, [r3, #0]
 2070 008c 002B     		cmp	r3, #0
 2071 008e 07D1     		bne	.L85
1528:FreeRTOS/Source/tasks.c **** 			{
1529:FreeRTOS/Source/tasks.c **** 				/* The new current delayed list is empty.  Set
1530:FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime to the maximum possible value so it is
1531:FreeRTOS/Source/tasks.c **** 				extremely unlikely that the	
1532:FreeRTOS/Source/tasks.c **** 				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
1533:FreeRTOS/Source/tasks.c **** 				there is an item in the delayed list. */
1534:FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = portMAX_DELAY;
 2072              		.loc 1 1534 0
 2073 0090 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2074 0094 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2075 0098 4FF0FF32 		mov	r2, #-1
 2076 009c 1A60     		str	r2, [r3, #0]
 2077 009e 0EE0     		b	.L84
 2078              	.L85:
1535:FreeRTOS/Source/tasks.c **** 			}
1536:FreeRTOS/Source/tasks.c **** 			else
1537:FreeRTOS/Source/tasks.c **** 			{
1538:FreeRTOS/Source/tasks.c **** 				/* The new current delayed list is not empty, get the value of
1539:FreeRTOS/Source/tasks.c **** 				the item at the head of the delayed list.  This is the time at
1540:FreeRTOS/Source/tasks.c **** 				which the task at the head of the delayed list should be removed
1541:FreeRTOS/Source/tasks.c **** 				from the Blocked state. */
1542:FreeRTOS/Source/tasks.c **** 				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 2079              		.loc 1 1542 0
 2080 00a0 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2081 00a4 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2082 00a8 1B68     		ldr	r3, [r3, #0]
 2083 00aa DB68     		ldr	r3, [r3, #12]
 2084 00ac DB68     		ldr	r3, [r3, #12]
 2085 00ae BB60     		str	r3, [r7, #8]
1543:FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 2086              		.loc 1 1543 0
 2087 00b0 BB68     		ldr	r3, [r7, #8]
 2088 00b2 5A68     		ldr	r2, [r3, #4]
 2089 00b4 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2090 00b8 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2091 00bc 1A60     		str	r2, [r3, #0]
 2092              	.L84:
 2093              	.LBE4:
 2094              	.LBB5:
1544:FreeRTOS/Source/tasks.c **** 			}
1545:FreeRTOS/Source/tasks.c **** 		}
1546:FreeRTOS/Source/tasks.c **** 
1547:FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire. */
1548:FreeRTOS/Source/tasks.c **** 		prvCheckDelayedTasks();
 2095              		.loc 1 1548 0
 2096 00be 40F20003 		movw	r3, #:lower16:xTickCount
 2097 00c2 C0F20003 		movt	r3, #:upper16:xTickCount
 2098 00c6 1A68     		ldr	r2, [r3, #0]
 2099 00c8 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2100 00cc C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2101 00d0 1B68     		ldr	r3, [r3, #0]
 2102 00d2 9A42     		cmp	r2, r3
 2103 00d4 6BD3     		bcc	.L82
 2104              	.L91:
 2105              		.loc 1 1548 0 is_stmt 0 discriminator 1
 2106 00d6 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2107 00da C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2108 00de 1B68     		ldr	r3, [r3, #0]
 2109 00e0 1B68     		ldr	r3, [r3, #0]
 2110 00e2 002B     		cmp	r3, #0
 2111 00e4 07D1     		bne	.L87
 2112              		.loc 1 1548 0 discriminator 2
 2113 00e6 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2114 00ea C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2115 00ee 4FF0FF32 		mov	r2, #-1
 2116 00f2 1A60     		str	r2, [r3, #0]
 2117 00f4 5BE0     		b	.L82
 2118              	.L87:
 2119              		.loc 1 1548 0 discriminator 3
 2120 00f6 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2121 00fa C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2122 00fe 1B68     		ldr	r3, [r3, #0]
 2123 0100 DB68     		ldr	r3, [r3, #12]
 2124 0102 DB68     		ldr	r3, [r3, #12]
 2125 0104 BB60     		str	r3, [r7, #8]
 2126 0106 BB68     		ldr	r3, [r7, #8]
 2127 0108 5B68     		ldr	r3, [r3, #4]
 2128 010a 7B60     		str	r3, [r7, #4]
 2129 010c 40F20003 		movw	r3, #:lower16:xTickCount
 2130 0110 C0F20003 		movt	r3, #:upper16:xTickCount
 2131 0114 1A68     		ldr	r2, [r3, #0]
 2132 0116 7B68     		ldr	r3, [r7, #4]
 2133 0118 9A42     		cmp	r2, r3
 2134 011a 06D2     		bcs	.L88
 2135              		.loc 1 1548 0 discriminator 4
 2136 011c 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2137 0120 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2138 0124 7A68     		ldr	r2, [r7, #4]
 2139 0126 1A60     		str	r2, [r3, #0]
 2140 0128 41E0     		b	.L82
 2141              	.L88:
 2142              		.loc 1 1548 0 discriminator 5
 2143 012a BB68     		ldr	r3, [r7, #8]
 2144 012c 03F10403 		add	r3, r3, #4
 2145 0130 1846     		mov	r0, r3
 2146 0132 FFF7FEFF 		bl	vListRemove
 2147 0136 BB68     		ldr	r3, [r7, #8]
 2148 0138 9B6A     		ldr	r3, [r3, #40]
 2149 013a 002B     		cmp	r3, #0
 2150 013c 05D0     		beq	.L89
 2151              		.loc 1 1548 0 discriminator 6
 2152 013e BB68     		ldr	r3, [r7, #8]
 2153 0140 03F11803 		add	r3, r3, #24
 2154 0144 1846     		mov	r0, r3
 2155 0146 FFF7FEFF 		bl	vListRemove
 2156              	.L89:
 2157              		.loc 1 1548 0 discriminator 7
 2158 014a BB68     		ldr	r3, [r7, #8]
 2159 014c DA6A     		ldr	r2, [r3, #44]
 2160 014e 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2161 0152 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2162 0156 1B68     		ldr	r3, [r3, #0]
 2163 0158 9A42     		cmp	r2, r3
 2164 015a 06D9     		bls	.L90
 2165              		.loc 1 1548 0 discriminator 8
 2166 015c BB68     		ldr	r3, [r7, #8]
 2167 015e DA6A     		ldr	r2, [r3, #44]
 2168 0160 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2169 0164 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2170 0168 1A60     		str	r2, [r3, #0]
 2171              	.L90:
 2172              		.loc 1 1548 0 discriminator 9
 2173 016a BB68     		ldr	r3, [r7, #8]
 2174 016c DA6A     		ldr	r2, [r3, #44]
 2175 016e 1346     		mov	r3, r2
 2176 0170 4FEA8303 		lsl	r3, r3, #2
 2177 0174 9B18     		adds	r3, r3, r2
 2178 0176 4FEA8303 		lsl	r3, r3, #2
 2179 017a 1A46     		mov	r2, r3
 2180 017c 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2181 0180 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2182 0184 D218     		adds	r2, r2, r3
 2183 0186 BB68     		ldr	r3, [r7, #8]
 2184 0188 03F10403 		add	r3, r3, #4
 2185 018c 1046     		mov	r0, r2
 2186 018e 1946     		mov	r1, r3
 2187 0190 FFF7FEFF 		bl	vListInsertEnd
 2188 0194 9FE7     		b	.L91
 2189              	.L83:
 2190              	.LBE5:
1549:FreeRTOS/Source/tasks.c **** 	}
1550:FreeRTOS/Source/tasks.c **** 	else
1551:FreeRTOS/Source/tasks.c **** 	{
1552:FreeRTOS/Source/tasks.c **** 		++uxMissedTicks;
 2191              		.loc 1 1552 0 is_stmt 1
 2192 0196 40F20003 		movw	r3, #:lower16:uxMissedTicks
 2193 019a C0F20003 		movt	r3, #:upper16:uxMissedTicks
 2194 019e 1B68     		ldr	r3, [r3, #0]
 2195 01a0 03F10102 		add	r2, r3, #1
 2196 01a4 40F20003 		movw	r3, #:lower16:uxMissedTicks
 2197 01a8 C0F20003 		movt	r3, #:upper16:uxMissedTicks
 2198 01ac 1A60     		str	r2, [r3, #0]
 2199              	.L82:
1553:FreeRTOS/Source/tasks.c **** 
1554:FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
1555:FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
1556:FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
1557:FreeRTOS/Source/tasks.c **** 		{
1558:FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
1559:FreeRTOS/Source/tasks.c **** 		}
1560:FreeRTOS/Source/tasks.c **** 		#endif
1561:FreeRTOS/Source/tasks.c **** 	}
1562:FreeRTOS/Source/tasks.c **** 
1563:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TICK_HOOK == 1 )
1564:FreeRTOS/Source/tasks.c **** 	{
1565:FreeRTOS/Source/tasks.c **** 		/* Guard against the tick hook being called when the missed tick
1566:FreeRTOS/Source/tasks.c **** 		count is being unwound (when the scheduler is being unlocked. */
1567:FreeRTOS/Source/tasks.c **** 		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
1568:FreeRTOS/Source/tasks.c **** 		{
1569:FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
1570:FreeRTOS/Source/tasks.c **** 		}
1571:FreeRTOS/Source/tasks.c **** 	}
1572:FreeRTOS/Source/tasks.c **** 	#endif
1573:FreeRTOS/Source/tasks.c **** 
1574:FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1575:FreeRTOS/Source/tasks.c **** }
 2200              		.loc 1 1575 0
 2201 01ae 07F11007 		add	r7, r7, #16
 2202 01b2 BD46     		mov	sp, r7
 2203 01b4 80BD     		pop	{r7, pc}
 2204              		.cfi_endproc
 2205              	.LFE129:
 2207 01b6 00BF     		.section	.text.vTaskSetApplicationTaskTag,"ax",%progbits
 2208              		.align	2
 2209              		.global	vTaskSetApplicationTaskTag
 2210              		.thumb
 2211              		.thumb_func
 2213              	vTaskSetApplicationTaskTag:
 2214              	.LFB130:
1576:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1577:FreeRTOS/Source/tasks.c **** 
1578:FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1579:FreeRTOS/Source/tasks.c **** 
1580:FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
1581:FreeRTOS/Source/tasks.c **** 	{
 2215              		.loc 1 1581 0
 2216              		.cfi_startproc
 2217              		@ args = 0, pretend = 0, frame = 16
 2218              		@ frame_needed = 1, uses_anonymous_args = 0
 2219 0000 80B5     		push	{r7, lr}
 2220              	.LCFI56:
 2221              		.cfi_def_cfa_offset 8
 2222              		.cfi_offset 14, -4
 2223              		.cfi_offset 7, -8
 2224 0002 84B0     		sub	sp, sp, #16
 2225              	.LCFI57:
 2226              		.cfi_def_cfa_offset 24
 2227 0004 00AF     		add	r7, sp, #0
 2228              	.LCFI58:
 2229              		.cfi_def_cfa_register 7
 2230 0006 7860     		str	r0, [r7, #4]
 2231 0008 3960     		str	r1, [r7, #0]
1582:FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1583:FreeRTOS/Source/tasks.c **** 
1584:FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1585:FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
 2232              		.loc 1 1585 0
 2233 000a 7B68     		ldr	r3, [r7, #4]
 2234 000c 002B     		cmp	r3, #0
 2235 000e 06D1     		bne	.L94
1586:FreeRTOS/Source/tasks.c **** 		{
1587:FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
 2236              		.loc 1 1587 0
 2237 0010 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2238 0014 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2239 0018 1B68     		ldr	r3, [r3, #0]
 2240 001a FB60     		str	r3, [r7, #12]
 2241 001c 01E0     		b	.L95
 2242              	.L94:
1588:FreeRTOS/Source/tasks.c **** 		}
1589:FreeRTOS/Source/tasks.c **** 		else
1590:FreeRTOS/Source/tasks.c **** 		{
1591:FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
 2243              		.loc 1 1591 0
 2244 001e 7B68     		ldr	r3, [r7, #4]
 2245 0020 FB60     		str	r3, [r7, #12]
 2246              	.L95:
1592:FreeRTOS/Source/tasks.c **** 		}
1593:FreeRTOS/Source/tasks.c **** 
1594:FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1595:FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
1596:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 2247              		.loc 1 1596 0
 2248 0022 FFF7FEFF 		bl	vPortEnterCritical
1597:FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
 2249              		.loc 1 1597 0
 2250 0026 FB68     		ldr	r3, [r7, #12]
 2251 0028 3A68     		ldr	r2, [r7, #0]
 2252 002a 9A64     		str	r2, [r3, #72]
1598:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 2253              		.loc 1 1598 0
 2254 002c FFF7FEFF 		bl	vPortExitCritical
1599:FreeRTOS/Source/tasks.c **** 	}
 2255              		.loc 1 1599 0
 2256 0030 07F11007 		add	r7, r7, #16
 2257 0034 BD46     		mov	sp, r7
 2258 0036 80BD     		pop	{r7, pc}
 2259              		.cfi_endproc
 2260              	.LFE130:
 2262              		.section	.text.xTaskGetApplicationTaskTag,"ax",%progbits
 2263              		.align	2
 2264              		.global	xTaskGetApplicationTaskTag
 2265              		.thumb
 2266              		.thumb_func
 2268              	xTaskGetApplicationTaskTag:
 2269              	.LFB131:
1600:FreeRTOS/Source/tasks.c **** 
1601:FreeRTOS/Source/tasks.c **** #endif
1602:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1603:FreeRTOS/Source/tasks.c **** 
1604:FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1605:FreeRTOS/Source/tasks.c **** 
1606:FreeRTOS/Source/tasks.c **** 	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
1607:FreeRTOS/Source/tasks.c **** 	{
 2270              		.loc 1 1607 0
 2271              		.cfi_startproc
 2272              		@ args = 0, pretend = 0, frame = 16
 2273              		@ frame_needed = 1, uses_anonymous_args = 0
 2274 0000 80B5     		push	{r7, lr}
 2275              	.LCFI59:
 2276              		.cfi_def_cfa_offset 8
 2277              		.cfi_offset 14, -4
 2278              		.cfi_offset 7, -8
 2279 0002 84B0     		sub	sp, sp, #16
 2280              	.LCFI60:
 2281              		.cfi_def_cfa_offset 24
 2282 0004 00AF     		add	r7, sp, #0
 2283              	.LCFI61:
 2284              		.cfi_def_cfa_register 7
 2285 0006 7860     		str	r0, [r7, #4]
1608:FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1609:FreeRTOS/Source/tasks.c **** 	pdTASK_HOOK_CODE xReturn;
1610:FreeRTOS/Source/tasks.c **** 
1611:FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1612:FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
 2286              		.loc 1 1612 0
 2287 0008 7B68     		ldr	r3, [r7, #4]
 2288 000a 002B     		cmp	r3, #0
 2289 000c 06D1     		bne	.L97
1613:FreeRTOS/Source/tasks.c **** 		{
1614:FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
 2290              		.loc 1 1614 0
 2291 000e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2292 0012 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2293 0016 1B68     		ldr	r3, [r3, #0]
 2294 0018 FB60     		str	r3, [r7, #12]
 2295 001a 01E0     		b	.L98
 2296              	.L97:
1615:FreeRTOS/Source/tasks.c **** 		}
1616:FreeRTOS/Source/tasks.c **** 		else
1617:FreeRTOS/Source/tasks.c **** 		{
1618:FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
 2297              		.loc 1 1618 0
 2298 001c 7B68     		ldr	r3, [r7, #4]
 2299 001e FB60     		str	r3, [r7, #12]
 2300              	.L98:
1619:FreeRTOS/Source/tasks.c **** 		}
1620:FreeRTOS/Source/tasks.c **** 
1621:FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1622:FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
1623:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 2301              		.loc 1 1623 0
 2302 0020 FFF7FEFF 		bl	vPortEnterCritical
1624:FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
 2303              		.loc 1 1624 0
 2304 0024 FB68     		ldr	r3, [r7, #12]
 2305 0026 9B6C     		ldr	r3, [r3, #72]
 2306 0028 BB60     		str	r3, [r7, #8]
1625:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 2307              		.loc 1 1625 0
 2308 002a FFF7FEFF 		bl	vPortExitCritical
1626:FreeRTOS/Source/tasks.c **** 
1627:FreeRTOS/Source/tasks.c **** 		return xReturn;
 2309              		.loc 1 1627 0
 2310 002e BB68     		ldr	r3, [r7, #8]
1628:FreeRTOS/Source/tasks.c **** 	}
 2311              		.loc 1 1628 0
 2312 0030 1846     		mov	r0, r3
 2313 0032 07F11007 		add	r7, r7, #16
 2314 0036 BD46     		mov	sp, r7
 2315 0038 80BD     		pop	{r7, pc}
 2316              		.cfi_endproc
 2317              	.LFE131:
 2319 003a 00BF     		.section	.text.xTaskCallApplicationTaskHook,"ax",%progbits
 2320              		.align	2
 2321              		.global	xTaskCallApplicationTaskHook
 2322              		.thumb
 2323              		.thumb_func
 2325              	xTaskCallApplicationTaskHook:
 2326              	.LFB132:
1629:FreeRTOS/Source/tasks.c **** 
1630:FreeRTOS/Source/tasks.c **** #endif
1631:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1632:FreeRTOS/Source/tasks.c **** 
1633:FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1634:FreeRTOS/Source/tasks.c **** 
1635:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
1636:FreeRTOS/Source/tasks.c **** 	{
 2327              		.loc 1 1636 0
 2328              		.cfi_startproc
 2329              		@ args = 0, pretend = 0, frame = 16
 2330              		@ frame_needed = 1, uses_anonymous_args = 0
 2331 0000 80B5     		push	{r7, lr}
 2332              	.LCFI62:
 2333              		.cfi_def_cfa_offset 8
 2334              		.cfi_offset 14, -4
 2335              		.cfi_offset 7, -8
 2336 0002 84B0     		sub	sp, sp, #16
 2337              	.LCFI63:
 2338              		.cfi_def_cfa_offset 24
 2339 0004 00AF     		add	r7, sp, #0
 2340              	.LCFI64:
 2341              		.cfi_def_cfa_register 7
 2342 0006 7860     		str	r0, [r7, #4]
 2343 0008 3960     		str	r1, [r7, #0]
1637:FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1638:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn;
1639:FreeRTOS/Source/tasks.c **** 
1640:FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
1641:FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
 2344              		.loc 1 1641 0
 2345 000a 7B68     		ldr	r3, [r7, #4]
 2346 000c 002B     		cmp	r3, #0
 2347 000e 06D1     		bne	.L100
1642:FreeRTOS/Source/tasks.c **** 		{
1643:FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
 2348              		.loc 1 1643 0
 2349 0010 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2350 0014 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2351 0018 1B68     		ldr	r3, [r3, #0]
 2352 001a FB60     		str	r3, [r7, #12]
 2353 001c 01E0     		b	.L101
 2354              	.L100:
1644:FreeRTOS/Source/tasks.c **** 		}
1645:FreeRTOS/Source/tasks.c **** 		else
1646:FreeRTOS/Source/tasks.c **** 		{
1647:FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
 2355              		.loc 1 1647 0
 2356 001e 7B68     		ldr	r3, [r7, #4]
 2357 0020 FB60     		str	r3, [r7, #12]
 2358              	.L101:
1648:FreeRTOS/Source/tasks.c **** 		}
1649:FreeRTOS/Source/tasks.c **** 
1650:FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
 2359              		.loc 1 1650 0
 2360 0022 FB68     		ldr	r3, [r7, #12]
 2361 0024 9B6C     		ldr	r3, [r3, #72]
 2362 0026 002B     		cmp	r3, #0
 2363 0028 05D0     		beq	.L102
1651:FreeRTOS/Source/tasks.c **** 		{
1652:FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
 2364              		.loc 1 1652 0
 2365 002a FB68     		ldr	r3, [r7, #12]
 2366 002c 9B6C     		ldr	r3, [r3, #72]
 2367 002e 3868     		ldr	r0, [r7, #0]
 2368 0030 9847     		blx	r3
 2369 0032 B860     		str	r0, [r7, #8]
 2370 0034 02E0     		b	.L103
 2371              	.L102:
1653:FreeRTOS/Source/tasks.c **** 		}
1654:FreeRTOS/Source/tasks.c **** 		else
1655:FreeRTOS/Source/tasks.c **** 		{
1656:FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 2372              		.loc 1 1656 0
 2373 0036 4FF00003 		mov	r3, #0
 2374 003a BB60     		str	r3, [r7, #8]
 2375              	.L103:
1657:FreeRTOS/Source/tasks.c **** 		}
1658:FreeRTOS/Source/tasks.c **** 
1659:FreeRTOS/Source/tasks.c **** 		return xReturn;
 2376              		.loc 1 1659 0
 2377 003c BB68     		ldr	r3, [r7, #8]
1660:FreeRTOS/Source/tasks.c **** 	}
 2378              		.loc 1 1660 0
 2379 003e 1846     		mov	r0, r3
 2380 0040 07F11007 		add	r7, r7, #16
 2381 0044 BD46     		mov	sp, r7
 2382 0046 80BD     		pop	{r7, pc}
 2383              		.cfi_endproc
 2384              	.LFE132:
 2386              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2387              		.align	2
 2388              		.global	vTaskSwitchContext
 2389              		.thumb
 2390              		.thumb_func
 2392              	vTaskSwitchContext:
 2393              	.LFB133:
1661:FreeRTOS/Source/tasks.c **** 
1662:FreeRTOS/Source/tasks.c **** #endif
1663:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1664:FreeRTOS/Source/tasks.c **** 
1665:FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
1666:FreeRTOS/Source/tasks.c **** {
 2394              		.loc 1 1666 0
 2395              		.cfi_startproc
 2396              		@ args = 0, pretend = 0, frame = 8
 2397              		@ frame_needed = 1, uses_anonymous_args = 0
 2398 0000 80B5     		push	{r7, lr}
 2399              	.LCFI65:
 2400              		.cfi_def_cfa_offset 8
 2401              		.cfi_offset 14, -4
 2402              		.cfi_offset 7, -8
 2403 0002 82B0     		sub	sp, sp, #8
 2404              	.LCFI66:
 2405              		.cfi_def_cfa_offset 16
 2406 0004 00AF     		add	r7, sp, #0
 2407              	.LCFI67:
 2408              		.cfi_def_cfa_register 7
1667:FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 2409              		.loc 1 1667 0
 2410 0006 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 2411 000a C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 2412 000e 1B68     		ldr	r3, [r3, #0]
 2413 0010 002B     		cmp	r3, #0
 2414 0012 07D0     		beq	.L105
1668:FreeRTOS/Source/tasks.c **** 	{
1669:FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
1670:FreeRTOS/Source/tasks.c **** 		switch. */
1671:FreeRTOS/Source/tasks.c **** 		xMissedYield = pdTRUE;
 2415              		.loc 1 1671 0
 2416 0014 40F20003 		movw	r3, #:lower16:xMissedYield
 2417 0018 C0F20003 		movt	r3, #:upper16:xMissedYield
 2418 001c 4FF00102 		mov	r2, #1
 2419 0020 1A60     		str	r2, [r3, #0]
 2420 0022 71E0     		b	.L104
 2421              	.L105:
 2422              	.LBB6:
1672:FreeRTOS/Source/tasks.c **** 	}
1673:FreeRTOS/Source/tasks.c **** 	else
1674:FreeRTOS/Source/tasks.c **** 	{
1675:FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
1676:FreeRTOS/Source/tasks.c **** 	
1677:FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
1678:FreeRTOS/Source/tasks.c **** 		{
1679:FreeRTOS/Source/tasks.c **** 			unsigned long ulTempCounter;
1680:FreeRTOS/Source/tasks.c **** 			
1681:FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1682:FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
1683:FreeRTOS/Source/tasks.c **** 				#else
1684:FreeRTOS/Source/tasks.c **** 					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
 2423              		.loc 1 1684 0
 2424 0024 FFF7FEFF 		bl	get_us_time
 2425 0028 0246     		mov	r2, r0
 2426 002a 0B46     		mov	r3, r1
 2427 002c 1346     		mov	r3, r2
 2428 002e 7B60     		str	r3, [r7, #4]
1685:FreeRTOS/Source/tasks.c **** 				#endif
1686:FreeRTOS/Source/tasks.c **** 	
1687:FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the accumulated
1688:FreeRTOS/Source/tasks.c **** 				time so far.  The time the task started running was stored in
1689:FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime.  Note that there is no overflow protection here
1690:FreeRTOS/Source/tasks.c **** 				so count values are only valid until the timer overflows.  Generally
1691:FreeRTOS/Source/tasks.c **** 				this will be about 1 hour assuming a 1uS timer increment. */
1692:FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
 2429              		.loc 1 1692 0
 2430 0030 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2431 0034 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2432 0038 1A68     		ldr	r2, [r3, #0]
 2433 003a D16C     		ldr	r1, [r2, #76]
 2434 003c 40F20003 		movw	r3, #:lower16:ulTaskSwitchedInTime
 2435 0040 C0F20003 		movt	r3, #:upper16:ulTaskSwitchedInTime
 2436 0044 1B68     		ldr	r3, [r3, #0]
 2437 0046 7868     		ldr	r0, [r7, #4]
 2438 0048 C31A     		subs	r3, r0, r3
 2439 004a CB18     		adds	r3, r1, r3
 2440 004c D364     		str	r3, [r2, #76]
1693:FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTempCounter;
 2441              		.loc 1 1693 0
 2442 004e 40F20003 		movw	r3, #:lower16:ulTaskSwitchedInTime
 2443 0052 C0F20003 		movt	r3, #:upper16:ulTaskSwitchedInTime
 2444 0056 7A68     		ldr	r2, [r7, #4]
 2445 0058 1A60     		str	r2, [r3, #0]
 2446              	.LBE6:
1694:FreeRTOS/Source/tasks.c **** 		}
1695:FreeRTOS/Source/tasks.c **** 		#endif
1696:FreeRTOS/Source/tasks.c **** 	
1697:FreeRTOS/Source/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
1698:FreeRTOS/Source/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
1699:FreeRTOS/Source/tasks.c **** 	
1700:FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */
1701:FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 2447              		.loc 1 1701 0
 2448 005a 0BE0     		b	.L107
 2449              	.L108:
1702:FreeRTOS/Source/tasks.c **** 		{
1703:FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopReadyPriority );
1704:FreeRTOS/Source/tasks.c **** 			--uxTopReadyPriority;
 2450              		.loc 1 1704 0
 2451 005c 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2452 0060 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2453 0064 1B68     		ldr	r3, [r3, #0]
 2454 0066 03F1FF32 		add	r2, r3, #-1
 2455 006a 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2456 006e C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2457 0072 1A60     		str	r2, [r3, #0]
 2458              	.L107:
1701:FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 2459              		.loc 1 1701 0 discriminator 1
 2460 0074 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2461 0078 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2462 007c 1A68     		ldr	r2, [r3, #0]
 2463 007e 1346     		mov	r3, r2
 2464 0080 4FEA8303 		lsl	r3, r3, #2
 2465 0084 9B18     		adds	r3, r3, r2
 2466 0086 4FEA8303 		lsl	r3, r3, #2
 2467 008a 1A46     		mov	r2, r3
 2468 008c 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2469 0090 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2470 0094 D318     		adds	r3, r2, r3
 2471 0096 1B68     		ldr	r3, [r3, #0]
 2472 0098 002B     		cmp	r3, #0
 2473 009a DFD0     		beq	.L108
 2474              	.LBB7:
1705:FreeRTOS/Source/tasks.c **** 		}
1706:FreeRTOS/Source/tasks.c **** 	
1707:FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
1708:FreeRTOS/Source/tasks.c **** 		same priority get an equal share of the processor time. */
1709:FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 2475              		.loc 1 1709 0
 2476 009c 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2477 00a0 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2478 00a4 1A68     		ldr	r2, [r3, #0]
 2479 00a6 1346     		mov	r3, r2
 2480 00a8 4FEA8303 		lsl	r3, r3, #2
 2481 00ac 9B18     		adds	r3, r3, r2
 2482 00ae 4FEA8303 		lsl	r3, r3, #2
 2483 00b2 1A46     		mov	r2, r3
 2484 00b4 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2485 00b8 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2486 00bc D318     		adds	r3, r2, r3
 2487 00be 3B60     		str	r3, [r7, #0]
 2488 00c0 3B68     		ldr	r3, [r7, #0]
 2489 00c2 5B68     		ldr	r3, [r3, #4]
 2490 00c4 5A68     		ldr	r2, [r3, #4]
 2491 00c6 3B68     		ldr	r3, [r7, #0]
 2492 00c8 5A60     		str	r2, [r3, #4]
 2493 00ca 3B68     		ldr	r3, [r7, #0]
 2494 00cc 5A68     		ldr	r2, [r3, #4]
 2495 00ce 3B68     		ldr	r3, [r7, #0]
 2496 00d0 03F10803 		add	r3, r3, #8
 2497 00d4 9A42     		cmp	r2, r3
 2498 00d6 04D1     		bne	.L109
 2499              		.loc 1 1709 0 is_stmt 0 discriminator 1
 2500 00d8 3B68     		ldr	r3, [r7, #0]
 2501 00da 5B68     		ldr	r3, [r3, #4]
 2502 00dc 5A68     		ldr	r2, [r3, #4]
 2503 00de 3B68     		ldr	r3, [r7, #0]
 2504 00e0 5A60     		str	r2, [r3, #4]
 2505              	.L109:
 2506              		.loc 1 1709 0 discriminator 2
 2507 00e2 3B68     		ldr	r3, [r7, #0]
 2508 00e4 5B68     		ldr	r3, [r3, #4]
 2509 00e6 DA68     		ldr	r2, [r3, #12]
 2510 00e8 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2511 00ec C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2512 00f0 1A60     		str	r2, [r3, #0]
 2513              	.LBE7:
1710:FreeRTOS/Source/tasks.c **** 	
1711:FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2514              		.loc 1 1711 0 is_stmt 1 discriminator 2
 2515 00f2 4FF4E843 		mov	r3, #29696
 2516 00f6 C4F20003 		movt	r3, 16384
 2517 00fa 40F20002 		movw	r2, #:lower16:pxCurrentTCB
 2518 00fe C0F20002 		movt	r2, #:upper16:pxCurrentTCB
 2519 0102 1268     		ldr	r2, [r2, #0]
 2520 0104 926C     		ldr	r2, [r2, #72]
 2521 0106 DA60     		str	r2, [r3, #12]
 2522              	.L104:
1712:FreeRTOS/Source/tasks.c **** 		vWriteTraceToBuffer();
1713:FreeRTOS/Source/tasks.c **** 	}
1714:FreeRTOS/Source/tasks.c **** }
 2523              		.loc 1 1714 0
 2524 0108 07F10807 		add	r7, r7, #8
 2525 010c BD46     		mov	sp, r7
 2526 010e 80BD     		pop	{r7, pc}
 2527              		.cfi_endproc
 2528              	.LFE133:
 2530              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2531              		.align	2
 2532              		.global	vTaskPlaceOnEventList
 2533              		.thumb
 2534              		.thumb_func
 2536              	vTaskPlaceOnEventList:
 2537              	.LFB134:
1715:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1716:FreeRTOS/Source/tasks.c **** 
1717:FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
1718:FreeRTOS/Source/tasks.c **** {
 2538              		.loc 1 1718 0
 2539              		.cfi_startproc
 2540              		@ args = 0, pretend = 0, frame = 16
 2541              		@ frame_needed = 1, uses_anonymous_args = 0
 2542 0000 80B5     		push	{r7, lr}
 2543              	.LCFI68:
 2544              		.cfi_def_cfa_offset 8
 2545              		.cfi_offset 14, -4
 2546              		.cfi_offset 7, -8
 2547 0002 84B0     		sub	sp, sp, #16
 2548              	.LCFI69:
 2549              		.cfi_def_cfa_offset 24
 2550 0004 00AF     		add	r7, sp, #0
 2551              	.LCFI70:
 2552              		.cfi_def_cfa_register 7
 2553 0006 7860     		str	r0, [r7, #4]
 2554 0008 3960     		str	r1, [r7, #0]
1719:FreeRTOS/Source/tasks.c **** portTickType xTimeToWake;
1720:FreeRTOS/Source/tasks.c **** 
1721:FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
1722:FreeRTOS/Source/tasks.c **** 
1723:FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1724:FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED. */
1725:FreeRTOS/Source/tasks.c **** 
1726:FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
1727:FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
1728:FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event. */
1729:FreeRTOS/Source/tasks.c **** 	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 2555              		.loc 1 1729 0
 2556 000a 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2557 000e C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2558 0012 1B68     		ldr	r3, [r3, #0]
 2559 0014 03F11803 		add	r3, r3, #24
 2560 0018 7868     		ldr	r0, [r7, #4]
 2561 001a 1946     		mov	r1, r3
 2562 001c FFF7FEFF 		bl	vListInsert
1730:FreeRTOS/Source/tasks.c **** 
1731:FreeRTOS/Source/tasks.c **** 	/* We must remove ourselves from the ready list before adding ourselves
1732:FreeRTOS/Source/tasks.c **** 	to the blocked list as the same list item is used for both lists.  We have
1733:FreeRTOS/Source/tasks.c **** 	exclusive access to the ready lists as the scheduler is locked. */
1734:FreeRTOS/Source/tasks.c **** 	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 2563              		.loc 1 1734 0
 2564 0020 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2565 0024 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2566 0028 1B68     		ldr	r3, [r3, #0]
 2567 002a 03F10403 		add	r3, r3, #4
 2568 002e 1846     		mov	r0, r3
 2569 0030 FFF7FEFF 		bl	vListRemove
1735:FreeRTOS/Source/tasks.c **** 
1736:FreeRTOS/Source/tasks.c **** 
1737:FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
1738:FreeRTOS/Source/tasks.c **** 	{
1739:FreeRTOS/Source/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 2570              		.loc 1 1739 0
 2571 0034 3B68     		ldr	r3, [r7, #0]
 2572 0036 B3F1FF3F 		cmp	r3, #-1
 2573 003a 0ED1     		bne	.L111
1740:FreeRTOS/Source/tasks.c **** 		{
1741:FreeRTOS/Source/tasks.c **** 			/* Add ourselves to the suspended task list instead of a delayed task
1742:FreeRTOS/Source/tasks.c **** 			list to ensure we are not woken by a timing event.  We will block
1743:FreeRTOS/Source/tasks.c **** 			indefinitely. */
1744:FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListIt
 2574              		.loc 1 1744 0
 2575 003c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2576 0040 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2577 0044 1B68     		ldr	r3, [r3, #0]
 2578 0046 03F10403 		add	r3, r3, #4
 2579 004a 40F20000 		movw	r0, #:lower16:xSuspendedTaskList
 2580 004e C0F20000 		movt	r0, #:upper16:xSuspendedTaskList
 2581 0052 1946     		mov	r1, r3
 2582 0054 FFF7FEFF 		bl	vListInsertEnd
 2583 0058 0AE0     		b	.L110
 2584              	.L111:
1745:FreeRTOS/Source/tasks.c **** 		}
1746:FreeRTOS/Source/tasks.c **** 		else
1747:FreeRTOS/Source/tasks.c **** 		{
1748:FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1749:FreeRTOS/Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1750:FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
 2585              		.loc 1 1750 0
 2586 005a 40F20003 		movw	r3, #:lower16:xTickCount
 2587 005e C0F20003 		movt	r3, #:upper16:xTickCount
 2588 0062 1A68     		ldr	r2, [r3, #0]
 2589 0064 3B68     		ldr	r3, [r7, #0]
 2590 0066 D318     		adds	r3, r2, r3
 2591 0068 FB60     		str	r3, [r7, #12]
1751:FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2592              		.loc 1 1751 0
 2593 006a F868     		ldr	r0, [r7, #12]
 2594 006c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2595              	.L110:
1752:FreeRTOS/Source/tasks.c **** 		}
1753:FreeRTOS/Source/tasks.c **** 	}
1754:FreeRTOS/Source/tasks.c **** 	#else
1755:FreeRTOS/Source/tasks.c **** 	{
1756:FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1757:FreeRTOS/Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1758:FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
1759:FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
1760:FreeRTOS/Source/tasks.c **** 	}
1761:FreeRTOS/Source/tasks.c **** 	#endif
1762:FreeRTOS/Source/tasks.c **** }
 2596              		.loc 1 1762 0
 2597 0070 07F11007 		add	r7, r7, #16
 2598 0074 BD46     		mov	sp, r7
 2599 0076 80BD     		pop	{r7, pc}
 2600              		.cfi_endproc
 2601              	.LFE134:
 2603              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 2604              		.align	2
 2605              		.global	vTaskPlaceOnEventListRestricted
 2606              		.thumb
 2607              		.thumb_func
 2609              	vTaskPlaceOnEventListRestricted:
 2610              	.LFB135:
1763:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1764:FreeRTOS/Source/tasks.c **** 
1765:FreeRTOS/Source/tasks.c **** #if configUSE_TIMERS == 1
1766:FreeRTOS/Source/tasks.c **** 
1767:FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
1768:FreeRTOS/Source/tasks.c **** 	{
 2611              		.loc 1 1768 0
 2612              		.cfi_startproc
 2613              		@ args = 0, pretend = 0, frame = 16
 2614              		@ frame_needed = 1, uses_anonymous_args = 0
 2615 0000 80B5     		push	{r7, lr}
 2616              	.LCFI71:
 2617              		.cfi_def_cfa_offset 8
 2618              		.cfi_offset 14, -4
 2619              		.cfi_offset 7, -8
 2620 0002 84B0     		sub	sp, sp, #16
 2621              	.LCFI72:
 2622              		.cfi_def_cfa_offset 24
 2623 0004 00AF     		add	r7, sp, #0
 2624              	.LCFI73:
 2625              		.cfi_def_cfa_register 7
 2626 0006 7860     		str	r0, [r7, #4]
 2627 0008 3960     		str	r1, [r7, #0]
1769:FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
1770:FreeRTOS/Source/tasks.c **** 
1771:FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
1772:FreeRTOS/Source/tasks.c **** 
1773:FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
1774:FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
1775:FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
1776:FreeRTOS/Source/tasks.c **** 		it should be called from a critical section. */
1777:FreeRTOS/Source/tasks.c **** 
1778:FreeRTOS/Source/tasks.c **** 	
1779:FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
1780:FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
1781:FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
1782:FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
1783:FreeRTOS/Source/tasks.c **** 		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 2628              		.loc 1 1783 0
 2629 000a 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2630 000e C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2631 0012 1B68     		ldr	r3, [r3, #0]
 2632 0014 03F11803 		add	r3, r3, #24
 2633 0018 7868     		ldr	r0, [r7, #4]
 2634 001a 1946     		mov	r1, r3
 2635 001c FFF7FEFF 		bl	vListInsertEnd
1784:FreeRTOS/Source/tasks.c **** 
1785:FreeRTOS/Source/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
1786:FreeRTOS/Source/tasks.c **** 		blocked list as the same list item is used for both lists.  This
1787:FreeRTOS/Source/tasks.c **** 		function is called form a critical section. */
1788:FreeRTOS/Source/tasks.c **** 		vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 2636              		.loc 1 1788 0
 2637 0020 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2638 0024 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2639 0028 1B68     		ldr	r3, [r3, #0]
 2640 002a 03F10403 		add	r3, r3, #4
 2641 002e 1846     		mov	r0, r3
 2642 0030 FFF7FEFF 		bl	vListRemove
1789:FreeRTOS/Source/tasks.c **** 
1790:FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event does
1791:FreeRTOS/Source/tasks.c **** 		not occur.  This may overflow but this doesn't matter. */
1792:FreeRTOS/Source/tasks.c **** 		xTimeToWake = xTickCount + xTicksToWait;
 2643              		.loc 1 1792 0
 2644 0034 40F20003 		movw	r3, #:lower16:xTickCount
 2645 0038 C0F20003 		movt	r3, #:upper16:xTickCount
 2646 003c 1A68     		ldr	r2, [r3, #0]
 2647 003e 3B68     		ldr	r3, [r7, #0]
 2648 0040 D318     		adds	r3, r2, r3
 2649 0042 FB60     		str	r3, [r7, #12]
1793:FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
 2650              		.loc 1 1793 0
 2651 0044 F868     		ldr	r0, [r7, #12]
 2652 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1794:FreeRTOS/Source/tasks.c **** 	}
 2653              		.loc 1 1794 0
 2654 004a 07F11007 		add	r7, r7, #16
 2655 004e BD46     		mov	sp, r7
 2656 0050 80BD     		pop	{r7, pc}
 2657              		.cfi_endproc
 2658              	.LFE135:
 2660 0052 00BF     		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2661              		.align	2
 2662              		.global	xTaskRemoveFromEventList
 2663              		.thumb
 2664              		.thumb_func
 2666              	xTaskRemoveFromEventList:
 2667              	.LFB136:
1795:FreeRTOS/Source/tasks.c **** 	
1796:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
1797:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1798:FreeRTOS/Source/tasks.c **** 
1799:FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
1800:FreeRTOS/Source/tasks.c **** {
 2668              		.loc 1 1800 0
 2669              		.cfi_startproc
 2670              		@ args = 0, pretend = 0, frame = 16
 2671              		@ frame_needed = 1, uses_anonymous_args = 0
 2672 0000 80B5     		push	{r7, lr}
 2673              	.LCFI74:
 2674              		.cfi_def_cfa_offset 8
 2675              		.cfi_offset 14, -4
 2676              		.cfi_offset 7, -8
 2677 0002 84B0     		sub	sp, sp, #16
 2678              	.LCFI75:
 2679              		.cfi_def_cfa_offset 24
 2680 0004 00AF     		add	r7, sp, #0
 2681              	.LCFI76:
 2682              		.cfi_def_cfa_register 7
 2683 0006 7860     		str	r0, [r7, #4]
1801:FreeRTOS/Source/tasks.c **** tskTCB *pxUnblockedTCB;
1802:FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
1803:FreeRTOS/Source/tasks.c **** 
1804:FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1805:FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED.  It can also be called from within an ISR. */
1806:FreeRTOS/Source/tasks.c **** 
1807:FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so we can remove the
1808:FreeRTOS/Source/tasks.c **** 	first in the list, remove the TCB from the delayed list, and add
1809:FreeRTOS/Source/tasks.c **** 	it to the ready list.
1810:FreeRTOS/Source/tasks.c **** 
1811:FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
1812:FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
1813:FreeRTOS/Source/tasks.c **** 	means we can always expect exclusive access to the event list here.
1814:FreeRTOS/Source/tasks.c **** 	
1815:FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
1816:FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
1817:FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 2684              		.loc 1 1817 0
 2685 0008 7B68     		ldr	r3, [r7, #4]
 2686 000a DB68     		ldr	r3, [r3, #12]
 2687 000c DB68     		ldr	r3, [r3, #12]
 2688 000e BB60     		str	r3, [r7, #8]
1818:FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
1819:FreeRTOS/Source/tasks.c **** 	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2689              		.loc 1 1819 0
 2690 0010 BB68     		ldr	r3, [r7, #8]
 2691 0012 03F11803 		add	r3, r3, #24
 2692 0016 1846     		mov	r0, r3
 2693 0018 FFF7FEFF 		bl	vListRemove
1820:FreeRTOS/Source/tasks.c **** 
1821:FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 2694              		.loc 1 1821 0
 2695 001c 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 2696 0020 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 2697 0024 1B68     		ldr	r3, [r3, #0]
 2698 0026 002B     		cmp	r3, #0
 2699 0028 2BD1     		bne	.L115
1822:FreeRTOS/Source/tasks.c **** 	{
1823:FreeRTOS/Source/tasks.c **** 		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 2700              		.loc 1 1823 0
 2701 002a BB68     		ldr	r3, [r7, #8]
 2702 002c 03F10403 		add	r3, r3, #4
 2703 0030 1846     		mov	r0, r3
 2704 0032 FFF7FEFF 		bl	vListRemove
1824:FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyQueue( pxUnblockedTCB );
 2705              		.loc 1 1824 0
 2706 0036 BB68     		ldr	r3, [r7, #8]
 2707 0038 DA6A     		ldr	r2, [r3, #44]
 2708 003a 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2709 003e C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2710 0042 1B68     		ldr	r3, [r3, #0]
 2711 0044 9A42     		cmp	r2, r3
 2712 0046 06D9     		bls	.L116
 2713              		.loc 1 1824 0 is_stmt 0 discriminator 1
 2714 0048 BB68     		ldr	r3, [r7, #8]
 2715 004a DA6A     		ldr	r2, [r3, #44]
 2716 004c 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2717 0050 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2718 0054 1A60     		str	r2, [r3, #0]
 2719              	.L116:
 2720              		.loc 1 1824 0 discriminator 2
 2721 0056 BB68     		ldr	r3, [r7, #8]
 2722 0058 DA6A     		ldr	r2, [r3, #44]
 2723 005a 1346     		mov	r3, r2
 2724 005c 4FEA8303 		lsl	r3, r3, #2
 2725 0060 9B18     		adds	r3, r3, r2
 2726 0062 4FEA8303 		lsl	r3, r3, #2
 2727 0066 1A46     		mov	r2, r3
 2728 0068 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2729 006c C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2730 0070 D218     		adds	r2, r2, r3
 2731 0072 BB68     		ldr	r3, [r7, #8]
 2732 0074 03F10403 		add	r3, r3, #4
 2733 0078 1046     		mov	r0, r2
 2734 007a 1946     		mov	r1, r3
 2735 007c FFF7FEFF 		bl	vListInsertEnd
 2736 0080 09E0     		b	.L117
 2737              	.L115:
1825:FreeRTOS/Source/tasks.c **** 	}
1826:FreeRTOS/Source/tasks.c **** 	else
1827:FreeRTOS/Source/tasks.c **** 	{
1828:FreeRTOS/Source/tasks.c **** 		/* We cannot access the delayed or ready lists, so will hold this
1829:FreeRTOS/Source/tasks.c **** 		task pending until the scheduler is resumed. */
1830:FreeRTOS/Source/tasks.c **** 		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 2738              		.loc 1 1830 0 is_stmt 1
 2739 0082 BB68     		ldr	r3, [r7, #8]
 2740 0084 03F11803 		add	r3, r3, #24
 2741 0088 40F20000 		movw	r0, #:lower16:xPendingReadyList
 2742 008c C0F20000 		movt	r0, #:upper16:xPendingReadyList
 2743 0090 1946     		mov	r1, r3
 2744 0092 FFF7FEFF 		bl	vListInsertEnd
 2745              	.L117:
1831:FreeRTOS/Source/tasks.c **** 	}
1832:FreeRTOS/Source/tasks.c **** 
1833:FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2746              		.loc 1 1833 0
 2747 0096 BB68     		ldr	r3, [r7, #8]
 2748 0098 DA6A     		ldr	r2, [r3, #44]
 2749 009a 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2750 009e C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2751 00a2 1B68     		ldr	r3, [r3, #0]
 2752 00a4 DB6A     		ldr	r3, [r3, #44]
 2753 00a6 9A42     		cmp	r2, r3
 2754 00a8 03D3     		bcc	.L118
1834:FreeRTOS/Source/tasks.c **** 	{
1835:FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
1836:FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
1837:FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
1838:FreeRTOS/Source/tasks.c **** 		switch now. */
1839:FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 2755              		.loc 1 1839 0
 2756 00aa 4FF00103 		mov	r3, #1
 2757 00ae FB60     		str	r3, [r7, #12]
 2758 00b0 02E0     		b	.L119
 2759              	.L118:
1840:FreeRTOS/Source/tasks.c **** 	}
1841:FreeRTOS/Source/tasks.c **** 	else
1842:FreeRTOS/Source/tasks.c **** 	{
1843:FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 2760              		.loc 1 1843 0
 2761 00b2 4FF00003 		mov	r3, #0
 2762 00b6 FB60     		str	r3, [r7, #12]
 2763              	.L119:
1844:FreeRTOS/Source/tasks.c **** 	}
1845:FreeRTOS/Source/tasks.c **** 
1846:FreeRTOS/Source/tasks.c **** 	return xReturn;
 2764              		.loc 1 1846 0
 2765 00b8 FB68     		ldr	r3, [r7, #12]
1847:FreeRTOS/Source/tasks.c **** }
 2766              		.loc 1 1847 0
 2767 00ba 1846     		mov	r0, r3
 2768 00bc 07F11007 		add	r7, r7, #16
 2769 00c0 BD46     		mov	sp, r7
 2770 00c2 80BD     		pop	{r7, pc}
 2771              		.cfi_endproc
 2772              	.LFE136:
 2774              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 2775              		.align	2
 2776              		.global	vTaskSetTimeOutState
 2777              		.thumb
 2778              		.thumb_func
 2780              	vTaskSetTimeOutState:
 2781              	.LFB137:
1848:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1849:FreeRTOS/Source/tasks.c **** 
1850:FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
1851:FreeRTOS/Source/tasks.c **** {
 2782              		.loc 1 1851 0
 2783              		.cfi_startproc
 2784              		@ args = 0, pretend = 0, frame = 8
 2785              		@ frame_needed = 1, uses_anonymous_args = 0
 2786              		@ link register save eliminated.
 2787 0000 80B4     		push	{r7}
 2788              	.LCFI77:
 2789              		.cfi_def_cfa_offset 4
 2790              		.cfi_offset 7, -4
 2791 0002 83B0     		sub	sp, sp, #12
 2792              	.LCFI78:
 2793              		.cfi_def_cfa_offset 16
 2794 0004 00AF     		add	r7, sp, #0
 2795              	.LCFI79:
 2796              		.cfi_def_cfa_register 7
 2797 0006 7860     		str	r0, [r7, #4]
1852:FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
1853:FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 2798              		.loc 1 1853 0
 2799 0008 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 2800 000c C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 2801 0010 1A68     		ldr	r2, [r3, #0]
 2802 0012 7B68     		ldr	r3, [r7, #4]
 2803 0014 1A60     		str	r2, [r3, #0]
1854:FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2804              		.loc 1 1854 0
 2805 0016 40F20003 		movw	r3, #:lower16:xTickCount
 2806 001a C0F20003 		movt	r3, #:upper16:xTickCount
 2807 001e 1A68     		ldr	r2, [r3, #0]
 2808 0020 7B68     		ldr	r3, [r7, #4]
 2809 0022 5A60     		str	r2, [r3, #4]
1855:FreeRTOS/Source/tasks.c **** }
 2810              		.loc 1 1855 0
 2811 0024 07F10C07 		add	r7, r7, #12
 2812 0028 BD46     		mov	sp, r7
 2813 002a 80BC     		pop	{r7}
 2814 002c 7047     		bx	lr
 2815              		.cfi_endproc
 2816              	.LFE137:
 2818 002e 00BF     		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 2819              		.align	2
 2820              		.global	xTaskCheckForTimeOut
 2821              		.thumb
 2822              		.thumb_func
 2824              	xTaskCheckForTimeOut:
 2825              	.LFB138:
1856:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1857:FreeRTOS/Source/tasks.c **** 
1858:FreeRTOS/Source/tasks.c **** portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToW
1859:FreeRTOS/Source/tasks.c **** {
 2826              		.loc 1 1859 0
 2827              		.cfi_startproc
 2828              		@ args = 0, pretend = 0, frame = 16
 2829              		@ frame_needed = 1, uses_anonymous_args = 0
 2830 0000 80B5     		push	{r7, lr}
 2831              	.LCFI80:
 2832              		.cfi_def_cfa_offset 8
 2833              		.cfi_offset 14, -4
 2834              		.cfi_offset 7, -8
 2835 0002 84B0     		sub	sp, sp, #16
 2836              	.LCFI81:
 2837              		.cfi_def_cfa_offset 24
 2838 0004 00AF     		add	r7, sp, #0
 2839              	.LCFI82:
 2840              		.cfi_def_cfa_register 7
 2841 0006 7860     		str	r0, [r7, #4]
 2842 0008 3960     		str	r1, [r7, #0]
1860:FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
1861:FreeRTOS/Source/tasks.c **** 
1862:FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
1863:FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
1864:FreeRTOS/Source/tasks.c **** 
1865:FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2843              		.loc 1 1865 0
 2844 000a FFF7FEFF 		bl	vPortEnterCritical
1866:FreeRTOS/Source/tasks.c **** 	{
1867:FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
1868:FreeRTOS/Source/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
1869:FreeRTOS/Source/tasks.c **** 			the maximum block time then the task should block indefinitely, and
1870:FreeRTOS/Source/tasks.c **** 			therefore never time out. */
1871:FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 2845              		.loc 1 1871 0
 2846 000e 3B68     		ldr	r3, [r7, #0]
 2847 0010 1B68     		ldr	r3, [r3, #0]
 2848 0012 B3F1FF3F 		cmp	r3, #-1
 2849 0016 03D1     		bne	.L122
1872:FreeRTOS/Source/tasks.c **** 			{
1873:FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 2850              		.loc 1 1873 0
 2851 0018 4FF00003 		mov	r3, #0
 2852 001c FB60     		str	r3, [r7, #12]
 2853 001e 38E0     		b	.L123
 2854              	.L122:
1874:FreeRTOS/Source/tasks.c **** 			}
1875:FreeRTOS/Source/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
1876:FreeRTOS/Source/tasks.c **** 		#endif
1877:FreeRTOS/Source/tasks.c **** 
1878:FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTi
 2855              		.loc 1 1878 0
 2856 0020 7B68     		ldr	r3, [r7, #4]
 2857 0022 1A68     		ldr	r2, [r3, #0]
 2858 0024 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 2859 0028 C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 2860 002c 1B68     		ldr	r3, [r3, #0]
 2861 002e 9A42     		cmp	r2, r3
 2862 0030 0CD0     		beq	.L124
 2863              		.loc 1 1878 0 is_stmt 0 discriminator 1
 2864 0032 7B68     		ldr	r3, [r7, #4]
 2865 0034 5A68     		ldr	r2, [r3, #4]
 2866 0036 40F20003 		movw	r3, #:lower16:xTickCount
 2867 003a C0F20003 		movt	r3, #:upper16:xTickCount
 2868 003e 1B68     		ldr	r3, [r3, #0]
 2869 0040 9A42     		cmp	r2, r3
 2870 0042 03D8     		bhi	.L124
1879:FreeRTOS/Source/tasks.c **** 		{
1880:FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
1881:FreeRTOS/Source/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
1882:FreeRTOS/Source/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
1883:FreeRTOS/Source/tasks.c **** 			passed since vTaskSetTimeout() was called. */
1884:FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 2871              		.loc 1 1884 0 is_stmt 1
 2872 0044 4FF00103 		mov	r3, #1
 2873 0048 FB60     		str	r3, [r7, #12]
 2874 004a 22E0     		b	.L123
 2875              	.L124:
1885:FreeRTOS/Source/tasks.c **** 		}
1886:FreeRTOS/Source/tasks.c **** 		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEn
 2876              		.loc 1 1886 0
 2877 004c 40F20003 		movw	r3, #:lower16:xTickCount
 2878 0050 C0F20003 		movt	r3, #:upper16:xTickCount
 2879 0054 1A68     		ldr	r2, [r3, #0]
 2880 0056 7B68     		ldr	r3, [r7, #4]
 2881 0058 5B68     		ldr	r3, [r3, #4]
 2882 005a D21A     		subs	r2, r2, r3
 2883 005c 3B68     		ldr	r3, [r7, #0]
 2884 005e 1B68     		ldr	r3, [r3, #0]
 2885 0060 9A42     		cmp	r2, r3
 2886 0062 13D2     		bcs	.L125
1887:FreeRTOS/Source/tasks.c **** 		{
1888:FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
1889:FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 2887              		.loc 1 1889 0
 2888 0064 3B68     		ldr	r3, [r7, #0]
 2889 0066 1A68     		ldr	r2, [r3, #0]
 2890 0068 7B68     		ldr	r3, [r7, #4]
 2891 006a 5968     		ldr	r1, [r3, #4]
 2892 006c 40F20003 		movw	r3, #:lower16:xTickCount
 2893 0070 C0F20003 		movt	r3, #:upper16:xTickCount
 2894 0074 1B68     		ldr	r3, [r3, #0]
 2895 0076 CB1A     		subs	r3, r1, r3
 2896 0078 D218     		adds	r2, r2, r3
 2897 007a 3B68     		ldr	r3, [r7, #0]
 2898 007c 1A60     		str	r2, [r3, #0]
1890:FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 2899              		.loc 1 1890 0
 2900 007e 7868     		ldr	r0, [r7, #4]
 2901 0080 FFF7FEFF 		bl	vTaskSetTimeOutState
1891:FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 2902              		.loc 1 1891 0
 2903 0084 4FF00003 		mov	r3, #0
 2904 0088 FB60     		str	r3, [r7, #12]
 2905 008a 02E0     		b	.L123
 2906              	.L125:
1892:FreeRTOS/Source/tasks.c **** 		}
1893:FreeRTOS/Source/tasks.c **** 		else
1894:FreeRTOS/Source/tasks.c **** 		{
1895:FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 2907              		.loc 1 1895 0
 2908 008c 4FF00103 		mov	r3, #1
 2909 0090 FB60     		str	r3, [r7, #12]
 2910              	.L123:
1896:FreeRTOS/Source/tasks.c **** 		}
1897:FreeRTOS/Source/tasks.c **** 	}
1898:FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 2911              		.loc 1 1898 0
 2912 0092 FFF7FEFF 		bl	vPortExitCritical
1899:FreeRTOS/Source/tasks.c **** 
1900:FreeRTOS/Source/tasks.c **** 	return xReturn;
 2913              		.loc 1 1900 0
 2914 0096 FB68     		ldr	r3, [r7, #12]
1901:FreeRTOS/Source/tasks.c **** }
 2915              		.loc 1 1901 0
 2916 0098 1846     		mov	r0, r3
 2917 009a 07F11007 		add	r7, r7, #16
 2918 009e BD46     		mov	sp, r7
 2919 00a0 80BD     		pop	{r7, pc}
 2920              		.cfi_endproc
 2921              	.LFE138:
 2923 00a2 00BF     		.section	.text.vTaskMissedYield,"ax",%progbits
 2924              		.align	2
 2925              		.global	vTaskMissedYield
 2926              		.thumb
 2927              		.thumb_func
 2929              	vTaskMissedYield:
 2930              	.LFB139:
1902:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1903:FreeRTOS/Source/tasks.c **** 
1904:FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
1905:FreeRTOS/Source/tasks.c **** {
 2931              		.loc 1 1905 0
 2932              		.cfi_startproc
 2933              		@ args = 0, pretend = 0, frame = 0
 2934              		@ frame_needed = 1, uses_anonymous_args = 0
 2935              		@ link register save eliminated.
 2936 0000 80B4     		push	{r7}
 2937              	.LCFI83:
 2938              		.cfi_def_cfa_offset 4
 2939              		.cfi_offset 7, -4
 2940 0002 00AF     		add	r7, sp, #0
 2941              	.LCFI84:
 2942              		.cfi_def_cfa_register 7
1906:FreeRTOS/Source/tasks.c **** 	xMissedYield = pdTRUE;
 2943              		.loc 1 1906 0
 2944 0004 40F20003 		movw	r3, #:lower16:xMissedYield
 2945 0008 C0F20003 		movt	r3, #:upper16:xMissedYield
 2946 000c 4FF00102 		mov	r2, #1
 2947 0010 1A60     		str	r2, [r3, #0]
1907:FreeRTOS/Source/tasks.c **** }
 2948              		.loc 1 1907 0
 2949 0012 BD46     		mov	sp, r7
 2950 0014 80BC     		pop	{r7}
 2951 0016 7047     		bx	lr
 2952              		.cfi_endproc
 2953              	.LFE139:
 2955              		.section	.text.prvIdleTask,"ax",%progbits
 2956              		.align	2
 2957              		.thumb
 2958              		.thumb_func
 2960              	prvIdleTask:
 2961              	.LFB140:
1908:FreeRTOS/Source/tasks.c **** 
1909:FreeRTOS/Source/tasks.c **** /*
1910:FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
1911:FreeRTOS/Source/tasks.c ****  * The Idle task.
1912:FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
1913:FreeRTOS/Source/tasks.c ****  *
1914:FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
1915:FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
1916:FreeRTOS/Source/tasks.c ****  *
1917:FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
1918:FreeRTOS/Source/tasks.c ****  *
1919:FreeRTOS/Source/tasks.c ****  */
1920:FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
1921:FreeRTOS/Source/tasks.c **** {
 2962              		.loc 1 1921 0
 2963              		.cfi_startproc
 2964              		@ args = 0, pretend = 0, frame = 8
 2965              		@ frame_needed = 1, uses_anonymous_args = 0
 2966 0000 80B5     		push	{r7, lr}
 2967              	.LCFI85:
 2968              		.cfi_def_cfa_offset 8
 2969              		.cfi_offset 14, -4
 2970              		.cfi_offset 7, -8
 2971 0002 82B0     		sub	sp, sp, #8
 2972              	.LCFI86:
 2973              		.cfi_def_cfa_offset 16
 2974 0004 00AF     		add	r7, sp, #0
 2975              	.LCFI87:
 2976              		.cfi_def_cfa_register 7
 2977 0006 7860     		str	r0, [r7, #4]
 2978 0008 00E0     		b	.L129
 2979              	.L130:
1922:FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
1923:FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
1924:FreeRTOS/Source/tasks.c **** 
1925:FreeRTOS/Source/tasks.c **** 	for( ;; )
1926:FreeRTOS/Source/tasks.c **** 	{
1927:FreeRTOS/Source/tasks.c **** 		/* See if any tasks have been deleted. */
1928:FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
1929:FreeRTOS/Source/tasks.c **** 
1930:FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
1931:FreeRTOS/Source/tasks.c **** 		{
1932:FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
1933:FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
1934:FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
1935:FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
1936:FreeRTOS/Source/tasks.c **** 			taskYIELD();
1937:FreeRTOS/Source/tasks.c **** 		}
1938:FreeRTOS/Source/tasks.c **** 		#endif
1939:FreeRTOS/Source/tasks.c **** 
1940:FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
1941:FreeRTOS/Source/tasks.c **** 		{
1942:FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
1943:FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
1944:FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
1945:FreeRTOS/Source/tasks.c **** 			timeslice.
1946:FreeRTOS/Source/tasks.c **** 
1947:FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
1948:FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
1949:FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
1950:FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
1951:FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
1952:FreeRTOS/Source/tasks.c **** 			{
1953:FreeRTOS/Source/tasks.c **** 				taskYIELD();
1954:FreeRTOS/Source/tasks.c **** 			}
1955:FreeRTOS/Source/tasks.c **** 		}
1956:FreeRTOS/Source/tasks.c **** 		#endif
1957:FreeRTOS/Source/tasks.c **** 
1958:FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
1959:FreeRTOS/Source/tasks.c **** 		{
1960:FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
1961:FreeRTOS/Source/tasks.c **** 
1962:FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
1963:FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
1964:FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
1965:FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
1966:FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
1967:FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
1968:FreeRTOS/Source/tasks.c **** 		}
1969:FreeRTOS/Source/tasks.c **** 		#endif
1970:FreeRTOS/Source/tasks.c **** 	}
 2980              		.loc 1 1970 0
 2981 000a 00BF     		nop
 2982              	.L129:
1928:FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 2983              		.loc 1 1928 0
 2984 000c FFF7FEFF 		bl	prvCheckTasksWaitingTermination
1951:FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
 2985              		.loc 1 1951 0
 2986 0010 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2987 0014 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2988 0018 1B68     		ldr	r3, [r3, #0]
 2989 001a 012B     		cmp	r3, #1
 2990 001c F5D9     		bls	.L130
1953:FreeRTOS/Source/tasks.c **** 				taskYIELD();
 2991              		.loc 1 1953 0
 2992 001e FFF7FEFF 		bl	vPortYieldFromISR
 2993              		.loc 1 1970 0
 2994 0022 F2E7     		b	.L130
 2995              		.cfi_endproc
 2996              	.LFE140:
 2998              		.section	.text.prvInitialiseTCBVariables,"ax",%progbits
 2999              		.align	2
 3000              		.thumb
 3001              		.thumb_func
 3003              	prvInitialiseTCBVariables:
 3004              	.LFB141:
1971:FreeRTOS/Source/tasks.c **** } /*lint !e715 pvParameters is not accessed but all task functions require the same prototype. */
1972:FreeRTOS/Source/tasks.c **** 
1973:FreeRTOS/Source/tasks.c **** 
1974:FreeRTOS/Source/tasks.c **** 
1975:FreeRTOS/Source/tasks.c **** 
1976:FreeRTOS/Source/tasks.c **** 
1977:FreeRTOS/Source/tasks.c **** 
1978:FreeRTOS/Source/tasks.c **** 
1979:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
1980:FreeRTOS/Source/tasks.c ****  * File private functions documented at the top of the file.
1981:FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
1982:FreeRTOS/Source/tasks.c **** 
1983:FreeRTOS/Source/tasks.c **** 
1984:FreeRTOS/Source/tasks.c **** 
1985:FreeRTOS/Source/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
1986:FreeRTOS/Source/tasks.c **** {
 3005              		.loc 1 1986 0
 3006              		.cfi_startproc
 3007              		@ args = 4, pretend = 0, frame = 16
 3008              		@ frame_needed = 1, uses_anonymous_args = 0
 3009 0000 80B5     		push	{r7, lr}
 3010              	.LCFI88:
 3011              		.cfi_def_cfa_offset 8
 3012              		.cfi_offset 14, -4
 3013              		.cfi_offset 7, -8
 3014 0002 84B0     		sub	sp, sp, #16
 3015              	.LCFI89:
 3016              		.cfi_def_cfa_offset 24
 3017 0004 00AF     		add	r7, sp, #0
 3018              	.LCFI90:
 3019              		.cfi_def_cfa_register 7
 3020 0006 F860     		str	r0, [r7, #12]
 3021 0008 B960     		str	r1, [r7, #8]
 3022 000a 7A60     		str	r2, [r7, #4]
 3023 000c 3B60     		str	r3, [r7, #0]
1987:FreeRTOS/Source/tasks.c **** 	/* Store the function name in the TCB. */
1988:FreeRTOS/Source/tasks.c **** 	#if configMAX_TASK_NAME_LEN > 1
1989:FreeRTOS/Source/tasks.c **** 	{
1990:FreeRTOS/Source/tasks.c **** 		/* Don't bring strncpy into the build unnecessarily. */
1991:FreeRTOS/Source/tasks.c **** 		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK
 3024              		.loc 1 1991 0
 3025 000e FB68     		ldr	r3, [r7, #12]
 3026 0010 03F13403 		add	r3, r3, #52
 3027 0014 1846     		mov	r0, r3
 3028 0016 B968     		ldr	r1, [r7, #8]
 3029 0018 4FF01002 		mov	r2, #16
 3030 001c FFF7FEFF 		bl	strncpy
1992:FreeRTOS/Source/tasks.c **** 	}
1993:FreeRTOS/Source/tasks.c **** 	#endif
1994:FreeRTOS/Source/tasks.c **** 	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed 
 3031              		.loc 1 1994 0
 3032 0020 FB68     		ldr	r3, [r7, #12]
 3033 0022 4FF00002 		mov	r2, #0
 3034 0026 83F84320 		strb	r2, [r3, #67]
1995:FreeRTOS/Source/tasks.c **** 
1996:FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
1997:FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
1998:FreeRTOS/Source/tasks.c **** 	if( uxPriority >= configMAX_PRIORITIES )
 3035              		.loc 1 1998 0
 3036 002a 7B68     		ldr	r3, [r7, #4]
 3037 002c 042B     		cmp	r3, #4
 3038 002e 02D9     		bls	.L132
1999:FreeRTOS/Source/tasks.c **** 	{
2000:FreeRTOS/Source/tasks.c **** 		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 3039              		.loc 1 2000 0
 3040 0030 4FF00403 		mov	r3, #4
 3041 0034 7B60     		str	r3, [r7, #4]
 3042              	.L132:
2001:FreeRTOS/Source/tasks.c **** 	}
2002:FreeRTOS/Source/tasks.c **** 
2003:FreeRTOS/Source/tasks.c **** 	pxTCB->uxPriority = uxPriority;
 3043              		.loc 1 2003 0
 3044 0036 FB68     		ldr	r3, [r7, #12]
 3045 0038 7A68     		ldr	r2, [r7, #4]
 3046 003a DA62     		str	r2, [r3, #44]
2004:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2005:FreeRTOS/Source/tasks.c **** 	{
2006:FreeRTOS/Source/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
 3047              		.loc 1 2006 0
 3048 003c FB68     		ldr	r3, [r7, #12]
 3049 003e 7A68     		ldr	r2, [r7, #4]
 3050 0040 5A64     		str	r2, [r3, #68]
2007:FreeRTOS/Source/tasks.c **** 	}
2008:FreeRTOS/Source/tasks.c **** 	#endif
2009:FreeRTOS/Source/tasks.c **** 
2010:FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 3051              		.loc 1 2010 0
 3052 0042 FB68     		ldr	r3, [r7, #12]
 3053 0044 03F10403 		add	r3, r3, #4
 3054 0048 1846     		mov	r0, r3
 3055 004a FFF7FEFF 		bl	vListInitialiseItem
2011:FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 3056              		.loc 1 2011 0
 3057 004e FB68     		ldr	r3, [r7, #12]
 3058 0050 03F11803 		add	r3, r3, #24
 3059 0054 1846     		mov	r0, r3
 3060 0056 FFF7FEFF 		bl	vListInitialiseItem
2012:FreeRTOS/Source/tasks.c **** 
2013:FreeRTOS/Source/tasks.c **** 	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
2014:FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2015:FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 3061              		.loc 1 2015 0
 3062 005a FB68     		ldr	r3, [r7, #12]
 3063 005c FA68     		ldr	r2, [r7, #12]
 3064 005e 1A61     		str	r2, [r3, #16]
2016:FreeRTOS/Source/tasks.c **** 
2017:FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
2018:FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPri
 3065              		.loc 1 2018 0
 3066 0060 7B68     		ldr	r3, [r7, #4]
 3067 0062 C3F10502 		rsb	r2, r3, #5
 3068 0066 FB68     		ldr	r3, [r7, #12]
 3069 0068 9A61     		str	r2, [r3, #24]
2019:FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 3070              		.loc 1 2019 0
 3071 006a FB68     		ldr	r3, [r7, #12]
 3072 006c FA68     		ldr	r2, [r7, #12]
 3073 006e 5A62     		str	r2, [r3, #36]
2020:FreeRTOS/Source/tasks.c **** 
2021:FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2022:FreeRTOS/Source/tasks.c **** 	{
2023:FreeRTOS/Source/tasks.c **** 		pxTCB->uxCriticalNesting = ( unsigned portBASE_TYPE ) 0U;
2024:FreeRTOS/Source/tasks.c **** 	}
2025:FreeRTOS/Source/tasks.c **** 	#endif
2026:FreeRTOS/Source/tasks.c **** 
2027:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2028:FreeRTOS/Source/tasks.c **** 	{
2029:FreeRTOS/Source/tasks.c **** 		pxTCB->pxTaskTag = NULL;
 3074              		.loc 1 2029 0
 3075 0070 FB68     		ldr	r3, [r7, #12]
 3076 0072 4FF00002 		mov	r2, #0
 3077 0076 9A64     		str	r2, [r3, #72]
2030:FreeRTOS/Source/tasks.c **** 	}
2031:FreeRTOS/Source/tasks.c **** 	#endif
2032:FreeRTOS/Source/tasks.c **** 
2033:FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2034:FreeRTOS/Source/tasks.c **** 	{
2035:FreeRTOS/Source/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
 3078              		.loc 1 2035 0
 3079 0078 FB68     		ldr	r3, [r7, #12]
 3080 007a 4FF00002 		mov	r2, #0
 3081 007e DA64     		str	r2, [r3, #76]
2036:FreeRTOS/Source/tasks.c **** 	}
2037:FreeRTOS/Source/tasks.c **** 	#endif
2038:FreeRTOS/Source/tasks.c **** 
2039:FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2040:FreeRTOS/Source/tasks.c **** 	{
2041:FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2042:FreeRTOS/Source/tasks.c **** 	}
2043:FreeRTOS/Source/tasks.c **** 	#else
2044:FreeRTOS/Source/tasks.c **** 	{
2045:FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
2046:FreeRTOS/Source/tasks.c **** 		( void ) usStackDepth;
2047:FreeRTOS/Source/tasks.c **** 	}
2048:FreeRTOS/Source/tasks.c **** 	#endif
2049:FreeRTOS/Source/tasks.c **** }
 3082              		.loc 1 2049 0
 3083 0080 07F11007 		add	r7, r7, #16
 3084 0084 BD46     		mov	sp, r7
 3085 0086 80BD     		pop	{r7, pc}
 3086              		.cfi_endproc
 3087              	.LFE141:
 3089              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 3090              		.align	2
 3091              		.thumb
 3092              		.thumb_func
 3094              	prvInitialiseTaskLists:
 3095              	.LFB142:
2050:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2051:FreeRTOS/Source/tasks.c **** 
2052:FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2053:FreeRTOS/Source/tasks.c **** 
2054:FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( xTaskHandle xTaskToModify, const xMemoryRegion * const xRegions )
2055:FreeRTOS/Source/tasks.c **** 	{
2056:FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
2057:FreeRTOS/Source/tasks.c **** 	
2058:FreeRTOS/Source/tasks.c **** 		if( xTaskToModify == pxCurrentTCB )
2059:FreeRTOS/Source/tasks.c **** 		{
2060:FreeRTOS/Source/tasks.c **** 			xTaskToModify = NULL;
2061:FreeRTOS/Source/tasks.c **** 		}
2062:FreeRTOS/Source/tasks.c **** 
2063:FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are deleting ourselves. */
2064:FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2065:FreeRTOS/Source/tasks.c **** 
2066:FreeRTOS/Source/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2067:FreeRTOS/Source/tasks.c **** 	}
2068:FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
2069:FreeRTOS/Source/tasks.c **** #endif
2070:FreeRTOS/Source/tasks.c **** 
2071:FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
2072:FreeRTOS/Source/tasks.c **** {
 3096              		.loc 1 2072 0
 3097              		.cfi_startproc
 3098              		@ args = 0, pretend = 0, frame = 8
 3099              		@ frame_needed = 1, uses_anonymous_args = 0
 3100 0000 80B5     		push	{r7, lr}
 3101              	.LCFI91:
 3102              		.cfi_def_cfa_offset 8
 3103              		.cfi_offset 14, -4
 3104              		.cfi_offset 7, -8
 3105 0002 82B0     		sub	sp, sp, #8
 3106              	.LCFI92:
 3107              		.cfi_def_cfa_offset 16
 3108 0004 00AF     		add	r7, sp, #0
 3109              	.LCFI93:
 3110              		.cfi_def_cfa_register 7
2073:FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxPriority;
2074:FreeRTOS/Source/tasks.c **** 
2075:FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 3111              		.loc 1 2075 0
 3112 0006 4FF00003 		mov	r3, #0
 3113 000a 7B60     		str	r3, [r7, #4]
 3114 000c 13E0     		b	.L134
 3115              	.L135:
2076:FreeRTOS/Source/tasks.c **** 	{
2077:FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 3116              		.loc 1 2077 0 discriminator 2
 3117 000e 7A68     		ldr	r2, [r7, #4]
 3118 0010 1346     		mov	r3, r2
 3119 0012 4FEA8303 		lsl	r3, r3, #2
 3120 0016 9B18     		adds	r3, r3, r2
 3121 0018 4FEA8303 		lsl	r3, r3, #2
 3122 001c 1A46     		mov	r2, r3
 3123 001e 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 3124 0022 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 3125 0026 D318     		adds	r3, r2, r3
 3126 0028 1846     		mov	r0, r3
 3127 002a FFF7FEFF 		bl	vListInitialise
2075:FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 3128              		.loc 1 2075 0 discriminator 2
 3129 002e 7B68     		ldr	r3, [r7, #4]
 3130 0030 03F10103 		add	r3, r3, #1
 3131 0034 7B60     		str	r3, [r7, #4]
 3132              	.L134:
2075:FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 3133              		.loc 1 2075 0 is_stmt 0 discriminator 1
 3134 0036 7B68     		ldr	r3, [r7, #4]
 3135 0038 042B     		cmp	r3, #4
 3136 003a E8D9     		bls	.L135
2078:FreeRTOS/Source/tasks.c **** 	}
2079:FreeRTOS/Source/tasks.c **** 
2080:FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 3137              		.loc 1 2080 0 is_stmt 1
 3138 003c 40F20000 		movw	r0, #:lower16:xDelayedTaskList1
 3139 0040 C0F20000 		movt	r0, #:upper16:xDelayedTaskList1
 3140 0044 FFF7FEFF 		bl	vListInitialise
2081:FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 3141              		.loc 1 2081 0
 3142 0048 40F20000 		movw	r0, #:lower16:xDelayedTaskList2
 3143 004c C0F20000 		movt	r0, #:upper16:xDelayedTaskList2
 3144 0050 FFF7FEFF 		bl	vListInitialise
2082:FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xPendingReadyList );
 3145              		.loc 1 2082 0
 3146 0054 40F20000 		movw	r0, #:lower16:xPendingReadyList
 3147 0058 C0F20000 		movt	r0, #:upper16:xPendingReadyList
 3148 005c FFF7FEFF 		bl	vListInitialise
2083:FreeRTOS/Source/tasks.c **** 
2084:FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2085:FreeRTOS/Source/tasks.c **** 	{
2086:FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 3149              		.loc 1 2086 0
 3150 0060 40F20000 		movw	r0, #:lower16:xTasksWaitingTermination
 3151 0064 C0F20000 		movt	r0, #:upper16:xTasksWaitingTermination
 3152 0068 FFF7FEFF 		bl	vListInitialise
2087:FreeRTOS/Source/tasks.c **** 	}
2088:FreeRTOS/Source/tasks.c **** 	#endif
2089:FreeRTOS/Source/tasks.c **** 
2090:FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2091:FreeRTOS/Source/tasks.c **** 	{
2092:FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &xSuspendedTaskList );
 3153              		.loc 1 2092 0
 3154 006c 40F20000 		movw	r0, #:lower16:xSuspendedTaskList
 3155 0070 C0F20000 		movt	r0, #:upper16:xSuspendedTaskList
 3156 0074 FFF7FEFF 		bl	vListInitialise
2093:FreeRTOS/Source/tasks.c **** 	}
2094:FreeRTOS/Source/tasks.c **** 	#endif
2095:FreeRTOS/Source/tasks.c **** 
2096:FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
2097:FreeRTOS/Source/tasks.c **** 	using list2. */
2098:FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 3157              		.loc 1 2098 0
 3158 0078 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 3159 007c C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 3160 0080 40F20002 		movw	r2, #:lower16:xDelayedTaskList1
 3161 0084 C0F20002 		movt	r2, #:upper16:xDelayedTaskList1
 3162 0088 1A60     		str	r2, [r3, #0]
2099:FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 3163              		.loc 1 2099 0
 3164 008a 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 3165 008e C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 3166 0092 40F20002 		movw	r2, #:lower16:xDelayedTaskList2
 3167 0096 C0F20002 		movt	r2, #:upper16:xDelayedTaskList2
 3168 009a 1A60     		str	r2, [r3, #0]
2100:FreeRTOS/Source/tasks.c **** }
 3169              		.loc 1 2100 0
 3170 009c 07F10807 		add	r7, r7, #8
 3171 00a0 BD46     		mov	sp, r7
 3172 00a2 80BD     		pop	{r7, pc}
 3173              		.cfi_endproc
 3174              	.LFE142:
 3176              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 3177              		.align	2
 3178              		.thumb
 3179              		.thumb_func
 3181              	prvCheckTasksWaitingTermination:
 3182              	.LFB143:
2101:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2102:FreeRTOS/Source/tasks.c **** 
2103:FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
2104:FreeRTOS/Source/tasks.c **** {
 3183              		.loc 1 2104 0
 3184              		.cfi_startproc
 3185              		@ args = 0, pretend = 0, frame = 8
 3186              		@ frame_needed = 1, uses_anonymous_args = 0
 3187 0000 80B5     		push	{r7, lr}
 3188              	.LCFI94:
 3189              		.cfi_def_cfa_offset 8
 3190              		.cfi_offset 14, -4
 3191              		.cfi_offset 7, -8
 3192 0002 82B0     		sub	sp, sp, #8
 3193              	.LCFI95:
 3194              		.cfi_def_cfa_offset 16
 3195 0004 00AF     		add	r7, sp, #0
 3196              	.LCFI96:
 3197              		.cfi_def_cfa_register 7
 3198              	.LBB8:
2105:FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2106:FreeRTOS/Source/tasks.c **** 	{
2107:FreeRTOS/Source/tasks.c **** 		portBASE_TYPE xListIsEmpty;
2108:FreeRTOS/Source/tasks.c **** 
2109:FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
2110:FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
2111:FreeRTOS/Source/tasks.c **** 		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 3199              		.loc 1 2111 0
 3200 0006 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 3201 000a C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 3202 000e 1B68     		ldr	r3, [r3, #0]
 3203 0010 002B     		cmp	r3, #0
 3204 0012 3CD0     		beq	.L136
2112:FreeRTOS/Source/tasks.c **** 		{
2113:FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3205              		.loc 1 2113 0
 3206 0014 FFF7FEFF 		bl	vTaskSuspendAll
2114:FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 3207              		.loc 1 2114 0
 3208 0018 40F20003 		movw	r3, #:lower16:xTasksWaitingTermination
 3209 001c C0F20003 		movt	r3, #:upper16:xTasksWaitingTermination
 3210 0020 1B68     		ldr	r3, [r3, #0]
 3211 0022 002B     		cmp	r3, #0
 3212 0024 14BF     		ite	ne
 3213 0026 0023     		movne	r3, #0
 3214 0028 0123     		moveq	r3, #1
 3215 002a 7B60     		str	r3, [r7, #4]
2115:FreeRTOS/Source/tasks.c **** 			xTaskResumeAll();
 3216              		.loc 1 2115 0
 3217 002c FFF7FEFF 		bl	xTaskResumeAll
2116:FreeRTOS/Source/tasks.c **** 
2117:FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 3218              		.loc 1 2117 0
 3219 0030 7B68     		ldr	r3, [r7, #4]
 3220 0032 002B     		cmp	r3, #0
 3221 0034 2BD1     		bne	.L136
 3222              	.LBB9:
2118:FreeRTOS/Source/tasks.c **** 			{
2119:FreeRTOS/Source/tasks.c **** 				tskTCB *pxTCB;
2120:FreeRTOS/Source/tasks.c **** 
2121:FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
 3223              		.loc 1 2121 0
 3224 0036 FFF7FEFF 		bl	vPortEnterCritical
2122:FreeRTOS/Source/tasks.c **** 				{
2123:FreeRTOS/Source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 3225              		.loc 1 2123 0
 3226 003a 40F20003 		movw	r3, #:lower16:xTasksWaitingTermination
 3227 003e C0F20003 		movt	r3, #:upper16:xTasksWaitingTermination
 3228 0042 DB68     		ldr	r3, [r3, #12]
 3229 0044 DB68     		ldr	r3, [r3, #12]
 3230 0046 3B60     		str	r3, [r7, #0]
2124:FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 3231              		.loc 1 2124 0
 3232 0048 3B68     		ldr	r3, [r7, #0]
 3233 004a 03F10403 		add	r3, r3, #4
 3234 004e 1846     		mov	r0, r3
 3235 0050 FFF7FEFF 		bl	vListRemove
2125:FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 3236              		.loc 1 2125 0
 3237 0054 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 3238 0058 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 3239 005c 1B68     		ldr	r3, [r3, #0]
 3240 005e 03F1FF32 		add	r2, r3, #-1
 3241 0062 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 3242 0066 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 3243 006a 1A60     		str	r2, [r3, #0]
2126:FreeRTOS/Source/tasks.c **** 					--uxTasksDeleted;
 3244              		.loc 1 2126 0
 3245 006c 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 3246 0070 C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 3247 0074 1B68     		ldr	r3, [r3, #0]
 3248 0076 03F1FF32 		add	r2, r3, #-1
 3249 007a 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 3250 007e C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 3251 0082 1A60     		str	r2, [r3, #0]
2127:FreeRTOS/Source/tasks.c **** 				}
2128:FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
 3252              		.loc 1 2128 0
 3253 0084 FFF7FEFF 		bl	vPortExitCritical
2129:FreeRTOS/Source/tasks.c **** 
2130:FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 3254              		.loc 1 2130 0
 3255 0088 3868     		ldr	r0, [r7, #0]
 3256 008a FFF7FEFF 		bl	prvDeleteTCB
 3257              	.L136:
 3258              	.LBE9:
 3259              	.LBE8:
2131:FreeRTOS/Source/tasks.c **** 			}
2132:FreeRTOS/Source/tasks.c **** 		}
2133:FreeRTOS/Source/tasks.c **** 	}
2134:FreeRTOS/Source/tasks.c **** 	#endif
2135:FreeRTOS/Source/tasks.c **** }
 3260              		.loc 1 2135 0
 3261 008e 07F10807 		add	r7, r7, #8
 3262 0092 BD46     		mov	sp, r7
 3263 0094 80BD     		pop	{r7, pc}
 3264              		.cfi_endproc
 3265              	.LFE143:
 3267 0096 00BF     		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 3268              		.align	2
 3269              		.thumb
 3270              		.thumb_func
 3272              	prvAddCurrentTaskToDelayedList:
 3273              	.LFB144:
2136:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2137:FreeRTOS/Source/tasks.c **** 
2138:FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
2139:FreeRTOS/Source/tasks.c **** {
 3274              		.loc 1 2139 0
 3275              		.cfi_startproc
 3276              		@ args = 0, pretend = 0, frame = 8
 3277              		@ frame_needed = 1, uses_anonymous_args = 0
 3278 0000 80B5     		push	{r7, lr}
 3279              	.LCFI97:
 3280              		.cfi_def_cfa_offset 8
 3281              		.cfi_offset 14, -4
 3282              		.cfi_offset 7, -8
 3283 0002 82B0     		sub	sp, sp, #8
 3284              	.LCFI98:
 3285              		.cfi_def_cfa_offset 16
 3286 0004 00AF     		add	r7, sp, #0
 3287              	.LCFI99:
 3288              		.cfi_def_cfa_register 7
 3289 0006 7860     		str	r0, [r7, #4]
2140:FreeRTOS/Source/tasks.c **** 	/* The list item will be inserted in wake time order. */
2141:FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 3290              		.loc 1 2141 0
 3291 0008 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3292 000c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3293 0010 1B68     		ldr	r3, [r3, #0]
 3294 0012 7A68     		ldr	r2, [r7, #4]
 3295 0014 5A60     		str	r2, [r3, #4]
2142:FreeRTOS/Source/tasks.c **** 
2143:FreeRTOS/Source/tasks.c **** 	if( xTimeToWake < xTickCount )
 3296              		.loc 1 2143 0
 3297 0016 40F20003 		movw	r3, #:lower16:xTickCount
 3298 001a C0F20003 		movt	r3, #:upper16:xTickCount
 3299 001e 1B68     		ldr	r3, [r3, #0]
 3300 0020 7A68     		ldr	r2, [r7, #4]
 3301 0022 9A42     		cmp	r2, r3
 3302 0024 10D2     		bcs	.L139
2144:FreeRTOS/Source/tasks.c **** 	{
2145:FreeRTOS/Source/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
2146:FreeRTOS/Source/tasks.c **** 		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericList
 3303              		.loc 1 2146 0
 3304 0026 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 3305 002a C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 3306 002e 1A68     		ldr	r2, [r3, #0]
 3307 0030 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3308 0034 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3309 0038 1B68     		ldr	r3, [r3, #0]
 3310 003a 03F10403 		add	r3, r3, #4
 3311 003e 1046     		mov	r0, r2
 3312 0040 1946     		mov	r1, r3
 3313 0042 FFF7FEFF 		bl	vListInsert
 3314 0046 1DE0     		b	.L138
 3315              	.L139:
2147:FreeRTOS/Source/tasks.c **** 	}
2148:FreeRTOS/Source/tasks.c **** 	else
2149:FreeRTOS/Source/tasks.c **** 	{
2150:FreeRTOS/Source/tasks.c **** 		/* The wake time has not overflowed, so we can use the current block list. */
2151:FreeRTOS/Source/tasks.c **** 		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) )
 3316              		.loc 1 2151 0
 3317 0048 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 3318 004c C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 3319 0050 1A68     		ldr	r2, [r3, #0]
 3320 0052 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3321 0056 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3322 005a 1B68     		ldr	r3, [r3, #0]
 3323 005c 03F10403 		add	r3, r3, #4
 3324 0060 1046     		mov	r0, r2
 3325 0062 1946     		mov	r1, r3
 3326 0064 FFF7FEFF 		bl	vListInsert
2152:FreeRTOS/Source/tasks.c **** 
2153:FreeRTOS/Source/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
2154:FreeRTOS/Source/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
2155:FreeRTOS/Source/tasks.c **** 		too. */
2156:FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
 3327              		.loc 1 2156 0
 3328 0068 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 3329 006c C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 3330 0070 1B68     		ldr	r3, [r3, #0]
 3331 0072 7A68     		ldr	r2, [r7, #4]
 3332 0074 9A42     		cmp	r2, r3
 3333 0076 05D2     		bcs	.L138
2157:FreeRTOS/Source/tasks.c **** 		{
2158:FreeRTOS/Source/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
 3334              		.loc 1 2158 0
 3335 0078 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 3336 007c C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 3337 0080 7A68     		ldr	r2, [r7, #4]
 3338 0082 1A60     		str	r2, [r3, #0]
 3339              	.L138:
2159:FreeRTOS/Source/tasks.c **** 		}
2160:FreeRTOS/Source/tasks.c **** 	}
2161:FreeRTOS/Source/tasks.c **** }
 3340              		.loc 1 2161 0
 3341 0084 07F10807 		add	r7, r7, #8
 3342 0088 BD46     		mov	sp, r7
 3343 008a 80BD     		pop	{r7, pc}
 3344              		.cfi_endproc
 3345              	.LFE144:
 3347              		.section	.text.prvAllocateTCBAndStack,"ax",%progbits
 3348              		.align	2
 3349              		.thumb
 3350              		.thumb_func
 3352              	prvAllocateTCBAndStack:
 3353              	.LFB145:
2162:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2163:FreeRTOS/Source/tasks.c **** 
2164:FreeRTOS/Source/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
2165:FreeRTOS/Source/tasks.c **** {
 3354              		.loc 1 2165 0
 3355              		.cfi_startproc
 3356              		@ args = 0, pretend = 0, frame = 16
 3357              		@ frame_needed = 1, uses_anonymous_args = 0
 3358 0000 80B5     		push	{r7, lr}
 3359              	.LCFI100:
 3360              		.cfi_def_cfa_offset 8
 3361              		.cfi_offset 14, -4
 3362              		.cfi_offset 7, -8
 3363 0002 84B0     		sub	sp, sp, #16
 3364              	.LCFI101:
 3365              		.cfi_def_cfa_offset 24
 3366 0004 00AF     		add	r7, sp, #0
 3367              	.LCFI102:
 3368              		.cfi_def_cfa_register 7
 3369 0006 0346     		mov	r3, r0
 3370 0008 3960     		str	r1, [r7, #0]
 3371 000a FB80     		strh	r3, [r7, #6]	@ movhi
2166:FreeRTOS/Source/tasks.c **** tskTCB *pxNewTCB;
2167:FreeRTOS/Source/tasks.c **** 
2168:FreeRTOS/Source/tasks.c **** 	/* Allocate space for the TCB.  Where the memory comes from depends on
2169:FreeRTOS/Source/tasks.c **** 	the implementation of the port malloc function. */
2170:FreeRTOS/Source/tasks.c **** 	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 3372              		.loc 1 2170 0
 3373 000c 4FF05000 		mov	r0, #80
 3374 0010 FFF7FEFF 		bl	malloc
 3375 0014 0346     		mov	r3, r0
 3376 0016 FB60     		str	r3, [r7, #12]
2171:FreeRTOS/Source/tasks.c **** 
2172:FreeRTOS/Source/tasks.c **** 	if( pxNewTCB != NULL )
 3377              		.loc 1 2172 0
 3378 0018 FB68     		ldr	r3, [r7, #12]
 3379 001a 002B     		cmp	r3, #0
 3380 001c 23D0     		beq	.L142
2173:FreeRTOS/Source/tasks.c **** 	{
2174:FreeRTOS/Source/tasks.c **** 		/* Allocate space for the stack used by the task being created.
2175:FreeRTOS/Source/tasks.c **** 		The base of the stack memory stored in the TCB so the task can
2176:FreeRTOS/Source/tasks.c **** 		be deleted later if required. */
2177:FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * size
 3381              		.loc 1 2177 0
 3382 001e 3B68     		ldr	r3, [r7, #0]
 3383 0020 002B     		cmp	r3, #0
 3384 0022 07D1     		bne	.L143
 3385              		.loc 1 2177 0 is_stmt 0 discriminator 1
 3386 0024 FB88     		ldrh	r3, [r7, #6]
 3387 0026 4FEA8303 		lsl	r3, r3, #2
 3388 002a 1846     		mov	r0, r3
 3389 002c FFF7FEFF 		bl	malloc
 3390 0030 0346     		mov	r3, r0
 3391 0032 00E0     		b	.L144
 3392              	.L143:
 3393              		.loc 1 2177 0 discriminator 2
 3394 0034 3B68     		ldr	r3, [r7, #0]
 3395              	.L144:
 3396              		.loc 1 2177 0 discriminator 3
 3397 0036 FA68     		ldr	r2, [r7, #12]
 3398 0038 1363     		str	r3, [r2, #48]
2178:FreeRTOS/Source/tasks.c **** 
2179:FreeRTOS/Source/tasks.c **** 		if( pxNewTCB->pxStack == NULL )
 3399              		.loc 1 2179 0 is_stmt 1 discriminator 3
 3400 003a FB68     		ldr	r3, [r7, #12]
 3401 003c 1B6B     		ldr	r3, [r3, #48]
 3402 003e 002B     		cmp	r3, #0
 3403 0040 06D1     		bne	.L145
2180:FreeRTOS/Source/tasks.c **** 		{
2181:FreeRTOS/Source/tasks.c **** 			/* Could not allocate the stack.  Delete the allocated TCB. */
2182:FreeRTOS/Source/tasks.c **** 			vPortFree( pxNewTCB );
 3404              		.loc 1 2182 0
 3405 0042 F868     		ldr	r0, [r7, #12]
 3406 0044 FFF7FEFF 		bl	free
2183:FreeRTOS/Source/tasks.c **** 			pxNewTCB = NULL;
 3407              		.loc 1 2183 0
 3408 0048 4FF00003 		mov	r3, #0
 3409 004c FB60     		str	r3, [r7, #12]
 3410 004e 0AE0     		b	.L142
 3411              	.L145:
2184:FreeRTOS/Source/tasks.c **** 		}
2185:FreeRTOS/Source/tasks.c **** 		else
2186:FreeRTOS/Source/tasks.c **** 		{
2187:FreeRTOS/Source/tasks.c **** 			/* Just to help debugging. */
2188:FreeRTOS/Source/tasks.c **** 			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTA
 3412              		.loc 1 2188 0
 3413 0050 FB68     		ldr	r3, [r7, #12]
 3414 0052 1A6B     		ldr	r2, [r3, #48]
 3415 0054 FB88     		ldrh	r3, [r7, #6]
 3416 0056 4FEA8303 		lsl	r3, r3, #2
 3417 005a 1046     		mov	r0, r2
 3418 005c 4FF0A501 		mov	r1, #165
 3419 0060 1A46     		mov	r2, r3
 3420 0062 FFF7FEFF 		bl	memset
 3421              	.L142:
2189:FreeRTOS/Source/tasks.c **** 		}
2190:FreeRTOS/Source/tasks.c **** 	}
2191:FreeRTOS/Source/tasks.c **** 
2192:FreeRTOS/Source/tasks.c **** 	return pxNewTCB;
 3422              		.loc 1 2192 0
 3423 0066 FB68     		ldr	r3, [r7, #12]
2193:FreeRTOS/Source/tasks.c **** }
 3424              		.loc 1 2193 0
 3425 0068 1846     		mov	r0, r3
 3426 006a 07F11007 		add	r7, r7, #16
 3427 006e BD46     		mov	sp, r7
 3428 0070 80BD     		pop	{r7, pc}
 3429              		.cfi_endproc
 3430              	.LFE145:
 3432 0072 00BF     		.section	.rodata
 3433 000b 00       		.align	2
 3434              	.LC2:
 3435 000c 25752020 		.ascii	"%u  %c  %-16s          0   0%%  %5u\015\012\000"
 3435      25632020 
 3435      252D3136 
 3435      73202020 
 3435      20202020 
 3436 0032 0000     		.align	2
 3437              	.LC3:
 3438 0034 25752020 		.ascii	"%u  %c  %-16s %10u %3u%%  %5u\015\012\000"
 3438      25632020 
 3438      252D3136 
 3438      73202531 
 3438      30752025 
 3439              		.align	2
 3440              	.LC4:
 3441 0054 25752020 		.ascii	"%u  %c  %-16s %10u  <1%%  %5u\015\012\000"
 3441      25632020 
 3441      252D3136 
 3441      73202531 
 3441      30752020 
 3442              		.section	.text.prvGenerateRunTimeStatsForTasksInList,"ax",%progbits
 3443              		.align	2
 3444              		.thumb
 3445              		.thumb_func
 3447              	prvGenerateRunTimeStatsForTasksInList:
 3448              	.LFB146:
2194:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2195:FreeRTOS/Source/tasks.c **** 
2196:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2197:FreeRTOS/Source/tasks.c **** 
2198:FreeRTOS/Source/tasks.c **** 	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed c
2199:FreeRTOS/Source/tasks.c **** 	{
2200:FreeRTOS/Source/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
2201:FreeRTOS/Source/tasks.c **** 	unsigned short usStackRemaining;
2202:FreeRTOS/Source/tasks.c **** 
2203:FreeRTOS/Source/tasks.c **** 		/* Write the details of all the TCB's in pxList into the buffer. */
2204:FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2205:FreeRTOS/Source/tasks.c **** 		do
2206:FreeRTOS/Source/tasks.c **** 		{
2207:FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2208:FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
2209:FreeRTOS/Source/tasks.c **** 			{
2210:FreeRTOS/Source/tasks.c **** 				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
2211:FreeRTOS/Source/tasks.c **** 			}
2212:FreeRTOS/Source/tasks.c **** 			#else
2213:FreeRTOS/Source/tasks.c **** 			{
2214:FreeRTOS/Source/tasks.c **** 				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
2215:FreeRTOS/Source/tasks.c **** 			}
2216:FreeRTOS/Source/tasks.c **** 			#endif			
2217:FreeRTOS/Source/tasks.c **** 			
2218:FreeRTOS/Source/tasks.c **** 			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, 
2219:FreeRTOS/Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
2220:FreeRTOS/Source/tasks.c **** 
2221:FreeRTOS/Source/tasks.c **** 		} while( pxNextTCB != pxFirstTCB );
2222:FreeRTOS/Source/tasks.c **** 	}
2223:FreeRTOS/Source/tasks.c **** 
2224:FreeRTOS/Source/tasks.c **** #endif
2225:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2226:FreeRTOS/Source/tasks.c **** 
2227:FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
2228:FreeRTOS/Source/tasks.c **** 
2229:FreeRTOS/Source/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList
2230:FreeRTOS/Source/tasks.c **** 	{
 3449              		.loc 1 2230 0
 3450              		.cfi_startproc
 3451              		@ args = 0, pretend = 0, frame = 40
 3452              		@ frame_needed = 1, uses_anonymous_args = 0
 3453 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3454              	.LCFI103:
 3455              		.cfi_def_cfa_offset 24
 3456              		.cfi_offset 14, -4
 3457              		.cfi_offset 8, -8
 3458              		.cfi_offset 7, -12
 3459              		.cfi_offset 6, -16
 3460              		.cfi_offset 5, -20
 3461              		.cfi_offset 4, -24
 3462 0004 8EB0     		sub	sp, sp, #56
 3463              	.LCFI104:
 3464              		.cfi_def_cfa_offset 80
 3465 0006 04AF     		add	r7, sp, #16
 3466              	.LCFI105:
 3467              		.cfi_def_cfa 7, 64
 3468 0008 F860     		str	r0, [r7, #12]
 3469 000a B960     		str	r1, [r7, #8]
 3470 000c 7A60     		str	r2, [r7, #4]
 3471 000e FB70     		strb	r3, [r7, #3]
 3472              	.LBB10:
2231:FreeRTOS/Source/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
2232:FreeRTOS/Source/tasks.c **** 	unsigned long ulStatsAsPercentage;
2233:FreeRTOS/Source/tasks.c **** 
2234:FreeRTOS/Source/tasks.c **** 		/* Write the run time stats of all the TCB's in pxList into the buffer. */
2235:FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 3473              		.loc 1 2235 0
 3474 0010 BB68     		ldr	r3, [r7, #8]
 3475 0012 7B62     		str	r3, [r7, #36]
 3476 0014 7B6A     		ldr	r3, [r7, #36]
 3477 0016 5B68     		ldr	r3, [r3, #4]
 3478 0018 5A68     		ldr	r2, [r3, #4]
 3479 001a 7B6A     		ldr	r3, [r7, #36]
 3480 001c 5A60     		str	r2, [r3, #4]
 3481 001e 7B6A     		ldr	r3, [r7, #36]
 3482 0020 5A68     		ldr	r2, [r3, #4]
 3483 0022 7B6A     		ldr	r3, [r7, #36]
 3484 0024 03F10803 		add	r3, r3, #8
 3485 0028 9A42     		cmp	r2, r3
 3486 002a 04D1     		bne	.L147
 3487              		.loc 1 2235 0 is_stmt 0 discriminator 1
 3488 002c 7B6A     		ldr	r3, [r7, #36]
 3489 002e 5B68     		ldr	r3, [r3, #4]
 3490 0030 5A68     		ldr	r2, [r3, #4]
 3491 0032 7B6A     		ldr	r3, [r7, #36]
 3492 0034 5A60     		str	r2, [r3, #4]
 3493              	.L147:
 3494              		.loc 1 2235 0 discriminator 2
 3495 0036 7B6A     		ldr	r3, [r7, #36]
 3496 0038 5B68     		ldr	r3, [r3, #4]
 3497 003a DB68     		ldr	r3, [r3, #12]
 3498 003c 3B62     		str	r3, [r7, #32]
 3499              	.L153:
 3500              	.LBE10:
 3501              	.LBB11:
2236:FreeRTOS/Source/tasks.c **** 		do
2237:FreeRTOS/Source/tasks.c **** 		{
2238:FreeRTOS/Source/tasks.c **** 			/* Get next TCB in from the list. */
2239:FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 3502              		.loc 1 2239 0 is_stmt 1
 3503 003e BB68     		ldr	r3, [r7, #8]
 3504 0040 FB61     		str	r3, [r7, #28]
 3505 0042 FB69     		ldr	r3, [r7, #28]
 3506 0044 5B68     		ldr	r3, [r3, #4]
 3507 0046 5A68     		ldr	r2, [r3, #4]
 3508 0048 FB69     		ldr	r3, [r7, #28]
 3509 004a 5A60     		str	r2, [r3, #4]
 3510 004c FB69     		ldr	r3, [r7, #28]
 3511 004e 5A68     		ldr	r2, [r3, #4]
 3512 0050 FB69     		ldr	r3, [r7, #28]
 3513 0052 03F10803 		add	r3, r3, #8
 3514 0056 9A42     		cmp	r2, r3
 3515 0058 04D1     		bne	.L148
 3516              		.loc 1 2239 0 is_stmt 0 discriminator 1
 3517 005a FB69     		ldr	r3, [r7, #28]
 3518 005c 5B68     		ldr	r3, [r3, #4]
 3519 005e 5A68     		ldr	r2, [r3, #4]
 3520 0060 FB69     		ldr	r3, [r7, #28]
 3521 0062 5A60     		str	r2, [r3, #4]
 3522              	.L148:
 3523              		.loc 1 2239 0 discriminator 2
 3524 0064 FB69     		ldr	r3, [r7, #28]
 3525 0066 5B68     		ldr	r3, [r3, #4]
 3526 0068 DB68     		ldr	r3, [r3, #12]
 3527 006a BB61     		str	r3, [r7, #24]
 3528              	.LBE11:
2240:FreeRTOS/Source/tasks.c **** 
2241:FreeRTOS/Source/tasks.c **** 			/* Divide by zero check. */
2242:FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > 0UL )
 3529              		.loc 1 2242 0 is_stmt 1 discriminator 2
 3530 006c 7B68     		ldr	r3, [r7, #4]
 3531 006e 002B     		cmp	r3, #0
 3532 0070 70D0     		beq	.L149
2243:FreeRTOS/Source/tasks.c **** 			{
2244:FreeRTOS/Source/tasks.c **** 				/* Has the task run at all? */
2245:FreeRTOS/Source/tasks.c **** 				if( pxNextTCB->ulRunTimeCounter == 0UL )
 3533              		.loc 1 2245 0
 3534 0072 BB69     		ldr	r3, [r7, #24]
 3535 0074 DB6C     		ldr	r3, [r3, #76]
 3536 0076 002B     		cmp	r3, #0
 3537 0078 1BD1     		bne	.L150
2246:FreeRTOS/Source/tasks.c **** 				{
2247:FreeRTOS/Source/tasks.c **** 					/* The task has used no CPU time at all. */
2248:FreeRTOS/Source/tasks.c **** 					sprintf( pcStatsString, ( char * ) "%u  %c  %-16s          0   0%%  %5u\r\n", (unsigned int) p
 3538              		.loc 1 2248 0
 3539 007a BB69     		ldr	r3, [r7, #24]
 3540 007c DD6A     		ldr	r5, [r3, #44]
 3541 007e 97F90340 		ldrsb	r4, [r7, #3]
 3542 0082 BB69     		ldr	r3, [r7, #24]
 3543 0084 03F13406 		add	r6, r3, #52
 3544 0088 BB69     		ldr	r3, [r7, #24]
 3545 008a 1B6B     		ldr	r3, [r3, #48]
 3546 008c 1846     		mov	r0, r3
 3547 008e FFF7FEFF 		bl	usTaskCheckFreeStackSpace
 3548 0092 0346     		mov	r3, r0
 3549 0094 0096     		str	r6, [sp, #0]
 3550 0096 0193     		str	r3, [sp, #4]
 3551 0098 40F20000 		movw	r0, #:lower16:pcStatsString
 3552 009c C0F20000 		movt	r0, #:upper16:pcStatsString
 3553 00a0 40F20001 		movw	r1, #:lower16:.LC2
 3554 00a4 C0F20001 		movt	r1, #:upper16:.LC2
 3555 00a8 2A46     		mov	r2, r5
 3556 00aa 2346     		mov	r3, r4
 3557 00ac FFF7FEFF 		bl	sprintf
 3558 00b0 49E0     		b	.L151
 3559              	.L150:
2249:FreeRTOS/Source/tasks.c **** 				}
2250:FreeRTOS/Source/tasks.c **** 				else
2251:FreeRTOS/Source/tasks.c **** 				{
2252:FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
2253:FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
2254:FreeRTOS/Source/tasks.c **** 					ulTotalRunTime has already been divided by 100. */
2255:FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxNextTCB->ulRunTimeCounter / ulTotalRunTime;
 3560              		.loc 1 2255 0
 3561 00b2 BB69     		ldr	r3, [r7, #24]
 3562 00b4 DA6C     		ldr	r2, [r3, #76]
 3563 00b6 7B68     		ldr	r3, [r7, #4]
 3564 00b8 B2FBF3F3 		udiv	r3, r2, r3
 3565 00bc 7B61     		str	r3, [r7, #20]
2256:FreeRTOS/Source/tasks.c **** 
2257:FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
 3566              		.loc 1 2257 0
 3567 00be 7B69     		ldr	r3, [r7, #20]
 3568 00c0 002B     		cmp	r3, #0
 3569 00c2 21D0     		beq	.L152
2258:FreeRTOS/Source/tasks.c **** 					{
2259:FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
2260:FreeRTOS/Source/tasks.c **** 						{
2261:FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%lu\t\t%lu%%\r\n", pxNextTCB->pcTaskName, pxNextTC
2262:FreeRTOS/Source/tasks.c **** 						}
2263:FreeRTOS/Source/tasks.c **** 						#else
2264:FreeRTOS/Source/tasks.c **** 						{
2265:FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
2266:FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
2267:FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%u  %c  %-16s %10u %3u%%  %5u\r\n", (unsigned int) pxNex
 3570              		.loc 1 2267 0
 3571 00c4 BB69     		ldr	r3, [r7, #24]
 3572 00c6 DD6A     		ldr	r5, [r3, #44]
 3573 00c8 97F90340 		ldrsb	r4, [r7, #3]
 3574 00cc BB69     		ldr	r3, [r7, #24]
 3575 00ce 03F13408 		add	r8, r3, #52
 3576 00d2 BB69     		ldr	r3, [r7, #24]
 3577 00d4 DE6C     		ldr	r6, [r3, #76]
 3578 00d6 BB69     		ldr	r3, [r7, #24]
 3579 00d8 1B6B     		ldr	r3, [r3, #48]
 3580 00da 1846     		mov	r0, r3
 3581 00dc FFF7FEFF 		bl	usTaskCheckFreeStackSpace
 3582 00e0 0346     		mov	r3, r0
 3583 00e2 CDF80080 		str	r8, [sp, #0]
 3584 00e6 0196     		str	r6, [sp, #4]
 3585 00e8 7A69     		ldr	r2, [r7, #20]
 3586 00ea 0292     		str	r2, [sp, #8]
 3587 00ec 0393     		str	r3, [sp, #12]
 3588 00ee 40F20000 		movw	r0, #:lower16:pcStatsString
 3589 00f2 C0F20000 		movt	r0, #:upper16:pcStatsString
 3590 00f6 40F20001 		movw	r1, #:lower16:.LC3
 3591 00fa C0F20001 		movt	r1, #:upper16:.LC3
 3592 00fe 2A46     		mov	r2, r5
 3593 0100 2346     		mov	r3, r4
 3594 0102 FFF7FEFF 		bl	sprintf
 3595 0106 1EE0     		b	.L151
 3596              	.L152:
2268:FreeRTOS/Source/tasks.c **** 						}
2269:FreeRTOS/Source/tasks.c **** 						#endif
2270:FreeRTOS/Source/tasks.c **** 					}
2271:FreeRTOS/Source/tasks.c **** 					else
2272:FreeRTOS/Source/tasks.c **** 					{
2273:FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
2274:FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
2275:FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
2276:FreeRTOS/Source/tasks.c **** 						{
2277:FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%lu\t\t<1%%\r\n", pxNextTCB->pcTaskName, pxNextTCB
2278:FreeRTOS/Source/tasks.c **** 						}
2279:FreeRTOS/Source/tasks.c **** 						#else
2280:FreeRTOS/Source/tasks.c **** 						{
2281:FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
2282:FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
2283:FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%u  %c  %-16s %10u  <1%%  %5u\r\n",  (unsigned int) pxNe
 3597              		.loc 1 2283 0
 3598 0108 BB69     		ldr	r3, [r7, #24]
 3599 010a DD6A     		ldr	r5, [r3, #44]
 3600 010c 97F90340 		ldrsb	r4, [r7, #3]
 3601 0110 BB69     		ldr	r3, [r7, #24]
 3602 0112 03F13408 		add	r8, r3, #52
 3603 0116 BB69     		ldr	r3, [r7, #24]
 3604 0118 DE6C     		ldr	r6, [r3, #76]
 3605 011a BB69     		ldr	r3, [r7, #24]
 3606 011c 1B6B     		ldr	r3, [r3, #48]
 3607 011e 1846     		mov	r0, r3
 3608 0120 FFF7FEFF 		bl	usTaskCheckFreeStackSpace
 3609 0124 0346     		mov	r3, r0
 3610 0126 CDF80080 		str	r8, [sp, #0]
 3611 012a 0196     		str	r6, [sp, #4]
 3612 012c 0293     		str	r3, [sp, #8]
 3613 012e 40F20000 		movw	r0, #:lower16:pcStatsString
 3614 0132 C0F20000 		movt	r0, #:upper16:pcStatsString
 3615 0136 40F20001 		movw	r1, #:lower16:.LC4
 3616 013a C0F20001 		movt	r1, #:upper16:.LC4
 3617 013e 2A46     		mov	r2, r5
 3618 0140 2346     		mov	r3, r4
 3619 0142 FFF7FEFF 		bl	sprintf
 3620              	.L151:
2284:FreeRTOS/Source/tasks.c **** 						}
2285:FreeRTOS/Source/tasks.c **** 						#endif
2286:FreeRTOS/Source/tasks.c **** 					}
2287:FreeRTOS/Source/tasks.c **** 				}
2288:FreeRTOS/Source/tasks.c **** 
2289:FreeRTOS/Source/tasks.c **** 				strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatsString );
 3621              		.loc 1 2289 0
 3622 0146 F868     		ldr	r0, [r7, #12]
 3623 0148 40F20001 		movw	r1, #:lower16:pcStatsString
 3624 014c C0F20001 		movt	r1, #:upper16:pcStatsString
 3625 0150 FFF7FEFF 		bl	strcat
 3626              	.L149:
2290:FreeRTOS/Source/tasks.c **** 			}
2291:FreeRTOS/Source/tasks.c **** 
2292:FreeRTOS/Source/tasks.c **** 		} while( pxNextTCB != pxFirstTCB );
 3627              		.loc 1 2292 0
 3628 0154 BA69     		ldr	r2, [r7, #24]
 3629 0156 3B6A     		ldr	r3, [r7, #32]
 3630 0158 9A42     		cmp	r2, r3
 3631 015a 7FF470AF 		bne	.L153
2293:FreeRTOS/Source/tasks.c **** 	}
 3632              		.loc 1 2293 0
 3633 015e 07F12807 		add	r7, r7, #40
 3634 0162 BD46     		mov	sp, r7
 3635 0164 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3636              		.cfi_endproc
 3637              	.LFE146:
 3639              		.section	.text.usTaskCheckFreeStackSpace,"ax",%progbits
 3640              		.align	2
 3641              		.thumb
 3642              		.thumb_func
 3644              	usTaskCheckFreeStackSpace:
 3645              	.LFB147:
2294:FreeRTOS/Source/tasks.c **** 
2295:FreeRTOS/Source/tasks.c **** #endif
2296:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2297:FreeRTOS/Source/tasks.c **** 
2298:FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
2299:FreeRTOS/Source/tasks.c **** 
2300:FreeRTOS/Source/tasks.c **** 	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
2301:FreeRTOS/Source/tasks.c **** 	{
 3646              		.loc 1 2301 0
 3647              		.cfi_startproc
 3648              		@ args = 0, pretend = 0, frame = 8
 3649              		@ frame_needed = 1, uses_anonymous_args = 0
 3650              		@ link register save eliminated.
 3651 0000 90B4     		push	{r4, r7}
 3652              	.LCFI106:
 3653              		.cfi_def_cfa_offset 8
 3654              		.cfi_offset 7, -4
 3655              		.cfi_offset 4, -8
 3656 0002 82B0     		sub	sp, sp, #8
 3657              	.LCFI107:
 3658              		.cfi_def_cfa_offset 16
 3659 0004 00AF     		add	r7, sp, #0
 3660              	.LCFI108:
 3661              		.cfi_def_cfa_register 7
 3662 0006 7860     		str	r0, [r7, #4]
2302:FreeRTOS/Source/tasks.c **** 	register unsigned short usCount = 0U;
 3663              		.loc 1 2302 0
 3664 0008 4FF00004 		mov	r4, #0
2303:FreeRTOS/Source/tasks.c **** 
2304:FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == tskSTACK_FILL_BYTE )
 3665              		.loc 1 2304 0
 3666 000c 06E0     		b	.L155
 3667              	.L156:
2305:FreeRTOS/Source/tasks.c **** 		{
2306:FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 3668              		.loc 1 2306 0
 3669 000e 7B68     		ldr	r3, [r7, #4]
 3670 0010 03F10103 		add	r3, r3, #1
 3671 0014 7B60     		str	r3, [r7, #4]
2307:FreeRTOS/Source/tasks.c **** 			usCount++;
 3672              		.loc 1 2307 0
 3673 0016 04F10103 		add	r3, r4, #1
 3674 001a 9CB2     		uxth	r4, r3
 3675              	.L155:
2304:FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == tskSTACK_FILL_BYTE )
 3676              		.loc 1 2304 0 discriminator 1
 3677 001c 7B68     		ldr	r3, [r7, #4]
 3678 001e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3679 0020 A52B     		cmp	r3, #165
 3680 0022 F4D0     		beq	.L156
2308:FreeRTOS/Source/tasks.c **** 		}
2309:FreeRTOS/Source/tasks.c **** 
2310:FreeRTOS/Source/tasks.c **** 		usCount /= sizeof( portSTACK_TYPE );
 3681              		.loc 1 2310 0
 3682 0024 4FEA9403 		lsr	r3, r4, #2
 3683 0028 9CB2     		uxth	r4, r3
2311:FreeRTOS/Source/tasks.c **** 
2312:FreeRTOS/Source/tasks.c **** 		return usCount;
 3684              		.loc 1 2312 0
 3685 002a 2346     		mov	r3, r4
2313:FreeRTOS/Source/tasks.c **** 	}
 3686              		.loc 1 2313 0
 3687 002c 1846     		mov	r0, r3
 3688 002e 07F10807 		add	r7, r7, #8
 3689 0032 BD46     		mov	sp, r7
 3690 0034 90BC     		pop	{r4, r7}
 3691 0036 7047     		bx	lr
 3692              		.cfi_endproc
 3693              	.LFE147:
 3695              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3696              		.align	2
 3697              		.global	uxTaskGetStackHighWaterMark
 3698              		.thumb
 3699              		.thumb_func
 3701              	uxTaskGetStackHighWaterMark:
 3702              	.LFB148:
2314:FreeRTOS/Source/tasks.c **** 
2315:FreeRTOS/Source/tasks.c **** #endif
2316:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2317:FreeRTOS/Source/tasks.c **** 
2318:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
2319:FreeRTOS/Source/tasks.c **** 
2320:FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
2321:FreeRTOS/Source/tasks.c **** 	{
 3703              		.loc 1 2321 0
 3704              		.cfi_startproc
 3705              		@ args = 0, pretend = 0, frame = 24
 3706              		@ frame_needed = 1, uses_anonymous_args = 0
 3707 0000 80B5     		push	{r7, lr}
 3708              	.LCFI109:
 3709              		.cfi_def_cfa_offset 8
 3710              		.cfi_offset 14, -4
 3711              		.cfi_offset 7, -8
 3712 0002 86B0     		sub	sp, sp, #24
 3713              	.LCFI110:
 3714              		.cfi_def_cfa_offset 32
 3715 0004 00AF     		add	r7, sp, #0
 3716              	.LCFI111:
 3717              		.cfi_def_cfa_register 7
 3718 0006 7860     		str	r0, [r7, #4]
2322:FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
2323:FreeRTOS/Source/tasks.c **** 	unsigned char *pcEndOfStack;
2324:FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
2325:FreeRTOS/Source/tasks.c **** 
2326:FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 3719              		.loc 1 2326 0
 3720 0008 7B68     		ldr	r3, [r7, #4]
 3721 000a 002B     		cmp	r3, #0
 3722 000c 05D1     		bne	.L158
 3723              		.loc 1 2326 0 is_stmt 0 discriminator 1
 3724 000e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3725 0012 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3726 0016 1B68     		ldr	r3, [r3, #0]
 3727 0018 00E0     		b	.L159
 3728              	.L158:
 3729              		.loc 1 2326 0 discriminator 2
 3730 001a 7B68     		ldr	r3, [r7, #4]
 3731              	.L159:
 3732              		.loc 1 2326 0 discriminator 3
 3733 001c 7B61     		str	r3, [r7, #20]
2327:FreeRTOS/Source/tasks.c **** 
2328:FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
2329:FreeRTOS/Source/tasks.c **** 		{
2330:FreeRTOS/Source/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
 3734              		.loc 1 2330 0 is_stmt 1 discriminator 3
 3735 001e 7B69     		ldr	r3, [r7, #20]
 3736 0020 1B6B     		ldr	r3, [r3, #48]
 3737 0022 3B61     		str	r3, [r7, #16]
2331:FreeRTOS/Source/tasks.c **** 		}
2332:FreeRTOS/Source/tasks.c **** 		#else
2333:FreeRTOS/Source/tasks.c **** 		{
2334:FreeRTOS/Source/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
2335:FreeRTOS/Source/tasks.c **** 		}
2336:FreeRTOS/Source/tasks.c **** 		#endif
2337:FreeRTOS/Source/tasks.c **** 
2338:FreeRTOS/Source/tasks.c **** 		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
 3738              		.loc 1 2338 0 discriminator 3
 3739 0024 3869     		ldr	r0, [r7, #16]
 3740 0026 FFF7FEFF 		bl	usTaskCheckFreeStackSpace
 3741 002a 0346     		mov	r3, r0
 3742 002c FB60     		str	r3, [r7, #12]
2339:FreeRTOS/Source/tasks.c **** 
2340:FreeRTOS/Source/tasks.c **** 		return uxReturn;
 3743              		.loc 1 2340 0 discriminator 3
 3744 002e FB68     		ldr	r3, [r7, #12]
2341:FreeRTOS/Source/tasks.c **** 	}
 3745              		.loc 1 2341 0 discriminator 3
 3746 0030 1846     		mov	r0, r3
 3747 0032 07F11807 		add	r7, r7, #24
 3748 0036 BD46     		mov	sp, r7
 3749 0038 80BD     		pop	{r7, pc}
 3750              		.cfi_endproc
 3751              	.LFE148:
 3753 003a 00BF     		.section	.text.prvDeleteTCB,"ax",%progbits
 3754              		.align	2
 3755              		.thumb
 3756              		.thumb_func
 3758              	prvDeleteTCB:
 3759              	.LFB149:
2342:FreeRTOS/Source/tasks.c **** 
2343:FreeRTOS/Source/tasks.c **** #endif
2344:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2345:FreeRTOS/Source/tasks.c **** 
2346:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
2347:FreeRTOS/Source/tasks.c **** 
2348:FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB )
2349:FreeRTOS/Source/tasks.c **** 	{
 3760              		.loc 1 2349 0
 3761              		.cfi_startproc
 3762              		@ args = 0, pretend = 0, frame = 8
 3763              		@ frame_needed = 1, uses_anonymous_args = 0
 3764 0000 80B5     		push	{r7, lr}
 3765              	.LCFI112:
 3766              		.cfi_def_cfa_offset 8
 3767              		.cfi_offset 14, -4
 3768              		.cfi_offset 7, -8
 3769 0002 82B0     		sub	sp, sp, #8
 3770              	.LCFI113:
 3771              		.cfi_def_cfa_offset 16
 3772 0004 00AF     		add	r7, sp, #0
 3773              	.LCFI114:
 3774              		.cfi_def_cfa_register 7
 3775 0006 7860     		str	r0, [r7, #4]
2350:FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up to
2351:FreeRTOS/Source/tasks.c **** 		the task to free any memory allocated at the application level. */
2352:FreeRTOS/Source/tasks.c **** 		vPortFreeAligned( pxTCB->pxStack );
 3776              		.loc 1 2352 0
 3777 0008 7B68     		ldr	r3, [r7, #4]
 3778 000a 1B6B     		ldr	r3, [r3, #48]
 3779 000c 1846     		mov	r0, r3
 3780 000e FFF7FEFF 		bl	free
2353:FreeRTOS/Source/tasks.c **** 		vPortFree( pxTCB );
 3781              		.loc 1 2353 0
 3782 0012 7868     		ldr	r0, [r7, #4]
 3783 0014 FFF7FEFF 		bl	free
2354:FreeRTOS/Source/tasks.c **** 	}
 3784              		.loc 1 2354 0
 3785 0018 07F10807 		add	r7, r7, #8
 3786 001c BD46     		mov	sp, r7
 3787 001e 80BD     		pop	{r7, pc}
 3788              		.cfi_endproc
 3789              	.LFE149:
 3791              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3792              		.align	2
 3793              		.global	xTaskGetCurrentTaskHandle
 3794              		.thumb
 3795              		.thumb_func
 3797              	xTaskGetCurrentTaskHandle:
 3798              	.LFB150:
2355:FreeRTOS/Source/tasks.c **** 
2356:FreeRTOS/Source/tasks.c **** #endif
2357:FreeRTOS/Source/tasks.c **** 
2358:FreeRTOS/Source/tasks.c **** 
2359:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2360:FreeRTOS/Source/tasks.c **** 
2361:FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
2362:FreeRTOS/Source/tasks.c **** 
2363:FreeRTOS/Source/tasks.c **** 	xTaskHandle xTaskGetCurrentTaskHandle( void )
2364:FreeRTOS/Source/tasks.c **** 	{
 3799              		.loc 1 2364 0
 3800              		.cfi_startproc
 3801              		@ args = 0, pretend = 0, frame = 8
 3802              		@ frame_needed = 1, uses_anonymous_args = 0
 3803              		@ link register save eliminated.
 3804 0000 80B4     		push	{r7}
 3805              	.LCFI115:
 3806              		.cfi_def_cfa_offset 4
 3807              		.cfi_offset 7, -4
 3808 0002 83B0     		sub	sp, sp, #12
 3809              	.LCFI116:
 3810              		.cfi_def_cfa_offset 16
 3811 0004 00AF     		add	r7, sp, #0
 3812              	.LCFI117:
 3813              		.cfi_def_cfa_register 7
2365:FreeRTOS/Source/tasks.c **** 	xTaskHandle xReturn;
2366:FreeRTOS/Source/tasks.c **** 
2367:FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
2368:FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
2369:FreeRTOS/Source/tasks.c **** 		individual execution thread. */
2370:FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 3814              		.loc 1 2370 0
 3815 0006 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3816 000a C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3817 000e 1B68     		ldr	r3, [r3, #0]
 3818 0010 7B60     		str	r3, [r7, #4]
2371:FreeRTOS/Source/tasks.c **** 
2372:FreeRTOS/Source/tasks.c **** 		return xReturn;
 3819              		.loc 1 2372 0
 3820 0012 7B68     		ldr	r3, [r7, #4]
2373:FreeRTOS/Source/tasks.c **** 	}
 3821              		.loc 1 2373 0
 3822 0014 1846     		mov	r0, r3
 3823 0016 07F10C07 		add	r7, r7, #12
 3824 001a BD46     		mov	sp, r7
 3825 001c 80BC     		pop	{r7}
 3826 001e 7047     		bx	lr
 3827              		.cfi_endproc
 3828              	.LFE150:
 3830              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3831              		.align	2
 3832              		.global	xTaskGetSchedulerState
 3833              		.thumb
 3834              		.thumb_func
 3836              	xTaskGetSchedulerState:
 3837              	.LFB151:
2374:FreeRTOS/Source/tasks.c **** 
2375:FreeRTOS/Source/tasks.c **** #endif
2376:FreeRTOS/Source/tasks.c **** 
2377:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2378:FreeRTOS/Source/tasks.c **** 
2379:FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
2380:FreeRTOS/Source/tasks.c **** 
2381:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskGetSchedulerState( void )
2382:FreeRTOS/Source/tasks.c **** 	{
 3838              		.loc 1 2382 0
 3839              		.cfi_startproc
 3840              		@ args = 0, pretend = 0, frame = 8
 3841              		@ frame_needed = 1, uses_anonymous_args = 0
 3842              		@ link register save eliminated.
 3843 0000 80B4     		push	{r7}
 3844              	.LCFI118:
 3845              		.cfi_def_cfa_offset 4
 3846              		.cfi_offset 7, -4
 3847 0002 83B0     		sub	sp, sp, #12
 3848              	.LCFI119:
 3849              		.cfi_def_cfa_offset 16
 3850 0004 00AF     		add	r7, sp, #0
 3851              	.LCFI120:
 3852              		.cfi_def_cfa_register 7
2383:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn;
2384:FreeRTOS/Source/tasks.c **** 
2385:FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 3853              		.loc 1 2385 0
 3854 0006 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 3855 000a C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 3856 000e 1B68     		ldr	r3, [r3, #0]
 3857 0010 002B     		cmp	r3, #0
 3858 0012 03D1     		bne	.L163
2386:FreeRTOS/Source/tasks.c **** 		{
2387:FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 3859              		.loc 1 2387 0
 3860 0014 4FF00003 		mov	r3, #0
 3861 0018 7B60     		str	r3, [r7, #4]
 3862 001a 0DE0     		b	.L164
 3863              	.L163:
2388:FreeRTOS/Source/tasks.c **** 		}
2389:FreeRTOS/Source/tasks.c **** 		else
2390:FreeRTOS/Source/tasks.c **** 		{
2391:FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 3864              		.loc 1 2391 0
 3865 001c 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 3866 0020 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 3867 0024 1B68     		ldr	r3, [r3, #0]
 3868 0026 002B     		cmp	r3, #0
 3869 0028 03D1     		bne	.L165
2392:FreeRTOS/Source/tasks.c **** 			{
2393:FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 3870              		.loc 1 2393 0
 3871 002a 4FF00103 		mov	r3, #1
 3872 002e 7B60     		str	r3, [r7, #4]
 3873 0030 02E0     		b	.L164
 3874              	.L165:
2394:FreeRTOS/Source/tasks.c **** 			}
2395:FreeRTOS/Source/tasks.c **** 			else
2396:FreeRTOS/Source/tasks.c **** 			{
2397:FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 3875              		.loc 1 2397 0
 3876 0032 4FF00203 		mov	r3, #2
 3877 0036 7B60     		str	r3, [r7, #4]
 3878              	.L164:
2398:FreeRTOS/Source/tasks.c **** 			}
2399:FreeRTOS/Source/tasks.c **** 		}
2400:FreeRTOS/Source/tasks.c **** 
2401:FreeRTOS/Source/tasks.c **** 		return xReturn;
 3879              		.loc 1 2401 0
 3880 0038 7B68     		ldr	r3, [r7, #4]
2402:FreeRTOS/Source/tasks.c **** 	}
 3881              		.loc 1 2402 0
 3882 003a 1846     		mov	r0, r3
 3883 003c 07F10C07 		add	r7, r7, #12
 3884 0040 BD46     		mov	sp, r7
 3885 0042 80BC     		pop	{r7}
 3886 0044 7047     		bx	lr
 3887              		.cfi_endproc
 3888              	.LFE151:
 3890 0046 00BF     		.section	.text.vTaskPriorityInherit,"ax",%progbits
 3891              		.align	2
 3892              		.global	vTaskPriorityInherit
 3893              		.thumb
 3894              		.thumb_func
 3896              	vTaskPriorityInherit:
 3897              	.LFB152:
2403:FreeRTOS/Source/tasks.c **** 
2404:FreeRTOS/Source/tasks.c **** #endif
2405:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2406:FreeRTOS/Source/tasks.c **** 
2407:FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2408:FreeRTOS/Source/tasks.c **** 
2409:FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
2410:FreeRTOS/Source/tasks.c **** 	{
 3898              		.loc 1 2410 0
 3899              		.cfi_startproc
 3900              		@ args = 0, pretend = 0, frame = 16
 3901              		@ frame_needed = 1, uses_anonymous_args = 0
 3902 0000 80B5     		push	{r7, lr}
 3903              	.LCFI121:
 3904              		.cfi_def_cfa_offset 8
 3905              		.cfi_offset 14, -4
 3906              		.cfi_offset 7, -8
 3907 0002 84B0     		sub	sp, sp, #16
 3908              	.LCFI122:
 3909              		.cfi_def_cfa_offset 24
 3910 0004 00AF     		add	r7, sp, #0
 3911              	.LCFI123:
 3912              		.cfi_def_cfa_register 7
 3913 0006 7860     		str	r0, [r7, #4]
2411:FreeRTOS/Source/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 3914              		.loc 1 2411 0
 3915 0008 7B68     		ldr	r3, [r7, #4]
 3916 000a FB60     		str	r3, [r7, #12]
2412:FreeRTOS/Source/tasks.c **** 
2413:FreeRTOS/Source/tasks.c **** 		configASSERT( pxMutexHolder );
2414:FreeRTOS/Source/tasks.c **** 
2415:FreeRTOS/Source/tasks.c **** 		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 3917              		.loc 1 2415 0
 3918 000c FB68     		ldr	r3, [r7, #12]
 3919 000e DA6A     		ldr	r2, [r3, #44]
 3920 0010 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3921 0014 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3922 0018 1B68     		ldr	r3, [r3, #0]
 3923 001a DB6A     		ldr	r3, [r3, #44]
 3924 001c 9A42     		cmp	r2, r3
 3925 001e 57D2     		bcs	.L166
2416:FreeRTOS/Source/tasks.c **** 		{
2417:FreeRTOS/Source/tasks.c **** 			/* Adjust the mutex holder state to account for its new priority. */
2418:FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxC
 3926              		.loc 1 2418 0
 3927 0020 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3928 0024 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3929 0028 1B68     		ldr	r3, [r3, #0]
 3930 002a DB6A     		ldr	r3, [r3, #44]
 3931 002c C3F10502 		rsb	r2, r3, #5
 3932 0030 FB68     		ldr	r3, [r7, #12]
 3933 0032 9A61     		str	r2, [r3, #24]
2419:FreeRTOS/Source/tasks.c **** 
2420:FreeRTOS/Source/tasks.c **** 			/* If the task being modified is in the ready state it will need to
2421:FreeRTOS/Source/tasks.c **** 			be moved in to a new list. */
2422:FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericList
 3934              		.loc 1 2422 0
 3935 0034 FB68     		ldr	r3, [r7, #12]
 3936 0036 5969     		ldr	r1, [r3, #20]
 3937 0038 FB68     		ldr	r3, [r7, #12]
 3938 003a DA6A     		ldr	r2, [r3, #44]
 3939 003c 1346     		mov	r3, r2
 3940 003e 4FEA8303 		lsl	r3, r3, #2
 3941 0042 9B18     		adds	r3, r3, r2
 3942 0044 4FEA8303 		lsl	r3, r3, #2
 3943 0048 1A46     		mov	r2, r3
 3944 004a 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 3945 004e C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 3946 0052 D318     		adds	r3, r2, r3
 3947 0054 9942     		cmp	r1, r3
 3948 0056 33D1     		bne	.L168
2423:FreeRTOS/Source/tasks.c **** 			{
2424:FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xGenericListItem ) );
 3949              		.loc 1 2424 0
 3950 0058 FB68     		ldr	r3, [r7, #12]
 3951 005a 03F10403 		add	r3, r3, #4
 3952 005e 1846     		mov	r0, r3
 3953 0060 FFF7FEFF 		bl	vListRemove
2425:FreeRTOS/Source/tasks.c **** 
2426:FreeRTOS/Source/tasks.c **** 				/* Inherit the priority before being moved into the new list. */
2427:FreeRTOS/Source/tasks.c **** 				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 3954              		.loc 1 2427 0
 3955 0064 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3956 0068 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3957 006c 1B68     		ldr	r3, [r3, #0]
 3958 006e DA6A     		ldr	r2, [r3, #44]
 3959 0070 FB68     		ldr	r3, [r7, #12]
 3960 0072 DA62     		str	r2, [r3, #44]
2428:FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 3961              		.loc 1 2428 0
 3962 0074 FB68     		ldr	r3, [r7, #12]
 3963 0076 DA6A     		ldr	r2, [r3, #44]
 3964 0078 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 3965 007c C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 3966 0080 1B68     		ldr	r3, [r3, #0]
 3967 0082 9A42     		cmp	r2, r3
 3968 0084 06D9     		bls	.L169
 3969              		.loc 1 2428 0 is_stmt 0 discriminator 1
 3970 0086 FB68     		ldr	r3, [r7, #12]
 3971 0088 DA6A     		ldr	r2, [r3, #44]
 3972 008a 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 3973 008e C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 3974 0092 1A60     		str	r2, [r3, #0]
 3975              	.L169:
 3976              		.loc 1 2428 0 discriminator 2
 3977 0094 FB68     		ldr	r3, [r7, #12]
 3978 0096 DA6A     		ldr	r2, [r3, #44]
 3979 0098 1346     		mov	r3, r2
 3980 009a 4FEA8303 		lsl	r3, r3, #2
 3981 009e 9B18     		adds	r3, r3, r2
 3982 00a0 4FEA8303 		lsl	r3, r3, #2
 3983 00a4 1A46     		mov	r2, r3
 3984 00a6 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 3985 00aa C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 3986 00ae D218     		adds	r2, r2, r3
 3987 00b0 FB68     		ldr	r3, [r7, #12]
 3988 00b2 03F10403 		add	r3, r3, #4
 3989 00b6 1046     		mov	r0, r2
 3990 00b8 1946     		mov	r1, r3
 3991 00ba FFF7FEFF 		bl	vListInsertEnd
 3992 00be 07E0     		b	.L166
 3993              	.L168:
2429:FreeRTOS/Source/tasks.c **** 			}
2430:FreeRTOS/Source/tasks.c **** 			else
2431:FreeRTOS/Source/tasks.c **** 			{
2432:FreeRTOS/Source/tasks.c **** 				/* Just inherit the priority. */
2433:FreeRTOS/Source/tasks.c **** 				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 3994              		.loc 1 2433 0 is_stmt 1
 3995 00c0 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3996 00c4 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3997 00c8 1B68     		ldr	r3, [r3, #0]
 3998 00ca DA6A     		ldr	r2, [r3, #44]
 3999 00cc FB68     		ldr	r3, [r7, #12]
 4000 00ce DA62     		str	r2, [r3, #44]
 4001              	.L166:
2434:FreeRTOS/Source/tasks.c **** 			}
2435:FreeRTOS/Source/tasks.c **** 		}
2436:FreeRTOS/Source/tasks.c **** 	}
 4002              		.loc 1 2436 0
 4003 00d0 07F11007 		add	r7, r7, #16
 4004 00d4 BD46     		mov	sp, r7
 4005 00d6 80BD     		pop	{r7, pc}
 4006              		.cfi_endproc
 4007              	.LFE152:
 4009              		.section	.text.vTaskPriorityDisinherit,"ax",%progbits
 4010              		.align	2
 4011              		.global	vTaskPriorityDisinherit
 4012              		.thumb
 4013              		.thumb_func
 4015              	vTaskPriorityDisinherit:
 4016              	.LFB153:
2437:FreeRTOS/Source/tasks.c **** 
2438:FreeRTOS/Source/tasks.c **** #endif
2439:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2440:FreeRTOS/Source/tasks.c **** 
2441:FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2442:FreeRTOS/Source/tasks.c **** 
2443:FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
2444:FreeRTOS/Source/tasks.c **** 	{
 4017              		.loc 1 2444 0
 4018              		.cfi_startproc
 4019              		@ args = 0, pretend = 0, frame = 16
 4020              		@ frame_needed = 1, uses_anonymous_args = 0
 4021 0000 80B5     		push	{r7, lr}
 4022              	.LCFI124:
 4023              		.cfi_def_cfa_offset 8
 4024              		.cfi_offset 14, -4
 4025              		.cfi_offset 7, -8
 4026 0002 84B0     		sub	sp, sp, #16
 4027              	.LCFI125:
 4028              		.cfi_def_cfa_offset 24
 4029 0004 00AF     		add	r7, sp, #0
 4030              	.LCFI126:
 4031              		.cfi_def_cfa_register 7
 4032 0006 7860     		str	r0, [r7, #4]
2445:FreeRTOS/Source/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 4033              		.loc 1 2445 0
 4034 0008 7B68     		ldr	r3, [r7, #4]
 4035 000a FB60     		str	r3, [r7, #12]
2446:FreeRTOS/Source/tasks.c **** 
2447:FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4036              		.loc 1 2447 0
 4037 000c 7B68     		ldr	r3, [r7, #4]
 4038 000e 002B     		cmp	r3, #0
 4039 0010 3AD0     		beq	.L170
2448:FreeRTOS/Source/tasks.c **** 		{
2449:FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 4040              		.loc 1 2449 0
 4041 0012 FB68     		ldr	r3, [r7, #12]
 4042 0014 DA6A     		ldr	r2, [r3, #44]
 4043 0016 FB68     		ldr	r3, [r7, #12]
 4044 0018 5B6C     		ldr	r3, [r3, #68]
 4045 001a 9A42     		cmp	r2, r3
 4046 001c 34D0     		beq	.L170
2450:FreeRTOS/Source/tasks.c **** 			{
2451:FreeRTOS/Source/tasks.c **** 				/* We must be the running task to be able to give the mutex back.
2452:FreeRTOS/Source/tasks.c **** 				Remove ourselves from the ready list we currently appear in. */
2453:FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xGenericListItem ) );
 4047              		.loc 1 2453 0
 4048 001e FB68     		ldr	r3, [r7, #12]
 4049 0020 03F10403 		add	r3, r3, #4
 4050 0024 1846     		mov	r0, r3
 4051 0026 FFF7FEFF 		bl	vListRemove
2454:FreeRTOS/Source/tasks.c **** 
2455:FreeRTOS/Source/tasks.c **** 				/* Disinherit the priority before adding ourselves into the new
2456:FreeRTOS/Source/tasks.c **** 				ready list. */
2457:FreeRTOS/Source/tasks.c **** 				pxTCB->uxPriority = pxTCB->uxBasePriority;
 4052              		.loc 1 2457 0
 4053 002a FB68     		ldr	r3, [r7, #12]
 4054 002c 5A6C     		ldr	r2, [r3, #68]
 4055 002e FB68     		ldr	r3, [r7, #12]
 4056 0030 DA62     		str	r2, [r3, #44]
2458:FreeRTOS/Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) px
 4057              		.loc 1 2458 0
 4058 0032 FB68     		ldr	r3, [r7, #12]
 4059 0034 DB6A     		ldr	r3, [r3, #44]
 4060 0036 C3F10502 		rsb	r2, r3, #5
 4061 003a FB68     		ldr	r3, [r7, #12]
 4062 003c 9A61     		str	r2, [r3, #24]
2459:FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 4063              		.loc 1 2459 0
 4064 003e FB68     		ldr	r3, [r7, #12]
 4065 0040 DA6A     		ldr	r2, [r3, #44]
 4066 0042 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 4067 0046 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 4068 004a 1B68     		ldr	r3, [r3, #0]
 4069 004c 9A42     		cmp	r2, r3
 4070 004e 06D9     		bls	.L172
 4071              		.loc 1 2459 0 is_stmt 0 discriminator 1
 4072 0050 FB68     		ldr	r3, [r7, #12]
 4073 0052 DA6A     		ldr	r2, [r3, #44]
 4074 0054 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 4075 0058 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 4076 005c 1A60     		str	r2, [r3, #0]
 4077              	.L172:
 4078              		.loc 1 2459 0 discriminator 2
 4079 005e FB68     		ldr	r3, [r7, #12]
 4080 0060 DA6A     		ldr	r2, [r3, #44]
 4081 0062 1346     		mov	r3, r2
 4082 0064 4FEA8303 		lsl	r3, r3, #2
 4083 0068 9B18     		adds	r3, r3, r2
 4084 006a 4FEA8303 		lsl	r3, r3, #2
 4085 006e 1A46     		mov	r2, r3
 4086 0070 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 4087 0074 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 4088 0078 D218     		adds	r2, r2, r3
 4089 007a FB68     		ldr	r3, [r7, #12]
 4090 007c 03F10403 		add	r3, r3, #4
 4091 0080 1046     		mov	r0, r2
 4092 0082 1946     		mov	r1, r3
 4093 0084 FFF7FEFF 		bl	vListInsertEnd
 4094              	.L170:
2460:FreeRTOS/Source/tasks.c **** 			}
2461:FreeRTOS/Source/tasks.c **** 		}
2462:FreeRTOS/Source/tasks.c **** 	}
 4095              		.loc 1 2462 0 is_stmt 1
 4096 0088 07F11007 		add	r7, r7, #16
 4097 008c BD46     		mov	sp, r7
 4098 008e 80BD     		pop	{r7, pc}
 4099              		.cfi_endproc
 4100              	.LFE153:
 4102              		.text
 4103              	.Letext0:
 4104              		.file 2 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/include/stddef.h"
 4105              		.file 3 "FreeRTOS/Source/include/projdefs.h"
 4106              		.file 4 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/i
 4107              		.file 5 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 4108              		.file 6 "FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM4F/portmacro.h"
 4109              		.file 7 "FreeRTOS/Source/include/FreeRTOS.h"
 4110              		.file 8 "FreeRTOS/Source/include/list.h"
 4111              		.file 9 "FreeRTOS/Source/include/task.h"
 4112              		.file 10 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
     /tmp/ccg0Vwgj.s:24     .bss.pxCurrentTCB:00000000 pxCurrentTCB
     /tmp/ccg0Vwgj.s:21     .bss.pxCurrentTCB:00000000 $d
     /tmp/ccg0Vwgj.s:27     .bss.pxReadyTasksLists:00000000 $d
     /tmp/ccg0Vwgj.s:30     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
     /tmp/ccg0Vwgj.s:33     .bss.xDelayedTaskList1:00000000 $d
     /tmp/ccg0Vwgj.s:36     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
     /tmp/ccg0Vwgj.s:39     .bss.xDelayedTaskList2:00000000 $d
     /tmp/ccg0Vwgj.s:42     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
     /tmp/ccg0Vwgj.s:45     .bss.pxDelayedTaskList:00000000 $d
     /tmp/ccg0Vwgj.s:48     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
     /tmp/ccg0Vwgj.s:51     .bss.pxOverflowDelayedTaskList:00000000 $d
     /tmp/ccg0Vwgj.s:54     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
     /tmp/ccg0Vwgj.s:57     .bss.xPendingReadyList:00000000 $d
     /tmp/ccg0Vwgj.s:60     .bss.xPendingReadyList:00000000 xPendingReadyList
     /tmp/ccg0Vwgj.s:63     .bss.xTasksWaitingTermination:00000000 $d
     /tmp/ccg0Vwgj.s:66     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
     /tmp/ccg0Vwgj.s:69     .bss.uxTasksDeleted:00000000 $d
     /tmp/ccg0Vwgj.s:72     .bss.uxTasksDeleted:00000000 uxTasksDeleted
     /tmp/ccg0Vwgj.s:75     .bss.xSuspendedTaskList:00000000 $d
     /tmp/ccg0Vwgj.s:78     .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
     /tmp/ccg0Vwgj.s:81     .bss.xIdleTaskHandle:00000000 $d
     /tmp/ccg0Vwgj.s:84     .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
     /tmp/ccg0Vwgj.s:87     .bss.uxCurrentNumberOfTasks:00000000 $d
     /tmp/ccg0Vwgj.s:90     .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
     /tmp/ccg0Vwgj.s:93     .bss.xTickCount:00000000 $d
     /tmp/ccg0Vwgj.s:96     .bss.xTickCount:00000000 xTickCount
     /tmp/ccg0Vwgj.s:99     .bss.uxTopUsedPriority:00000000 $d
     /tmp/ccg0Vwgj.s:102    .bss.uxTopUsedPriority:00000000 uxTopUsedPriority
     /tmp/ccg0Vwgj.s:105    .bss.uxTopReadyPriority:00000000 $d
     /tmp/ccg0Vwgj.s:108    .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
     /tmp/ccg0Vwgj.s:111    .bss.xSchedulerRunning:00000000 $d
     /tmp/ccg0Vwgj.s:114    .bss.xSchedulerRunning:00000000 xSchedulerRunning
     /tmp/ccg0Vwgj.s:117    .bss.uxSchedulerSuspended:00000000 $d
     /tmp/ccg0Vwgj.s:120    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
     /tmp/ccg0Vwgj.s:123    .bss.uxMissedTicks:00000000 $d
     /tmp/ccg0Vwgj.s:126    .bss.uxMissedTicks:00000000 uxMissedTicks
     /tmp/ccg0Vwgj.s:129    .bss.xMissedYield:00000000 $d
     /tmp/ccg0Vwgj.s:132    .bss.xMissedYield:00000000 xMissedYield
     /tmp/ccg0Vwgj.s:135    .bss.xNumOfOverflows:00000000 $d
     /tmp/ccg0Vwgj.s:138    .bss.xNumOfOverflows:00000000 xNumOfOverflows
     /tmp/ccg0Vwgj.s:141    .bss.uxTaskNumber:00000000 $d
     /tmp/ccg0Vwgj.s:144    .bss.uxTaskNumber:00000000 uxTaskNumber
     /tmp/ccg0Vwgj.s:147    .data.xNextTaskUnblockTime:00000000 $d
     /tmp/ccg0Vwgj.s:150    .data.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
     /tmp/ccg0Vwgj.s:153    .bss.pcStatsString:00000000 $d
     /tmp/ccg0Vwgj.s:156    .bss.pcStatsString:00000000 pcStatsString
     /tmp/ccg0Vwgj.s:159    .bss.ulTaskSwitchedInTime:00000000 $d
     /tmp/ccg0Vwgj.s:162    .bss.ulTaskSwitchedInTime:00000000 ulTaskSwitchedInTime
     /tmp/ccg0Vwgj.s:165    .text.xTaskGenericCreate:00000000 $t
     /tmp/ccg0Vwgj.s:170    .text.xTaskGenericCreate:00000000 xTaskGenericCreate
     /tmp/ccg0Vwgj.s:3352   .text.prvAllocateTCBAndStack:00000000 prvAllocateTCBAndStack
     /tmp/ccg0Vwgj.s:3003   .text.prvInitialiseTCBVariables:00000000 prvInitialiseTCBVariables
     /tmp/ccg0Vwgj.s:3094   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
     /tmp/ccg0Vwgj.s:390    .text.vTaskDelete:00000000 $t
     /tmp/ccg0Vwgj.s:395    .text.vTaskDelete:00000000 vTaskDelete
     /tmp/ccg0Vwgj.s:503    .text.vTaskDelayUntil:00000000 $t
     /tmp/ccg0Vwgj.s:508    .text.vTaskDelayUntil:00000000 vTaskDelayUntil
     /tmp/ccg0Vwgj.s:1452   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
     /tmp/ccg0Vwgj.s:3272   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
     /tmp/ccg0Vwgj.s:1487   .text.xTaskResumeAll:00000000 xTaskResumeAll
     /tmp/ccg0Vwgj.s:619    .text.vTaskDelay:00000000 $t
     /tmp/ccg0Vwgj.s:624    .text.vTaskDelay:00000000 vTaskDelay
     /tmp/ccg0Vwgj.s:687    .text.uxTaskPriorityGet:00000000 $t
     /tmp/ccg0Vwgj.s:692    .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
     /tmp/ccg0Vwgj.s:744    .text.vTaskPrioritySet:00000000 $t
     /tmp/ccg0Vwgj.s:749    .text.vTaskPrioritySet:00000000 vTaskPrioritySet
     /tmp/ccg0Vwgj.s:927    .text.vTaskSuspend:00000000 $t
     /tmp/ccg0Vwgj.s:932    .text.vTaskSuspend:00000000 vTaskSuspend
     /tmp/ccg0Vwgj.s:2392   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
     /tmp/ccg0Vwgj.s:1044   .text.xTaskIsTaskSuspended:00000000 $t
     /tmp/ccg0Vwgj.s:1049   .text.xTaskIsTaskSuspended:00000000 xTaskIsTaskSuspended
     /tmp/ccg0Vwgj.s:1108   .text.vTaskResume:00000000 $t
     /tmp/ccg0Vwgj.s:1113   .text.vTaskResume:00000000 vTaskResume
     /tmp/ccg0Vwgj.s:1212   .text.xTaskResumeFromISR:00000000 $t
     /tmp/ccg0Vwgj.s:1217   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
     /tmp/ccg0Vwgj.s:1322   .rodata:00000000 $d
     /tmp/ccg0Vwgj.s:1323   .rodata:00000000 .LC0
     /tmp/ccg0Vwgj.s:1326   .text.vTaskStartScheduler:00000000 $t
     /tmp/ccg0Vwgj.s:1331   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
     /tmp/ccg0Vwgj.s:2960   .text.prvIdleTask:00000000 prvIdleTask
     /tmp/ccg0Vwgj.s:1408   .text.vTaskEndScheduler:00000000 $t
     /tmp/ccg0Vwgj.s:1413   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
     /tmp/ccg0Vwgj.s:1447   .text.vTaskSuspendAll:00000000 $t
     /tmp/ccg0Vwgj.s:1482   .text.xTaskResumeAll:00000000 $t
     /tmp/ccg0Vwgj.s:2002   .text.vTaskIncrementTick:00000000 vTaskIncrementTick
     /tmp/ccg0Vwgj.s:1661   .text.xTaskGetTickCount:00000000 $t
     /tmp/ccg0Vwgj.s:1666   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
     /tmp/ccg0Vwgj.s:1703   .text.xTaskGetTickCountFromISR:00000000 $t
     /tmp/ccg0Vwgj.s:1708   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
     /tmp/ccg0Vwgj.s:1758   .text.uxTaskGetNumberOfTasks:00000000 $t
     /tmp/ccg0Vwgj.s:1763   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
     /tmp/ccg0Vwgj.s:1791   .rodata:00000008 .LC1
     /tmp/ccg0Vwgj.s:1794   .text.vTaskGetRunTimeStats:00000000 $t
     /tmp/ccg0Vwgj.s:1799   .text.vTaskGetRunTimeStats:00000000 vTaskGetRunTimeStats
     /tmp/ccg0Vwgj.s:3447   .text.prvGenerateRunTimeStatsForTasksInList:00000000 prvGenerateRunTimeStatsForTasksInList
     /tmp/ccg0Vwgj.s:1965   .text.xTaskGetIdleTaskHandle:00000000 $t
     /tmp/ccg0Vwgj.s:1970   .text.xTaskGetIdleTaskHandle:00000000 xTaskGetIdleTaskHandle
     /tmp/ccg0Vwgj.s:1997   .text.vTaskIncrementTick:00000000 $t
     /tmp/ccg0Vwgj.s:2208   .text.vTaskSetApplicationTaskTag:00000000 $t
     /tmp/ccg0Vwgj.s:2213   .text.vTaskSetApplicationTaskTag:00000000 vTaskSetApplicationTaskTag
     /tmp/ccg0Vwgj.s:2263   .text.xTaskGetApplicationTaskTag:00000000 $t
     /tmp/ccg0Vwgj.s:2268   .text.xTaskGetApplicationTaskTag:00000000 xTaskGetApplicationTaskTag
     /tmp/ccg0Vwgj.s:2320   .text.xTaskCallApplicationTaskHook:00000000 $t
     /tmp/ccg0Vwgj.s:2325   .text.xTaskCallApplicationTaskHook:00000000 xTaskCallApplicationTaskHook
     /tmp/ccg0Vwgj.s:2387   .text.vTaskSwitchContext:00000000 $t
     /tmp/ccg0Vwgj.s:2531   .text.vTaskPlaceOnEventList:00000000 $t
     /tmp/ccg0Vwgj.s:2536   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
     /tmp/ccg0Vwgj.s:2604   .text.vTaskPlaceOnEventListRestricted:00000000 $t
     /tmp/ccg0Vwgj.s:2609   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
     /tmp/ccg0Vwgj.s:2661   .text.xTaskRemoveFromEventList:00000000 $t
     /tmp/ccg0Vwgj.s:2666   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
     /tmp/ccg0Vwgj.s:2775   .text.vTaskSetTimeOutState:00000000 $t
     /tmp/ccg0Vwgj.s:2780   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
     /tmp/ccg0Vwgj.s:2819   .text.xTaskCheckForTimeOut:00000000 $t
     /tmp/ccg0Vwgj.s:2824   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
     /tmp/ccg0Vwgj.s:2924   .text.vTaskMissedYield:00000000 $t
     /tmp/ccg0Vwgj.s:2929   .text.vTaskMissedYield:00000000 vTaskMissedYield
     /tmp/ccg0Vwgj.s:2956   .text.prvIdleTask:00000000 $t
     /tmp/ccg0Vwgj.s:3181   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
     /tmp/ccg0Vwgj.s:2999   .text.prvInitialiseTCBVariables:00000000 $t
     /tmp/ccg0Vwgj.s:3090   .text.prvInitialiseTaskLists:00000000 $t
     /tmp/ccg0Vwgj.s:3177   .text.prvCheckTasksWaitingTermination:00000000 $t
     /tmp/ccg0Vwgj.s:3758   .text.prvDeleteTCB:00000000 prvDeleteTCB
     /tmp/ccg0Vwgj.s:3268   .text.prvAddCurrentTaskToDelayedList:00000000 $t
     /tmp/ccg0Vwgj.s:3348   .text.prvAllocateTCBAndStack:00000000 $t
     /tmp/ccg0Vwgj.s:3434   .rodata:0000000c .LC2
     /tmp/ccg0Vwgj.s:3437   .rodata:00000034 .LC3
     /tmp/ccg0Vwgj.s:3440   .rodata:00000054 .LC4
     /tmp/ccg0Vwgj.s:3443   .text.prvGenerateRunTimeStatsForTasksInList:00000000 $t
     /tmp/ccg0Vwgj.s:3644   .text.usTaskCheckFreeStackSpace:00000000 usTaskCheckFreeStackSpace
     /tmp/ccg0Vwgj.s:3640   .text.usTaskCheckFreeStackSpace:00000000 $t
     /tmp/ccg0Vwgj.s:3696   .text.uxTaskGetStackHighWaterMark:00000000 $t
     /tmp/ccg0Vwgj.s:3701   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
     /tmp/ccg0Vwgj.s:3754   .text.prvDeleteTCB:00000000 $t
     /tmp/ccg0Vwgj.s:3792   .text.xTaskGetCurrentTaskHandle:00000000 $t
     /tmp/ccg0Vwgj.s:3797   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
     /tmp/ccg0Vwgj.s:3831   .text.xTaskGetSchedulerState:00000000 $t
     /tmp/ccg0Vwgj.s:3836   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
     /tmp/ccg0Vwgj.s:3891   .text.vTaskPriorityInherit:00000000 $t
     /tmp/ccg0Vwgj.s:3896   .text.vTaskPriorityInherit:00000000 vTaskPriorityInherit
     /tmp/ccg0Vwgj.s:4010   .text.vTaskPriorityDisinherit:00000000 $t
     /tmp/ccg0Vwgj.s:4015   .text.vTaskPriorityDisinherit:00000000 vTaskPriorityDisinherit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortYieldFromISR
vListRemove
xTimerCreateTimerTask
init_us_timer
xPortStartScheduler
vPortEndScheduler
get_us_time
strlen
vListInsert
strncpy
vListInitialiseItem
vListInitialise
malloc
free
memset
sprintf
strcat
