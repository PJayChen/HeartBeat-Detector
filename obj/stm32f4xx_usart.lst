   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_usart.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.USART_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	USART_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	USART_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @file    stm32f4xx_usart.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          transmitter (USART):           
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Initialization and Configuration
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Data transfers
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Multi-Processor Communication
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - LIN mode
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Half-duplex mode
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Smartcard mode
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - IrDA mode
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - DMA transfers management
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Interrupts and flags management 
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @verbatim
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *      
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                                 How to use this driver
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          1. Enable peripheral clock using the follwoing functions
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_USARTx, ENABLE) for USART1 and USART6 
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) for USART2, USART3, UART4 or 
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          2.  According to the USART mode, enable the GPIO clocks using 
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              RCC_AHB1PeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              or/and SCLK). 
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          3. Peripheral's alternate function: 
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Configure the desired pin in alternate function by:
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Call GPIO_Init() function
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          4. Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             flow control and Mode(Receiver/Transmitter) using the USART_Init()
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             function.
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. For synchronous mode, enable the clock and program the polarity,
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             phase and last bit using the USART_ClockInit() function.
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             USART_ITConfig() if you need to use interrupt mode. 
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          6. When using the DMA mode 
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Configure the DMA using DMA_Init() function
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Active the needed channel Request using USART_DMACmd() function
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          7. Enable the USART using the USART_Cmd() function.
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          8. Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          for more details
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          In order to reach higher communication baudrates, it is possible to
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          enable the oversampling by 8 mode using the function USART_OverSampling8Cmd().
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This function should be called after enabling the USART clock (RCC_APBxPeriphClockCmd(
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          and before calling the function USART_Init().
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @endverbatim
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @attention
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************  
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */ 
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_usart.h"
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_rcc.h"
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART 
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief USART driver modules
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private define ------------------------------------------------------------*/
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint16_t)0xE9F3)) */
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR1_CLEAR_MASK            ((uint16_t)(USART_CR1_M | USART_CR1_PCE | \
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_RE))
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint16_t)0xF0FF)) */
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint16_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint16_t)0xFCFF)) */
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR3_CLEAR_MASK            ((uint16_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART Interrupts mask */
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define IT_MASK                   ((uint16_t)0x001F)
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Private_Functions
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                   Initialization and Configuration functions
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to initialize the USART 
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   in asynchronous and in synchronous modes.
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    - For the asynchronous mode only these parameters can be configured: 
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Baud Rate
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length 
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Stop Bit
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Parity: If the parity is enabled, then the MSB bit of the data written
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           in the data register is transmitted but is changed by the parity bit.
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           Depending on the frame length defined by the M bit (8-bits or 9-bits),
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           the possible USART frame formats are as listed in the following table:
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+     
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------------------|---------------------------------------|             
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+            
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Receiver/transmitter modes
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART_Init() function follows the USART  asynchronous configuration procedure
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   (details for the procedure are available in reference manual (RM0090)).
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   - For the synchronous mode in addition to the asynchronous mode parameters these 
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     parameters should be also configured:
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock Enabled
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART polarity
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART phase
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART LastBit
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   These parameters can be configured using the USART_ClockInit() function.
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
  28              		.loc 1 179 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 14, -4
  36              		.cfi_offset 7, -8
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USARTx == USART1)
  44              		.loc 1 183 0
  45 0008 7A68     		ldr	r2, [r7, #4]
  46 000a 4FF48053 		mov	r3, #4096
  47 000e C4F20103 		movt	r3, 16385
  48 0012 9A42     		cmp	r2, r3
  49 0014 0CD1     		bne	.L2
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
  50              		.loc 1 185 0
  51 0016 4FF01000 		mov	r0, #16
  52 001a 4FF00101 		mov	r1, #1
  53 001e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  54              		.loc 1 186 0
  55 0022 4FF01000 		mov	r0, #16
  56 0026 4FF00001 		mov	r1, #0
  57 002a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  58 002e 62E0     		b	.L1
  59              	.L2:
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART2)
  60              		.loc 1 188 0
  61 0030 7A68     		ldr	r2, [r7, #4]
  62 0032 4FF48843 		mov	r3, #17408
  63 0036 C4F20003 		movt	r3, 16384
  64 003a 9A42     		cmp	r2, r3
  65 003c 0CD1     		bne	.L4
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
  66              		.loc 1 190 0
  67 003e 4FF40030 		mov	r0, #131072
  68 0042 4FF00101 		mov	r1, #1
  69 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  70              		.loc 1 191 0
  71 004a 4FF40030 		mov	r0, #131072
  72 004e 4FF00001 		mov	r1, #0
  73 0052 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  74 0056 4EE0     		b	.L1
  75              	.L4:
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART3)
  76              		.loc 1 193 0
  77 0058 7A68     		ldr	r2, [r7, #4]
  78 005a 4FF49043 		mov	r3, #18432
  79 005e C4F20003 		movt	r3, 16384
  80 0062 9A42     		cmp	r2, r3
  81 0064 0CD1     		bne	.L5
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
  82              		.loc 1 195 0
  83 0066 4FF48020 		mov	r0, #262144
  84 006a 4FF00101 		mov	r1, #1
  85 006e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  86              		.loc 1 196 0
  87 0072 4FF48020 		mov	r0, #262144
  88 0076 4FF00001 		mov	r1, #0
  89 007a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  90 007e 3AE0     		b	.L1
  91              	.L5:
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }    
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART4)
  92              		.loc 1 198 0
  93 0080 7A68     		ldr	r2, [r7, #4]
  94 0082 4FF49843 		mov	r3, #19456
  95 0086 C4F20003 		movt	r3, 16384
  96 008a 9A42     		cmp	r2, r3
  97 008c 0CD1     		bne	.L6
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
  98              		.loc 1 200 0
  99 008e 4FF40020 		mov	r0, #524288
 100 0092 4FF00101 		mov	r1, #1
 101 0096 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 102              		.loc 1 201 0
 103 009a 4FF40020 		mov	r0, #524288
 104 009e 4FF00001 		mov	r1, #0
 105 00a2 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 106 00a6 26E0     		b	.L1
 107              	.L6:
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART5)
 108              		.loc 1 203 0
 109 00a8 7A68     		ldr	r2, [r7, #4]
 110 00aa 4FF4A043 		mov	r3, #20480
 111 00ae C4F20003 		movt	r3, 16384
 112 00b2 9A42     		cmp	r2, r3
 113 00b4 0CD1     		bne	.L7
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 114              		.loc 1 205 0
 115 00b6 4FF48010 		mov	r0, #1048576
 116 00ba 4FF00101 		mov	r1, #1
 117 00be FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 118              		.loc 1 206 0
 119 00c2 4FF48010 		mov	r0, #1048576
 120 00c6 4FF00001 		mov	r1, #0
 121 00ca FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 122 00ce 12E0     		b	.L1
 123              	.L7:
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }     
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     if (USARTx == USART6)
 124              		.loc 1 210 0
 125 00d0 7A68     		ldr	r2, [r7, #4]
 126 00d2 4FF4A053 		mov	r3, #5120
 127 00d6 C4F20103 		movt	r3, 16385
 128 00da 9A42     		cmp	r2, r3
 129 00dc 0BD1     		bne	.L1
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     { 
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 130              		.loc 1 212 0
 131 00de 4FF02000 		mov	r0, #32
 132 00e2 4FF00101 		mov	r1, #1
 133 00e6 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 134              		.loc 1 213 0
 135 00ea 4FF02000 		mov	r0, #32
 136 00ee 4FF00001 		mov	r1, #0
 137 00f2 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 138              	.L1:
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     }
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 139              		.loc 1 216 0
 140 00f6 07F10807 		add	r7, r7, #8
 141 00fa BD46     		mov	sp, r7
 142 00fc 80BD     		pop	{r7, pc}
 143              		.cfi_endproc
 144              	.LFE110:
 146 00fe 00BF     		.section	.text.USART_Init,"ax",%progbits
 147              		.align	2
 148              		.global	USART_Init
 149              		.thumb
 150              		.thumb_func
 152              	USART_Init:
 153              	.LFB111:
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         parameters in the USART_InitStruct .
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 154              		.loc 1 228 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 40
 157              		@ frame_needed = 1, uses_anonymous_args = 0
 158 0000 80B5     		push	{r7, lr}
 159              	.LCFI3:
 160              		.cfi_def_cfa_offset 8
 161              		.cfi_offset 14, -4
 162              		.cfi_offset 7, -8
 163 0002 8AB0     		sub	sp, sp, #40
 164              	.LCFI4:
 165              		.cfi_def_cfa_offset 48
 166 0004 00AF     		add	r7, sp, #0
 167              	.LCFI5:
 168              		.cfi_def_cfa_register 7
 169 0006 7860     		str	r0, [r7, #4]
 170 0008 3960     		str	r1, [r7, #0]
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 171              		.loc 1 229 0
 172 000a 4FF00003 		mov	r3, #0
 173 000e 7B62     		str	r3, [r7, #36]
 174 0010 4FF00003 		mov	r3, #0
 175 0014 3B62     		str	r3, [r7, #32]
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t integerdivider = 0x00;
 176              		.loc 1 230 0
 177 0016 4FF00003 		mov	r3, #0
 178 001a FB61     		str	r3, [r7, #28]
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t fractionaldivider = 0x00;
 179              		.loc 1 231 0
 180 001c 4FF00003 		mov	r3, #0
 181 0020 BB61     		str	r3, [r7, #24]
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 182              		.loc 1 250 0
 183 0022 7B68     		ldr	r3, [r7, #4]
 184 0024 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 185 0026 9BB2     		uxth	r3, r3
 186 0028 7B62     		str	r3, [r7, #36]
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear STOP[13:12] bits */
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 187              		.loc 1 253 0
 188 002a 7B6A     		ldr	r3, [r7, #36]
 189 002c 23F44053 		bic	r3, r3, #12288
 190 0030 7B62     		str	r3, [r7, #36]
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set STOP[13:12] bits according to USART_StopBits value */
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 191              		.loc 1 257 0
 192 0032 3B68     		ldr	r3, [r7, #0]
 193 0034 DB88     		ldrh	r3, [r3, #6]
 194 0036 7A6A     		ldr	r2, [r7, #36]
 195 0038 1343     		orrs	r3, r3, r2
 196 003a 7B62     		str	r3, [r7, #36]
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 197              		.loc 1 260 0
 198 003c 7B6A     		ldr	r3, [r7, #36]
 199 003e 9AB2     		uxth	r2, r3
 200 0040 7B68     		ldr	r3, [r7, #4]
 201 0042 1A82     		strh	r2, [r3, #16]	@ movhi
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR1;
 202              		.loc 1 263 0
 203 0044 7B68     		ldr	r3, [r7, #4]
 204 0046 9B89     		ldrh	r3, [r3, #12]	@ movhi
 205 0048 9BB2     		uxth	r3, r3
 206 004a 7B62     		str	r3, [r7, #36]
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 207              		.loc 1 266 0
 208 004c 7B6A     		ldr	r3, [r7, #36]
 209 004e 23F4B053 		bic	r3, r3, #5632
 210 0052 23F00C03 		bic	r3, r3, #12
 211 0056 7B62     		str	r3, [r7, #36]
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Word Length, Parity and mode: 
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set the M bits according to USART_WordLength value 
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set PCE and PS bits according to USART_Parity value
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set TE and RE bits according to USART_Mode value */
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 212              		.loc 1 272 0
 213 0058 3B68     		ldr	r3, [r7, #0]
 214 005a 9A88     		ldrh	r2, [r3, #4]
 215 005c 3B68     		ldr	r3, [r7, #0]
 216 005e 1B89     		ldrh	r3, [r3, #8]
 217 0060 1343     		orrs	r3, r3, r2
 218 0062 9AB2     		uxth	r2, r3
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 219              		.loc 1 273 0
 220 0064 3B68     		ldr	r3, [r7, #0]
 221 0066 5B89     		ldrh	r3, [r3, #10]
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 222              		.loc 1 272 0
 223 0068 1343     		orrs	r3, r3, r2
 224 006a 9BB2     		uxth	r3, r3
 225 006c 7A6A     		ldr	r2, [r7, #36]
 226 006e 1343     		orrs	r3, r3, r2
 227 0070 7B62     		str	r3, [r7, #36]
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR1 */
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 228              		.loc 1 276 0
 229 0072 7B6A     		ldr	r3, [r7, #36]
 230 0074 9AB2     		uxth	r2, r3
 231 0076 7B68     		ldr	r3, [r7, #4]
 232 0078 9A81     		strh	r2, [r3, #12]	@ movhi
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR3;
 233              		.loc 1 279 0
 234 007a 7B68     		ldr	r3, [r7, #4]
 235 007c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 236 007e 9BB2     		uxth	r3, r3
 237 0080 7B62     		str	r3, [r7, #36]
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CTSE and RTSE bits */
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 238              		.loc 1 282 0
 239 0082 7B6A     		ldr	r3, [r7, #36]
 240 0084 23F44073 		bic	r3, r3, #768
 241 0088 7B62     		str	r3, [r7, #36]
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART HFC : 
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 242              		.loc 1 286 0
 243 008a 3B68     		ldr	r3, [r7, #0]
 244 008c 9B89     		ldrh	r3, [r3, #12]
 245 008e 7A6A     		ldr	r2, [r7, #36]
 246 0090 1343     		orrs	r3, r3, r2
 247 0092 7B62     		str	r3, [r7, #36]
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR3 */
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 248              		.loc 1 289 0
 249 0094 7B6A     		ldr	r3, [r7, #36]
 250 0096 9AB2     		uxth	r2, r3
 251 0098 7B68     		ldr	r3, [r7, #4]
 252 009a 9A82     		strh	r2, [r3, #20]	@ movhi
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Baud Rate */
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 253              		.loc 1 293 0
 254 009c 07F10803 		add	r3, r7, #8
 255 00a0 1846     		mov	r0, r3
 256 00a2 FFF7FEFF 		bl	RCC_GetClocksFreq
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx == USART1) || (USARTx == USART6))
 257              		.loc 1 295 0
 258 00a6 7A68     		ldr	r2, [r7, #4]
 259 00a8 4FF48053 		mov	r3, #4096
 260 00ac C4F20103 		movt	r3, 16385
 261 00b0 9A42     		cmp	r2, r3
 262 00b2 06D0     		beq	.L9
 263              		.loc 1 295 0 is_stmt 0 discriminator 1
 264 00b4 7A68     		ldr	r2, [r7, #4]
 265 00b6 4FF4A053 		mov	r3, #5120
 266 00ba C4F20103 		movt	r3, 16385
 267 00be 9A42     		cmp	r2, r3
 268 00c0 02D1     		bne	.L10
 269              	.L9:
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 270              		.loc 1 297 0 is_stmt 1
 271 00c2 7B69     		ldr	r3, [r7, #20]
 272 00c4 3B62     		str	r3, [r7, #32]
 273 00c6 01E0     		b	.L11
 274              	.L10:
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 275              		.loc 1 301 0
 276 00c8 3B69     		ldr	r3, [r7, #16]
 277 00ca 3B62     		str	r3, [r7, #32]
 278              	.L11:
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the integer part */
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 279              		.loc 1 305 0
 280 00cc 7B68     		ldr	r3, [r7, #4]
 281 00ce 9B89     		ldrh	r3, [r3, #12]	@ movhi
 282 00d0 9BB2     		uxth	r3, r3
 283 00d2 9BB2     		uxth	r3, r3
 284 00d4 1BB2     		sxth	r3, r3
 285 00d6 002B     		cmp	r3, #0
 286 00d8 0FDA     		bge	.L12
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 287              		.loc 1 308 0
 288 00da 3A6A     		ldr	r2, [r7, #32]
 289 00dc 1346     		mov	r3, r2
 290 00de 4FEA8303 		lsl	r3, r3, #2
 291 00e2 9B18     		adds	r3, r3, r2
 292 00e4 4FEA8302 		lsl	r2, r3, #2
 293 00e8 9A18     		adds	r2, r3, r2
 294 00ea 3B68     		ldr	r3, [r7, #0]
 295 00ec 1B68     		ldr	r3, [r3, #0]
 296 00ee 4FEA4303 		lsl	r3, r3, #1
 297 00f2 B2FBF3F3 		udiv	r3, r2, r3
 298 00f6 FB61     		str	r3, [r7, #28]
 299 00f8 0EE0     		b	.L13
 300              	.L12:
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 301              		.loc 1 313 0
 302 00fa 3A6A     		ldr	r2, [r7, #32]
 303 00fc 1346     		mov	r3, r2
 304 00fe 4FEA8303 		lsl	r3, r3, #2
 305 0102 9B18     		adds	r3, r3, r2
 306 0104 4FEA8302 		lsl	r2, r3, #2
 307 0108 9A18     		adds	r2, r3, r2
 308 010a 3B68     		ldr	r3, [r7, #0]
 309 010c 1B68     		ldr	r3, [r3, #0]
 310 010e 4FEA8303 		lsl	r3, r3, #2
 311 0112 B2FBF3F3 		udiv	r3, r2, r3
 312 0116 FB61     		str	r3, [r7, #28]
 313              	.L13:
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 314              		.loc 1 315 0
 315 0118 FA69     		ldr	r2, [r7, #28]
 316 011a 48F21F53 		movw	r3, #34079
 317 011e C5F2EB13 		movt	r3, 20971
 318 0122 A3FB0213 		umull	r1, r3, r3, r2
 319 0126 4FEA5313 		lsr	r3, r3, #5
 320 012a 4FEA0313 		lsl	r3, r3, #4
 321 012e 7B62     		str	r3, [r7, #36]
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the fractional part */
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 322              		.loc 1 318 0
 323 0130 7B6A     		ldr	r3, [r7, #36]
 324 0132 4FEA1313 		lsr	r3, r3, #4
 325 0136 4FF06402 		mov	r2, #100
 326 013a 02FB03F3 		mul	r3, r2, r3
 327 013e FA69     		ldr	r2, [r7, #28]
 328 0140 D31A     		subs	r3, r2, r3
 329 0142 BB61     		str	r3, [r7, #24]
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Implement the fractional part in the register */
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 330              		.loc 1 321 0
 331 0144 7B68     		ldr	r3, [r7, #4]
 332 0146 9B89     		ldrh	r3, [r3, #12]	@ movhi
 333 0148 9BB2     		uxth	r3, r3
 334 014a 9BB2     		uxth	r3, r3
 335 014c 1BB2     		sxth	r3, r3
 336 014e 002B     		cmp	r3, #0
 337 0150 12DA     		bge	.L14
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 338              		.loc 1 323 0
 339 0152 BB69     		ldr	r3, [r7, #24]
 340 0154 4FEAC303 		lsl	r3, r3, #3
 341 0158 03F13202 		add	r2, r3, #50
 342 015c 48F21F53 		movw	r3, #34079
 343 0160 C5F2EB13 		movt	r3, 20971
 344 0164 A3FB0213 		umull	r1, r3, r3, r2
 345 0168 4FEA5313 		lsr	r3, r3, #5
 346 016c 03F00703 		and	r3, r3, #7
 347 0170 7A6A     		ldr	r2, [r7, #36]
 348 0172 1343     		orrs	r3, r3, r2
 349 0174 7B62     		str	r3, [r7, #36]
 350 0176 11E0     		b	.L15
 351              	.L14:
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 352              		.loc 1 327 0
 353 0178 BB69     		ldr	r3, [r7, #24]
 354 017a 4FEA0313 		lsl	r3, r3, #4
 355 017e 03F13202 		add	r2, r3, #50
 356 0182 48F21F53 		movw	r3, #34079
 357 0186 C5F2EB13 		movt	r3, 20971
 358 018a A3FB0213 		umull	r1, r3, r3, r2
 359 018e 4FEA5313 		lsr	r3, r3, #5
 360 0192 03F00F03 		and	r3, r3, #15
 361 0196 7A6A     		ldr	r2, [r7, #36]
 362 0198 1343     		orrs	r3, r3, r2
 363 019a 7B62     		str	r3, [r7, #36]
 364              	.L15:
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART BRR register */
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 365              		.loc 1 331 0
 366 019c 7B6A     		ldr	r3, [r7, #36]
 367 019e 9AB2     		uxth	r2, r3
 368 01a0 7B68     		ldr	r3, [r7, #4]
 369 01a2 1A81     		strh	r2, [r3, #8]	@ movhi
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 370              		.loc 1 332 0
 371 01a4 07F12807 		add	r7, r7, #40
 372 01a8 BD46     		mov	sp, r7
 373 01aa 80BD     		pop	{r7, pc}
 374              		.cfi_endproc
 375              	.LFE111:
 377              		.section	.text.USART_StructInit,"ax",%progbits
 378              		.align	2
 379              		.global	USART_StructInit
 380              		.thumb
 381              		.thumb_func
 383              	USART_StructInit:
 384              	.LFB112:
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         be initialized.
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 385              		.loc 1 341 0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 8
 388              		@ frame_needed = 1, uses_anonymous_args = 0
 389              		@ link register save eliminated.
 390 0000 80B4     		push	{r7}
 391              	.LCFI6:
 392              		.cfi_def_cfa_offset 4
 393              		.cfi_offset 7, -4
 394 0002 83B0     		sub	sp, sp, #12
 395              	.LCFI7:
 396              		.cfi_def_cfa_offset 16
 397 0004 00AF     		add	r7, sp, #0
 398              	.LCFI8:
 399              		.cfi_def_cfa_register 7
 400 0006 7860     		str	r0, [r7, #4]
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_InitStruct members default value */
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 401              		.loc 1 343 0
 402 0008 7B68     		ldr	r3, [r7, #4]
 403 000a 4FF41652 		mov	r2, #9600
 404 000e 1A60     		str	r2, [r3, #0]
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 405              		.loc 1 344 0
 406 0010 7B68     		ldr	r3, [r7, #4]
 407 0012 4FF00002 		mov	r2, #0
 408 0016 9A80     		strh	r2, [r3, #4]	@ movhi
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 409              		.loc 1 345 0
 410 0018 7B68     		ldr	r3, [r7, #4]
 411 001a 4FF00002 		mov	r2, #0
 412 001e DA80     		strh	r2, [r3, #6]	@ movhi
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 413              		.loc 1 346 0
 414 0020 7B68     		ldr	r3, [r7, #4]
 415 0022 4FF00002 		mov	r2, #0
 416 0026 1A81     		strh	r2, [r3, #8]	@ movhi
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 417              		.loc 1 347 0
 418 0028 7B68     		ldr	r3, [r7, #4]
 419 002a 4FF00C02 		mov	r2, #12
 420 002e 5A81     		strh	r2, [r3, #10]	@ movhi
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 421              		.loc 1 348 0
 422 0030 7B68     		ldr	r3, [r7, #4]
 423 0032 4FF00002 		mov	r2, #0
 424 0036 9A81     		strh	r2, [r3, #12]	@ movhi
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 425              		.loc 1 349 0
 426 0038 07F10C07 		add	r7, r7, #12
 427 003c BD46     		mov	sp, r7
 428 003e 80BC     		pop	{r7}
 429 0040 7047     		bx	lr
 430              		.cfi_endproc
 431              	.LFE112:
 433 0042 00BF     		.section	.text.USART_ClockInit,"ax",%progbits
 434              		.align	2
 435              		.global	USART_ClockInit
 436              		.thumb
 437              		.thumb_func
 439              	USART_ClockInit:
 440              	.LFB113:
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct .
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART peripheral.
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure that
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         contains the configuration information for the specified  USART peripheral.
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 441              		.loc 1 361 0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 16
 444              		@ frame_needed = 1, uses_anonymous_args = 0
 445              		@ link register save eliminated.
 446 0000 80B4     		push	{r7}
 447              	.LCFI9:
 448              		.cfi_def_cfa_offset 4
 449              		.cfi_offset 7, -4
 450 0002 85B0     		sub	sp, sp, #20
 451              	.LCFI10:
 452              		.cfi_def_cfa_offset 24
 453 0004 00AF     		add	r7, sp, #0
 454              	.LCFI11:
 455              		.cfi_def_cfa_register 7
 456 0006 7860     		str	r0, [r7, #4]
 457 0008 3960     		str	r1, [r7, #0]
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00;
 458              		.loc 1 362 0
 459 000a 4FF00003 		mov	r3, #0
 460 000e FB60     		str	r3, [r7, #12]
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 461              		.loc 1 371 0
 462 0010 7B68     		ldr	r3, [r7, #4]
 463 0012 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 464 0014 9BB2     		uxth	r3, r3
 465 0016 FB60     		str	r3, [r7, #12]
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 466              		.loc 1 373 0
 467 0018 FB68     		ldr	r3, [r7, #12]
 468 001a 23F47063 		bic	r3, r3, #3840
 469 001e FB60     		str	r3, [r7, #12]
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 470              		.loc 1 379 0
 471 0020 3B68     		ldr	r3, [r7, #0]
 472 0022 1A88     		ldrh	r2, [r3, #0]
 473 0024 3B68     		ldr	r3, [r7, #0]
 474 0026 5B88     		ldrh	r3, [r3, #2]
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 475              		.loc 1 380 0
 476 0028 1343     		orrs	r3, r3, r2
 477 002a 9AB2     		uxth	r2, r3
 478 002c 3B68     		ldr	r3, [r7, #0]
 479 002e 9B88     		ldrh	r3, [r3, #4]
 480 0030 1343     		orrs	r3, r3, r2
 481 0032 9AB2     		uxth	r2, r3
 482 0034 3B68     		ldr	r3, [r7, #0]
 483 0036 DB88     		ldrh	r3, [r3, #6]
 484 0038 1343     		orrs	r3, r3, r2
 485 003a 9BB2     		uxth	r3, r3
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 486              		.loc 1 379 0
 487 003c FA68     		ldr	r2, [r7, #12]
 488 003e 1343     		orrs	r3, r3, r2
 489 0040 FB60     		str	r3, [r7, #12]
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 490              		.loc 1 382 0
 491 0042 FB68     		ldr	r3, [r7, #12]
 492 0044 9AB2     		uxth	r2, r3
 493 0046 7B68     		ldr	r3, [r7, #4]
 494 0048 1A82     		strh	r2, [r3, #16]	@ movhi
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 495              		.loc 1 383 0
 496 004a 07F11407 		add	r7, r7, #20
 497 004e BD46     		mov	sp, r7
 498 0050 80BC     		pop	{r7}
 499 0052 7047     		bx	lr
 500              		.cfi_endproc
 501              	.LFE113:
 503              		.section	.text.USART_ClockStructInit,"ax",%progbits
 504              		.align	2
 505              		.global	USART_ClockStructInit
 506              		.thumb
 507              		.thumb_func
 509              	USART_ClockStructInit:
 510              	.LFB114:
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         which will be initialized.
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 511              		.loc 1 392 0
 512              		.cfi_startproc
 513              		@ args = 0, pretend = 0, frame = 8
 514              		@ frame_needed = 1, uses_anonymous_args = 0
 515              		@ link register save eliminated.
 516 0000 80B4     		push	{r7}
 517              	.LCFI12:
 518              		.cfi_def_cfa_offset 4
 519              		.cfi_offset 7, -4
 520 0002 83B0     		sub	sp, sp, #12
 521              	.LCFI13:
 522              		.cfi_def_cfa_offset 16
 523 0004 00AF     		add	r7, sp, #0
 524              	.LCFI14:
 525              		.cfi_def_cfa_register 7
 526 0006 7860     		str	r0, [r7, #4]
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_ClockInitStruct members default value */
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 527              		.loc 1 394 0
 528 0008 7B68     		ldr	r3, [r7, #4]
 529 000a 4FF00002 		mov	r2, #0
 530 000e 1A80     		strh	r2, [r3, #0]	@ movhi
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 531              		.loc 1 395 0
 532 0010 7B68     		ldr	r3, [r7, #4]
 533 0012 4FF00002 		mov	r2, #0
 534 0016 5A80     		strh	r2, [r3, #2]	@ movhi
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 535              		.loc 1 396 0
 536 0018 7B68     		ldr	r3, [r7, #4]
 537 001a 4FF00002 		mov	r2, #0
 538 001e 9A80     		strh	r2, [r3, #4]	@ movhi
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 539              		.loc 1 397 0
 540 0020 7B68     		ldr	r3, [r7, #4]
 541 0022 4FF00002 		mov	r2, #0
 542 0026 DA80     		strh	r2, [r3, #6]	@ movhi
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 543              		.loc 1 398 0
 544 0028 07F10C07 		add	r7, r7, #12
 545 002c BD46     		mov	sp, r7
 546 002e 80BC     		pop	{r7}
 547 0030 7047     		bx	lr
 548              		.cfi_endproc
 549              	.LFE114:
 551 0032 00BF     		.section	.text.USART_Cmd,"ax",%progbits
 552              		.align	2
 553              		.global	USART_Cmd
 554              		.thumb
 555              		.thumb_func
 557              	USART_Cmd:
 558              	.LFB115:
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 559              		.loc 1 409 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 8
 562              		@ frame_needed = 1, uses_anonymous_args = 0
 563              		@ link register save eliminated.
 564 0000 80B4     		push	{r7}
 565              	.LCFI15:
 566              		.cfi_def_cfa_offset 4
 567              		.cfi_offset 7, -4
 568 0002 83B0     		sub	sp, sp, #12
 569              	.LCFI16:
 570              		.cfi_def_cfa_offset 16
 571 0004 00AF     		add	r7, sp, #0
 572              	.LCFI17:
 573              		.cfi_def_cfa_register 7
 574 0006 7860     		str	r0, [r7, #4]
 575 0008 0B46     		mov	r3, r1
 576 000a FB70     		strb	r3, [r7, #3]
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 577              		.loc 1 414 0
 578 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 579 000e 002B     		cmp	r3, #0
 580 0010 08D0     		beq	.L20
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 581              		.loc 1 417 0
 582 0012 7B68     		ldr	r3, [r7, #4]
 583 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 584 0016 9BB2     		uxth	r3, r3
 585 0018 43F40053 		orr	r3, r3, #8192
 586 001c 9AB2     		uxth	r2, r3
 587 001e 7B68     		ldr	r3, [r7, #4]
 588 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 589 0022 07E0     		b	.L19
 590              	.L20:
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 591              		.loc 1 422 0
 592 0024 7B68     		ldr	r3, [r7, #4]
 593 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 594 0028 9BB2     		uxth	r3, r3
 595 002a 23F40053 		bic	r3, r3, #8192
 596 002e 9AB2     		uxth	r2, r3
 597 0030 7B68     		ldr	r3, [r7, #4]
 598 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 599              	.L19:
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 600              		.loc 1 424 0
 601 0034 07F10C07 		add	r7, r7, #12
 602 0038 BD46     		mov	sp, r7
 603 003a 80BC     		pop	{r7}
 604 003c 7047     		bx	lr
 605              		.cfi_endproc
 606              	.LFE115:
 608 003e 00BF     		.section	.text.USART_SetPrescaler,"ax",%progbits
 609              		.align	2
 610              		.global	USART_SetPrescaler
 611              		.thumb
 612              		.thumb_func
 614              	USART_SetPrescaler:
 615              	.LFB116:
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the system clock prescaler.
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.   
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** { 
 616              		.loc 1 435 0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 8
 619              		@ frame_needed = 1, uses_anonymous_args = 0
 620              		@ link register save eliminated.
 621 0000 80B4     		push	{r7}
 622              	.LCFI18:
 623              		.cfi_def_cfa_offset 4
 624              		.cfi_offset 7, -4
 625 0002 83B0     		sub	sp, sp, #12
 626              	.LCFI19:
 627              		.cfi_def_cfa_offset 16
 628 0004 00AF     		add	r7, sp, #0
 629              	.LCFI20:
 630              		.cfi_def_cfa_register 7
 631 0006 7860     		str	r0, [r7, #4]
 632 0008 0B46     		mov	r3, r1
 633 000a FB70     		strb	r3, [r7, #3]
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART prescaler */
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 634              		.loc 1 440 0
 635 000c 7B68     		ldr	r3, [r7, #4]
 636 000e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 637 0010 9BB2     		uxth	r3, r3
 638 0012 23F0FF03 		bic	r3, r3, #255
 639 0016 9AB2     		uxth	r2, r3
 640 0018 7B68     		ldr	r3, [r7, #4]
 641 001a 1A83     		strh	r2, [r3, #24]	@ movhi
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART prescaler */
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 642              		.loc 1 442 0
 643 001c 7B68     		ldr	r3, [r7, #4]
 644 001e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 645 0020 9AB2     		uxth	r2, r3
 646 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 647 0024 9BB2     		uxth	r3, r3
 648 0026 1343     		orrs	r3, r3, r2
 649 0028 9AB2     		uxth	r2, r3
 650 002a 7B68     		ldr	r3, [r7, #4]
 651 002c 1A83     		strh	r2, [r3, #24]	@ movhi
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 652              		.loc 1 443 0
 653 002e 07F10C07 		add	r7, r7, #12
 654 0032 BD46     		mov	sp, r7
 655 0034 80BC     		pop	{r7}
 656 0036 7047     		bx	lr
 657              		.cfi_endproc
 658              	.LFE116:
 660              		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 661              		.align	2
 662              		.global	USART_OverSampling8Cmd
 663              		.thumb
 664              		.thumb_func
 666              	USART_OverSampling8Cmd:
 667              	.LFB117:
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         in order to have correct baudrate Divider value.
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 668              		.loc 1 456 0
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 8
 671              		@ frame_needed = 1, uses_anonymous_args = 0
 672              		@ link register save eliminated.
 673 0000 80B4     		push	{r7}
 674              	.LCFI21:
 675              		.cfi_def_cfa_offset 4
 676              		.cfi_offset 7, -4
 677 0002 83B0     		sub	sp, sp, #12
 678              	.LCFI22:
 679              		.cfi_def_cfa_offset 16
 680 0004 00AF     		add	r7, sp, #0
 681              	.LCFI23:
 682              		.cfi_def_cfa_register 7
 683 0006 7860     		str	r0, [r7, #4]
 684 0008 0B46     		mov	r3, r1
 685 000a FB70     		strb	r3, [r7, #3]
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 686              		.loc 1 461 0
 687 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 688 000e 002B     		cmp	r3, #0
 689 0010 0AD0     		beq	.L24
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 690              		.loc 1 464 0
 691 0012 7B68     		ldr	r3, [r7, #4]
 692 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 693 0016 9BB2     		uxth	r3, r3
 694 0018 6FEA4343 		mvn	r3, r3, lsl #17
 695 001c 6FEA5343 		mvn	r3, r3, lsr #17
 696 0020 9AB2     		uxth	r2, r3
 697 0022 7B68     		ldr	r3, [r7, #4]
 698 0024 9A81     		strh	r2, [r3, #12]	@ movhi
 699 0026 09E0     		b	.L23
 700              	.L24:
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 701              		.loc 1 469 0
 702 0028 7B68     		ldr	r3, [r7, #4]
 703 002a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 704 002c 9BB2     		uxth	r3, r3
 705 002e 4FEA4343 		lsl	r3, r3, #17
 706 0032 4FEA5343 		lsr	r3, r3, #17
 707 0036 9AB2     		uxth	r2, r3
 708 0038 7B68     		ldr	r3, [r7, #4]
 709 003a 9A81     		strh	r2, [r3, #12]	@ movhi
 710              	.L23:
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }  
 711              		.loc 1 471 0
 712 003c 07F10C07 		add	r7, r7, #12
 713 0040 BD46     		mov	sp, r7
 714 0042 80BC     		pop	{r7}
 715 0044 7047     		bx	lr
 716              		.cfi_endproc
 717              	.LFE117:
 719 0046 00BF     		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 720              		.align	2
 721              		.global	USART_OneBitMethodCmd
 722              		.thumb
 723              		.thumb_func
 725              	USART_OneBitMethodCmd:
 726              	.LFB118:
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 727              		.loc 1 482 0
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 8
 730              		@ frame_needed = 1, uses_anonymous_args = 0
 731              		@ link register save eliminated.
 732 0000 80B4     		push	{r7}
 733              	.LCFI24:
 734              		.cfi_def_cfa_offset 4
 735              		.cfi_offset 7, -4
 736 0002 83B0     		sub	sp, sp, #12
 737              	.LCFI25:
 738              		.cfi_def_cfa_offset 16
 739 0004 00AF     		add	r7, sp, #0
 740              	.LCFI26:
 741              		.cfi_def_cfa_register 7
 742 0006 7860     		str	r0, [r7, #4]
 743 0008 0B46     		mov	r3, r1
 744 000a FB70     		strb	r3, [r7, #3]
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 745              		.loc 1 487 0
 746 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 747 000e 002B     		cmp	r3, #0
 748 0010 08D0     		beq	.L27
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 749              		.loc 1 490 0
 750 0012 7B68     		ldr	r3, [r7, #4]
 751 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 752 0016 9BB2     		uxth	r3, r3
 753 0018 43F40063 		orr	r3, r3, #2048
 754 001c 9AB2     		uxth	r2, r3
 755 001e 7B68     		ldr	r3, [r7, #4]
 756 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 757 0022 07E0     		b	.L26
 758              	.L27:
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 759              		.loc 1 495 0
 760 0024 7B68     		ldr	r3, [r7, #4]
 761 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 762 0028 9BB2     		uxth	r3, r3
 763 002a 23F40063 		bic	r3, r3, #2048
 764 002e 9AB2     		uxth	r2, r3
 765 0030 7B68     		ldr	r3, [r7, #4]
 766 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 767              	.L26:
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 768              		.loc 1 497 0
 769 0034 07F10C07 		add	r7, r7, #12
 770 0038 BD46     		mov	sp, r7
 771 003a 80BC     		pop	{r7}
 772 003c 7047     		bx	lr
 773              		.cfi_endproc
 774              	.LFE118:
 776 003e 00BF     		.section	.text.USART_SendData,"ax",%progbits
 777              		.align	2
 778              		.global	USART_SendData
 779              		.thumb
 780              		.thumb_func
 782              	USART_SendData:
 783              	.LFB119:
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group2 Data transfers functions
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Data transfers functions 
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                             Data transfers functions
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART data 
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   transfers.
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   During an USART reception, data shifts in least significant bit first through 
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) 
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   between the internal bus and the received shift register.
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   When a transmission is taking place, a write instruction to the USART_DR register 
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   stores the data in the TDR register and which is copied in the shift register 
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   at the end of the current transmission.
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The read access of the USART_DR register can be done using the USART_ReceiveData()
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   function and returns the RDR buffered value. Whereas a write access to the USART_DR 
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   can be done using USART_SendData() function and stores the written data into 
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   TDR buffer.
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  Data: the data to transmit.
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 784              		.loc 1 539 0
 785              		.cfi_startproc
 786              		@ args = 0, pretend = 0, frame = 8
 787              		@ frame_needed = 1, uses_anonymous_args = 0
 788              		@ link register save eliminated.
 789 0000 80B4     		push	{r7}
 790              	.LCFI27:
 791              		.cfi_def_cfa_offset 4
 792              		.cfi_offset 7, -4
 793 0002 83B0     		sub	sp, sp, #12
 794              	.LCFI28:
 795              		.cfi_def_cfa_offset 16
 796 0004 00AF     		add	r7, sp, #0
 797              	.LCFI29:
 798              		.cfi_def_cfa_register 7
 799 0006 7860     		str	r0, [r7, #4]
 800 0008 0B46     		mov	r3, r1
 801 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Transmit Data */
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 802              		.loc 1 545 0
 803 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 804 000e 4FEAC353 		lsl	r3, r3, #23
 805 0012 4FEAD353 		lsr	r3, r3, #23
 806 0016 9AB2     		uxth	r2, r3
 807 0018 7B68     		ldr	r3, [r7, #4]
 808 001a 9A80     		strh	r2, [r3, #4]	@ movhi
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 809              		.loc 1 546 0
 810 001c 07F10C07 		add	r7, r7, #12
 811 0020 BD46     		mov	sp, r7
 812 0022 80BC     		pop	{r7}
 813 0024 7047     		bx	lr
 814              		.cfi_endproc
 815              	.LFE119:
 817 0026 00BF     		.section	.text.USART_ReceiveData,"ax",%progbits
 818              		.align	2
 819              		.global	USART_ReceiveData
 820              		.thumb
 821              		.thumb_func
 823              	USART_ReceiveData:
 824              	.LFB120:
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The received data.
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 825              		.loc 1 555 0
 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 8
 828              		@ frame_needed = 1, uses_anonymous_args = 0
 829              		@ link register save eliminated.
 830 0000 80B4     		push	{r7}
 831              	.LCFI30:
 832              		.cfi_def_cfa_offset 4
 833              		.cfi_offset 7, -4
 834 0002 83B0     		sub	sp, sp, #12
 835              	.LCFI31:
 836              		.cfi_def_cfa_offset 16
 837 0004 00AF     		add	r7, sp, #0
 838              	.LCFI32:
 839              		.cfi_def_cfa_register 7
 840 0006 7860     		str	r0, [r7, #4]
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Receive Data */
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 841              		.loc 1 560 0
 842 0008 7B68     		ldr	r3, [r7, #4]
 843 000a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 844 000c 9BB2     		uxth	r3, r3
 845 000e 4FEAC353 		lsl	r3, r3, #23
 846 0012 4FEAD353 		lsr	r3, r3, #23
 847 0016 9BB2     		uxth	r3, r3
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 848              		.loc 1 561 0
 849 0018 1846     		mov	r0, r3
 850 001a 07F10C07 		add	r7, r7, #12
 851 001e BD46     		mov	sp, r7
 852 0020 80BC     		pop	{r7}
 853 0022 7047     		bx	lr
 854              		.cfi_endproc
 855              	.LFE120:
 857              		.section	.text.USART_SetAddress,"ax",%progbits
 858              		.align	2
 859              		.global	USART_SetAddress
 860              		.thumb
 861              		.thumb_func
 863              	USART_SetAddress:
 864              	.LFB121:
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group3 MultiProcessor Communication functions
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                     Multi-Processor Communication functions
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   multiprocessor communication.
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   For instance one of the USARTs can be the master, its TX output is connected to 
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX input of the other USART. The others are slaves, their respective TX outputs 
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   are logically ANDed together and connected to the RX input of the master.
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART multiprocessor communication is possible through the following procedure:
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 9 bits, Stop bits, Parity, Mode transmitter 
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the wake up method (USART_WakeUp_IdleLine or USART_WakeUp_AddressMark)
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using USART_WakeUpConfig() function only for the slaves.
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the USART using the USART_Cmd() function.
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() function.
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART Slave exit from mute mode when receive the wake up condition.
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the address of the USART node.
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 865              		.loc 1 606 0
 866              		.cfi_startproc
 867              		@ args = 0, pretend = 0, frame = 8
 868              		@ frame_needed = 1, uses_anonymous_args = 0
 869              		@ link register save eliminated.
 870 0000 80B4     		push	{r7}
 871              	.LCFI33:
 872              		.cfi_def_cfa_offset 4
 873              		.cfi_offset 7, -4
 874 0002 83B0     		sub	sp, sp, #12
 875              	.LCFI34:
 876              		.cfi_def_cfa_offset 16
 877 0004 00AF     		add	r7, sp, #0
 878              	.LCFI35:
 879              		.cfi_def_cfa_register 7
 880 0006 7860     		str	r0, [r7, #4]
 881 0008 0B46     		mov	r3, r1
 882 000a FB70     		strb	r3, [r7, #3]
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART address */
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 883              		.loc 1 612 0
 884 000c 7B68     		ldr	r3, [r7, #4]
 885 000e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 886 0010 9BB2     		uxth	r3, r3
 887 0012 23F00F03 		bic	r3, r3, #15
 888 0016 9AB2     		uxth	r2, r3
 889 0018 7B68     		ldr	r3, [r7, #4]
 890 001a 1A82     		strh	r2, [r3, #16]	@ movhi
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART address node */
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_Address;
 891              		.loc 1 614 0
 892 001c 7B68     		ldr	r3, [r7, #4]
 893 001e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 894 0020 9AB2     		uxth	r2, r3
 895 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 896 0024 9BB2     		uxth	r3, r3
 897 0026 1343     		orrs	r3, r3, r2
 898 0028 9AB2     		uxth	r2, r3
 899 002a 7B68     		ldr	r3, [r7, #4]
 900 002c 1A82     		strh	r2, [r3, #16]	@ movhi
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 901              		.loc 1 615 0
 902 002e 07F10C07 		add	r7, r7, #12
 903 0032 BD46     		mov	sp, r7
 904 0034 80BC     		pop	{r7}
 905 0036 7047     		bx	lr
 906              		.cfi_endproc
 907              	.LFE121:
 909              		.section	.text.USART_ReceiverWakeUpCmd,"ax",%progbits
 910              		.align	2
 911              		.global	USART_ReceiverWakeUpCmd
 912              		.thumb
 913              		.thumb_func
 915              	USART_ReceiverWakeUpCmd:
 916              	.LFB122:
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 917              		.loc 1 626 0
 918              		.cfi_startproc
 919              		@ args = 0, pretend = 0, frame = 8
 920              		@ frame_needed = 1, uses_anonymous_args = 0
 921              		@ link register save eliminated.
 922 0000 80B4     		push	{r7}
 923              	.LCFI36:
 924              		.cfi_def_cfa_offset 4
 925              		.cfi_offset 7, -4
 926 0002 83B0     		sub	sp, sp, #12
 927              	.LCFI37:
 928              		.cfi_def_cfa_offset 16
 929 0004 00AF     		add	r7, sp, #0
 930              	.LCFI38:
 931              		.cfi_def_cfa_register 7
 932 0006 7860     		str	r0, [r7, #4]
 933 0008 0B46     		mov	r3, r1
 934 000a FB70     		strb	r3, [r7, #3]
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 935              		.loc 1 631 0
 936 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 937 000e 002B     		cmp	r3, #0
 938 0010 08D0     		beq	.L33
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 939              		.loc 1 634 0
 940 0012 7B68     		ldr	r3, [r7, #4]
 941 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 942 0016 9BB2     		uxth	r3, r3
 943 0018 43F00203 		orr	r3, r3, #2
 944 001c 9AB2     		uxth	r2, r3
 945 001e 7B68     		ldr	r3, [r7, #4]
 946 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 947 0022 07E0     		b	.L32
 948              	.L33:
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 949              		.loc 1 639 0
 950 0024 7B68     		ldr	r3, [r7, #4]
 951 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 952 0028 9BB2     		uxth	r3, r3
 953 002a 23F00203 		bic	r3, r3, #2
 954 002e 9AB2     		uxth	r2, r3
 955 0030 7B68     		ldr	r3, [r7, #4]
 956 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 957              	.L32:
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 958              		.loc 1 641 0
 959 0034 07F10C07 		add	r7, r7, #12
 960 0038 BD46     		mov	sp, r7
 961 003a 80BC     		pop	{r7}
 962 003c 7047     		bx	lr
 963              		.cfi_endproc
 964              	.LFE122:
 966 003e 00BF     		.section	.text.USART_WakeUpConfig,"ax",%progbits
 967              		.align	2
 968              		.global	USART_WakeUpConfig
 969              		.thumb
 970              		.thumb_func
 972              	USART_WakeUpConfig:
 973              	.LFB123:
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Selects the USART WakeUp method.
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 974              		.loc 1 653 0
 975              		.cfi_startproc
 976              		@ args = 0, pretend = 0, frame = 8
 977              		@ frame_needed = 1, uses_anonymous_args = 0
 978              		@ link register save eliminated.
 979 0000 80B4     		push	{r7}
 980              	.LCFI39:
 981              		.cfi_def_cfa_offset 4
 982              		.cfi_offset 7, -4
 983 0002 83B0     		sub	sp, sp, #12
 984              	.LCFI40:
 985              		.cfi_def_cfa_offset 16
 986 0004 00AF     		add	r7, sp, #0
 987              	.LCFI41:
 988              		.cfi_def_cfa_register 7
 989 0006 7860     		str	r0, [r7, #4]
 990 0008 0B46     		mov	r3, r1
 991 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 992              		.loc 1 658 0
 993 000c 7B68     		ldr	r3, [r7, #4]
 994 000e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 995 0010 9BB2     		uxth	r3, r3
 996 0012 23F40063 		bic	r3, r3, #2048
 997 0016 9AB2     		uxth	r2, r3
 998 0018 7B68     		ldr	r3, [r7, #4]
 999 001a 9A81     		strh	r2, [r3, #12]	@ movhi
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 1000              		.loc 1 659 0
 1001 001c 7B68     		ldr	r3, [r7, #4]
 1002 001e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1003 0020 9AB2     		uxth	r2, r3
 1004 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1005 0024 1343     		orrs	r3, r3, r2
 1006 0026 9AB2     		uxth	r2, r3
 1007 0028 7B68     		ldr	r3, [r7, #4]
 1008 002a 9A81     		strh	r2, [r3, #12]	@ movhi
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1009              		.loc 1 660 0
 1010 002c 07F10C07 		add	r7, r7, #12
 1011 0030 BD46     		mov	sp, r7
 1012 0032 80BC     		pop	{r7}
 1013 0034 7047     		bx	lr
 1014              		.cfi_endproc
 1015              	.LFE123:
 1017 0036 00BF     		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 1018              		.align	2
 1019              		.global	USART_LINBreakDetectLengthConfig
 1020              		.thumb
 1021              		.thumb_func
 1023              	USART_LINBreakDetectLengthConfig:
 1024              	.LFB124:
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group4 LIN mode functions
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   LIN mode functions 
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 LIN mode functions
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART LIN 
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Mode communication.
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In LIN mode, 8-bit data format with 1 stop bit is required in accordance with 
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the LIN standard.
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Only this LIN Feature is supported by the USART IP:
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     - LIN Master Synchronous Break send capability and LIN slave break detection
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       capability :  13-bit break generation and 10/11 bit break detection
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master transmitter communication is possible through the following procedure:
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the LIN mode using the USART_LINCmd() function.
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Send the break character using USART_SendBreak() function.
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master receiver communication is possible through the following procedure:
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the break detection length using the USART_LINBreakDetectLengthConfig()
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the LIN mode using the USART_LINCmd() function.
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In LIN mode, the following bits must be kept cleared:
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - CLKEN in the USART_CR2 register,
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1025              		.loc 1 722 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 8
 1028              		@ frame_needed = 1, uses_anonymous_args = 0
 1029              		@ link register save eliminated.
 1030 0000 80B4     		push	{r7}
 1031              	.LCFI42:
 1032              		.cfi_def_cfa_offset 4
 1033              		.cfi_offset 7, -4
 1034 0002 83B0     		sub	sp, sp, #12
 1035              	.LCFI43:
 1036              		.cfi_def_cfa_offset 16
 1037 0004 00AF     		add	r7, sp, #0
 1038              	.LCFI44:
 1039              		.cfi_def_cfa_register 7
 1040 0006 7860     		str	r0, [r7, #4]
 1041 0008 0B46     		mov	r3, r1
 1042 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 1043              		.loc 1 727 0
 1044 000c 7B68     		ldr	r3, [r7, #4]
 1045 000e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1046 0010 9BB2     		uxth	r3, r3
 1047 0012 23F02003 		bic	r3, r3, #32
 1048 0016 9AB2     		uxth	r2, r3
 1049 0018 7B68     		ldr	r3, [r7, #4]
 1050 001a 1A82     		strh	r2, [r3, #16]	@ movhi
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 1051              		.loc 1 728 0
 1052 001c 7B68     		ldr	r3, [r7, #4]
 1053 001e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1054 0020 9AB2     		uxth	r2, r3
 1055 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1056 0024 1343     		orrs	r3, r3, r2
 1057 0026 9AB2     		uxth	r2, r3
 1058 0028 7B68     		ldr	r3, [r7, #4]
 1059 002a 1A82     		strh	r2, [r3, #16]	@ movhi
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1060              		.loc 1 729 0
 1061 002c 07F10C07 		add	r7, r7, #12
 1062 0030 BD46     		mov	sp, r7
 1063 0032 80BC     		pop	{r7}
 1064 0034 7047     		bx	lr
 1065              		.cfi_endproc
 1066              	.LFE124:
 1068 0036 00BF     		.section	.text.USART_LINCmd,"ax",%progbits
 1069              		.align	2
 1070              		.global	USART_LINCmd
 1071              		.thumb
 1072              		.thumb_func
 1074              	USART_LINCmd:
 1075              	.LFB125:
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1076              		.loc 1 740 0
 1077              		.cfi_startproc
 1078              		@ args = 0, pretend = 0, frame = 8
 1079              		@ frame_needed = 1, uses_anonymous_args = 0
 1080              		@ link register save eliminated.
 1081 0000 80B4     		push	{r7}
 1082              	.LCFI45:
 1083              		.cfi_def_cfa_offset 4
 1084              		.cfi_offset 7, -4
 1085 0002 83B0     		sub	sp, sp, #12
 1086              	.LCFI46:
 1087              		.cfi_def_cfa_offset 16
 1088 0004 00AF     		add	r7, sp, #0
 1089              	.LCFI47:
 1090              		.cfi_def_cfa_register 7
 1091 0006 7860     		str	r0, [r7, #4]
 1092 0008 0B46     		mov	r3, r1
 1093 000a FB70     		strb	r3, [r7, #3]
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1094              		.loc 1 745 0
 1095 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1096 000e 002B     		cmp	r3, #0
 1097 0010 08D0     		beq	.L38
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 1098              		.loc 1 748 0
 1099 0012 7B68     		ldr	r3, [r7, #4]
 1100 0014 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1101 0016 9BB2     		uxth	r3, r3
 1102 0018 43F48043 		orr	r3, r3, #16384
 1103 001c 9AB2     		uxth	r2, r3
 1104 001e 7B68     		ldr	r3, [r7, #4]
 1105 0020 1A82     		strh	r2, [r3, #16]	@ movhi
 1106 0022 07E0     		b	.L37
 1107              	.L38:
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 1108              		.loc 1 753 0
 1109 0024 7B68     		ldr	r3, [r7, #4]
 1110 0026 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1111 0028 9BB2     		uxth	r3, r3
 1112 002a 23F48043 		bic	r3, r3, #16384
 1113 002e 9AB2     		uxth	r2, r3
 1114 0030 7B68     		ldr	r3, [r7, #4]
 1115 0032 1A82     		strh	r2, [r3, #16]	@ movhi
 1116              	.L37:
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1117              		.loc 1 755 0
 1118 0034 07F10C07 		add	r7, r7, #12
 1119 0038 BD46     		mov	sp, r7
 1120 003a 80BC     		pop	{r7}
 1121 003c 7047     		bx	lr
 1122              		.cfi_endproc
 1123              	.LFE125:
 1125 003e 00BF     		.section	.text.USART_SendBreak,"ax",%progbits
 1126              		.align	2
 1127              		.global	USART_SendBreak
 1128              		.thumb
 1129              		.thumb_func
 1131              	USART_SendBreak:
 1132              	.LFB126:
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits break characters.
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1133              		.loc 1 764 0
 1134              		.cfi_startproc
 1135              		@ args = 0, pretend = 0, frame = 8
 1136              		@ frame_needed = 1, uses_anonymous_args = 0
 1137              		@ link register save eliminated.
 1138 0000 80B4     		push	{r7}
 1139              	.LCFI48:
 1140              		.cfi_def_cfa_offset 4
 1141              		.cfi_offset 7, -4
 1142 0002 83B0     		sub	sp, sp, #12
 1143              	.LCFI49:
 1144              		.cfi_def_cfa_offset 16
 1145 0004 00AF     		add	r7, sp, #0
 1146              	.LCFI50:
 1147              		.cfi_def_cfa_register 7
 1148 0006 7860     		str	r0, [r7, #4]
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Send break characters */
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_CR1_SBK;
 1149              		.loc 1 769 0
 1150 0008 7B68     		ldr	r3, [r7, #4]
 1151 000a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1152 000c 9BB2     		uxth	r3, r3
 1153 000e 43F00103 		orr	r3, r3, #1
 1154 0012 9AB2     		uxth	r2, r3
 1155 0014 7B68     		ldr	r3, [r7, #4]
 1156 0016 9A81     		strh	r2, [r3, #12]	@ movhi
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1157              		.loc 1 770 0
 1158 0018 07F10C07 		add	r7, r7, #12
 1159 001c BD46     		mov	sp, r7
 1160 001e 80BC     		pop	{r7}
 1161 0020 7047     		bx	lr
 1162              		.cfi_endproc
 1163              	.LFE126:
 1165 0022 00BF     		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 1166              		.align	2
 1167              		.global	USART_HalfDuplexCmd
 1168              		.thumb
 1169              		.thumb_func
 1171              	USART_HalfDuplexCmd:
 1172              	.LFB127:
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group5 Halfduplex mode function
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Half-duplex mode function 
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                          Half-duplex mode function
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Half-duplex communication.
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can be configured to follow a single-wire half-duplex protocol where 
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the TX and RX lines are internally connected.
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART Half duplex communication is possible through the following procedure:
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the USART using the USART_Cmd() function.
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the half duplex mode using USART_HalfDuplexCmd() function.
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The RX pin is no longer used
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In Half-duplex mode the following bits must be kept cleared:
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN and CLKEN bits in the USART_CR2 register.
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and IREN bits in the USART_CR3 register.
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART Communication.
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1173              		.loc 1 817 0
 1174              		.cfi_startproc
 1175              		@ args = 0, pretend = 0, frame = 8
 1176              		@ frame_needed = 1, uses_anonymous_args = 0
 1177              		@ link register save eliminated.
 1178 0000 80B4     		push	{r7}
 1179              	.LCFI51:
 1180              		.cfi_def_cfa_offset 4
 1181              		.cfi_offset 7, -4
 1182 0002 83B0     		sub	sp, sp, #12
 1183              	.LCFI52:
 1184              		.cfi_def_cfa_offset 16
 1185 0004 00AF     		add	r7, sp, #0
 1186              	.LCFI53:
 1187              		.cfi_def_cfa_register 7
 1188 0006 7860     		str	r0, [r7, #4]
 1189 0008 0B46     		mov	r3, r1
 1190 000a FB70     		strb	r3, [r7, #3]
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1191              		.loc 1 822 0
 1192 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1193 000e 002B     		cmp	r3, #0
 1194 0010 08D0     		beq	.L42
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 1195              		.loc 1 825 0
 1196 0012 7B68     		ldr	r3, [r7, #4]
 1197 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1198 0016 9BB2     		uxth	r3, r3
 1199 0018 43F00803 		orr	r3, r3, #8
 1200 001c 9AB2     		uxth	r2, r3
 1201 001e 7B68     		ldr	r3, [r7, #4]
 1202 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 1203 0022 07E0     		b	.L41
 1204              	.L42:
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 1205              		.loc 1 830 0
 1206 0024 7B68     		ldr	r3, [r7, #4]
 1207 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1208 0028 9BB2     		uxth	r3, r3
 1209 002a 23F00803 		bic	r3, r3, #8
 1210 002e 9AB2     		uxth	r2, r3
 1211 0030 7B68     		ldr	r3, [r7, #4]
 1212 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1213              	.L41:
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1214              		.loc 1 832 0
 1215 0034 07F10C07 		add	r7, r7, #12
 1216 0038 BD46     		mov	sp, r7
 1217 003a 80BC     		pop	{r7}
 1218 003c 7047     		bx	lr
 1219              		.cfi_endproc
 1220              	.LFE127:
 1222 003e 00BF     		.section	.text.USART_SetGuardTime,"ax",%progbits
 1223              		.align	2
 1224              		.global	USART_SetGuardTime
 1225              		.thumb
 1226              		.thumb_func
 1228              	USART_SetGuardTime:
 1229              	.LFB128:
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group6 Smartcard mode functions
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Smartcard mode functions 
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                Smartcard mode functions
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication.
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The Smartcard interface is designed to support asynchronous protocol Smartcards as
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   defined in the ISO 7816-3 standard.
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can provide a clock to the smartcard through the SCLK output.
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In smartcard mode, SCLK is not associated to the communication but is simply derived 
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   from the internal peripheral input clock through a 5-bit prescaler.
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication is possible through the following procedure:
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Configures the Smartcard Prescaler using the USART_SetPrescaler() function.
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the Smartcard Guard Time using the USART_SetGuardTime() function.
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Program the USART clock using the USART_ClockInit() function as following:
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock enabled
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPOL Low
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPHA on first edge
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Last Bit Clock Enabled
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Program the Smartcard interface using the USART_Init() function as following:
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length = 9 Bits
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - 1.5 Stop Bit
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Even parity
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - BaudRate = 12096 baud
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control disabled (RTS and CTS signals)
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Tx and Rx enabled
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Optionally you can enable the parity error interrupt using the USART_ITConfig()
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. Enable the USART using the USART_Cmd() function.
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. Enable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. Enable the Smartcard interface using the USART_SmartCardCmd() function.
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Please refer to the ISO 7816-3 specification for more details.
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note It is also possible to choose 0.5 stop bit for receiving but it is recommended 
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       to use 1.5 stop bits for both transmitting and receiving to avoid switching 
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       between the two configurations.
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In smartcard mode, the following bits must be kept cleared:
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN bit in the USART_CR2 register.
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - HDSEL and IREN bits in the USART_CR3 register.
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Smartcard mode is available on USART peripherals only (not available on UART4 
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       and UART5 peripherals).
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the specified USART guard time.
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.   
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {    
 1230              		.loc 1 902 0
 1231              		.cfi_startproc
 1232              		@ args = 0, pretend = 0, frame = 8
 1233              		@ frame_needed = 1, uses_anonymous_args = 0
 1234              		@ link register save eliminated.
 1235 0000 80B4     		push	{r7}
 1236              	.LCFI54:
 1237              		.cfi_def_cfa_offset 4
 1238              		.cfi_offset 7, -4
 1239 0002 83B0     		sub	sp, sp, #12
 1240              	.LCFI55:
 1241              		.cfi_def_cfa_offset 16
 1242 0004 00AF     		add	r7, sp, #0
 1243              	.LCFI56:
 1244              		.cfi_def_cfa_register 7
 1245 0006 7860     		str	r0, [r7, #4]
 1246 0008 0B46     		mov	r3, r1
 1247 000a FB70     		strb	r3, [r7, #3]
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART Guard time */
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 1248              		.loc 1 907 0
 1249 000c 7B68     		ldr	r3, [r7, #4]
 1250 000e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1251 0010 9BB2     		uxth	r3, r3
 1252 0012 DBB2     		uxtb	r3, r3
 1253 0014 9AB2     		uxth	r2, r3
 1254 0016 7B68     		ldr	r3, [r7, #4]
 1255 0018 1A83     		strh	r2, [r3, #24]	@ movhi
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART guard time */
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 1256              		.loc 1 909 0
 1257 001a 7B68     		ldr	r3, [r7, #4]
 1258 001c 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1259 001e 9AB2     		uxth	r2, r3
 1260 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1261 0022 9BB2     		uxth	r3, r3
 1262 0024 4FEA0323 		lsl	r3, r3, #8
 1263 0028 9BB2     		uxth	r3, r3
 1264 002a 1343     		orrs	r3, r3, r2
 1265 002c 9AB2     		uxth	r2, r3
 1266 002e 7B68     		ldr	r3, [r7, #4]
 1267 0030 1A83     		strh	r2, [r3, #24]	@ movhi
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1268              		.loc 1 910 0
 1269 0032 07F10C07 		add	r7, r7, #12
 1270 0036 BD46     		mov	sp, r7
 1271 0038 80BC     		pop	{r7}
 1272 003a 7047     		bx	lr
 1273              		.cfi_endproc
 1274              	.LFE128:
 1276              		.section	.text.USART_SmartCardCmd,"ax",%progbits
 1277              		.align	2
 1278              		.global	USART_SmartCardCmd
 1279              		.thumb
 1280              		.thumb_func
 1282              	USART_SmartCardCmd:
 1283              	.LFB129:
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1284              		.loc 1 921 0
 1285              		.cfi_startproc
 1286              		@ args = 0, pretend = 0, frame = 8
 1287              		@ frame_needed = 1, uses_anonymous_args = 0
 1288              		@ link register save eliminated.
 1289 0000 80B4     		push	{r7}
 1290              	.LCFI57:
 1291              		.cfi_def_cfa_offset 4
 1292              		.cfi_offset 7, -4
 1293 0002 83B0     		sub	sp, sp, #12
 1294              	.LCFI58:
 1295              		.cfi_def_cfa_offset 16
 1296 0004 00AF     		add	r7, sp, #0
 1297              	.LCFI59:
 1298              		.cfi_def_cfa_register 7
 1299 0006 7860     		str	r0, [r7, #4]
 1300 0008 0B46     		mov	r3, r1
 1301 000a FB70     		strb	r3, [r7, #3]
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1302              		.loc 1 925 0
 1303 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1304 000e 002B     		cmp	r3, #0
 1305 0010 08D0     		beq	.L46
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 1306              		.loc 1 928 0
 1307 0012 7B68     		ldr	r3, [r7, #4]
 1308 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1309 0016 9BB2     		uxth	r3, r3
 1310 0018 43F02003 		orr	r3, r3, #32
 1311 001c 9AB2     		uxth	r2, r3
 1312 001e 7B68     		ldr	r3, [r7, #4]
 1313 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 1314 0022 07E0     		b	.L45
 1315              	.L46:
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 1316              		.loc 1 933 0
 1317 0024 7B68     		ldr	r3, [r7, #4]
 1318 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1319 0028 9BB2     		uxth	r3, r3
 1320 002a 23F02003 		bic	r3, r3, #32
 1321 002e 9AB2     		uxth	r2, r3
 1322 0030 7B68     		ldr	r3, [r7, #4]
 1323 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1324              	.L45:
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1325              		.loc 1 935 0
 1326 0034 07F10C07 		add	r7, r7, #12
 1327 0038 BD46     		mov	sp, r7
 1328 003a 80BC     		pop	{r7}
 1329 003c 7047     		bx	lr
 1330              		.cfi_endproc
 1331              	.LFE129:
 1333 003e 00BF     		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 1334              		.align	2
 1335              		.global	USART_SmartCardNACKCmd
 1336              		.thumb
 1337              		.thumb_func
 1339              	USART_SmartCardNACKCmd:
 1340              	.LFB130:
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables NACK transmission.
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1341              		.loc 1 946 0
 1342              		.cfi_startproc
 1343              		@ args = 0, pretend = 0, frame = 8
 1344              		@ frame_needed = 1, uses_anonymous_args = 0
 1345              		@ link register save eliminated.
 1346 0000 80B4     		push	{r7}
 1347              	.LCFI60:
 1348              		.cfi_def_cfa_offset 4
 1349              		.cfi_offset 7, -4
 1350 0002 83B0     		sub	sp, sp, #12
 1351              	.LCFI61:
 1352              		.cfi_def_cfa_offset 16
 1353 0004 00AF     		add	r7, sp, #0
 1354              	.LCFI62:
 1355              		.cfi_def_cfa_register 7
 1356 0006 7860     		str	r0, [r7, #4]
 1357 0008 0B46     		mov	r3, r1
 1358 000a FB70     		strb	r3, [r7, #3]
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx)); 
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1359              		.loc 1 950 0
 1360 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1361 000e 002B     		cmp	r3, #0
 1362 0010 08D0     		beq	.L49
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 1363              		.loc 1 953 0
 1364 0012 7B68     		ldr	r3, [r7, #4]
 1365 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1366 0016 9BB2     		uxth	r3, r3
 1367 0018 43F01003 		orr	r3, r3, #16
 1368 001c 9AB2     		uxth	r2, r3
 1369 001e 7B68     		ldr	r3, [r7, #4]
 1370 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 1371 0022 07E0     		b	.L48
 1372              	.L49:
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 1373              		.loc 1 958 0
 1374 0024 7B68     		ldr	r3, [r7, #4]
 1375 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1376 0028 9BB2     		uxth	r3, r3
 1377 002a 23F01003 		bic	r3, r3, #16
 1378 002e 9AB2     		uxth	r2, r3
 1379 0030 7B68     		ldr	r3, [r7, #4]
 1380 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1381              	.L48:
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1382              		.loc 1 960 0
 1383 0034 07F10C07 		add	r7, r7, #12
 1384 0038 BD46     		mov	sp, r7
 1385 003a 80BC     		pop	{r7}
 1386 003c 7047     		bx	lr
 1387              		.cfi_endproc
 1388              	.LFE130:
 1390 003e 00BF     		.section	.text.USART_IrDAConfig,"ax",%progbits
 1391              		.align	2
 1392              		.global	USART_IrDAConfig
 1393              		.thumb
 1394              		.thumb_func
 1396              	USART_IrDAConfig:
 1397              	.LFB131:
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group7 IrDA mode functions
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   IrDA mode functions 
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 IrDA mode functions
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication.
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   While receiving data, transmission should be avoided as the data to be transmitted
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   could be corrupted.
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication is possible through the following procedure:
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8 bits, Stop bits, Parity, Transmitter/Receiver 
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         modes and hardware flow control values using the USART_Init() function.
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the IrDA pulse width by configuring the prescaler using  
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_SetPrescaler() function.
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal mode
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using the USART_IrDAConfig() function.
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enable the IrDA using the USART_IrDACmd() function.
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note A pulse of width less than two and greater than one PSC period(s) may or may
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       not be rejected.
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The receiver set up time should be managed by software. The IrDA physical layer
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       specification specifies a minimum of 10 ms delay between transmission and 
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       reception (IrDA is a half duplex protocol).
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In IrDA mode, the following bits must be kept cleared:
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN, STOP and CLKEN bits in the USART_CR2 register.
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and HDSEL bits in the USART_CR3 register.
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1398              		.loc 1 1017 0
 1399              		.cfi_startproc
 1400              		@ args = 0, pretend = 0, frame = 8
 1401              		@ frame_needed = 1, uses_anonymous_args = 0
 1402              		@ link register save eliminated.
 1403 0000 80B4     		push	{r7}
 1404              	.LCFI63:
 1405              		.cfi_def_cfa_offset 4
 1406              		.cfi_offset 7, -4
 1407 0002 83B0     		sub	sp, sp, #12
 1408              	.LCFI64:
 1409              		.cfi_def_cfa_offset 16
 1410 0004 00AF     		add	r7, sp, #0
 1411              	.LCFI65:
 1412              		.cfi_def_cfa_register 7
 1413 0006 7860     		str	r0, [r7, #4]
 1414 0008 0B46     		mov	r3, r1
 1415 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 1416              		.loc 1 1022 0
 1417 000c 7B68     		ldr	r3, [r7, #4]
 1418 000e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1419 0010 9BB2     		uxth	r3, r3
 1420 0012 23F00403 		bic	r3, r3, #4
 1421 0016 9AB2     		uxth	r2, r3
 1422 0018 7B68     		ldr	r3, [r7, #4]
 1423 001a 9A82     		strh	r2, [r3, #20]	@ movhi
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 1424              		.loc 1 1023 0
 1425 001c 7B68     		ldr	r3, [r7, #4]
 1426 001e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1427 0020 9AB2     		uxth	r2, r3
 1428 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1429 0024 1343     		orrs	r3, r3, r2
 1430 0026 9AB2     		uxth	r2, r3
 1431 0028 7B68     		ldr	r3, [r7, #4]
 1432 002a 9A82     		strh	r2, [r3, #20]	@ movhi
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1433              		.loc 1 1024 0
 1434 002c 07F10C07 		add	r7, r7, #12
 1435 0030 BD46     		mov	sp, r7
 1436 0032 80BC     		pop	{r7}
 1437 0034 7047     		bx	lr
 1438              		.cfi_endproc
 1439              	.LFE131:
 1441 0036 00BF     		.section	.text.USART_IrDACmd,"ax",%progbits
 1442              		.align	2
 1443              		.global	USART_IrDACmd
 1444              		.thumb
 1445              		.thumb_func
 1447              	USART_IrDACmd:
 1448              	.LFB132:
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1449              		.loc 1 1035 0
 1450              		.cfi_startproc
 1451              		@ args = 0, pretend = 0, frame = 8
 1452              		@ frame_needed = 1, uses_anonymous_args = 0
 1453              		@ link register save eliminated.
 1454 0000 80B4     		push	{r7}
 1455              	.LCFI66:
 1456              		.cfi_def_cfa_offset 4
 1457              		.cfi_offset 7, -4
 1458 0002 83B0     		sub	sp, sp, #12
 1459              	.LCFI67:
 1460              		.cfi_def_cfa_offset 16
 1461 0004 00AF     		add	r7, sp, #0
 1462              	.LCFI68:
 1463              		.cfi_def_cfa_register 7
 1464 0006 7860     		str	r0, [r7, #4]
 1465 0008 0B46     		mov	r3, r1
 1466 000a FB70     		strb	r3, [r7, #3]
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1467              		.loc 1 1040 0
 1468 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1469 000e 002B     		cmp	r3, #0
 1470 0010 08D0     		beq	.L53
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 1471              		.loc 1 1043 0
 1472 0012 7B68     		ldr	r3, [r7, #4]
 1473 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1474 0016 9BB2     		uxth	r3, r3
 1475 0018 43F00203 		orr	r3, r3, #2
 1476 001c 9AB2     		uxth	r2, r3
 1477 001e 7B68     		ldr	r3, [r7, #4]
 1478 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 1479 0022 07E0     		b	.L52
 1480              	.L53:
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 1481              		.loc 1 1048 0
 1482 0024 7B68     		ldr	r3, [r7, #4]
 1483 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1484 0028 9BB2     		uxth	r3, r3
 1485 002a 23F00203 		bic	r3, r3, #2
 1486 002e 9AB2     		uxth	r2, r3
 1487 0030 7B68     		ldr	r3, [r7, #4]
 1488 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1489              	.L52:
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1490              		.loc 1 1050 0
 1491 0034 07F10C07 		add	r7, r7, #12
 1492 0038 BD46     		mov	sp, r7
 1493 003a 80BC     		pop	{r7}
 1494 003c 7047     		bx	lr
 1495              		.cfi_endproc
 1496              	.LFE132:
 1498 003e 00BF     		.section	.text.USART_DMACmd,"ax",%progbits
 1499              		.align	2
 1500              		.global	USART_DMACmd
 1501              		.thumb
 1502              		.thumb_func
 1504              	USART_DMACmd:
 1505              	.LFB133:
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group8 DMA transfers management functions
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   DMA transfers management functions
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                       DMA transfers management functions
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.   
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1506              		.loc 1 1081 0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 8
 1509              		@ frame_needed = 1, uses_anonymous_args = 0
 1510              		@ link register save eliminated.
 1511 0000 80B4     		push	{r7}
 1512              	.LCFI69:
 1513              		.cfi_def_cfa_offset 4
 1514              		.cfi_offset 7, -4
 1515 0002 83B0     		sub	sp, sp, #12
 1516              	.LCFI70:
 1517              		.cfi_def_cfa_offset 16
 1518 0004 00AF     		add	r7, sp, #0
 1519              	.LCFI71:
 1520              		.cfi_def_cfa_register 7
 1521 0006 7860     		str	r0, [r7, #4]
 1522 0008 1346     		mov	r3, r2
 1523 000a 0A46     		mov	r2, r1	@ movhi
 1524 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 1525 000e 7B70     		strb	r3, [r7, #1]
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1526              		.loc 1 1087 0
 1527 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1528 0012 002B     		cmp	r3, #0
 1529 0014 08D0     		beq	.L56
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 1530              		.loc 1 1091 0
 1531 0016 7B68     		ldr	r3, [r7, #4]
 1532 0018 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1533 001a 9AB2     		uxth	r2, r3
 1534 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1535 001e 1343     		orrs	r3, r3, r2
 1536 0020 9AB2     		uxth	r2, r3
 1537 0022 7B68     		ldr	r3, [r7, #4]
 1538 0024 9A82     		strh	r2, [r3, #20]	@ movhi
 1539 0026 0AE0     		b	.L55
 1540              	.L56:
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 1541              		.loc 1 1097 0
 1542 0028 7B68     		ldr	r3, [r7, #4]
 1543 002a 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1544 002c 9AB2     		uxth	r2, r3
 1545 002e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1546 0030 6FEA0303 		mvn	r3, r3
 1547 0034 9BB2     		uxth	r3, r3
 1548 0036 1340     		ands	r3, r3, r2
 1549 0038 9AB2     		uxth	r2, r3
 1550 003a 7B68     		ldr	r3, [r7, #4]
 1551 003c 9A82     		strh	r2, [r3, #20]	@ movhi
 1552              	.L55:
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1553              		.loc 1 1099 0
 1554 003e 07F10C07 		add	r7, r7, #12
 1555 0042 BD46     		mov	sp, r7
 1556 0044 80BC     		pop	{r7}
 1557 0046 7047     		bx	lr
 1558              		.cfi_endproc
 1559              	.LFE133:
 1561              		.section	.text.USART_ITConfig,"ax",%progbits
 1562              		.align	2
 1563              		.global	USART_ITConfig
 1564              		.thumb
 1565              		.thumb_func
 1567              	USART_ITConfig:
 1568              	.LFB134:
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group9 Interrupts and flags management functions
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                    Interrupts and flags management functions
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to configure the USART 
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupts sources, DMA channels requests and check or clear the flags or 
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   pending bits status.
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The user should identify which mode will be used in his application to manage 
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Polling Mode
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   =============
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Polling Mode, the SPI communication can be managed by 10 flags:
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_FLAG_TXE : to indicate the status of the transmit buffer register
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_FLAG_RXNE : to indicate the status of the receive buffer register
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_FLAG_TC : to indicate the status of the transmit operation
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_FLAG_IDLE : to indicate the status of the Idle Line             
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_FLAG_CTS : to indicate the status of the nCTS input
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_FLAG_LBD : to indicate the status of the LIN break detection
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_FLAG_NE : to indicate if a noise error occur
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_FLAG_FE : to indicate if a frame error occur
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_FLAG_PE : to indicate if a parity error occur
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_FLAG_ORE : to indicate if an Overrun error occur
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Mode
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ===============
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   and 10 pending bits: 
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Pending Bits:
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ------------- 
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : to indicate the status of the transmit buffer register
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : to indicate the status of the receive buffer register
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : to indicate the status of the transmit operation
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : to indicate the status of the Idle Line             
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : to indicate the status of the nCTS input
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : to indicate the status of the LIN break detection
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_NE : to indicate if a noise error occur
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_FE : to indicate if a frame error occur
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_IT_PE : to indicate if a parity error occur
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_IT_ORE : to indicate if an Overrun error occur
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Source:
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   -----------------
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                         empty interrupt.
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : specifies the interrupt source for the Transmit complete 
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.             
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : specifies the interrupt source for the LIN break detection
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_ERR :  specifies the interrupt source for the errors interrupt.
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Some parameters are coded in order to use them as interrupt source or as pending bits.
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   DMA Mode
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ========
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following function:
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState);
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1569              		.loc 1 1209 0
 1570              		.cfi_startproc
 1571              		@ args = 0, pretend = 0, frame = 24
 1572              		@ frame_needed = 1, uses_anonymous_args = 0
 1573              		@ link register save eliminated.
 1574 0000 80B4     		push	{r7}
 1575              	.LCFI72:
 1576              		.cfi_def_cfa_offset 4
 1577              		.cfi_offset 7, -4
 1578 0002 87B0     		sub	sp, sp, #28
 1579              	.LCFI73:
 1580              		.cfi_def_cfa_offset 32
 1581 0004 00AF     		add	r7, sp, #0
 1582              	.LCFI74:
 1583              		.cfi_def_cfa_register 7
 1584 0006 7860     		str	r0, [r7, #4]
 1585 0008 1346     		mov	r3, r2
 1586 000a 0A46     		mov	r2, r1	@ movhi
 1587 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 1588 000e 7B70     		strb	r3, [r7, #1]
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 1589              		.loc 1 1210 0
 1590 0010 4FF00003 		mov	r3, #0
 1591 0014 3B61     		str	r3, [r7, #16]
 1592 0016 4FF00003 		mov	r3, #0
 1593 001a FB60     		str	r3, [r7, #12]
 1594 001c 4FF00003 		mov	r3, #0
 1595 0020 BB60     		str	r3, [r7, #8]
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartxbase = 0x00;
 1596              		.loc 1 1211 0
 1597 0022 4FF00003 		mov	r3, #0
 1598 0026 7B61     		str	r3, [r7, #20]
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartxbase = (uint32_t)USARTx;
 1599              		.loc 1 1223 0
 1600 0028 7B68     		ldr	r3, [r7, #4]
 1601 002a 7B61     		str	r3, [r7, #20]
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1602              		.loc 1 1226 0
 1603 002c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1604 002e DBB2     		uxtb	r3, r3
 1605 0030 4FEA5313 		lsr	r3, r3, #5
 1606 0034 DBB2     		uxtb	r3, r3
 1607 0036 3B61     		str	r3, [r7, #16]
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itpos = USART_IT & IT_MASK;
 1608              		.loc 1 1229 0
 1609 0038 7B88     		ldrh	r3, [r7, #2]
 1610 003a 03F01F03 		and	r3, r3, #31
 1611 003e FB60     		str	r3, [r7, #12]
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 1612              		.loc 1 1230 0
 1613 0040 FB68     		ldr	r3, [r7, #12]
 1614 0042 4FF00102 		mov	r2, #1
 1615 0046 02FA03F3 		lsl	r3, r2, r3
 1616 004a BB60     		str	r3, [r7, #8]
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 1617              		.loc 1 1232 0
 1618 004c 3B69     		ldr	r3, [r7, #16]
 1619 004e 012B     		cmp	r3, #1
 1620 0050 04D1     		bne	.L59
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x0C;
 1621              		.loc 1 1234 0
 1622 0052 7B69     		ldr	r3, [r7, #20]
 1623 0054 03F10C03 		add	r3, r3, #12
 1624 0058 7B61     		str	r3, [r7, #20]
 1625 005a 0BE0     		b	.L60
 1626              	.L59:
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 1627              		.loc 1 1236 0
 1628 005c 3B69     		ldr	r3, [r7, #16]
 1629 005e 022B     		cmp	r3, #2
 1630 0060 04D1     		bne	.L61
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x10;
 1631              		.loc 1 1238 0
 1632 0062 7B69     		ldr	r3, [r7, #20]
 1633 0064 03F11003 		add	r3, r3, #16
 1634 0068 7B61     		str	r3, [r7, #20]
 1635 006a 03E0     		b	.L60
 1636              	.L61:
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT is in CR3 register */
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x14; 
 1637              		.loc 1 1242 0
 1638 006c 7B69     		ldr	r3, [r7, #20]
 1639 006e 03F11403 		add	r3, r3, #20
 1640 0072 7B61     		str	r3, [r7, #20]
 1641              	.L60:
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1642              		.loc 1 1244 0
 1643 0074 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1644 0076 002B     		cmp	r3, #0
 1645 0078 06D0     		beq	.L62
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 1646              		.loc 1 1246 0
 1647 007a 7B69     		ldr	r3, [r7, #20]
 1648 007c 7A69     		ldr	r2, [r7, #20]
 1649 007e 1168     		ldr	r1, [r2, #0]
 1650 0080 BA68     		ldr	r2, [r7, #8]
 1651 0082 0A43     		orrs	r2, r2, r1
 1652 0084 1A60     		str	r2, [r3, #0]
 1653 0086 07E0     		b	.L58
 1654              	.L62:
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 1655              		.loc 1 1250 0
 1656 0088 7B69     		ldr	r3, [r7, #20]
 1657 008a 7A69     		ldr	r2, [r7, #20]
 1658 008c 1168     		ldr	r1, [r2, #0]
 1659 008e BA68     		ldr	r2, [r7, #8]
 1660 0090 6FEA0202 		mvn	r2, r2
 1661 0094 0A40     		ands	r2, r2, r1
 1662 0096 1A60     		str	r2, [r3, #0]
 1663              	.L58:
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1664              		.loc 1 1252 0
 1665 0098 07F11C07 		add	r7, r7, #28
 1666 009c BD46     		mov	sp, r7
 1667 009e 80BC     		pop	{r7}
 1668 00a0 7047     		bx	lr
 1669              		.cfi_endproc
 1670              	.LFE134:
 1672 00a2 00BF     		.section	.text.USART_GetFlagStatus,"ax",%progbits
 1673              		.align	2
 1674              		.global	USART_GetFlagStatus
 1675              		.thumb
 1676              		.thumb_func
 1678              	USART_GetFlagStatus:
 1679              	.LFB135:
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_IDLE: Idle Line detection flag
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_NE:   Noise Error flag
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_FE:   Framing Error flag
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Error flag
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1680              		.loc 1 1273 0
 1681              		.cfi_startproc
 1682              		@ args = 0, pretend = 0, frame = 16
 1683              		@ frame_needed = 1, uses_anonymous_args = 0
 1684              		@ link register save eliminated.
 1685 0000 80B4     		push	{r7}
 1686              	.LCFI75:
 1687              		.cfi_def_cfa_offset 4
 1688              		.cfi_offset 7, -4
 1689 0002 85B0     		sub	sp, sp, #20
 1690              	.LCFI76:
 1691              		.cfi_def_cfa_offset 24
 1692 0004 00AF     		add	r7, sp, #0
 1693              	.LCFI77:
 1694              		.cfi_def_cfa_register 7
 1695 0006 7860     		str	r0, [r7, #4]
 1696 0008 0B46     		mov	r3, r1
 1697 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   FlagStatus bitstatus = RESET;
 1698              		.loc 1 1274 0
 1699 000c 4FF00003 		mov	r3, #0
 1700 0010 FB73     		strb	r3, [r7, #15]
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 1701              		.loc 1 1285 0
 1702 0012 7B68     		ldr	r3, [r7, #4]
 1703 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1704 0016 9AB2     		uxth	r2, r3
 1705 0018 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1706 001a 1340     		ands	r3, r3, r2
 1707 001c 9BB2     		uxth	r3, r3
 1708 001e 002B     		cmp	r3, #0
 1709 0020 03D0     		beq	.L65
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 1710              		.loc 1 1287 0
 1711 0022 4FF00103 		mov	r3, #1
 1712 0026 FB73     		strb	r3, [r7, #15]
 1713 0028 02E0     		b	.L66
 1714              	.L65:
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 1715              		.loc 1 1291 0
 1716 002a 4FF00003 		mov	r3, #0
 1717 002e FB73     		strb	r3, [r7, #15]
 1718              	.L66:
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;
 1719              		.loc 1 1293 0
 1720 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1721              		.loc 1 1294 0
 1722 0032 1846     		mov	r0, r3
 1723 0034 07F11407 		add	r7, r7, #20
 1724 0038 BD46     		mov	sp, r7
 1725 003a 80BC     		pop	{r7}
 1726 003c 7047     		bx	lr
 1727              		.cfi_endproc
 1728              	.LFE135:
 1730 003e 00BF     		.section	.text.USART_ClearFlag,"ax",%progbits
 1731              		.align	2
 1732              		.global	USART_ClearFlag
 1733              		.thumb
 1734              		.thumb_func
 1736              	USART_ClearFlag:
 1737              	.LFB136:
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag.
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag.
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) flags are cleared by software 
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          followed by a read operation to USART_DR register (USART_ReceiveData()).
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE flag can be also cleared by a read to the USART_DR register 
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC flag can be also cleared by software sequence: a read operation to 
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          USART_SR register (USART_GetFlagStatus()) followed by a write operation
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          to USART_DR register (USART_SendData()).
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE flag is cleared only by a write to the USART_DR register 
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1738              		.loc 1 1322 0
 1739              		.cfi_startproc
 1740              		@ args = 0, pretend = 0, frame = 8
 1741              		@ frame_needed = 1, uses_anonymous_args = 0
 1742              		@ link register save eliminated.
 1743 0000 80B4     		push	{r7}
 1744              	.LCFI78:
 1745              		.cfi_def_cfa_offset 4
 1746              		.cfi_offset 7, -4
 1747 0002 83B0     		sub	sp, sp, #12
 1748              	.LCFI79:
 1749              		.cfi_def_cfa_offset 16
 1750 0004 00AF     		add	r7, sp, #0
 1751              	.LCFI80:
 1752              		.cfi_def_cfa_register 7
 1753 0006 7860     		str	r0, [r7, #4]
 1754 0008 0B46     		mov	r3, r1
 1755 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 1756              		.loc 1 1333 0
 1757 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1758 000e 6FEA0303 		mvn	r3, r3
 1759 0012 9AB2     		uxth	r2, r3
 1760 0014 7B68     		ldr	r3, [r7, #4]
 1761 0016 1A80     		strh	r2, [r3, #0]	@ movhi
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1762              		.loc 1 1334 0
 1763 0018 07F10C07 		add	r7, r7, #12
 1764 001c BD46     		mov	sp, r7
 1765 001e 80BC     		pop	{r7}
 1766 0020 7047     		bx	lr
 1767              		.cfi_endproc
 1768              	.LFE136:
 1770 0022 00BF     		.section	.text.USART_GetITStatus,"ax",%progbits
 1771              		.align	2
 1772              		.global	USART_GetITStatus
 1773              		.thumb
 1774              		.thumb_func
 1776              	USART_GetITStatus:
 1777              	.LFB137:
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE:  OverRun Error interrupt
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_NE:   Noise Error interrupt
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_FE:   Framing Error interrupt
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1778              		.loc 1 1355 0
 1779              		.cfi_startproc
 1780              		@ args = 0, pretend = 0, frame = 24
 1781              		@ frame_needed = 1, uses_anonymous_args = 0
 1782              		@ link register save eliminated.
 1783 0000 80B4     		push	{r7}
 1784              	.LCFI81:
 1785              		.cfi_def_cfa_offset 4
 1786              		.cfi_offset 7, -4
 1787 0002 87B0     		sub	sp, sp, #28
 1788              	.LCFI82:
 1789              		.cfi_def_cfa_offset 32
 1790 0004 00AF     		add	r7, sp, #0
 1791              	.LCFI83:
 1792              		.cfi_def_cfa_register 7
 1793 0006 7860     		str	r0, [r7, #4]
 1794 0008 0B46     		mov	r3, r1
 1795 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 1796              		.loc 1 1356 0
 1797 000c 4FF00003 		mov	r3, #0
 1798 0010 FB60     		str	r3, [r7, #12]
 1799 0012 4FF00003 		mov	r3, #0
 1800 0016 7B61     		str	r3, [r7, #20]
 1801 0018 4FF00003 		mov	r3, #0
 1802 001c BB60     		str	r3, [r7, #8]
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ITStatus bitstatus = RESET;
 1803              		.loc 1 1357 0
 1804 001e 4FF00003 		mov	r3, #0
 1805 0022 FB74     		strb	r3, [r7, #19]
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1806              		.loc 1 1369 0
 1807 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1808 0026 DBB2     		uxtb	r3, r3
 1809 0028 4FEA5313 		lsr	r3, r3, #5
 1810 002c DBB2     		uxtb	r3, r3
 1811 002e BB60     		str	r3, [r7, #8]
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = USART_IT & IT_MASK;
 1812              		.loc 1 1371 0
 1813 0030 7B88     		ldrh	r3, [r7, #2]
 1814 0032 03F01F03 		and	r3, r3, #31
 1815 0036 7B61     		str	r3, [r7, #20]
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 1816              		.loc 1 1372 0
 1817 0038 7B69     		ldr	r3, [r7, #20]
 1818 003a 4FF00102 		mov	r2, #1
 1819 003e 02FA03F3 		lsl	r3, r2, r3
 1820 0042 7B61     		str	r3, [r7, #20]
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 1821              		.loc 1 1374 0
 1822 0044 BB68     		ldr	r3, [r7, #8]
 1823 0046 012B     		cmp	r3, #1
 1824 0048 06D1     		bne	.L69
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR1;
 1825              		.loc 1 1376 0
 1826 004a 7B68     		ldr	r3, [r7, #4]
 1827 004c 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1828 004e 9BB2     		uxth	r3, r3
 1829 0050 7A69     		ldr	r2, [r7, #20]
 1830 0052 1340     		ands	r3, r3, r2
 1831 0054 7B61     		str	r3, [r7, #20]
 1832 0056 0FE0     		b	.L70
 1833              	.L69:
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 1834              		.loc 1 1378 0
 1835 0058 BB68     		ldr	r3, [r7, #8]
 1836 005a 022B     		cmp	r3, #2
 1837 005c 06D1     		bne	.L71
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR2;
 1838              		.loc 1 1380 0
 1839 005e 7B68     		ldr	r3, [r7, #4]
 1840 0060 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1841 0062 9BB2     		uxth	r3, r3
 1842 0064 7A69     		ldr	r2, [r7, #20]
 1843 0066 1340     		ands	r3, r3, r2
 1844 0068 7B61     		str	r3, [r7, #20]
 1845 006a 05E0     		b	.L70
 1846              	.L71:
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT  is in CR3 register */
1383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR3;
 1847              		.loc 1 1384 0
 1848 006c 7B68     		ldr	r3, [r7, #4]
 1849 006e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1850 0070 9BB2     		uxth	r3, r3
 1851 0072 7A69     		ldr	r2, [r7, #20]
 1852 0074 1340     		ands	r3, r3, r2
 1853 0076 7B61     		str	r3, [r7, #20]
 1854              	.L70:
1385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 1855              		.loc 1 1387 0
 1856 0078 7B88     		ldrh	r3, [r7, #2]
 1857 007a 4FEA1323 		lsr	r3, r3, #8
 1858 007e 9BB2     		uxth	r3, r3
 1859 0080 FB60     		str	r3, [r7, #12]
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 1860              		.loc 1 1388 0
 1861 0082 FB68     		ldr	r3, [r7, #12]
 1862 0084 4FF00102 		mov	r2, #1
 1863 0088 02FA03F3 		lsl	r3, r2, r3
 1864 008c FB60     		str	r3, [r7, #12]
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 1865              		.loc 1 1389 0
 1866 008e 7B68     		ldr	r3, [r7, #4]
 1867 0090 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1868 0092 9BB2     		uxth	r3, r3
 1869 0094 FA68     		ldr	r2, [r7, #12]
 1870 0096 1340     		ands	r3, r3, r2
 1871 0098 FB60     		str	r3, [r7, #12]
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 1872              		.loc 1 1390 0
 1873 009a 7B69     		ldr	r3, [r7, #20]
 1874 009c 002B     		cmp	r3, #0
 1875 009e 06D0     		beq	.L72
 1876              		.loc 1 1390 0 is_stmt 0 discriminator 1
 1877 00a0 FB68     		ldr	r3, [r7, #12]
 1878 00a2 002B     		cmp	r3, #0
 1879 00a4 03D0     		beq	.L72
1391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 1880              		.loc 1 1392 0 is_stmt 1
 1881 00a6 4FF00103 		mov	r3, #1
 1882 00aa FB74     		strb	r3, [r7, #19]
 1883 00ac 02E0     		b	.L73
 1884              	.L72:
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 1885              		.loc 1 1396 0
 1886 00ae 4FF00003 		mov	r3, #0
 1887 00b2 FB74     		strb	r3, [r7, #19]
 1888              	.L73:
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;  
 1889              		.loc 1 1399 0
 1890 00b4 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1891              		.loc 1 1400 0
 1892 00b6 1846     		mov	r0, r3
 1893 00b8 07F11C07 		add	r7, r7, #28
 1894 00bc BD46     		mov	sp, r7
 1895 00be 80BC     		pop	{r7}
 1896 00c0 7047     		bx	lr
 1897              		.cfi_endproc
 1898              	.LFE137:
 1900 00c2 00BF     		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 1901              		.align	2
 1902              		.global	USART_ClearITPendingBit
 1903              		.thumb
 1904              		.thumb_func
 1906              	USART_ClearITPendingBit:
 1907              	.LFB138:
1401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt. 
1411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
1413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) pending bits are cleared by 
1415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          software sequence: a read operation to USART_SR register 
1416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_GetITStatus()) followed by a read operation to USART_DR register 
1417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE pending bit can be also cleared by a read to the USART_DR register 
1419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC pending bit can be also cleared by software sequence: a read 
1421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_SR register (USART_GetITStatus()) followed by a write 
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_DR register (USART_SendData()).
1423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE pending bit is cleared only by a write to the USART_DR register 
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1908              		.loc 1 1429 0
 1909              		.cfi_startproc
 1910              		@ args = 0, pretend = 0, frame = 16
 1911              		@ frame_needed = 1, uses_anonymous_args = 0
 1912              		@ link register save eliminated.
 1913 0000 80B4     		push	{r7}
 1914              	.LCFI84:
 1915              		.cfi_def_cfa_offset 4
 1916              		.cfi_offset 7, -4
 1917 0002 85B0     		sub	sp, sp, #20
 1918              	.LCFI85:
 1919              		.cfi_def_cfa_offset 24
 1920 0004 00AF     		add	r7, sp, #0
 1921              	.LCFI86:
 1922              		.cfi_def_cfa_register 7
 1923 0006 7860     		str	r0, [r7, #4]
 1924 0008 0B46     		mov	r3, r1
 1925 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
 1926              		.loc 1 1430 0
 1927 000c 4FF00003 		mov	r3, #0
 1928 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 1929 0012 4FF00003 		mov	r3, #0
 1930 0016 BB81     		strh	r3, [r7, #12]	@ movhi
1431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 1931              		.loc 1 1441 0
 1932 0018 7B88     		ldrh	r3, [r7, #2]
 1933 001a 4FEA1323 		lsr	r3, r3, #8
 1934 001e FB81     		strh	r3, [r7, #14]	@ movhi
1442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 1935              		.loc 1 1442 0
 1936 0020 FB89     		ldrh	r3, [r7, #14]
 1937 0022 4FF00102 		mov	r2, #1
 1938 0026 02FA03F3 		lsl	r3, r2, r3
 1939 002a BB81     		strh	r3, [r7, #12]	@ movhi
1443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 1940              		.loc 1 1443 0
 1941 002c BB89     		ldrh	r3, [r7, #12]	@ movhi
 1942 002e 6FEA0303 		mvn	r3, r3
 1943 0032 9AB2     		uxth	r2, r3
 1944 0034 7B68     		ldr	r3, [r7, #4]
 1945 0036 1A80     		strh	r2, [r3, #0]	@ movhi
1444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1946              		.loc 1 1444 0
 1947 0038 07F11407 		add	r7, r7, #20
 1948 003c BD46     		mov	sp, r7
 1949 003e 80BC     		pop	{r7}
 1950 0040 7047     		bx	lr
 1951              		.cfi_endproc
 1952              	.LFE138:
 1954 0042 00BF     		.text
 1955              	.Letext0:
 1956              		.file 2 "/usr/local/csl/arm-2012.03/bin/../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/i
 1957              		.file 3 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 1958              		.file 4 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 1959              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h"
 1960              		.file 6 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_usart.c
     /tmp/cc2cbPhL.s:20     .text.USART_DeInit:00000000 $t
     /tmp/cc2cbPhL.s:25     .text.USART_DeInit:00000000 USART_DeInit
     /tmp/cc2cbPhL.s:147    .text.USART_Init:00000000 $t
     /tmp/cc2cbPhL.s:152    .text.USART_Init:00000000 USART_Init
     /tmp/cc2cbPhL.s:378    .text.USART_StructInit:00000000 $t
     /tmp/cc2cbPhL.s:383    .text.USART_StructInit:00000000 USART_StructInit
     /tmp/cc2cbPhL.s:434    .text.USART_ClockInit:00000000 $t
     /tmp/cc2cbPhL.s:439    .text.USART_ClockInit:00000000 USART_ClockInit
     /tmp/cc2cbPhL.s:504    .text.USART_ClockStructInit:00000000 $t
     /tmp/cc2cbPhL.s:509    .text.USART_ClockStructInit:00000000 USART_ClockStructInit
     /tmp/cc2cbPhL.s:552    .text.USART_Cmd:00000000 $t
     /tmp/cc2cbPhL.s:557    .text.USART_Cmd:00000000 USART_Cmd
     /tmp/cc2cbPhL.s:609    .text.USART_SetPrescaler:00000000 $t
     /tmp/cc2cbPhL.s:614    .text.USART_SetPrescaler:00000000 USART_SetPrescaler
     /tmp/cc2cbPhL.s:661    .text.USART_OverSampling8Cmd:00000000 $t
     /tmp/cc2cbPhL.s:666    .text.USART_OverSampling8Cmd:00000000 USART_OverSampling8Cmd
     /tmp/cc2cbPhL.s:720    .text.USART_OneBitMethodCmd:00000000 $t
     /tmp/cc2cbPhL.s:725    .text.USART_OneBitMethodCmd:00000000 USART_OneBitMethodCmd
     /tmp/cc2cbPhL.s:777    .text.USART_SendData:00000000 $t
     /tmp/cc2cbPhL.s:782    .text.USART_SendData:00000000 USART_SendData
     /tmp/cc2cbPhL.s:818    .text.USART_ReceiveData:00000000 $t
     /tmp/cc2cbPhL.s:823    .text.USART_ReceiveData:00000000 USART_ReceiveData
     /tmp/cc2cbPhL.s:858    .text.USART_SetAddress:00000000 $t
     /tmp/cc2cbPhL.s:863    .text.USART_SetAddress:00000000 USART_SetAddress
     /tmp/cc2cbPhL.s:910    .text.USART_ReceiverWakeUpCmd:00000000 $t
     /tmp/cc2cbPhL.s:915    .text.USART_ReceiverWakeUpCmd:00000000 USART_ReceiverWakeUpCmd
     /tmp/cc2cbPhL.s:967    .text.USART_WakeUpConfig:00000000 $t
     /tmp/cc2cbPhL.s:972    .text.USART_WakeUpConfig:00000000 USART_WakeUpConfig
     /tmp/cc2cbPhL.s:1018   .text.USART_LINBreakDetectLengthConfig:00000000 $t
     /tmp/cc2cbPhL.s:1023   .text.USART_LINBreakDetectLengthConfig:00000000 USART_LINBreakDetectLengthConfig
     /tmp/cc2cbPhL.s:1069   .text.USART_LINCmd:00000000 $t
     /tmp/cc2cbPhL.s:1074   .text.USART_LINCmd:00000000 USART_LINCmd
     /tmp/cc2cbPhL.s:1126   .text.USART_SendBreak:00000000 $t
     /tmp/cc2cbPhL.s:1131   .text.USART_SendBreak:00000000 USART_SendBreak
     /tmp/cc2cbPhL.s:1166   .text.USART_HalfDuplexCmd:00000000 $t
     /tmp/cc2cbPhL.s:1171   .text.USART_HalfDuplexCmd:00000000 USART_HalfDuplexCmd
     /tmp/cc2cbPhL.s:1223   .text.USART_SetGuardTime:00000000 $t
     /tmp/cc2cbPhL.s:1228   .text.USART_SetGuardTime:00000000 USART_SetGuardTime
     /tmp/cc2cbPhL.s:1277   .text.USART_SmartCardCmd:00000000 $t
     /tmp/cc2cbPhL.s:1282   .text.USART_SmartCardCmd:00000000 USART_SmartCardCmd
     /tmp/cc2cbPhL.s:1334   .text.USART_SmartCardNACKCmd:00000000 $t
     /tmp/cc2cbPhL.s:1339   .text.USART_SmartCardNACKCmd:00000000 USART_SmartCardNACKCmd
     /tmp/cc2cbPhL.s:1391   .text.USART_IrDAConfig:00000000 $t
     /tmp/cc2cbPhL.s:1396   .text.USART_IrDAConfig:00000000 USART_IrDAConfig
     /tmp/cc2cbPhL.s:1442   .text.USART_IrDACmd:00000000 $t
     /tmp/cc2cbPhL.s:1447   .text.USART_IrDACmd:00000000 USART_IrDACmd
     /tmp/cc2cbPhL.s:1499   .text.USART_DMACmd:00000000 $t
     /tmp/cc2cbPhL.s:1504   .text.USART_DMACmd:00000000 USART_DMACmd
     /tmp/cc2cbPhL.s:1562   .text.USART_ITConfig:00000000 $t
     /tmp/cc2cbPhL.s:1567   .text.USART_ITConfig:00000000 USART_ITConfig
     /tmp/cc2cbPhL.s:1673   .text.USART_GetFlagStatus:00000000 $t
     /tmp/cc2cbPhL.s:1678   .text.USART_GetFlagStatus:00000000 USART_GetFlagStatus
     /tmp/cc2cbPhL.s:1731   .text.USART_ClearFlag:00000000 $t
     /tmp/cc2cbPhL.s:1736   .text.USART_ClearFlag:00000000 USART_ClearFlag
     /tmp/cc2cbPhL.s:1771   .text.USART_GetITStatus:00000000 $t
     /tmp/cc2cbPhL.s:1776   .text.USART_GetITStatus:00000000 USART_GetITStatus
     /tmp/cc2cbPhL.s:1901   .text.USART_ClearITPendingBit:00000000 $t
     /tmp/cc2cbPhL.s:1906   .text.USART_ClearITPendingBit:00000000 USART_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
