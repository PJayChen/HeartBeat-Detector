
obj/STM32F4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058f8  08000188  08000188  00008188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  08005a80  08005a80  0000da80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08005a88  08005a88  0000da88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000544  20000000  08005a8c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002d8  20000548  08005fd0  00010548  2**3
                  ALLOC
  6 ._user_heap_stack 00000400  20000820  08005fd0  00010820  2**0
                  ALLOC
  7 .ARM.attributes 00000035  00000000  00000000  00010544  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000a7fc  00000000  00000000  00010579  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001a26  00000000  00000000  0001ad75  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000408f  00000000  00000000  0001c79b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b28  00000000  00000000  0002082a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a20  00000000  00000000  00021352  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003b6d  00000000  00000000  00021d72  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003db8  00000000  00000000  000258df  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000030  00000000  00000000  00029697  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000026a4  00000000  00000000  000296c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	f240 5448 	movw	r4, #1352	; 0x548
 800018e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000192:	7823      	ldrb	r3, [r4, #0]
 8000194:	b963      	cbnz	r3, 80001b0 <__do_global_dtors_aux+0x28>
 8000196:	f240 0000 	movw	r0, #0
 800019a:	f2c0 0000 	movt	r0, #0
 800019e:	b128      	cbz	r0, 80001ac <__do_global_dtors_aux+0x24>
 80001a0:	f645 2068 	movw	r0, #23144	; 0x5a68
 80001a4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001a8:	f3af 8000 	nop.w
 80001ac:	2101      	movs	r1, #1
 80001ae:	7021      	strb	r1, [r4, #0]
 80001b0:	bd10      	pop	{r4, pc}
 80001b2:	bf00      	nop

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	f240 0300 	movw	r3, #0
 80001ba:	f2c0 0300 	movt	r3, #0
 80001be:	b14b      	cbz	r3, 80001d4 <frame_dummy+0x20>
 80001c0:	f645 2068 	movw	r0, #23144	; 0x5a68
 80001c4:	f240 514c 	movw	r1, #1356	; 0x54c
 80001c8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001cc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80001d0:	f3af 8000 	nop.w
 80001d4:	f240 5044 	movw	r0, #1348	; 0x544
 80001d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001dc:	6801      	ldr	r1, [r0, #0]
 80001de:	b129      	cbz	r1, 80001ec <frame_dummy+0x38>
 80001e0:	f240 0300 	movw	r3, #0
 80001e4:	f2c0 0300 	movt	r3, #0
 80001e8:	b103      	cbz	r3, 80001ec <frame_dummy+0x38>
 80001ea:	4798      	blx	r3
 80001ec:	bd08      	pop	{r3, pc}
 80001ee:	bf00      	nop

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f092 0f00 	teq	r2, #0
 80004da:	bf14      	ite	ne
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e720      	b.n	8000334 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aedc 	beq.w	80002e2 <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6c1      	b.n	80002e2 <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2uiz>:
 8000984:	004a      	lsls	r2, r1, #1
 8000986:	d211      	bcs.n	80009ac <__aeabi_d2uiz+0x28>
 8000988:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800098c:	d211      	bcs.n	80009b2 <__aeabi_d2uiz+0x2e>
 800098e:	d50d      	bpl.n	80009ac <__aeabi_d2uiz+0x28>
 8000990:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000994:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000998:	d40e      	bmi.n	80009b8 <__aeabi_d2uiz+0x34>
 800099a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a6:	fa23 f002 	lsr.w	r0, r3, r2
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d102      	bne.n	80009be <__aeabi_d2uiz+0x3a>
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	4770      	bx	lr
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	4770      	bx	lr

080009c4 <__libc_init_array>:
 80009c4:	b570      	push	{r4, r5, r6, lr}
 80009c6:	f645 2680 	movw	r6, #23168	; 0x5a80
 80009ca:	f645 2580 	movw	r5, #23168	; 0x5a80
 80009ce:	f6c0 0600 	movt	r6, #2048	; 0x800
 80009d2:	f6c0 0500 	movt	r5, #2048	; 0x800
 80009d6:	1b76      	subs	r6, r6, r5
 80009d8:	10b6      	asrs	r6, r6, #2
 80009da:	d006      	beq.n	80009ea <__libc_init_array+0x26>
 80009dc:	2400      	movs	r4, #0
 80009de:	f855 3b04 	ldr.w	r3, [r5], #4
 80009e2:	3401      	adds	r4, #1
 80009e4:	4798      	blx	r3
 80009e6:	42a6      	cmp	r6, r4
 80009e8:	d1f9      	bne.n	80009de <__libc_init_array+0x1a>
 80009ea:	f645 2688 	movw	r6, #23176	; 0x5a88
 80009ee:	f645 2580 	movw	r5, #23168	; 0x5a80
 80009f2:	f6c0 0600 	movt	r6, #2048	; 0x800
 80009f6:	f6c0 0500 	movt	r5, #2048	; 0x800
 80009fa:	1b76      	subs	r6, r6, r5
 80009fc:	f005 f834 	bl	8005a68 <_init>
 8000a00:	10b6      	asrs	r6, r6, #2
 8000a02:	d006      	beq.n	8000a12 <__libc_init_array+0x4e>
 8000a04:	2400      	movs	r4, #0
 8000a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a0a:	3401      	adds	r4, #1
 8000a0c:	4798      	blx	r3
 8000a0e:	42a6      	cmp	r6, r4
 8000a10:	d1f9      	bne.n	8000a06 <__libc_init_array+0x42>
 8000a12:	bd70      	pop	{r4, r5, r6, pc}

08000a14 <malloc>:
 8000a14:	f240 0300 	movw	r3, #0
 8000a18:	4601      	mov	r1, r0
 8000a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a1e:	6818      	ldr	r0, [r3, #0]
 8000a20:	f000 b808 	b.w	8000a34 <_malloc_r>

08000a24 <free>:
 8000a24:	f240 0300 	movw	r3, #0
 8000a28:	4601      	mov	r1, r0
 8000a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	f000 bb30 	b.w	8001094 <_free_r>

08000a34 <_malloc_r>:
 8000a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a38:	f101 040b 	add.w	r4, r1, #11
 8000a3c:	2c16      	cmp	r4, #22
 8000a3e:	b083      	sub	sp, #12
 8000a40:	4606      	mov	r6, r0
 8000a42:	d930      	bls.n	8000aa6 <_malloc_r+0x72>
 8000a44:	f024 0407 	bic.w	r4, r4, #7
 8000a48:	0fe3      	lsrs	r3, r4, #31
 8000a4a:	428c      	cmp	r4, r1
 8000a4c:	bf2c      	ite	cs
 8000a4e:	4619      	movcs	r1, r3
 8000a50:	f043 0101 	orrcc.w	r1, r3, #1
 8000a54:	2900      	cmp	r1, #0
 8000a56:	d12f      	bne.n	8000ab8 <_malloc_r+0x84>
 8000a58:	4630      	mov	r0, r6
 8000a5a:	f001 fd07 	bl	800246c <__malloc_lock>
 8000a5e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8000a62:	d22d      	bcs.n	8000ac0 <_malloc_r+0x8c>
 8000a64:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000a68:	f240 05f4 	movw	r5, #244	; 0xf4
 8000a6c:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8000a70:	eb05 02ce 	add.w	r2, r5, lr, lsl #3
 8000a74:	68d3      	ldr	r3, [r2, #12]
 8000a76:	4293      	cmp	r3, r2
 8000a78:	f000 8223 	beq.w	8000ec2 <_malloc_r+0x48e>
 8000a7c:	685c      	ldr	r4, [r3, #4]
 8000a7e:	f103 0708 	add.w	r7, r3, #8
 8000a82:	68da      	ldr	r2, [r3, #12]
 8000a84:	4630      	mov	r0, r6
 8000a86:	f024 0403 	bic.w	r4, r4, #3
 8000a8a:	6899      	ldr	r1, [r3, #8]
 8000a8c:	191b      	adds	r3, r3, r4
 8000a8e:	685c      	ldr	r4, [r3, #4]
 8000a90:	60ca      	str	r2, [r1, #12]
 8000a92:	f044 0401 	orr.w	r4, r4, #1
 8000a96:	6091      	str	r1, [r2, #8]
 8000a98:	605c      	str	r4, [r3, #4]
 8000a9a:	f001 fcf1 	bl	8002480 <__malloc_unlock>
 8000a9e:	4638      	mov	r0, r7
 8000aa0:	b003      	add	sp, #12
 8000aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	2410      	movs	r4, #16
 8000aaa:	428c      	cmp	r4, r1
 8000aac:	bf2c      	ite	cs
 8000aae:	4619      	movcs	r1, r3
 8000ab0:	f043 0101 	orrcc.w	r1, r3, #1
 8000ab4:	2900      	cmp	r1, #0
 8000ab6:	d0cf      	beq.n	8000a58 <_malloc_r+0x24>
 8000ab8:	230c      	movs	r3, #12
 8000aba:	2700      	movs	r7, #0
 8000abc:	6033      	str	r3, [r6, #0]
 8000abe:	e7ee      	b.n	8000a9e <_malloc_r+0x6a>
 8000ac0:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 8000ac4:	bf04      	itt	eq
 8000ac6:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 8000aca:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 8000ace:	f040 808c 	bne.w	8000bea <_malloc_r+0x1b6>
 8000ad2:	f240 05f4 	movw	r5, #244	; 0xf4
 8000ad6:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8000ada:	1869      	adds	r1, r5, r1
 8000adc:	68cf      	ldr	r7, [r1, #12]
 8000ade:	42b9      	cmp	r1, r7
 8000ae0:	d106      	bne.n	8000af0 <_malloc_r+0xbc>
 8000ae2:	e00d      	b.n	8000b00 <_malloc_r+0xcc>
 8000ae4:	2a00      	cmp	r2, #0
 8000ae6:	f280 8181 	bge.w	8000dec <_malloc_r+0x3b8>
 8000aea:	68ff      	ldr	r7, [r7, #12]
 8000aec:	42b9      	cmp	r1, r7
 8000aee:	d007      	beq.n	8000b00 <_malloc_r+0xcc>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f023 0303 	bic.w	r3, r3, #3
 8000af6:	1b1a      	subs	r2, r3, r4
 8000af8:	2a0f      	cmp	r2, #15
 8000afa:	ddf3      	ble.n	8000ae4 <_malloc_r+0xb0>
 8000afc:	f10e 3eff 	add.w	lr, lr, #4294967295
 8000b00:	f10e 0e01 	add.w	lr, lr, #1
 8000b04:	f240 00f4 	movw	r0, #244	; 0xf4
 8000b08:	692f      	ldr	r7, [r5, #16]
 8000b0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000b0e:	f100 0208 	add.w	r2, r0, #8
 8000b12:	4297      	cmp	r7, r2
 8000b14:	bf08      	it	eq
 8000b16:	6843      	ldreq	r3, [r0, #4]
 8000b18:	d026      	beq.n	8000b68 <_malloc_r+0x134>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f023 0c03 	bic.w	ip, r3, #3
 8000b20:	ebc4 030c 	rsb	r3, r4, ip
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	f300 819c 	bgt.w	8000e62 <_malloc_r+0x42e>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	6142      	str	r2, [r0, #20]
 8000b2e:	6102      	str	r2, [r0, #16]
 8000b30:	f280 8095 	bge.w	8000c5e <_malloc_r+0x22a>
 8000b34:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8000b38:	f080 8173 	bcs.w	8000e22 <_malloc_r+0x3ee>
 8000b3c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8000b40:	f04f 0801 	mov.w	r8, #1
 8000b44:	6843      	ldr	r3, [r0, #4]
 8000b46:	eb00 01cc 	add.w	r1, r0, ip, lsl #3
 8000b4a:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8000b4e:	fa08 f80c 	lsl.w	r8, r8, ip
 8000b52:	60f9      	str	r1, [r7, #12]
 8000b54:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8000b58:	ea48 0303 	orr.w	r3, r8, r3
 8000b5c:	6043      	str	r3, [r0, #4]
 8000b5e:	f8c7 c008 	str.w	ip, [r7, #8]
 8000b62:	f8cc 700c 	str.w	r7, [ip, #12]
 8000b66:	608f      	str	r7, [r1, #8]
 8000b68:	2701      	movs	r7, #1
 8000b6a:	ea4f 01ae 	mov.w	r1, lr, asr #2
 8000b6e:	fa07 f701 	lsl.w	r7, r7, r1
 8000b72:	429f      	cmp	r7, r3
 8000b74:	d87e      	bhi.n	8000c74 <_malloc_r+0x240>
 8000b76:	423b      	tst	r3, r7
 8000b78:	d106      	bne.n	8000b88 <_malloc_r+0x154>
 8000b7a:	f02e 0e03 	bic.w	lr, lr, #3
 8000b7e:	007f      	lsls	r7, r7, #1
 8000b80:	f10e 0e04 	add.w	lr, lr, #4
 8000b84:	423b      	tst	r3, r7
 8000b86:	d0fa      	beq.n	8000b7e <_malloc_r+0x14a>
 8000b88:	eb05 09ce 	add.w	r9, r5, lr, lsl #3
 8000b8c:	46f0      	mov	r8, lr
 8000b8e:	46cc      	mov	ip, r9
 8000b90:	f8dc 000c 	ldr.w	r0, [ip, #12]
 8000b94:	4584      	cmp	ip, r0
 8000b96:	d107      	bne.n	8000ba8 <_malloc_r+0x174>
 8000b98:	e174      	b.n	8000e84 <_malloc_r+0x450>
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f280 819b 	bge.w	8000ed6 <_malloc_r+0x4a2>
 8000ba0:	68c0      	ldr	r0, [r0, #12]
 8000ba2:	4584      	cmp	ip, r0
 8000ba4:	f000 816e 	beq.w	8000e84 <_malloc_r+0x450>
 8000ba8:	6841      	ldr	r1, [r0, #4]
 8000baa:	f021 0103 	bic.w	r1, r1, #3
 8000bae:	1b0b      	subs	r3, r1, r4
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	ddf2      	ble.n	8000b9a <_malloc_r+0x166>
 8000bb4:	4607      	mov	r7, r0
 8000bb6:	1901      	adds	r1, r0, r4
 8000bb8:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8000bbc:	f044 0801 	orr.w	r8, r4, #1
 8000bc0:	f857 4f08 	ldr.w	r4, [r7, #8]!
 8000bc4:	f043 0c01 	orr.w	ip, r3, #1
 8000bc8:	f8c0 8004 	str.w	r8, [r0, #4]
 8000bcc:	4630      	mov	r0, r6
 8000bce:	f8c1 c004 	str.w	ip, [r1, #4]
 8000bd2:	f8c4 e00c 	str.w	lr, [r4, #12]
 8000bd6:	f8ce 4008 	str.w	r4, [lr, #8]
 8000bda:	6169      	str	r1, [r5, #20]
 8000bdc:	6129      	str	r1, [r5, #16]
 8000bde:	60ca      	str	r2, [r1, #12]
 8000be0:	608a      	str	r2, [r1, #8]
 8000be2:	50cb      	str	r3, [r1, r3]
 8000be4:	f001 fc4c 	bl	8002480 <__malloc_unlock>
 8000be8:	e759      	b.n	8000a9e <_malloc_r+0x6a>
 8000bea:	f1be 0f04 	cmp.w	lr, #4
 8000bee:	bf9e      	ittt	ls
 8000bf0:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 8000bf4:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 8000bf8:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8000bfc:	f67f af69 	bls.w	8000ad2 <_malloc_r+0x9e>
 8000c00:	f1be 0f14 	cmp.w	lr, #20
 8000c04:	bf9c      	itt	ls
 8000c06:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 8000c0a:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8000c0e:	f67f af60 	bls.w	8000ad2 <_malloc_r+0x9e>
 8000c12:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 8000c16:	bf9e      	ittt	ls
 8000c18:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 8000c1c:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 8000c20:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8000c24:	f67f af55 	bls.w	8000ad2 <_malloc_r+0x9e>
 8000c28:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 8000c2c:	bf9e      	ittt	ls
 8000c2e:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 8000c32:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 8000c36:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8000c3a:	f67f af4a 	bls.w	8000ad2 <_malloc_r+0x9e>
 8000c3e:	f240 5354 	movw	r3, #1364	; 0x554
 8000c42:	459e      	cmp	lr, r3
 8000c44:	bf95      	itete	ls
 8000c46:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 8000c4a:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 8000c4e:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 8000c52:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 8000c56:	bf98      	it	ls
 8000c58:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8000c5c:	e739      	b.n	8000ad2 <_malloc_r+0x9e>
 8000c5e:	eb07 030c 	add.w	r3, r7, ip
 8000c62:	4630      	mov	r0, r6
 8000c64:	3708      	adds	r7, #8
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	f042 0201 	orr.w	r2, r2, #1
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	f001 fc07 	bl	8002480 <__malloc_unlock>
 8000c72:	e714      	b.n	8000a9e <_malloc_r+0x6a>
 8000c74:	68af      	ldr	r7, [r5, #8]
 8000c76:	f240 03f4 	movw	r3, #244	; 0xf4
 8000c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	f022 0803 	bic.w	r8, r2, #3
 8000c84:	4544      	cmp	r4, r8
 8000c86:	ebc4 0208 	rsb	r2, r4, r8
 8000c8a:	bf94      	ite	ls
 8000c8c:	2100      	movls	r1, #0
 8000c8e:	2101      	movhi	r1, #1
 8000c90:	2a0f      	cmp	r2, #15
 8000c92:	bfd8      	it	le
 8000c94:	f041 0101 	orrle.w	r1, r1, #1
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	f000 80b5 	beq.w	8000e08 <_malloc_r+0x3d4>
 8000c9e:	f240 5a64 	movw	sl, #1380	; 0x564
 8000ca2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8000ca6:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 8000caa:	3201      	adds	r2, #1
 8000cac:	f8da 3000 	ldr.w	r3, [sl]
 8000cb0:	4423      	add	r3, r4
 8000cb2:	bf08      	it	eq
 8000cb4:	f103 0b10 	addeq.w	fp, r3, #16
 8000cb8:	d006      	beq.n	8000cc8 <_malloc_r+0x294>
 8000cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cbe:	330f      	adds	r3, #15
 8000cc0:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 8000cc4:	f023 0b1f 	bic.w	fp, r3, #31
 8000cc8:	4630      	mov	r0, r6
 8000cca:	4659      	mov	r1, fp
 8000ccc:	f001 fb86 	bl	80023dc <_sbrk_r>
 8000cd0:	1c42      	adds	r2, r0, #1
 8000cd2:	4681      	mov	r9, r0
 8000cd4:	f000 8131 	beq.w	8000f3a <_malloc_r+0x506>
 8000cd8:	eb07 0308 	add.w	r3, r7, r8
 8000cdc:	4283      	cmp	r3, r0
 8000cde:	f200 8106 	bhi.w	8000eee <_malloc_r+0x4ba>
 8000ce2:	f8da 2004 	ldr.w	r2, [sl, #4]
 8000ce6:	454b      	cmp	r3, r9
 8000ce8:	445a      	add	r2, fp
 8000cea:	f8ca 2004 	str.w	r2, [sl, #4]
 8000cee:	f000 8131 	beq.w	8000f54 <_malloc_r+0x520>
 8000cf2:	f8d5 0408 	ldr.w	r0, [r5, #1032]	; 0x408
 8000cf6:	f240 01f4 	movw	r1, #244	; 0xf4
 8000cfa:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000cfe:	3001      	adds	r0, #1
 8000d00:	4630      	mov	r0, r6
 8000d02:	bf17      	itett	ne
 8000d04:	ebc3 0309 	rsbne	r3, r3, r9
 8000d08:	f8c1 9408 	streq.w	r9, [r1, #1032]	; 0x408
 8000d0c:	18d2      	addne	r2, r2, r3
 8000d0e:	f8ca 2004 	strne.w	r2, [sl, #4]
 8000d12:	f019 0307 	ands.w	r3, r9, #7
 8000d16:	bf1f      	itttt	ne
 8000d18:	f1c3 0208 	rsbne	r2, r3, #8
 8000d1c:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8000d20:	4491      	addne	r9, r2
 8000d22:	f103 0208 	addne.w	r2, r3, #8
 8000d26:	eb09 030b 	add.w	r3, r9, fp
 8000d2a:	bf08      	it	eq
 8000d2c:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8000d30:	051b      	lsls	r3, r3, #20
 8000d32:	0d1b      	lsrs	r3, r3, #20
 8000d34:	ebc3 0b02 	rsb	fp, r3, r2
 8000d38:	4659      	mov	r1, fp
 8000d3a:	f001 fb4f 	bl	80023dc <_sbrk_r>
 8000d3e:	1c43      	adds	r3, r0, #1
 8000d40:	f000 811d 	beq.w	8000f7e <_malloc_r+0x54a>
 8000d44:	ebc9 0100 	rsb	r1, r9, r0
 8000d48:	4459      	add	r1, fp
 8000d4a:	f041 0101 	orr.w	r1, r1, #1
 8000d4e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8000d52:	42af      	cmp	r7, r5
 8000d54:	f240 5364 	movw	r3, #1380	; 0x564
 8000d58:	f8c5 9008 	str.w	r9, [r5, #8]
 8000d5c:	445a      	add	r2, fp
 8000d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d62:	f8c9 1004 	str.w	r1, [r9, #4]
 8000d66:	f8ca 2004 	str.w	r2, [sl, #4]
 8000d6a:	d019      	beq.n	8000da0 <_malloc_r+0x36c>
 8000d6c:	f1b8 0f0f 	cmp.w	r8, #15
 8000d70:	f240 80dd 	bls.w	8000f2e <_malloc_r+0x4fa>
 8000d74:	f1a8 010c 	sub.w	r1, r8, #12
 8000d78:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8000d7c:	f021 0107 	bic.w	r1, r1, #7
 8000d80:	f04f 0e05 	mov.w	lr, #5
 8000d84:	1878      	adds	r0, r7, r1
 8000d86:	290f      	cmp	r1, #15
 8000d88:	f00c 0c01 	and.w	ip, ip, #1
 8000d8c:	ea41 0c0c 	orr.w	ip, r1, ip
 8000d90:	f8c7 c004 	str.w	ip, [r7, #4]
 8000d94:	f8c0 e004 	str.w	lr, [r0, #4]
 8000d98:	f8c0 e008 	str.w	lr, [r0, #8]
 8000d9c:	f200 80e6 	bhi.w	8000f6c <_malloc_r+0x538>
 8000da0:	f240 5364 	movw	r3, #1380	; 0x564
 8000da4:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
 8000da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000dac:	68af      	ldr	r7, [r5, #8]
 8000dae:	428a      	cmp	r2, r1
 8000db0:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
 8000db4:	bf88      	it	hi
 8000db6:	62da      	strhi	r2, [r3, #44]	; 0x2c
 8000db8:	f240 5364 	movw	r3, #1380	; 0x564
 8000dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000dc0:	428a      	cmp	r2, r1
 8000dc2:	bf88      	it	hi
 8000dc4:	631a      	strhi	r2, [r3, #48]	; 0x30
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f023 0303 	bic.w	r3, r3, #3
 8000dcc:	429c      	cmp	r4, r3
 8000dce:	ebc4 0203 	rsb	r2, r4, r3
 8000dd2:	bf94      	ite	ls
 8000dd4:	2300      	movls	r3, #0
 8000dd6:	2301      	movhi	r3, #1
 8000dd8:	2a0f      	cmp	r2, #15
 8000dda:	bfd8      	it	le
 8000ddc:	f043 0301 	orrle.w	r3, r3, #1
 8000de0:	b193      	cbz	r3, 8000e08 <_malloc_r+0x3d4>
 8000de2:	4630      	mov	r0, r6
 8000de4:	2700      	movs	r7, #0
 8000de6:	f001 fb4b 	bl	8002480 <__malloc_unlock>
 8000dea:	e658      	b.n	8000a9e <_malloc_r+0x6a>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	4630      	mov	r0, r6
 8000df4:	685c      	ldr	r4, [r3, #4]
 8000df6:	3708      	adds	r7, #8
 8000df8:	60ca      	str	r2, [r1, #12]
 8000dfa:	f044 0401 	orr.w	r4, r4, #1
 8000dfe:	6091      	str	r1, [r2, #8]
 8000e00:	605c      	str	r4, [r3, #4]
 8000e02:	f001 fb3d 	bl	8002480 <__malloc_unlock>
 8000e06:	e64a      	b.n	8000a9e <_malloc_r+0x6a>
 8000e08:	193b      	adds	r3, r7, r4
 8000e0a:	f042 0201 	orr.w	r2, r2, #1
 8000e0e:	f044 0401 	orr.w	r4, r4, #1
 8000e12:	4630      	mov	r0, r6
 8000e14:	607c      	str	r4, [r7, #4]
 8000e16:	3708      	adds	r7, #8
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	60ab      	str	r3, [r5, #8]
 8000e1c:	f001 fb30 	bl	8002480 <__malloc_unlock>
 8000e20:	e63d      	b.n	8000a9e <_malloc_r+0x6a>
 8000e22:	ea4f 235c 	mov.w	r3, ip, lsr #9
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	d95c      	bls.n	8000ee4 <_malloc_r+0x4b0>
 8000e2a:	2b14      	cmp	r3, #20
 8000e2c:	d878      	bhi.n	8000f20 <_malloc_r+0x4ec>
 8000e2e:	335b      	adds	r3, #91	; 0x5b
 8000e30:	00d8      	lsls	r0, r3, #3
 8000e32:	1828      	adds	r0, r5, r0
 8000e34:	f240 08f4 	movw	r8, #244	; 0xf4
 8000e38:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8000e3c:	6881      	ldr	r1, [r0, #8]
 8000e3e:	4281      	cmp	r1, r0
 8000e40:	d103      	bne.n	8000e4a <_malloc_r+0x416>
 8000e42:	e060      	b.n	8000f06 <_malloc_r+0x4d2>
 8000e44:	6889      	ldr	r1, [r1, #8]
 8000e46:	4288      	cmp	r0, r1
 8000e48:	d004      	beq.n	8000e54 <_malloc_r+0x420>
 8000e4a:	684b      	ldr	r3, [r1, #4]
 8000e4c:	f023 0303 	bic.w	r3, r3, #3
 8000e50:	459c      	cmp	ip, r3
 8000e52:	d3f7      	bcc.n	8000e44 <_malloc_r+0x410>
 8000e54:	68c8      	ldr	r0, [r1, #12]
 8000e56:	686b      	ldr	r3, [r5, #4]
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	60cf      	str	r7, [r1, #12]
 8000e5e:	6087      	str	r7, [r0, #8]
 8000e60:	e682      	b.n	8000b68 <_malloc_r+0x134>
 8000e62:	1939      	adds	r1, r7, r4
 8000e64:	f043 0501 	orr.w	r5, r3, #1
 8000e68:	6141      	str	r1, [r0, #20]
 8000e6a:	f044 0401 	orr.w	r4, r4, #1
 8000e6e:	6101      	str	r1, [r0, #16]
 8000e70:	4630      	mov	r0, r6
 8000e72:	607c      	str	r4, [r7, #4]
 8000e74:	3708      	adds	r7, #8
 8000e76:	60ca      	str	r2, [r1, #12]
 8000e78:	608a      	str	r2, [r1, #8]
 8000e7a:	604d      	str	r5, [r1, #4]
 8000e7c:	50cb      	str	r3, [r1, r3]
 8000e7e:	f001 faff 	bl	8002480 <__malloc_unlock>
 8000e82:	e60c      	b.n	8000a9e <_malloc_r+0x6a>
 8000e84:	f108 0801 	add.w	r8, r8, #1
 8000e88:	f10c 0c08 	add.w	ip, ip, #8
 8000e8c:	f018 0f03 	tst.w	r8, #3
 8000e90:	f47f ae7e 	bne.w	8000b90 <_malloc_r+0x15c>
 8000e94:	464b      	mov	r3, r9
 8000e96:	f01e 0f03 	tst.w	lr, #3
 8000e9a:	f1a3 0108 	sub.w	r1, r3, #8
 8000e9e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8000ea2:	d079      	beq.n	8000f98 <_malloc_r+0x564>
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d0f5      	beq.n	8000e96 <_malloc_r+0x462>
 8000eaa:	686b      	ldr	r3, [r5, #4]
 8000eac:	007f      	lsls	r7, r7, #1
 8000eae:	429f      	cmp	r7, r3
 8000eb0:	f63f aee0 	bhi.w	8000c74 <_malloc_r+0x240>
 8000eb4:	2f00      	cmp	r7, #0
 8000eb6:	f43f aedd 	beq.w	8000c74 <_malloc_r+0x240>
 8000eba:	421f      	tst	r7, r3
 8000ebc:	d071      	beq.n	8000fa2 <_malloc_r+0x56e>
 8000ebe:	46c6      	mov	lr, r8
 8000ec0:	e662      	b.n	8000b88 <_malloc_r+0x154>
 8000ec2:	f103 0208 	add.w	r2, r3, #8
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	bf08      	it	eq
 8000ecc:	f10e 0e02 	addeq.w	lr, lr, #2
 8000ed0:	f43f ae18 	beq.w	8000b04 <_malloc_r+0xd0>
 8000ed4:	e5d2      	b.n	8000a7c <_malloc_r+0x48>
 8000ed6:	4607      	mov	r7, r0
 8000ed8:	1843      	adds	r3, r0, r1
 8000eda:	68c2      	ldr	r2, [r0, #12]
 8000edc:	4630      	mov	r0, r6
 8000ede:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8000ee2:	e5d4      	b.n	8000a8e <_malloc_r+0x5a>
 8000ee4:	ea4f 139c 	mov.w	r3, ip, lsr #6
 8000ee8:	3338      	adds	r3, #56	; 0x38
 8000eea:	00d8      	lsls	r0, r3, #3
 8000eec:	e7a1      	b.n	8000e32 <_malloc_r+0x3fe>
 8000eee:	42af      	cmp	r7, r5
 8000ef0:	f240 02f4 	movw	r2, #244	; 0xf4
 8000ef4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000ef8:	f43f aef3 	beq.w	8000ce2 <_malloc_r+0x2ae>
 8000efc:	6897      	ldr	r7, [r2, #8]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f023 0303 	bic.w	r3, r3, #3
 8000f04:	e762      	b.n	8000dcc <_malloc_r+0x398>
 8000f06:	f04f 0901 	mov.w	r9, #1
 8000f0a:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8000f0e:	109b      	asrs	r3, r3, #2
 8000f10:	4608      	mov	r0, r1
 8000f12:	fa09 f303 	lsl.w	r3, r9, r3
 8000f16:	ea43 030c 	orr.w	r3, r3, ip
 8000f1a:	f8c8 3004 	str.w	r3, [r8, #4]
 8000f1e:	e79b      	b.n	8000e58 <_malloc_r+0x424>
 8000f20:	2b54      	cmp	r3, #84	; 0x54
 8000f22:	d80f      	bhi.n	8000f44 <_malloc_r+0x510>
 8000f24:	ea4f 331c 	mov.w	r3, ip, lsr #12
 8000f28:	336e      	adds	r3, #110	; 0x6e
 8000f2a:	00d8      	lsls	r0, r3, #3
 8000f2c:	e781      	b.n	8000e32 <_malloc_r+0x3fe>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	464f      	mov	r7, r9
 8000f32:	f8c9 3004 	str.w	r3, [r9, #4]
 8000f36:	2300      	movs	r3, #0
 8000f38:	e748      	b.n	8000dcc <_malloc_r+0x398>
 8000f3a:	68af      	ldr	r7, [r5, #8]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f023 0303 	bic.w	r3, r3, #3
 8000f42:	e743      	b.n	8000dcc <_malloc_r+0x398>
 8000f44:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8000f48:	d81d      	bhi.n	8000f86 <_malloc_r+0x552>
 8000f4a:	ea4f 33dc 	mov.w	r3, ip, lsr #15
 8000f4e:	3377      	adds	r3, #119	; 0x77
 8000f50:	00d8      	lsls	r0, r3, #3
 8000f52:	e76e      	b.n	8000e32 <_malloc_r+0x3fe>
 8000f54:	0519      	lsls	r1, r3, #20
 8000f56:	0d09      	lsrs	r1, r1, #20
 8000f58:	2900      	cmp	r1, #0
 8000f5a:	f47f aeca 	bne.w	8000cf2 <_malloc_r+0x2be>
 8000f5e:	68ab      	ldr	r3, [r5, #8]
 8000f60:	eb0b 0108 	add.w	r1, fp, r8
 8000f64:	f041 0101 	orr.w	r1, r1, #1
 8000f68:	6059      	str	r1, [r3, #4]
 8000f6a:	e719      	b.n	8000da0 <_malloc_r+0x36c>
 8000f6c:	4630      	mov	r0, r6
 8000f6e:	f107 0108 	add.w	r1, r7, #8
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	f000 f88e 	bl	8001094 <_free_r>
 8000f78:	9b01      	ldr	r3, [sp, #4]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	e710      	b.n	8000da0 <_malloc_r+0x36c>
 8000f7e:	2101      	movs	r1, #1
 8000f80:	f04f 0b00 	mov.w	fp, #0
 8000f84:	e6e3      	b.n	8000d4e <_malloc_r+0x31a>
 8000f86:	f240 5154 	movw	r1, #1364	; 0x554
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d80d      	bhi.n	8000faa <_malloc_r+0x576>
 8000f8e:	ea4f 439c 	mov.w	r3, ip, lsr #18
 8000f92:	337c      	adds	r3, #124	; 0x7c
 8000f94:	00d8      	lsls	r0, r3, #3
 8000f96:	e74c      	b.n	8000e32 <_malloc_r+0x3fe>
 8000f98:	686b      	ldr	r3, [r5, #4]
 8000f9a:	ea23 0307 	bic.w	r3, r3, r7
 8000f9e:	606b      	str	r3, [r5, #4]
 8000fa0:	e784      	b.n	8000eac <_malloc_r+0x478>
 8000fa2:	007f      	lsls	r7, r7, #1
 8000fa4:	f108 0804 	add.w	r8, r8, #4
 8000fa8:	e787      	b.n	8000eba <_malloc_r+0x486>
 8000faa:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8000fae:	237e      	movs	r3, #126	; 0x7e
 8000fb0:	e73f      	b.n	8000e32 <_malloc_r+0x3fe>
 8000fb2:	bf00      	nop

08000fb4 <atexit>:
 8000fb4:	4601      	mov	r1, r0
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	4602      	mov	r2, r0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f000 b932 	b.w	8001224 <__register_exitproc>

08000fc0 <__libc_fini_array>:
 8000fc0:	b538      	push	{r3, r4, r5, lr}
 8000fc2:	f645 248c 	movw	r4, #23180	; 0x5a8c
 8000fc6:	f645 2588 	movw	r5, #23176	; 0x5a88
 8000fca:	f6c0 0400 	movt	r4, #2048	; 0x800
 8000fce:	f6c0 0500 	movt	r5, #2048	; 0x800
 8000fd2:	1b64      	subs	r4, r4, r5
 8000fd4:	10a4      	asrs	r4, r4, #2
 8000fd6:	d006      	beq.n	8000fe6 <__libc_fini_array+0x26>
 8000fd8:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8000fdc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8000fe0:	4798      	blx	r3
 8000fe2:	3c01      	subs	r4, #1
 8000fe4:	d1fa      	bne.n	8000fdc <__libc_fini_array+0x1c>
 8000fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fea:	f004 bd43 	b.w	8005a74 <_fini>
 8000fee:	bf00      	nop

08000ff0 <_malloc_trim_r>:
 8000ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff2:	f240 04f4 	movw	r4, #244	; 0xf4
 8000ff6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000ffa:	460f      	mov	r7, r1
 8000ffc:	4605      	mov	r5, r0
 8000ffe:	f001 fa35 	bl	800246c <__malloc_lock>
 8001002:	68a3      	ldr	r3, [r4, #8]
 8001004:	4628      	mov	r0, r5
 8001006:	685e      	ldr	r6, [r3, #4]
 8001008:	f026 0603 	bic.w	r6, r6, #3
 800100c:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
 8001010:	330f      	adds	r3, #15
 8001012:	1bdf      	subs	r7, r3, r7
 8001014:	0b3f      	lsrs	r7, r7, #12
 8001016:	3f01      	subs	r7, #1
 8001018:	033f      	lsls	r7, r7, #12
 800101a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800101e:	db07      	blt.n	8001030 <_malloc_trim_r+0x40>
 8001020:	2100      	movs	r1, #0
 8001022:	f001 f9db 	bl	80023dc <_sbrk_r>
 8001026:	68a3      	ldr	r3, [r4, #8]
 8001028:	199b      	adds	r3, r3, r6
 800102a:	4298      	cmp	r0, r3
 800102c:	4628      	mov	r0, r5
 800102e:	d003      	beq.n	8001038 <_malloc_trim_r+0x48>
 8001030:	f001 fa26 	bl	8002480 <__malloc_unlock>
 8001034:	2000      	movs	r0, #0
 8001036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001038:	4279      	negs	r1, r7
 800103a:	f001 f9cf 	bl	80023dc <_sbrk_r>
 800103e:	3001      	adds	r0, #1
 8001040:	d010      	beq.n	8001064 <_malloc_trim_r+0x74>
 8001042:	f240 5368 	movw	r3, #1384	; 0x568
 8001046:	68a1      	ldr	r1, [r4, #8]
 8001048:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800104c:	1bf6      	subs	r6, r6, r7
 800104e:	4628      	mov	r0, r5
 8001050:	f046 0601 	orr.w	r6, r6, #1
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	604e      	str	r6, [r1, #4]
 8001058:	1bd7      	subs	r7, r2, r7
 800105a:	601f      	str	r7, [r3, #0]
 800105c:	f001 fa10 	bl	8002480 <__malloc_unlock>
 8001060:	2001      	movs	r0, #1
 8001062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001064:	2100      	movs	r1, #0
 8001066:	4628      	mov	r0, r5
 8001068:	f001 f9b8 	bl	80023dc <_sbrk_r>
 800106c:	68a3      	ldr	r3, [r4, #8]
 800106e:	1ac2      	subs	r2, r0, r3
 8001070:	2a0f      	cmp	r2, #15
 8001072:	dd0d      	ble.n	8001090 <_malloc_trim_r+0xa0>
 8001074:	f240 44fc 	movw	r4, #1276	; 0x4fc
 8001078:	f240 5168 	movw	r1, #1384	; 0x568
 800107c:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001080:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001084:	f042 0201 	orr.w	r2, r2, #1
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	6823      	ldr	r3, [r4, #0]
 800108c:	1ac0      	subs	r0, r0, r3
 800108e:	6008      	str	r0, [r1, #0]
 8001090:	4628      	mov	r0, r5
 8001092:	e7cd      	b.n	8001030 <_malloc_trim_r+0x40>

08001094 <_free_r>:
 8001094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001096:	460d      	mov	r5, r1
 8001098:	4604      	mov	r4, r0
 800109a:	2900      	cmp	r1, #0
 800109c:	d075      	beq.n	800118a <_free_r+0xf6>
 800109e:	f001 f9e5 	bl	800246c <__malloc_lock>
 80010a2:	f855 6c04 	ldr.w	r6, [r5, #-4]
 80010a6:	f240 00f4 	movw	r0, #244	; 0xf4
 80010aa:	f1a5 0108 	sub.w	r1, r5, #8
 80010ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80010b2:	f026 0301 	bic.w	r3, r6, #1
 80010b6:	18ca      	adds	r2, r1, r3
 80010b8:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80010bc:	6857      	ldr	r7, [r2, #4]
 80010be:	4594      	cmp	ip, r2
 80010c0:	f027 0703 	bic.w	r7, r7, #3
 80010c4:	d07e      	beq.n	80011c4 <_free_r+0x130>
 80010c6:	f016 0601 	ands.w	r6, r6, #1
 80010ca:	6057      	str	r7, [r2, #4]
 80010cc:	d04d      	beq.n	800116a <_free_r+0xd6>
 80010ce:	2600      	movs	r6, #0
 80010d0:	19d5      	adds	r5, r2, r7
 80010d2:	686d      	ldr	r5, [r5, #4]
 80010d4:	f015 0f01 	tst.w	r5, #1
 80010d8:	d106      	bne.n	80010e8 <_free_r+0x54>
 80010da:	19db      	adds	r3, r3, r7
 80010dc:	6895      	ldr	r5, [r2, #8]
 80010de:	2e00      	cmp	r6, #0
 80010e0:	d064      	beq.n	80011ac <_free_r+0x118>
 80010e2:	68d2      	ldr	r2, [r2, #12]
 80010e4:	60ea      	str	r2, [r5, #12]
 80010e6:	6095      	str	r5, [r2, #8]
 80010e8:	f043 0201 	orr.w	r2, r3, #1
 80010ec:	50cb      	str	r3, [r1, r3]
 80010ee:	604a      	str	r2, [r1, #4]
 80010f0:	2e00      	cmp	r6, #0
 80010f2:	d135      	bne.n	8001160 <_free_r+0xcc>
 80010f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f8:	d348      	bcc.n	800118c <_free_r+0xf8>
 80010fa:	099e      	lsrs	r6, r3, #6
 80010fc:	0a5a      	lsrs	r2, r3, #9
 80010fe:	3638      	adds	r6, #56	; 0x38
 8001100:	00f5      	lsls	r5, r6, #3
 8001102:	2a04      	cmp	r2, #4
 8001104:	d916      	bls.n	8001134 <_free_r+0xa0>
 8001106:	f102 065b 	add.w	r6, r2, #91	; 0x5b
 800110a:	00f5      	lsls	r5, r6, #3
 800110c:	2a14      	cmp	r2, #20
 800110e:	d911      	bls.n	8001134 <_free_r+0xa0>
 8001110:	0b1e      	lsrs	r6, r3, #12
 8001112:	366e      	adds	r6, #110	; 0x6e
 8001114:	00f5      	lsls	r5, r6, #3
 8001116:	2a54      	cmp	r2, #84	; 0x54
 8001118:	d90c      	bls.n	8001134 <_free_r+0xa0>
 800111a:	0bde      	lsrs	r6, r3, #15
 800111c:	3677      	adds	r6, #119	; 0x77
 800111e:	00f5      	lsls	r5, r6, #3
 8001120:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8001124:	d906      	bls.n	8001134 <_free_r+0xa0>
 8001126:	f240 5554 	movw	r5, #1364	; 0x554
 800112a:	42aa      	cmp	r2, r5
 800112c:	d874      	bhi.n	8001218 <_free_r+0x184>
 800112e:	0c9e      	lsrs	r6, r3, #18
 8001130:	367c      	adds	r6, #124	; 0x7c
 8001132:	00f5      	lsls	r5, r6, #3
 8001134:	1940      	adds	r0, r0, r5
 8001136:	f240 05f4 	movw	r5, #244	; 0xf4
 800113a:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800113e:	6882      	ldr	r2, [r0, #8]
 8001140:	4282      	cmp	r2, r0
 8001142:	d103      	bne.n	800114c <_free_r+0xb8>
 8001144:	e05f      	b.n	8001206 <_free_r+0x172>
 8001146:	6892      	ldr	r2, [r2, #8]
 8001148:	4290      	cmp	r0, r2
 800114a:	d004      	beq.n	8001156 <_free_r+0xc2>
 800114c:	6855      	ldr	r5, [r2, #4]
 800114e:	f025 0503 	bic.w	r5, r5, #3
 8001152:	42ab      	cmp	r3, r5
 8001154:	d3f7      	bcc.n	8001146 <_free_r+0xb2>
 8001156:	68d3      	ldr	r3, [r2, #12]
 8001158:	60cb      	str	r3, [r1, #12]
 800115a:	608a      	str	r2, [r1, #8]
 800115c:	60d1      	str	r1, [r2, #12]
 800115e:	6099      	str	r1, [r3, #8]
 8001160:	4620      	mov	r0, r4
 8001162:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001166:	f001 b98b 	b.w	8002480 <__malloc_unlock>
 800116a:	f855 5c08 	ldr.w	r5, [r5, #-8]
 800116e:	f100 0c08 	add.w	ip, r0, #8
 8001172:	1b49      	subs	r1, r1, r5
 8001174:	195b      	adds	r3, r3, r5
 8001176:	688d      	ldr	r5, [r1, #8]
 8001178:	4565      	cmp	r5, ip
 800117a:	d042      	beq.n	8001202 <_free_r+0x16e>
 800117c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8001180:	f8c5 c00c 	str.w	ip, [r5, #12]
 8001184:	f8cc 5008 	str.w	r5, [ip, #8]
 8001188:	e7a2      	b.n	80010d0 <_free_r+0x3c>
 800118a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800118c:	08db      	lsrs	r3, r3, #3
 800118e:	2501      	movs	r5, #1
 8001190:	6846      	ldr	r6, [r0, #4]
 8001192:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8001196:	109b      	asrs	r3, r3, #2
 8001198:	fa05 f303 	lsl.w	r3, r5, r3
 800119c:	60ca      	str	r2, [r1, #12]
 800119e:	6895      	ldr	r5, [r2, #8]
 80011a0:	4333      	orrs	r3, r6
 80011a2:	6043      	str	r3, [r0, #4]
 80011a4:	608d      	str	r5, [r1, #8]
 80011a6:	60e9      	str	r1, [r5, #12]
 80011a8:	6091      	str	r1, [r2, #8]
 80011aa:	e7d9      	b.n	8001160 <_free_r+0xcc>
 80011ac:	4f1c      	ldr	r7, [pc, #112]	; (8001220 <_free_r+0x18c>)
 80011ae:	42bd      	cmp	r5, r7
 80011b0:	d197      	bne.n	80010e2 <_free_r+0x4e>
 80011b2:	6141      	str	r1, [r0, #20]
 80011b4:	f043 0201 	orr.w	r2, r3, #1
 80011b8:	6101      	str	r1, [r0, #16]
 80011ba:	60cd      	str	r5, [r1, #12]
 80011bc:	608d      	str	r5, [r1, #8]
 80011be:	604a      	str	r2, [r1, #4]
 80011c0:	50cb      	str	r3, [r1, r3]
 80011c2:	e7cd      	b.n	8001160 <_free_r+0xcc>
 80011c4:	07f2      	lsls	r2, r6, #31
 80011c6:	443b      	add	r3, r7
 80011c8:	d407      	bmi.n	80011da <_free_r+0x146>
 80011ca:	f855 2c08 	ldr.w	r2, [r5, #-8]
 80011ce:	1a89      	subs	r1, r1, r2
 80011d0:	189b      	adds	r3, r3, r2
 80011d2:	688d      	ldr	r5, [r1, #8]
 80011d4:	68ca      	ldr	r2, [r1, #12]
 80011d6:	60ea      	str	r2, [r5, #12]
 80011d8:	6095      	str	r5, [r2, #8]
 80011da:	f240 5200 	movw	r2, #1280	; 0x500
 80011de:	f043 0501 	orr.w	r5, r3, #1
 80011e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80011e6:	604d      	str	r5, [r1, #4]
 80011e8:	6081      	str	r1, [r0, #8]
 80011ea:	6812      	ldr	r2, [r2, #0]
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d3b7      	bcc.n	8001160 <_free_r+0xcc>
 80011f0:	f240 5364 	movw	r3, #1380	; 0x564
 80011f4:	4620      	mov	r0, r4
 80011f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011fa:	6819      	ldr	r1, [r3, #0]
 80011fc:	f7ff fef8 	bl	8000ff0 <_malloc_trim_r>
 8001200:	e7ae      	b.n	8001160 <_free_r+0xcc>
 8001202:	2601      	movs	r6, #1
 8001204:	e764      	b.n	80010d0 <_free_r+0x3c>
 8001206:	2701      	movs	r7, #1
 8001208:	6868      	ldr	r0, [r5, #4]
 800120a:	10b6      	asrs	r6, r6, #2
 800120c:	4613      	mov	r3, r2
 800120e:	fa07 f606 	lsl.w	r6, r7, r6
 8001212:	4330      	orrs	r0, r6
 8001214:	6068      	str	r0, [r5, #4]
 8001216:	e79f      	b.n	8001158 <_free_r+0xc4>
 8001218:	f44f 757c 	mov.w	r5, #1008	; 0x3f0
 800121c:	267e      	movs	r6, #126	; 0x7e
 800121e:	e789      	b.n	8001134 <_free_r+0xa0>
 8001220:	200000fc 	.word	0x200000fc

08001224 <__register_exitproc>:
 8001224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001228:	f645 2400 	movw	r4, #23040	; 0x5a00
 800122c:	f6c0 0400 	movt	r4, #2048	; 0x800
 8001230:	b084      	sub	sp, #16
 8001232:	4605      	mov	r5, r0
 8001234:	6826      	ldr	r6, [r4, #0]
 8001236:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8001238:	2c00      	cmp	r4, #0
 800123a:	d042      	beq.n	80012c2 <__register_exitproc+0x9e>
 800123c:	6860      	ldr	r0, [r4, #4]
 800123e:	281f      	cmp	r0, #31
 8001240:	dd1a      	ble.n	8001278 <__register_exitproc+0x54>
 8001242:	f640 2015 	movw	r0, #2581	; 0xa15
 8001246:	f6c0 0000 	movt	r0, #2048	; 0x800
 800124a:	b920      	cbnz	r0, 8001256 <__register_exitproc+0x32>
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	b004      	add	sp, #16
 8001252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001256:	208c      	movs	r0, #140	; 0x8c
 8001258:	9103      	str	r1, [sp, #12]
 800125a:	9202      	str	r2, [sp, #8]
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	f7ff fbd9 	bl	8000a14 <malloc>
 8001262:	9903      	ldr	r1, [sp, #12]
 8001264:	9a02      	ldr	r2, [sp, #8]
 8001266:	9b01      	ldr	r3, [sp, #4]
 8001268:	4604      	mov	r4, r0
 800126a:	2800      	cmp	r0, #0
 800126c:	d0ee      	beq.n	800124c <__register_exitproc+0x28>
 800126e:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8001270:	2700      	movs	r7, #0
 8001272:	e884 0081 	stmia.w	r4, {r0, r7}
 8001276:	64b4      	str	r4, [r6, #72]	; 0x48
 8001278:	b1dd      	cbz	r5, 80012b2 <__register_exitproc+0x8e>
 800127a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800127e:	b320      	cbz	r0, 80012ca <__register_exitproc+0xa6>
 8001280:	f8d0 8100 	ldr.w	r8, [r0, #256]	; 0x100
 8001284:	6866      	ldr	r6, [r4, #4]
 8001286:	2701      	movs	r7, #1
 8001288:	2d02      	cmp	r5, #2
 800128a:	f106 0c20 	add.w	ip, r6, #32
 800128e:	fa07 f706 	lsl.w	r7, r7, r6
 8001292:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
 8001296:	ea48 0207 	orr.w	r2, r8, r7
 800129a:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
 800129e:	bf08      	it	eq
 80012a0:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80012a4:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80012a8:	bf04      	itt	eq
 80012aa:	431f      	orreq	r7, r3
 80012ac:	f8c0 7104 	streq.w	r7, [r0, #260]	; 0x104
 80012b0:	e000      	b.n	80012b4 <__register_exitproc+0x90>
 80012b2:	6866      	ldr	r6, [r4, #4]
 80012b4:	1cb3      	adds	r3, r6, #2
 80012b6:	2000      	movs	r0, #0
 80012b8:	3601      	adds	r6, #1
 80012ba:	6066      	str	r6, [r4, #4]
 80012bc:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 80012c0:	e7c6      	b.n	8001250 <__register_exitproc+0x2c>
 80012c2:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 80012c6:	64b4      	str	r4, [r6, #72]	; 0x48
 80012c8:	e7b8      	b.n	800123c <__register_exitproc+0x18>
 80012ca:	f640 2015 	movw	r0, #2581	; 0xa15
 80012ce:	f6c0 0000 	movt	r0, #2048	; 0x800
 80012d2:	2800      	cmp	r0, #0
 80012d4:	d0ba      	beq.n	800124c <__register_exitproc+0x28>
 80012d6:	f44f 7084 	mov.w	r0, #264	; 0x108
 80012da:	9103      	str	r1, [sp, #12]
 80012dc:	9202      	str	r2, [sp, #8]
 80012de:	9301      	str	r3, [sp, #4]
 80012e0:	f7ff fb98 	bl	8000a14 <malloc>
 80012e4:	9903      	ldr	r1, [sp, #12]
 80012e6:	9a02      	ldr	r2, [sp, #8]
 80012e8:	9b01      	ldr	r3, [sp, #4]
 80012ea:	2800      	cmp	r0, #0
 80012ec:	d0ae      	beq.n	800124c <__register_exitproc+0x28>
 80012ee:	2600      	movs	r6, #0
 80012f0:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
 80012f4:	f8c0 6104 	str.w	r6, [r0, #260]	; 0x104
 80012f8:	46b0      	mov	r8, r6
 80012fa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80012fe:	e7c1      	b.n	8001284 <__register_exitproc+0x60>

08001300 <rb_getc>:
 * \param   rb    pointer to ringbuffer struct
 * \param   data  pointer to data byte
 * \return  number of bytes read (0 if buffer was empty)
 */
static inline int rb_getc(struct ringbuf *rb, char *data)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
    if (!rb->len)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d102      	bne.n	8001318 <rb_getc+0x18>
        return 0;
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	e025      	b.n	8001364 <rb_getc+0x64>

    vPortEnterCritical();
 8001318:	f003 f96a 	bl	80045f0 <vPortEnterCritical>

    *data = rb->buf[rb->pos++];
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6819      	ldr	r1, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	461a      	mov	r2, r3
 8001326:	188a      	adds	r2, r1, r2
 8001328:	7811      	ldrb	r1, [r2, #0]
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	7011      	strb	r1, [r2, #0]
 800132e:	f103 0201 	add.w	r2, r3, #1
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
	if (rb->pos >= rb->bufsize)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	429a      	cmp	r2, r3
 8001340:	db06      	blt.n	8001350 <rb_getc+0x50>
		rb->pos -= rb->bufsize;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	1ad2      	subs	r2, r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	609a      	str	r2, [r3, #8]
	rb->len--;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	f103 32ff 	add.w	r2, r3, #4294967295
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	60da      	str	r2, [r3, #12]

    vPortExitCritical();
 800135c:	f003 f95e 	bl	800461c <vPortExitCritical>
    return 1;
 8001360:	f04f 0301 	mov.w	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	f107 0708 	add.w	r7, r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop

08001370 <rb_putc>:
 * \param   rb    pointer to ringbuffer struct
 * \param   data  pointer to data byte
 * \return  number of bytes written (0 if buffer was full)
 */
static inline int rb_putc(struct ringbuf *rb, const char data)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	70fb      	strb	r3, [r7, #3]
    if (rb->len >= rb->bufsize)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	db02      	blt.n	800138e <rb_putc+0x1e>
        return 0;
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	e021      	b.n	80013d2 <rb_putc+0x62>

    vPortEnterCritical();
 800138e:	f003 f92f 	bl	80045f0 <vPortEnterCritical>

	int i = rb->pos + rb->len;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	18d3      	adds	r3, r2, r3
 800139c:	60fb      	str	r3, [r7, #12]
	if (i >= rb->bufsize)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	dc04      	bgt.n	80013b2 <rb_putc+0x42>
		i -= rb->bufsize;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	60fb      	str	r3, [r7, #12]

	rb->buf[i] = data;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	18d3      	adds	r3, r2, r3
 80013ba:	78fa      	ldrb	r2, [r7, #3]
 80013bc:	701a      	strb	r2, [r3, #0]
	rb->len++;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	f103 0201 	add.w	r2, r3, #1
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60da      	str	r2, [r3, #12]

    vPortExitCritical();
 80013ca:	f003 f927 	bl	800461c <vPortExitCritical>
    return 1;
 80013ce:	f04f 0301 	mov.w	r3, #1
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	f107 0710 	add.w	r7, r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <USART1_IRQHandler>:
    uint32_t    tx_bytes;
} uart_stats;


void USART1_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_RXNE) {
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	f003 0320 	and.w	r3, r3, #32
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d029      	beq.n	800144a <USART1_IRQHandler+0x6e>
        if (!rb_putc(&rx_buf, USART1->DR))
 80013f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80013fe:	889b      	ldrh	r3, [r3, #4]
 8001400:	b29b      	uxth	r3, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	f240 5004 	movw	r0, #1284	; 0x504
 8001408:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800140c:	4619      	mov	r1, r3
 800140e:	f7ff ffaf 	bl	8001370 <rb_putc>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10c      	bne.n	8001432 <USART1_IRQHandler+0x56>
            uart_stats.rx_overrun++;
 8001418:	f240 6398 	movw	r3, #1688	; 0x698
 800141c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f103 0201 	add.w	r2, r3, #1
 8001426:	f240 6398 	movw	r3, #1688	; 0x698
 800142a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	e00b      	b.n	800144a <USART1_IRQHandler+0x6e>
        else
            uart_stats.rx_bytes++;
 8001432:	f240 6398 	movw	r3, #1688	; 0x698
 8001436:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f103 0201 	add.w	r2, r3, #1
 8001440:	f240 6398 	movw	r3, #1688	; 0x698
 8001444:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001448:	605a      	str	r2, [r3, #4]
    }

    if (USART1->SR & USART_SR_TXE) {
 800144a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	b29b      	uxth	r3, r3
 8001456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145a:	2b00      	cmp	r3, #0
 800145c:	d02c      	beq.n	80014b8 <USART1_IRQHandler+0xdc>
        char c;
        if (rb_getc(&tx_buf, &c)) {
 800145e:	f240 5014 	movw	r0, #1300	; 0x514
 8001462:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001466:	f107 0307 	add.w	r3, r7, #7
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff ff48 	bl	8001300 <rb_getc>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d006      	beq.n	8001484 <USART1_IRQHandler+0xa8>
            // send a queued byte
            //
            USART1->DR = c;
 8001476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800147e:	79fa      	ldrb	r2, [r7, #7]
 8001480:	809a      	strh	r2, [r3, #4]
 8001482:	e00d      	b.n	80014a0 <USART1_IRQHandler+0xc4>
        }
        else {
            // nothing to send, disable interrupt
            //
            USART1->CR1 &= ~USART_CR1_TXEIE;
 8001484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001488:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800148c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001490:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001494:	8992      	ldrh	r2, [r2, #12]
 8001496:	b292      	uxth	r2, r2
 8001498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800149c:	b292      	uxth	r2, r2
 800149e:	819a      	strh	r2, [r3, #12]
        }
        uart_stats.tx_bytes++;
 80014a0:	f240 6398 	movw	r3, #1688	; 0x698
 80014a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f103 0201 	add.w	r2, r3, #1
 80014ae:	f240 6398 	movw	r3, #1688	; 0x698
 80014b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014b6:	609a      	str	r2, [r3, #8]
    }
}
 80014b8:	f107 0708 	add.w	r7, r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <get_us_time>:
 *   this function must be called at least
 *   once every 65ms to work correctly.
 *
 */
uint64_t get_us_time()
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
    static uint16_t t0;
    static uint64_t tickcount;

    vPortEnterCritical();
 80014c6:	f003 f893 	bl	80045f0 <vPortEnterCritical>

    int t = TIM7->CNT;
 80014ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	607b      	str	r3, [r7, #4]
    if (t < t0)
 80014d6:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80014da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dd03      	ble.n	80014f0 <get_us_time+0x30>
        t += 0x10000;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80014ee:	607b      	str	r3, [r7, #4]

    tickcount += t - t0;
 80014f0:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80014f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	1ad1      	subs	r1, r2, r3
 80014fe:	460a      	mov	r2, r1
 8001500:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001504:	f240 61a8 	movw	r1, #1704	; 0x6a8
 8001508:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800150c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001510:	1880      	adds	r0, r0, r2
 8001512:	eb41 0103 	adc.w	r1, r1, r3
 8001516:	f240 63a8 	movw	r3, #1704	; 0x6a8
 800151a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800151e:	e9c3 0100 	strd	r0, r1, [r3]
    t0 = t;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	b29a      	uxth	r2, r3
 8001526:	f240 63a4 	movw	r3, #1700	; 0x6a4
 800152a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800152e:	801a      	strh	r2, [r3, #0]

    vPortExitCritical();
 8001530:	f003 f874 	bl	800461c <vPortExitCritical>

    return tickcount;
 8001534:	f240 63a8 	movw	r3, #1704	; 0x6a8
 8001538:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	f107 0708 	add.w	r7, r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <init_us_timer>:
/**
 * Set up TIM7 as a 16bit, microsecond-timer.
 *
 */
void init_us_timer()
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq(&RCC_Clocks);
 8001552:	463b      	mov	r3, r7
 8001554:	4618      	mov	r0, r3
 8001556:	f003 fe25 	bl	80051a4 <RCC_GetClocksFreq>

    RCC->APB1ENR |= RCC_APB1Periph_TIM7;
 800155a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800155e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001562:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001566:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800156a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800156c:	f042 0220 	orr.w	r2, r2, #32
 8001570:	641a      	str	r2, [r3, #64]	; 0x40
    TIM7->PSC = (RCC_Clocks.PCLK2_Frequency / 1000000) - 1;
 8001572:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001576:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800157a:	68f9      	ldr	r1, [r7, #12]
 800157c:	f64d 6283 	movw	r2, #56963	; 0xde83
 8001580:	f2c4 321b 	movt	r2, #17179	; 0x431b
 8001584:	fba2 0201 	umull	r0, r2, r2, r1
 8001588:	ea4f 4292 	mov.w	r2, r2, lsr #18
 800158c:	b292      	uxth	r2, r2
 800158e:	f102 32ff 	add.w	r2, r2, #4294967295
 8001592:	b292      	uxth	r2, r2
 8001594:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM7->ARR = 0xFFFF;
 8001596:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800159a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800159e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015a2:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM7->CR1 = TIM_CR1_CEN;
 80015a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80015ac:	f04f 0201 	mov.w	r2, #1
 80015b0:	801a      	strh	r2, [r3, #0]
}
 80015b2:	f107 0710 	add.w	r7, r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop

080015bc <memset>:
#include "task.h"
#include "queue.h"
#include "semphr.h"

void *memset(void *dest, int c, size_t n)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
	unsigned char *s = dest;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	61fb      	str	r3, [r7, #28]
	c = (unsigned char)c;
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	60bb      	str	r3, [r7, #8]
	for (; ((uintptr_t)s & ALIGN) && n; n--) *s++ = c;
 80015d2:	e00b      	b.n	80015ec <memset+0x30>
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f103 0301 	add.w	r3, r3, #1
 80015e2:	61fb      	str	r3, [r7, #28]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <memset+0x40>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1eb      	bne.n	80015d4 <memset+0x18>
	if (n) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d02b      	beq.n	800165a <memset+0x9e>
		size_t *w, k = ONES * c;
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	4613      	mov	r3, r2
 8001606:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800160a:	189b      	adds	r3, r3, r2
 800160c:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8001610:	189b      	adds	r3, r3, r2
 8001612:	617b      	str	r3, [r7, #20]
		for (w = (void *)s; n>=SS; n-=SS, w++) *w = k;
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	61bb      	str	r3, [r7, #24]
 8001618:	e00a      	b.n	8001630 <memset+0x74>
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f1a3 0304 	sub.w	r3, r3, #4
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	f103 0304 	add.w	r3, r3, #4
 800162e:	61bb      	str	r3, [r7, #24]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b03      	cmp	r3, #3
 8001634:	d8f1      	bhi.n	800161a <memset+0x5e>
		for (s = (void *)w; n; n--, s++) *s = c;
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	e00b      	b.n	8001654 <memset+0x98>
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	701a      	strb	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f103 33ff 	add.w	r3, r3, #4294967295
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f103 0301 	add.w	r3, r3, #1
 8001652:	61fb      	str	r3, [r7, #28]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <memset+0x80>
	}
	return dest;
 800165a:	68fb      	ldr	r3, [r7, #12]
}
 800165c:	4618      	mov	r0, r3
 800165e:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <memcpy>:

void *memcpy(void *dest, const void *src, size_t n)
{
 8001668:	b480      	push	{r7}
 800166a:	b08b      	sub	sp, #44	; 0x2c
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
	void *ret = dest;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	617b      	str	r3, [r7, #20]
	
	//Cut rear
	uint8_t *dst8 = dest;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
	const uint8_t *src8 = src;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	623b      	str	r3, [r7, #32]
	switch (n % 4) {
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d010      	beq.n	80016ac <memcpy+0x44>
 800168a:	2b03      	cmp	r3, #3
 800168c:	d002      	beq.n	8001694 <memcpy+0x2c>
 800168e:	2b01      	cmp	r3, #1
 8001690:	d018      	beq.n	80016c4 <memcpy+0x5c>
 8001692:	e023      	b.n	80016dc <memcpy+0x74>
		case 3 : *dst8++ = *src8++;
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	701a      	strb	r2, [r3, #0]
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	f103 0301 	add.w	r3, r3, #1
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	f103 0301 	add.w	r3, r3, #1
 80016aa:	623b      	str	r3, [r7, #32]
		case 2 : *dst8++ = *src8++;
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	781a      	ldrb	r2, [r3, #0]
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	f103 0301 	add.w	r3, r3, #1
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	f103 0301 	add.w	r3, r3, #1
 80016c2:	623b      	str	r3, [r7, #32]
		case 1 : *dst8++ = *src8++;
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	781a      	ldrb	r2, [r3, #0]
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	701a      	strb	r2, [r3, #0]
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	f103 0301 	add.w	r3, r3, #1
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	f103 0301 	add.w	r3, r3, #1
 80016da:	623b      	str	r3, [r7, #32]
		case 0 : ;
	}
	
	//stm32 data bus width
	uint32_t *dst32 = (void *)dst8;
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	61fb      	str	r3, [r7, #28]
	const uint32_t *src32 = (void *)src8;
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	61bb      	str	r3, [r7, #24]
	n = n / 4;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80016ea:	607b      	str	r3, [r7, #4]
	while (n--) {
 80016ec:	e00b      	b.n	8001706 <memcpy+0x9e>
		*dst32++ = *src32++;
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f103 0304 	add.w	r3, r3, #4
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	f103 0304 	add.w	r3, r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
	
	//stm32 data bus width
	uint32_t *dst32 = (void *)dst8;
	const uint32_t *src32 = (void *)src8;
	n = n / 4;
	while (n--) {
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	bf0c      	ite	eq
 800170c:	2300      	moveq	r3, #0
 800170e:	2301      	movne	r3, #1
 8001710:	b2db      	uxtb	r3, r3
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	f102 32ff 	add.w	r2, r2, #4294967295
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1e7      	bne.n	80016ee <memcpy+0x86>
		*dst32++ = *src32++;
	}
	
	return ret;
 800171e:	697b      	ldr	r3, [r7, #20]
}
 8001720:	4618      	mov	r0, r3
 8001722:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <strncpy>:
	while ((*d++ = *s++));
	return dest;
}

char *strncpy(char *dest, const char *src, size_t n)
{
 800172c:	b480      	push	{r7}
 800172e:	b087      	sub	sp, #28
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
	const unsigned char *s = src;
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	617b      	str	r3, [r7, #20]
	unsigned char *d = dest;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	613b      	str	r3, [r7, #16]
	while (n-- && (*d++ = *s++));
 8001740:	bf00      	nop
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	bf0c      	ite	eq
 8001748:	2300      	moveq	r3, #0
 800174a:	2301      	movne	r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	f102 32ff 	add.w	r2, r2, #4294967295
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d014      	beq.n	8001784 <strncpy+0x58>
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	781a      	ldrb	r2, [r3, #0]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	701a      	strb	r2, [r3, #0]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	bf0c      	ite	eq
 800176a:	2300      	moveq	r3, #0
 800176c:	2301      	movne	r3, #1
 800176e:	b2db      	uxtb	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	f102 0201 	add.w	r2, r2, #1
 8001776:	613a      	str	r2, [r7, #16]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	f102 0201 	add.w	r2, r2, #1
 800177e:	617a      	str	r2, [r7, #20]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1de      	bne.n	8001742 <strncpy+0x16>
	return dest;
 8001784:	68fb      	ldr	r3, [r7, #12]
}
 8001786:	4618      	mov	r0, r3
 8001788:	f107 071c 	add.w	r7, r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop

08001794 <_toa>:
#define MaxDigit 6
/*
* Main part of itoa and xtoa
* Utilize the concept of long division to implement
*/
void _toa(int in_num, char *out_str, int base, int digit){
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	603b      	str	r3, [r7, #0]
	
    int Mdigit = digit;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	617b      	str	r3, [r7, #20]
    int neg = 0;
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
    out_str[digit--] = '\0';
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	18d3      	adds	r3, r2, r3
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80017be:	603b      	str	r3, [r7, #0]
    
    if(in_num == 0) out_str[digit--] = '0';    
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10a      	bne.n	80017dc <_toa+0x48>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	18d3      	adds	r3, r2, r3
 80017cc:	f04f 0230 	mov.w	r2, #48	; 0x30
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	f103 33ff 	add.w	r3, r3, #4294967295
 80017d8:	603b      	str	r3, [r7, #0]
    else if(in_num < 0){
        in_num = -in_num;
        neg = 1;
    }

    while(in_num > 0){
 80017da:	e045      	b.n	8001868 <_toa+0xd4>
    int Mdigit = digit;
    int neg = 0;
    out_str[digit--] = '\0';
    
    if(in_num == 0) out_str[digit--] = '0';    
    else if(in_num < 0){
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	da42      	bge.n	8001868 <_toa+0xd4>
        in_num = -in_num;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f1c3 0300 	rsb	r3, r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
        neg = 1;
 80017ea:	f04f 0301 	mov.w	r3, #1
 80017ee:	61fb      	str	r3, [r7, #28]
    }

    while(in_num > 0){
 80017f0:	e03a      	b.n	8001868 <_toa+0xd4>

        if(base == 16 && in_num % base >= 10)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b10      	cmp	r3, #16
 80017f6:	d11e      	bne.n	8001836 <_toa+0xa2>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	fb93 f2f2 	sdiv	r2, r3, r2
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	fb01 f202 	mul.w	r2, r1, r2
 8001806:	1a9b      	subs	r3, r3, r2
 8001808:	2b09      	cmp	r3, #9
 800180a:	dd14      	ble.n	8001836 <_toa+0xa2>
            out_str[digit--] = (in_num % base) + 'A' - 10;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	18d2      	adds	r2, r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	fb93 f1f1 	sdiv	r1, r3, r1
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	fb00 f101 	mul.w	r1, r0, r1
 8001820:	1a5b      	subs	r3, r3, r1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8001828:	b2db      	uxtb	r3, r3
 800182a:	7013      	strb	r3, [r2, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	f103 33ff 	add.w	r3, r3, #4294967295
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	e013      	b.n	800185e <_toa+0xca>
        else
            out_str[digit--] = (in_num % base) + '0';
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	18d2      	adds	r2, r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	fb93 f1f1 	sdiv	r1, r3, r1
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	fb00 f101 	mul.w	r1, r0, r1
 800184a:	1a5b      	subs	r3, r3, r1
 800184c:	b2db      	uxtb	r3, r3
 800184e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001852:	b2db      	uxtb	r3, r3
 8001854:	7013      	strb	r3, [r2, #0]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	f103 33ff 	add.w	r3, r3, #4294967295
 800185c:	603b      	str	r3, [r7, #0]
        
        in_num /= base;
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	fb92 f3f3 	sdiv	r3, r2, r3
 8001866:	60fb      	str	r3, [r7, #12]
    else if(in_num < 0){
        in_num = -in_num;
        neg = 1;
    }

    while(in_num > 0){
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	dcc1      	bgt.n	80017f2 <_toa+0x5e>
            out_str[digit--] = (in_num % base) + '0';
        
        in_num /= base;
    }//End of while(in_num > 0)
    
    if(base == 16){
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b10      	cmp	r3, #16
 8001872:	d113      	bne.n	800189c <_toa+0x108>
        out_str[digit--] = 'x';
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	18d3      	adds	r3, r2, r3
 800187a:	f04f 0278 	mov.w	r2, #120	; 0x78
 800187e:	701a      	strb	r2, [r3, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	f103 33ff 	add.w	r3, r3, #4294967295
 8001886:	603b      	str	r3, [r7, #0]
        out_str[digit--] = '0';
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	18d3      	adds	r3, r2, r3
 800188e:	f04f 0230 	mov.w	r2, #48	; 0x30
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	f103 33ff 	add.w	r3, r3, #4294967295
 800189a:	603b      	str	r3, [r7, #0]
    }    

    if(neg) out_str[digit--] = '-'; //negative number
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <_toa+0x122>
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	18d3      	adds	r3, r2, r3
 80018a8:	f04f 022d 	mov.w	r2, #45	; 0x2d
 80018ac:	701a      	strb	r2, [r3, #0]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80018b4:	603b      	str	r3, [r7, #0]

	digit++;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	f103 0301 	add.w	r3, r3, #1
 80018bc:	603b      	str	r3, [r7, #0]
    //reorder
    int j = 0;
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
    while(digit < Mdigit + 1){
 80018c4:	e00f      	b.n	80018e6 <_toa+0x152>
        out_str[j++] = out_str[digit++];
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	18d3      	adds	r3, r2, r3
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	68b9      	ldr	r1, [r7, #8]
 80018d0:	188a      	adds	r2, r1, r2
 80018d2:	7812      	ldrb	r2, [r2, #0]
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	f103 0301 	add.w	r3, r3, #1
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	f103 0301 	add.w	r3, r3, #1
 80018e4:	603b      	str	r3, [r7, #0]
    if(neg) out_str[digit--] = '-'; //negative number

	digit++;
    //reorder
    int j = 0;
    while(digit < Mdigit + 1){
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f103 0201 	add.w	r2, r3, #1
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	dce9      	bgt.n	80018c6 <_toa+0x132>
        out_str[j++] = out_str[digit++];
    } 
}
 80018f2:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <xtoa>:

void xtoa(int in_num, char *out_str){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
    
    _toa(in_num, out_str, 16, MaxDigit + 4);//MaxDigit + 4 that can contain address
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	6839      	ldr	r1, [r7, #0]
 800190a:	f04f 0210 	mov.w	r2, #16
 800190e:	f04f 030a 	mov.w	r3, #10
 8001912:	f7ff ff3f 	bl	8001794 <_toa>
}
 8001916:	f107 0708 	add.w	r7, r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop

08001920 <itoa>:


void itoa(int in_num, char *out_str){
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
   
    _toa(in_num, out_str, 10, MaxDigit);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	6839      	ldr	r1, [r7, #0]
 800192e:	f04f 020a 	mov.w	r2, #10
 8001932:	f04f 0306 	mov.w	r3, #6
 8001936:	f7ff ff2d 	bl	8001794 <_toa>
}
 800193a:	f107 0708 	add.w	r7, r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop

08001944 <qprintf>:


void qprintf(xQueueHandle tx_queue, const char *format, ...){
 8001944:	b40e      	push	{r1, r2, r3}
 8001946:	b580      	push	{r7, lr}
 8001948:	b08d      	sub	sp, #52	; 0x34
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
    va_list ap;
    va_start(ap, format);
 800194e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001952:	623b      	str	r3, [r7, #32]
    int curr_ch = 0;
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
    char out_ch[2] = {'\0', '\0'};
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	773b      	strb	r3, [r7, #28]
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	777b      	strb	r3, [r7, #29]
    char newLine[3] = {'\n' , '\r', '\0'};
 8001966:	f645 03dc 	movw	r3, #22748	; 0x58dc
 800196a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800196e:	8819      	ldrh	r1, [r3, #0]
 8001970:	789a      	ldrb	r2, [r3, #2]
 8001972:	f107 0318 	add.w	r3, r7, #24
 8001976:	8019      	strh	r1, [r3, #0]
 8001978:	709a      	strb	r2, [r3, #2]
    char percentage[] = "%";
 800197a:	f04f 0325 	mov.w	r3, #37	; 0x25
 800197e:	82bb      	strh	r3, [r7, #20]
    char *str;
    char str_num[10];
    int out_int;

    /* Block for 1ms. */
     const portTickType xDelay = 0.1; // portTICK_RATE_MS;
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28

    while( format[curr_ch] != '\0' ){
 8001986:	e0cd      	b.n	8001b24 <qprintf+0x1e0>
        vTaskDelay( xDelay ); 
 8001988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800198a:	f001 fb57 	bl	800303c <vTaskDelay>
        if(format[curr_ch] == '%'){
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001992:	18d3      	adds	r3, r2, r3
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b25      	cmp	r3, #37	; 0x25
 8001998:	f040 8098 	bne.w	8001acc <qprintf+0x188>
            if(format[curr_ch + 1] == 's'){
 800199c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199e:	f103 0301 	add.w	r3, r3, #1
 80019a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019a4:	18d3      	adds	r3, r2, r3
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b73      	cmp	r3, #115	; 0x73
 80019aa:	d112      	bne.n	80019d2 <qprintf+0x8e>
                str = va_arg(ap, char *);
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	f103 0204 	add.w	r2, r3, #4
 80019b2:	623a      	str	r2, [r7, #32]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
                while (!xQueueSendToBack(tx_queue, str, portMAX_DELAY)); 
 80019b8:	bf00      	nop
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019be:	f04f 32ff 	mov.w	r2, #4294967295
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	f002 f9f1 	bl	8003dac <xQueueGenericSend>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f4      	beq.n	80019ba <qprintf+0x76>
 80019d0:	e077      	b.n	8001ac2 <qprintf+0x17e>
                //parameter(...,The address of a string which is put in the queue,...)
            }else if(format[curr_ch + 1] == 'd'){
 80019d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d4:	f103 0301 	add.w	r3, r3, #1
 80019d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019da:	18d3      	adds	r3, r2, r3
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b64      	cmp	r3, #100	; 0x64
 80019e0:	d119      	bne.n	8001a16 <qprintf+0xd2>
                itoa(va_arg(ap, int), str_num);
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	f103 0204 	add.w	r2, r3, #4
 80019e8:	623a      	str	r2, [r7, #32]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	4619      	mov	r1, r3
 80019f4:	f7ff ff94 	bl	8001920 <itoa>
                while (!xQueueSendToBack(tx_queue, str_num, portMAX_DELAY));                
 80019f8:	bf00      	nop
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f107 0308 	add.w	r3, r7, #8
 8001a00:	4619      	mov	r1, r3
 8001a02:	f04f 32ff 	mov.w	r2, #4294967295
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	f002 f9cf 	bl	8003dac <xQueueGenericSend>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f2      	beq.n	80019fa <qprintf+0xb6>
 8001a14:	e055      	b.n	8001ac2 <qprintf+0x17e>
            }else if(format[curr_ch + 1] == 'c'){
 8001a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a18:	f103 0301 	add.w	r3, r3, #1
 8001a1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a1e:	18d3      	adds	r3, r2, r3
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b63      	cmp	r3, #99	; 0x63
 8001a24:	d115      	bne.n	8001a52 <qprintf+0x10e>
                out_ch[0] = (char)va_arg(ap, int);
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	f103 0204 	add.w	r2, r3, #4
 8001a2c:	623a      	str	r2, [r7, #32]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	773b      	strb	r3, [r7, #28]
                while (!xQueueSendToBack(tx_queue, out_ch, portMAX_DELAY));                                   
 8001a34:	bf00      	nop
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	f002 f9b1 	bl	8003dac <xQueueGenericSend>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f2      	beq.n	8001a36 <qprintf+0xf2>
 8001a50:	e037      	b.n	8001ac2 <qprintf+0x17e>
           }else if(format[curr_ch + 1] == 'x'){
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	f103 0301 	add.w	r3, r3, #1
 8001a58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a5a:	18d3      	adds	r3, r2, r3
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b78      	cmp	r3, #120	; 0x78
 8001a60:	d119      	bne.n	8001a96 <qprintf+0x152>
                xtoa(va_arg(ap, int), str_num);
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	f103 0204 	add.w	r2, r3, #4
 8001a68:	623a      	str	r2, [r7, #32]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f107 0308 	add.w	r3, r7, #8
 8001a72:	4619      	mov	r1, r3
 8001a74:	f7ff ff42 	bl	80018fc <xtoa>
                while (!xQueueSendToBack(tx_queue, str_num, portMAX_DELAY));                                       
 8001a78:	bf00      	nop
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f107 0308 	add.w	r3, r7, #8
 8001a80:	4619      	mov	r1, r3
 8001a82:	f04f 32ff 	mov.w	r2, #4294967295
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	f002 f98f 	bl	8003dac <xQueueGenericSend>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f2      	beq.n	8001a7a <qprintf+0x136>
 8001a94:	e015      	b.n	8001ac2 <qprintf+0x17e>
            }else if(format[curr_ch + 1] == '%'){
 8001a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a98:	f103 0301 	add.w	r3, r3, #1
 8001a9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a9e:	18d3      	adds	r3, r2, r3
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b25      	cmp	r3, #37	; 0x25
 8001aa4:	d10d      	bne.n	8001ac2 <qprintf+0x17e>
                while (!xQueueSendToBack(tx_queue, percentage, portMAX_DELAY));                                    
 8001aa6:	bf00      	nop
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	f002 f978 	bl	8003dac <xQueueGenericSend>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f2      	beq.n	8001aa8 <qprintf+0x164>
            }
            curr_ch++;
 8001ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac4:	f103 0301 	add.w	r3, r3, #1
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aca:	e027      	b.n	8001b1c <qprintf+0x1d8>
        }else if(format[curr_ch] == '\n'){
 8001acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ace:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ad0:	18d3      	adds	r3, r2, r3
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b0a      	cmp	r3, #10
 8001ad6:	d10e      	bne.n	8001af6 <qprintf+0x1b2>
            while (!xQueueSendToBack(tx_queue, newLine, portMAX_DELAY));
 8001ad8:	bf00      	nop
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f107 0318 	add.w	r3, r7, #24
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	f002 f95f 	bl	8003dac <xQueueGenericSend>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f2      	beq.n	8001ada <qprintf+0x196>
 8001af4:	e012      	b.n	8001b1c <qprintf+0x1d8>
        }else{
            out_ch[0] = format[curr_ch];
 8001af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001afa:	18d3      	adds	r3, r2, r3
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	773b      	strb	r3, [r7, #28]
            while (!xQueueSendToBack(tx_queue, out_ch, portMAX_DELAY));         
 8001b00:	bf00      	nop
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	f002 f94b 	bl	8003dac <xQueueGenericSend>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f2      	beq.n	8001b02 <qprintf+0x1be>
        }
        curr_ch++;
 8001b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1e:	f103 0301 	add.w	r3, r3, #1
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    int out_int;

    /* Block for 1ms. */
     const portTickType xDelay = 0.1; // portTICK_RATE_MS;

    while( format[curr_ch] != '\0' ){
 8001b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b28:	18d3      	adds	r3, r2, r3
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f47f af2b 	bne.w	8001988 <qprintf+0x44>
            while (!xQueueSendToBack(tx_queue, out_ch, portMAX_DELAY));         
        }
        curr_ch++;
    }//End of while
    va_end(ap);
}
 8001b32:	f107 0734 	add.w	r7, r7, #52	; 0x34
 8001b36:	46bd      	mov	sp, r7
 8001b38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b3c:	b003      	add	sp, #12
 8001b3e:	4770      	bx	lr

08001b40 <vUsartSendTask>:


/* Uart Task functions ------------------------------------------------- */
//Task For Sending Data Via USART
void vUsartSendTask(void *pvParameters)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b090      	sub	sp, #64	; 0x40
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	uint8_t curr_char;	

	while(1) {
		serial_str_msg msg;

		while (!xQueueReceive(xQueueUARTSend , &msg, portMAX_DELAY));
 8001b48:	e7ff      	b.n	8001b4a <vUsartSendTask+0xa>
 8001b4a:	bf00      	nop
 8001b4c:	f240 73f8 	movw	r3, #2040	; 0x7f8
 8001b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	f002 f9f9 	bl	8003f5c <xQueueGenericReceive>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0ed      	beq.n	8001b4c <vUsartSendTask+0xc>

		/* Write each character of the message to the RS232 port. */
		curr_char = 0;
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		while (msg.str[curr_char] != '\0') {
 8001b78:	e01f      	b.n	8001bba <vUsartSendTask+0x7a>
			//Wait till the flag resets
			while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
 8001b7a:	bf00      	nop
 8001b7c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8001b80:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001b84:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001b88:	f003 fe08 	bl	800579c <USART_GetFlagStatus>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f4      	beq.n	8001b7c <vUsartSendTask+0x3c>
			//Send the data
			USART_SendData(USART2, msg.str[curr_char]); // Send Char from queue
 8001b92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b96:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001b9a:	18d3      	adds	r3, r2, r3
 8001b9c:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001ba0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8001ba4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f003 fd7f 	bl	80056ac <USART_SendData>
			curr_char++;
 8001bae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001bb2:	f103 0301 	add.w	r3, r3, #1
 8001bb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		while (!xQueueReceive(xQueueUARTSend , &msg, portMAX_DELAY));

		/* Write each character of the message to the RS232 port. */
		curr_char = 0;
		while (msg.str[curr_char] != '\0') {
 8001bba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001bbe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001bc2:	18d3      	adds	r3, r2, r3
 8001bc4:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1d6      	bne.n	8001b7a <vUsartSendTask+0x3a>
			while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
			//Send the data
			USART_SendData(USART2, msg.str[curr_char]); // Send Char from queue
			curr_char++;
		}
	}
 8001bcc:	e7bd      	b.n	8001b4a <vUsartSendTask+0xa>
 8001bce:	bf00      	nop

08001bd0 <vHeartBeatTask>:
	DECR

}STATE;

void vHeartBeatTask(void *pvParameters)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b08d      	sub	sp, #52	; 0x34
 8001bd4:	af02      	add	r7, sp, #8
 8001bd6:	6078      	str	r0, [r7, #4]
	uint16_t Maximum = 0, curr_ADC = 0, last_ADC = 0;
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	843b      	strh	r3, [r7, #32]
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t state = FIND_MAX;
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t HeartBeat = 0;
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	83fb      	strh	r3, [r7, #30]

	uint16_t Max_int[2];
	double Max_float;

	qprintf(xQueueUARTSend, "Start Sampling...\n");
 8001bf8:	f240 73f8 	movw	r3, #2040	; 0x7f8
 8001bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f645 01e0 	movw	r1, #22752	; 0x58e0
 8001c08:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001c0c:	f7ff fe9a 	bl	8001944 <qprintf>
	while(1){
		switch(state){
 8001c10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	f200 8159 	bhi.w	8001ecc <vHeartBeatTask+0x2fc>
 8001c1a:	a201      	add	r2, pc, #4	; (adr r2, 8001c20 <vHeartBeatTask+0x50>)
 8001c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c20:	08001c31 	.word	0x08001c31
 8001c24:	08001d73 	.word	0x08001d73
 8001c28:	08001da7 	.word	0x08001da7
 8001c2c:	08001ea9 	.word	0x08001ea9
			case FIND_MAX:
				if(xTimerIsTimerActive(xTimerFindMax) == pdTRUE){
 8001c30:	f640 0300 	movw	r3, #2048	; 0x800
 8001c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f001 f910 	bl	8002e60 <xTimerIsTimerActive>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	f040 8081 	bne.w	8001d4a <vHeartBeatTask+0x17a>
					if(ADCConvertedValue[0] > Maximum) Maximum = ADCConvertedValue[0];
 8001c48:	f240 73fc 	movw	r3, #2044	; 0x7fc
 8001c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d205      	bcs.n	8001c66 <vHeartBeatTask+0x96>
 8001c5a:	f240 73fc 	movw	r3, #2044	; 0x7fc
 8001c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	84fb      	strh	r3, [r7, #38]	; 0x26
					if(tick1sec > 0) {
 8001c66:	f240 63b0 	movw	r3, #1712	; 0x6b0
 8001c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 812a 	beq.w	8001eca <vHeartBeatTask+0x2fa>
						state = FIND_SLOPE;
 8001c76:	f04f 0301 	mov.w	r3, #1
 8001c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						last_ADC = ADCConvertedValue[0];
 8001c7e:	f240 73fc 	movw	r3, #2044	; 0x7fc
 8001c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	84bb      	strh	r3, [r7, #36]	; 0x24
						xTimerStop(xTimerFindMax, 0);
 8001c8a:	f640 0300 	movw	r3, #2048	; 0x800
 8001c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	9200      	str	r2, [sp, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f04f 0101 	mov.w	r1, #1
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	f000 fe42 	bl	8002930 <xTimerGenericCommand>
						tick1sec = 0;
 8001cac:	f240 63b0 	movw	r3, #1712	; 0x6b0
 8001cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	801a      	strh	r2, [r3, #0]
						Max_float = (Maximum * 2.96f) / 4096.0f;
 8001cba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cbc:	ee07 3a90 	vmov	s15, r3
 8001cc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc4:	eddf 7a86 	vldr	s15, [pc, #536]	; 8001ee0 <vHeartBeatTask+0x310>
 8001cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ccc:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8001ee4 <vHeartBeatTask+0x314>
 8001cd0:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8001cd4:	ee17 0a90 	vmov	r0, s15
 8001cd8:	f7fe fbee 	bl	80004b8 <__aeabi_f2d>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	e9c7 2304 	strd	r2, r3, [r7, #16]
						Max_int[0] = (uint16_t) Max_float;
 8001ce4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ce8:	f7fe fe4c 	bl	8000984 <__aeabi_d2uiz>
 8001cec:	4603      	mov	r3, r0
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	81bb      	strh	r3, [r7, #12]
						Max_int[1] = (Max_float - Max_int[0]) * 1000;
 8001cf2:	89bb      	ldrh	r3, [r7, #12]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fbcd 	bl	8000494 <__aeabi_i2d>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d02:	f7fe fa79 	bl	80001f8 <__aeabi_dsub>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	a372      	add	r3, pc, #456	; (adr r3, 8001ed8 <vHeartBeatTask+0x308>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	f7fe fc24 	bl	8000560 <__aeabi_dmul>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f7fe fe30 	bl	8000984 <__aeabi_d2uiz>
 8001d24:	4603      	mov	r3, r0
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	81fb      	strh	r3, [r7, #14]
						qprintf(xQueueUARTSend, "\nMaximum is: %d.%d v\n", Max_int[0], Max_int[1]);
 8001d2a:	f240 73f8 	movw	r3, #2040	; 0x7f8
 8001d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d32:	6819      	ldr	r1, [r3, #0]
 8001d34:	89bb      	ldrh	r3, [r7, #12]
 8001d36:	461a      	mov	r2, r3
 8001d38:	89fb      	ldrh	r3, [r7, #14]
 8001d3a:	4608      	mov	r0, r1
 8001d3c:	f645 01f4 	movw	r1, #22772	; 0x58f4
 8001d40:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001d44:	f7ff fdfe 	bl	8001944 <qprintf>
					}
				}else{
					xTimerStart(xTimerFindMax, 0);
				}
				break;
 8001d48:	e0bf      	b.n	8001eca <vHeartBeatTask+0x2fa>
						Max_int[0] = (uint16_t) Max_float;
						Max_int[1] = (Max_float - Max_int[0]) * 1000;
						qprintf(xQueueUARTSend, "\nMaximum is: %d.%d v\n", Max_int[0], Max_int[1]);
					}
				}else{
					xTimerStart(xTimerFindMax, 0);
 8001d4a:	f640 0300 	movw	r3, #2048	; 0x800
 8001d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d52:	681c      	ldr	r4, [r3, #0]
 8001d54:	f001 faa0 	bl	8003298 <xTaskGetTickCount>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	9200      	str	r2, [sp, #0]
 8001d60:	4620      	mov	r0, r4
 8001d62:	f04f 0100 	mov.w	r1, #0
 8001d66:	461a      	mov	r2, r3
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	f000 fde0 	bl	8002930 <xTimerGenericCommand>
				}
				break;
 8001d70:	e0ab      	b.n	8001eca <vHeartBeatTask+0x2fa>
			case FIND_SLOPE:
				curr_ADC = ADCConvertedValue[0];
 8001d72:	f240 73fc 	movw	r3, #2044	; 0x7fc
 8001d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	843b      	strh	r3, [r7, #32]
				if(curr_ADC > last_ADC) state = INCR;
 8001d7e:	8c3a      	ldrh	r2, [r7, #32]
 8001d80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d904      	bls.n	8001d90 <vHeartBeatTask+0x1c0>
 8001d86:	f04f 0302 	mov.w	r3, #2
 8001d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001d8e:	e007      	b.n	8001da0 <vHeartBeatTask+0x1d0>
				else if(curr_ADC < last_ADC) state = DECR;
 8001d90:	8c3a      	ldrh	r2, [r7, #32]
 8001d92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d203      	bcs.n	8001da0 <vHeartBeatTask+0x1d0>
 8001d98:	f04f 0303 	mov.w	r3, #3
 8001d9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				last_ADC = curr_ADC;
 8001da0:	8c3b      	ldrh	r3, [r7, #32]
 8001da2:	84bb      	strh	r3, [r7, #36]	; 0x24
				break;
 8001da4:	e092      	b.n	8001ecc <vHeartBeatTask+0x2fc>
			case INCR:
				curr_ADC = ADCConvertedValue[0];
 8001da6:	f240 73fc 	movw	r3, #2044	; 0x7fc
 8001daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	843b      	strh	r3, [r7, #32]
				if( (curr_ADC < last_ADC) && (last_ADC >= Maximum - 50)){
 8001db2:	8c3a      	ldrh	r2, [r7, #32]
 8001db4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d273      	bcs.n	8001ea2 <vHeartBeatTask+0x2d2>
 8001dba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001dbe:	f1a3 0332 	sub.w	r3, r3, #50	; 0x32
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	db6d      	blt.n	8001ea2 <vHeartBeatTask+0x2d2>
					if(xTimerIsTimerActive(xTimer10ms) == pdTRUE){
 8001dc6:	f640 030c 	movw	r3, #2060	; 0x80c
 8001dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f001 f845 	bl	8002e60 <xTimerIsTimerActive>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d14b      	bne.n	8001e74 <vHeartBeatTask+0x2a4>
						//Meet 2nd peak.
						//calculate heartbrat
						xTimerStop(xTimer10ms, 0);
 8001ddc:	f640 030c 	movw	r3, #2060	; 0x80c
 8001de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	9200      	str	r2, [sp, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f04f 0101 	mov.w	r1, #1
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	f000 fd99 	bl	8002930 <xTimerGenericCommand>
						HeartBeat = (tick100Hz != 0)?(int)(60 * 100 / tick100Hz):0; 
 8001dfe:	f240 63b2 	movw	r3, #1714	; 0x6b2
 8001e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00a      	beq.n	8001e22 <vHeartBeatTask+0x252>
 8001e0c:	f240 63b2 	movw	r3, #1714	; 0x6b2
 8001e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	f241 7270 	movw	r2, #6000	; 0x1770
 8001e1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	e001      	b.n	8001e26 <vHeartBeatTask+0x256>
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	83fb      	strh	r3, [r7, #30]
						qprintf(xQueueUARTSend, "\r                     \r");
 8001e28:	f240 73f8 	movw	r3, #2040	; 0x7f8
 8001e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f645 110c 	movw	r1, #22796	; 0x590c
 8001e38:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001e3c:	f7ff fd82 	bl	8001944 <qprintf>
						qprintf(xQueueUARTSend, "Heart Beat: %d", HeartBeat);
 8001e40:	f240 73f8 	movw	r3, #2040	; 0x7f8
 8001e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	8bfb      	ldrh	r3, [r7, #30]
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	f645 1124 	movw	r1, #22820	; 0x5924
 8001e52:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001e56:	461a      	mov	r2, r3
 8001e58:	f7ff fd74 	bl	8001944 <qprintf>
						tick100Hz = 0;
 8001e5c:	f240 63b2 	movw	r3, #1714	; 0x6b2
 8001e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
						state = FIND_MAX;
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001e72:	e016      	b.n	8001ea2 <vHeartBeatTask+0x2d2>
					}else{
						//Meet first peak.
						//start timer to count the peak to peak freq.
						xTimerStart(xTimer10ms, 0);
 8001e74:	f640 030c 	movw	r3, #2060	; 0x80c
 8001e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e7c:	681c      	ldr	r4, [r3, #0]
 8001e7e:	f001 fa0b 	bl	8003298 <xTaskGetTickCount>
 8001e82:	4603      	mov	r3, r0
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	9200      	str	r2, [sp, #0]
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f04f 0100 	mov.w	r1, #0
 8001e90:	461a      	mov	r2, r3
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	f000 fd4b 	bl	8002930 <xTimerGenericCommand>
						state = DECR;
 8001e9a:	f04f 0303 	mov.w	r3, #3
 8001e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					}
				}
				last_ADC = curr_ADC;
 8001ea2:	8c3b      	ldrh	r3, [r7, #32]
 8001ea4:	84bb      	strh	r3, [r7, #36]	; 0x24
				break;
 8001ea6:	e011      	b.n	8001ecc <vHeartBeatTask+0x2fc>
			case DECR:
				curr_ADC = ADCConvertedValue[0];
 8001ea8:	f240 73fc 	movw	r3, #2044	; 0x7fc
 8001eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	843b      	strh	r3, [r7, #32]
				
				if(curr_ADC > last_ADC){
 8001eb4:	8c3a      	ldrh	r2, [r7, #32]
 8001eb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d903      	bls.n	8001ec4 <vHeartBeatTask+0x2f4>
					state = INCR;
 8001ebc:	f04f 0302 	mov.w	r3, #2
 8001ec0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				}
				last_ADC = curr_ADC;
 8001ec4:	8c3b      	ldrh	r3, [r7, #32]
 8001ec6:	84bb      	strh	r3, [r7, #36]	; 0x24
				break;
 8001ec8:	e000      	b.n	8001ecc <vHeartBeatTask+0x2fc>
						qprintf(xQueueUARTSend, "\nMaximum is: %d.%d v\n", Max_int[0], Max_int[1]);
					}
				}else{
					xTimerStart(xTimerFindMax, 0);
				}
				break;
 8001eca:	bf00      	nop
					state = INCR;
				}
				last_ADC = curr_ADC;
				break;
		}
		vTaskDelay(50 / portTICK_RATE_MS);
 8001ecc:	f04f 0032 	mov.w	r0, #50	; 0x32
 8001ed0:	f001 f8b4 	bl	800303c <vTaskDelay>
	}
 8001ed4:	e69c      	b.n	8001c10 <vHeartBeatTask+0x40>
 8001ed6:	bf00      	nop
 8001ed8:	00000000 	.word	0x00000000
 8001edc:	408f4000 	.word	0x408f4000
 8001ee0:	403d70a4 	.word	0x403d70a4
 8001ee4:	45800000 	.word	0x45800000

08001ee8 <vTimerSystemIdle>:



/* 40 sec idle time pass ... trun off moto */
void vTimerSystemIdle( xTimerHandle pxTimer )
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

	qprintf(xQueueUARTSend, "10 sec...\n\r");
 8001ef0:	f240 73f8 	movw	r3, #2040	; 0x7f8
 8001ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f645 1134 	movw	r1, #22836	; 0x5934
 8001f00:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001f04:	f7ff fd1e 	bl	8001944 <qprintf>
}
 8001f08:	f107 0708 	add.w	r7, r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <vTimer100HzTick>:

void vTimer100HzTick(xTimerHandle pxTimer)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	tick100Hz++;
 8001f18:	f240 63b2 	movw	r3, #1714	; 0x6b2
 8001f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	f103 0301 	add.w	r3, r3, #1
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	f240 63b2 	movw	r3, #1714	; 0x6b2
 8001f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f30:	701a      	strb	r2, [r3, #0]
}
 8001f32:	f107 070c 	add.w	r7, r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <vTimer1secTick>:


void vTimer1secTick(xTimerHandle pxTimer){
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	tick1sec++;
 8001f44:	f240 63b0 	movw	r3, #1712	; 0x6b0
 8001f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	f103 0301 	add.w	r3, r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	f240 63b0 	movw	r3, #1712	; 0x6b0
 8001f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f5c:	801a      	strh	r2, [r3, #0]
}
 8001f5e:	f107 070c 	add.w	r7, r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <main>:
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{ 
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b089      	sub	sp, #36	; 0x24
 8001f6c:	af04      	add	r7, sp, #16
	int timerID[3] = {0, 1, 2};
 8001f6e:	f645 1378 	movw	r3, #22904	; 0x5978
 8001f72:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001f76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f7a:	f107 0304 	add.w	r3, r7, #4
 8001f7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/*A Timer used to count how long there is no signal come in*/
	xTimerNoSignal = xTimerCreate("TurnOffTime", 10000 / portTICK_RATE_MS, pdFALSE,  (void *) timerID[0], vTimerSystemIdle);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	461c      	mov	r4, r3
 8001f86:	f641 63e9 	movw	r3, #7913	; 0x1ee9
 8001f8a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	f645 1040 	movw	r0, #22848	; 0x5940
 8001f94:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001f98:	f242 7110 	movw	r1, #10000	; 0x2710
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	4623      	mov	r3, r4
 8001fa2:	f000 fc91 	bl	80028c8 <xTimerCreate>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	f640 0314 	movw	r3, #2068	; 0x814
 8001fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001fb0:	601a      	str	r2, [r3, #0]

	//xTimerADC = xTimerCreate("ReadADC", 100 / portTICK_RATE_MS, pdTRUE, (void *) timerID[1], vTimerReadADCValue);
	
	xTimerFindMax = xTimerCreate("1sec tick", 1000/ portTICK_RATE_MS, pdTRUE,  (void *) timerID[1], vTimer1secTick);
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	461c      	mov	r4, r3
 8001fb6:	f641 733d 	movw	r3, #7997	; 0x1f3d
 8001fba:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	f645 104c 	movw	r0, #22860	; 0x594c
 8001fc4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001fc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fcc:	f04f 0201 	mov.w	r2, #1
 8001fd0:	4623      	mov	r3, r4
 8001fd2:	f000 fc79 	bl	80028c8 <xTimerCreate>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	f640 0300 	movw	r3, #2048	; 0x800
 8001fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001fe0:	601a      	str	r2, [r3, #0]
	xTimer10ms = xTimerCreate("100 Hz tick", 10 / portTICK_RATE_MS, pdTRUE, (void *) timerID[2], vTimer100HzTick);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	461c      	mov	r4, r3
 8001fe6:	f641 7311 	movw	r3, #7953	; 0x1f11
 8001fea:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	f645 1058 	movw	r0, #22872	; 0x5958
 8001ff4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001ff8:	f04f 010a 	mov.w	r1, #10
 8001ffc:	f04f 0201 	mov.w	r2, #1
 8002000:	4623      	mov	r3, r4
 8002002:	f000 fc61 	bl	80028c8 <xTimerCreate>
 8002006:	4602      	mov	r2, r0
 8002008:	f640 030c 	movw	r3, #2060	; 0x80c
 800200c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002010:	601a      	str	r2, [r3, #0]

	/*a queue for tansfer the senddate to USART task*/
	xQueueUARTSend = xQueueCreate(15, sizeof(serial_str_msg));
 8002012:	f04f 000f 	mov.w	r0, #15
 8002016:	f04f 0132 	mov.w	r1, #50	; 0x32
 800201a:	f001 fe5f 	bl	8003cdc <xQueueCreate>
 800201e:	4602      	mov	r2, r0
 8002020:	f240 73f8 	movw	r3, #2040	; 0x7f8
 8002024:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002028:	601a      	str	r2, [r3, #0]
   	xQueueUARTRecvie = xQueueCreate(15, sizeof(serial_ch_msg));
 800202a:	f04f 000f 	mov.w	r0, #15
 800202e:	f04f 0101 	mov.w	r1, #1
 8002032:	f001 fe53 	bl	8003cdc <xQueueCreate>
 8002036:	4602      	mov	r2, r0
 8002038:	f640 0310 	movw	r3, #2064	; 0x810
 800203c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002040:	601a      	str	r2, [r3, #0]

   	vSemaphoreCreateBinary(serial_tx_wait_sem);
 8002042:	f04f 0001 	mov.w	r0, #1
 8002046:	f04f 0100 	mov.w	r1, #0
 800204a:	f001 fe47 	bl	8003cdc <xQueueCreate>
 800204e:	4602      	mov	r2, r0
 8002050:	f640 0308 	movw	r3, #2056	; 0x808
 8002054:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	f640 0308 	movw	r3, #2056	; 0x808
 800205e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00d      	beq.n	8002084 <main+0x11c>
 8002068:	f640 0308 	movw	r3, #2056	; 0x808
 800206c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f04f 0100 	mov.w	r1, #0
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	f001 fe94 	bl	8003dac <xQueueGenericSend>

	/* initialize hardware... */
	prvSetupHardware();
 8002084:	f000 fa7a 	bl	800257c <prvSetupHardware>

	//xTimerStart(xTimerNoSignal, 0);
	//xTimerStart(xTimerADC, 0);
	//xTimerStart(xTimer100ms, 0);

	xTaskCreate(vUsartSendTask, ( signed portCHAR * ) "USART", configMINIMAL_STACK_SIZE, NULL,tskIDLE_PRIORITY, NULL);
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	9301      	str	r3, [sp, #4]
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	9302      	str	r3, [sp, #8]
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	9303      	str	r3, [sp, #12]
 80020a0:	f641 3041 	movw	r0, #6977	; 0x1b41
 80020a4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80020a8:	f645 1164 	movw	r1, #22884	; 0x5964
 80020ac:	f6c0 0100 	movt	r1, #2048	; 0x800
 80020b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	f000 feea 	bl	8002e90 <xTaskGenericCreate>
	xTaskCreate(vHeartBeatTask, ( signed portCHAR * ) "HeartBeat", configMINIMAL_STACK_SIZE, NULL,tskIDLE_PRIORITY, NULL);
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	9302      	str	r3, [sp, #8]
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	9303      	str	r3, [sp, #12]
 80020d4:	f641 30d1 	movw	r0, #7121	; 0x1bd1
 80020d8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80020dc:	f645 116c 	movw	r1, #22892	; 0x596c
 80020e0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80020e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	f000 fed0 	bl	8002e90 <xTaskGenericCreate>
	//xTaskCreate(shell, ( signed portCHAR * ) "shell", configMINIMAL_STACK_SIZE, NULL,tskIDLE_PRIORITY + 5, NULL);

	/* Start the scheduler. */
	vTaskStartScheduler();
 80020f0:	f000 ffd2 	bl	8003098 <vTaskStartScheduler>

	/* Will only get here if there was not enough heap space to create the idle task. */
	return 0;  
 80020f4:	f04f 0300 	mov.w	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	f107 0714 	add.w	r7, r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd90      	pop	{r4, r7, pc}
 8002102:	bf00      	nop

08002104 <Reset_Handler>:
 8002104:	2100      	movs	r1, #0
 8002106:	f000 b804 	b.w	8002112 <LoopCopyDataInit>

0800210a <CopyDataInit>:
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <LoopFillZerobss+0x22>)
 800210c:	585b      	ldr	r3, [r3, r1]
 800210e:	5043      	str	r3, [r0, r1]
 8002110:	3104      	adds	r1, #4

08002112 <LoopCopyDataInit>:
 8002112:	480f      	ldr	r0, [pc, #60]	; (8002150 <LoopFillZerobss+0x26>)
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <LoopFillZerobss+0x2a>)
 8002116:	1842      	adds	r2, r0, r1
 8002118:	429a      	cmp	r2, r3
 800211a:	f4ff aff6 	bcc.w	800210a <CopyDataInit>
 800211e:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <LoopFillZerobss+0x2e>)
 8002120:	f000 b803 	b.w	800212a <LoopFillZerobss>

08002124 <FillZerobss>:
 8002124:	2300      	movs	r3, #0
 8002126:	f842 3b04 	str.w	r3, [r2], #4

0800212a <LoopFillZerobss>:
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <LoopFillZerobss+0x32>)
 800212c:	429a      	cmp	r2, r3
 800212e:	f4ff aff9 	bcc.w	8002124 <FillZerobss>
 8002132:	480b      	ldr	r0, [pc, #44]	; (8002160 <LoopFillZerobss+0x36>)
 8002134:	6801      	ldr	r1, [r0, #0]
 8002136:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800213a:	6001      	str	r1, [r0, #0]
 800213c:	f000 f814 	bl	8002168 <SystemInit>
 8002140:	f7fe fc40 	bl	80009c4 <__libc_init_array>
 8002144:	f7ff ff10 	bl	8001f68 <main>
 8002148:	4770      	bx	lr
 800214a:	0000      	.short	0x0000
 800214c:	08005a8c 	.word	0x08005a8c
 8002150:	20000000 	.word	0x20000000
 8002154:	20000544 	.word	0x20000544
 8002158:	20000548 	.word	0x20000548
 800215c:	20000820 	.word	0x20000820
 8002160:	e000ed88 	.word	0xe000ed88

08002164 <ADC_IRQHandler>:
 8002164:	f7ff bffe 	b.w	8002164 <ADC_IRQHandler>

08002168 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800216c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002170:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002174:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002178:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	f042 0201 	orr.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002184:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002188:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002192:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002196:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800219a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800219e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80021a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021ac:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80021ae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80021b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021b6:	f243 0210 	movw	r2, #12304	; 0x3010
 80021ba:	f2c2 4200 	movt	r2, #9216	; 0x2400
 80021be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80021c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80021c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021d6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80021d8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80021dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80021e6:	f000 f809 	bl	80021fc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021ea:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80021ee:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80021f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021f6:	609a      	str	r2, [r3, #8]
#endif
}
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop

080021fc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	607b      	str	r3, [r7, #4]
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800220e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002212:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002216:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800221a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002224:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002226:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800222a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002234:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f103 0301 	add.w	r3, r3, #1
 800223c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d103      	bne.n	800224c <SetSysClock+0x50>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800224a:	d1ec      	bne.n	8002226 <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800224c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002250:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 800225e:	f04f 0301 	mov.w	r3, #1
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	e002      	b.n	800226c <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	2b01      	cmp	r3, #1
 8002270:	f040 8082 	bne.w	8002378 <SetSysClock+0x17c>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002274:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002278:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800227c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002280:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002284:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002286:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800228a:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 800228c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002290:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002294:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8002298:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022a2:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80022a4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80022a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80022b0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80022b4:	6892      	ldr	r2, [r2, #8]
 80022b6:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80022b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80022bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80022c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80022c8:	6892      	ldr	r2, [r2, #8]
 80022ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ce:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80022d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80022d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80022dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80022e0:	6892      	ldr	r2, [r2, #8]
 80022e2:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80022e6:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80022e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80022ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022f0:	f245 4208 	movw	r2, #21512	; 0x5408
 80022f4:	f2c0 7240 	movt	r2, #1856	; 0x740
 80022f8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80022fa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80022fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002302:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002306:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002310:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002312:	bf00      	nop
 8002314:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002318:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f6      	beq.n	8002314 <SetSysClock+0x118>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002326:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800232a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800232e:	f240 6205 	movw	r2, #1541	; 0x605
 8002332:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002334:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002338:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800233c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002340:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002344:	6892      	ldr	r2, [r2, #8]
 8002346:	f022 0203 	bic.w	r2, r2, #3
 800234a:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800234c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002350:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002354:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002358:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800235c:	6892      	ldr	r2, [r2, #8]
 800235e:	f042 0202 	orr.w	r2, r2, #2
 8002362:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002364:	bf00      	nop
 8002366:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800236a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b08      	cmp	r3, #8
 8002376:	d1f6      	bne.n	8002366 <SetSysClock+0x16a>

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8002378:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800237c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002380:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002384:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002388:	6892      	ldr	r2, [r2, #8]
 800238a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800238e:	609a      	str	r2, [r3, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8002390:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002394:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002398:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800239c:	f2c5 0200 	movt	r2, #20480	; 0x5000
 80023a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 80023a4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80023a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80023b0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80023ba:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 80023bc:	bf00      	nop
 80023be:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80023c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f6      	beq.n	80023be <SetSysClock+0x1c2>
  {
  }
}
 80023d0:	f107 070c 	add.w	r7, r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop

080023dc <_sbrk_r>:
    return 1;
}


void *_sbrk_r(struct _reent *r, ptrdiff_t incr)
{
 80023dc:	b490      	push	{r4, r7}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
    extern char end;   // provided by the linker script

    if (__brkval == 0)
 80023e6:	f640 031c 	movw	r3, #2076	; 0x81c
 80023ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d108      	bne.n	8002406 <_sbrk_r+0x2a>
        __brkval = &end;
 80023f4:	f640 031c 	movw	r3, #2076	; 0x81c
 80023f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023fc:	f640 0220 	movw	r2, #2080	; 0x820
 8002400:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002404:	601a      	str	r2, [r3, #0]

    if (__brkval + incr > (char*)__get_MSP() - __malloc_margin) {
 8002406:	f640 031c 	movw	r3, #2076	; 0x81c
 800240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	18d2      	adds	r2, r2, r3
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8002414:	f3ef 8408 	mrs	r4, MSP
  return(result);
 8002418:	4623      	mov	r3, r4
 800241a:	4619      	mov	r1, r3
 800241c:	f240 5328 	movw	r3, #1320	; 0x528
 8002420:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	1acb      	subs	r3, r1, r3
 8002428:	429a      	cmp	r2, r3
 800242a:	d906      	bls.n	800243a <_sbrk_r+0x5e>
        r->_errno = ENOMEM;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f04f 020c 	mov.w	r2, #12
 8002432:	601a      	str	r2, [r3, #0]
        return (void*)-1;
 8002434:	f04f 33ff 	mov.w	r3, #4294967295
 8002438:	e012      	b.n	8002460 <_sbrk_r+0x84>
    }

    void *ret = __brkval;
 800243a:	f640 031c 	movw	r3, #2076	; 0x81c
 800243e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60fb      	str	r3, [r7, #12]
    __brkval += incr;
 8002446:	f640 031c 	movw	r3, #2076	; 0x81c
 800244a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	18d2      	adds	r2, r2, r3
 8002454:	f640 031c 	movw	r3, #2076	; 0x81c
 8002458:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800245c:	601a      	str	r2, [r3, #0]

    return ret;
 800245e:	68fb      	ldr	r3, [r7, #12]
}
 8002460:	4618      	mov	r0, r3
 8002462:	f107 0710 	add.w	r7, r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bc90      	pop	{r4, r7}
 800246a:	4770      	bx	lr

0800246c <__malloc_lock>:
    return -1;
}


void __malloc_lock(struct _reent *r)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
    vPortEnterCritical();
 8002474:	f002 f8bc 	bl	80045f0 <vPortEnterCritical>
}
 8002478:	f107 0708 	add.w	r7, r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <__malloc_unlock>:


void __malloc_unlock(struct _reent *r)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
    vPortExitCritical();
 8002488:	f002 f8c8 	bl	800461c <vPortExitCritical>
}
 800248c:	f107 0708 	add.w	r7, r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <USART2_IRQHandler>:
} serial_ch_msg;

/* IRQ handler to handle USART2 interruptss (both transmit and receive
* interrupts). */
void USART2_IRQHandler()
{
 8002494:	b590      	push	{r4, r7, lr}
 8002496:	b085      	sub	sp, #20
 8002498:	af02      	add	r7, sp, #8
        static signed portBASE_TYPE xHigherPriorityTaskWoken;
        serial_ch_msg rx_msg;

        /* If this interrupt is for a transmit... */
        if (USART_GetITStatus(USART2, USART_IT_TXE) != RESET) {
 800249a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800249e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80024a2:	f240 7127 	movw	r1, #1831	; 0x727
 80024a6:	f003 f9ab 	bl	8005800 <USART_GetITStatus>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01a      	beq.n	80024e6 <USART2_IRQHandler+0x52>
                /* "give" the serial_tx_wait_sem semaphore to notfiy processes
                 * that the buffer has a spot free for the next byte.
                 */
                xSemaphoreGiveFromISR(serial_tx_wait_sem, &xHigherPriorityTaskWoken);
 80024b0:	f640 0308 	movw	r3, #2056	; 0x808
 80024b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f04f 0100 	mov.w	r1, #0
 80024c0:	f240 62b4 	movw	r2, #1716	; 0x6b4
 80024c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	f001 fcfe 	bl	8003ecc <xQueueGenericSendFromISR>

                /* Diables the transmit interrupt. */
                USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 80024d0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 80024d4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80024d8:	f240 7127 	movw	r1, #1831	; 0x727
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f003 f90a 	bl	80056f8 <USART_ITConfig>
 80024e4:	e03c      	b.n	8002560 <USART2_IRQHandler+0xcc>
                /* If this interrupt is for a receive... */
        }
        else if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) {
 80024e6:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 80024ea:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80024ee:	f240 5125 	movw	r1, #1317	; 0x525
 80024f2:	f003 f985 	bl	8005800 <USART_GetITStatus>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d030      	beq.n	800255e <USART2_IRQHandler+0xca>
                /* Receive the byte from the buffer. */
                rx_msg.ch = USART_ReceiveData(USART2);
 80024fc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8002500:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002504:	f003 f8e6 	bl	80056d4 <USART_ReceiveData>
 8002508:	4603      	mov	r3, r0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	713b      	strb	r3, [r7, #4]

                xTimerReset(xTimerNoSignal, 10);
 800250e:	f640 0314 	movw	r3, #2068	; 0x814
 8002512:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002516:	681c      	ldr	r4, [r3, #0]
 8002518:	f000 febe 	bl	8003298 <xTaskGetTickCount>
 800251c:	4603      	mov	r3, r0
 800251e:	f04f 020a 	mov.w	r2, #10
 8002522:	9200      	str	r2, [sp, #0]
 8002524:	4620      	mov	r0, r4
 8002526:	f04f 0100 	mov.w	r1, #0
 800252a:	461a      	mov	r2, r3
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	f000 f9fe 	bl	8002930 <xTimerGenericCommand>
                /* Queue the received byte. */
                if(!xQueueSendToBackFromISR(xQueueUARTRecvie, &rx_msg, &xHigherPriorityTaskWoken)) {
 8002534:	f640 0310 	movw	r3, #2064	; 0x810
 8002538:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f107 0304 	add.w	r3, r7, #4
 8002544:	4619      	mov	r1, r3
 8002546:	f240 62b4 	movw	r2, #1716	; 0x6b4
 800254a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	f001 fcbb 	bl	8003ecc <xQueueGenericSendFromISR>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <USART2_IRQHandler+0xcc>
                        /* If there was an error queueing the received byte,
                         * freeze. */
                        while(1);
 800255c:	e7fe      	b.n	800255c <USART2_IRQHandler+0xc8>
        }
        else {
                /* Only transmit and receive interrupts should be enabled.
                 * If this is another type of interrupt, freeze.
                 */
                while(1);
 800255e:	e7fe      	b.n	800255e <USART2_IRQHandler+0xca>
        }

        if (xHigherPriorityTaskWoken) {
 8002560:	f240 63b4 	movw	r3, #1716	; 0x6b4
 8002564:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <USART2_IRQHandler+0xde>
                taskYIELD();
 800256e:	f002 f833 	bl	80045d8 <vPortYieldFromISR>
        }
}
 8002572:	f107 070c 	add.w	r7, r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	bd90      	pop	{r4, r7, pc}
 800257a:	bf00      	nop

0800257c <prvSetupHardware>:
#include "FreeRTOSConfig.h"


/*-----------------------------------------------------------*/
void prvSetupHardware( void )
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
	/* Set the Vector Table base address at 0x08000000 */
	NVIC_SetVectorTable( NVIC_VectTab_FLASH, 0x0 );
 8002580:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002584:	f04f 0100 	mov.w	r1, #0
 8002588:	f002 f958 	bl	800483c <NVIC_SetVectorTable>
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 800258c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002590:	f002 f8ce 	bl	8004730 <NVIC_PriorityGroupConfig>
	/* Configuration of Timer4 to control LEDs based on MEMS data */
	//prvTIM4_Config();

	/* Configure LIS302 in order to produce data used for TIM4 reconfiguration and LED control */

  	RCC_Configuration();
 8002594:	f000 f810 	bl	80025b8 <RCC_Configuration>
  	GPIO_Configuration();
 8002598:	f000 f836 	bl	8002608 <GPIO_Configuration>
  //	TIM_Configuration();
  	USART_Configuration();
 800259c:	f000 f90c 	bl	80027b8 <USART_Configuration>
    
    DMA_Configuration();
 80025a0:	f000 f87a 	bl	8002698 <DMA_Configuration>
    ADC_Configuration();
 80025a4:	f000 f8c0 	bl	8002728 <ADC_Configuration>
	 
    ADC_SoftwareStartConv(ADC1); // Start conversion by software.
 80025a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025ac:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80025b0:	f002 fac0 	bl	8004b34 <ADC_SoftwareStartConv>
}
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop

080025b8 <RCC_Configuration>:
  * @brief  Configures the different system clocks.
  * @param  None
  * @retval None
  */
void RCC_Configuration(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  
 // RCC_AHB1PeriphClockCmd(  RCC_AHB1Periph_GPIOD , ENABLE );
  //RCC_APB1PeriphClockCmd( RCC_APB1Periph_TIM4, ENABLE );
  
  //--Enable DMA1 clock--
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 80025bc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80025c0:	f04f 0101 	mov.w	r1, #1
 80025c4:	f002 fed4 	bl	8005370 <RCC_AHB1PeriphClockCmd>
  
  //Enable ADC1 clock
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE); 
 80025c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80025cc:	f04f 0101 	mov.w	r1, #1
 80025d0:	f002 ff22 	bl	8005418 <RCC_APB2PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80025d4:	f04f 0004 	mov.w	r0, #4
 80025d8:	f04f 0101 	mov.w	r1, #1
 80025dc:	f002 fec8 	bl	8005370 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1ENR_GPIOCEN, ENABLE);
 80025e0:	f04f 0004 	mov.w	r0, #4
 80025e4:	f04f 0101 	mov.w	r1, #1
 80025e8:	f002 fec2 	bl	8005370 <RCC_AHB1PeriphClockCmd>

  //Enable GPIO Clocks For USART2
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80025ec:	f04f 0001 	mov.w	r0, #1
 80025f0:	f04f 0101 	mov.w	r1, #1
 80025f4:	f002 febc 	bl	8005370 <RCC_AHB1PeriphClockCmd>

  //Enable Clocks for USART2
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);    
 80025f8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80025fc:	f04f 0101 	mov.w	r1, #1
 8002600:	f002 fee0 	bl	80053c4 <RCC_APB1PeriphClockCmd>
}
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop

08002608 <GPIO_Configuration>:
  * @brief  
  * @param  None
  * @retval None
  */
void GPIO_Configuration(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  GPIO_StructInit(&GPIO_InitStructure);
 800260e:	463b      	mov	r3, r7
 8002610:	4618      	mov	r0, r3
 8002612:	f002 fd55 	bl	80050c0 <GPIO_StructInit>
  //ADC
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0; // PC0
 8002616:	f04f 0301 	mov.w	r3, #1
 800261a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN; //analog mode
 800261c:	f04f 0303 	mov.w	r3, #3
 8002620:	713b      	strb	r3, [r7, #4]
  //GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002622:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002626:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800262a:	463b      	mov	r3, r7
 800262c:	4619      	mov	r1, r3
 800262e:	f002 fca5 	bl	8004f7c <GPIO_Init>
    /*----------------------------------------------------------------------*/
  
  GPIO_StructInit(&GPIO_InitStructure);
 8002632:	463b      	mov	r3, r7
 8002634:	4618      	mov	r0, r3
 8002636:	f002 fd43 	bl	80050c0 <GPIO_StructInit>
  //GPIO Configuration for USART - PA2, PA3
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 800263a:	f04f 030c 	mov.w	r3, #12
 800263e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002640:	f04f 0302 	mov.w	r3, #2
 8002644:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002652:	f04f 0302 	mov.w	r3, #2
 8002656:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002658:	f04f 0000 	mov.w	r0, #0
 800265c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002660:	463b      	mov	r3, r7
 8002662:	4619      	mov	r1, r3
 8002664:	f002 fc8a 	bl	8004f7c <GPIO_Init>

  //Connect USART pins to AF
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8002668:	f04f 0000 	mov.w	r0, #0
 800266c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002670:	f04f 0102 	mov.w	r1, #2
 8002674:	f04f 0207 	mov.w	r2, #7
 8002678:	f002 fd40 	bl	80050fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 800267c:	f04f 0000 	mov.w	r0, #0
 8002680:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002684:	f04f 0103 	mov.w	r1, #3
 8002688:	f04f 0207 	mov.w	r2, #7
 800268c:	f002 fd36 	bl	80050fc <GPIO_PinAFConfig>

}
 8002690:	f107 0708 	add.w	r7, r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <DMA_Configuration>:



void DMA_Configuration(void){
 8002698:	b580      	push	{r7, lr}
 800269a:	b090      	sub	sp, #64	; 0x40
 800269c:	af00      	add	r7, sp, #0
  DMA_InitTypeDef DMA_InitStructure;

  DMA_DeInit(DMA2_Stream4);
 800269e:	f246 4070 	movw	r0, #25712	; 0x6470
 80026a2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80026a6:	f002 fa8d 	bl	8004bc4 <DMA_DeInit>
  DMA_StructInit(&DMA_InitStructure);
 80026aa:	f107 0304 	add.w	r3, r7, #4
 80026ae:	4618      	mov	r0, r3
 80026b0:	f002 fc02 	bl	8004eb8 <DMA_StructInit>
  DMA_InitStructure.DMA_Channel = DMA_Channel_0;
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	607b      	str	r3, [r7, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) ADC1_DR_Address;
 80026ba:	f242 034c 	movw	r3, #8268	; 0x204c
 80026be:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80026c2:	60bb      	str	r3, [r7, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) &ADCConvertedValue[0];
 80026c4:	f240 73fc 	movw	r3, #2044	; 0x7fc
 80026c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026cc:	60fb      	str	r3, [r7, #12]

  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	613b      	str	r3, [r7, #16]

  DMA_InitStructure.DMA_BufferSize = 1;
 80026d4:	f04f 0301 	mov.w	r3, #1
 80026d8:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80026e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026e4:	61fb      	str	r3, [r7, #28]

  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80026e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026ea:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 80026ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80026f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80026f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026fc:	62bb      	str	r3, [r7, #40]	; 0x28

  DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 80026fe:	f246 4070 	movw	r0, #25712	; 0x6470
 8002702:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002706:	f107 0304 	add.w	r3, r7, #4
 800270a:	4619      	mov	r1, r3
 800270c:	f002 fb7c 	bl	8004e08 <DMA_Init>
  DMA_Cmd(DMA2_Stream4, ENABLE);
 8002710:	f246 4070 	movw	r0, #25712	; 0x6470
 8002714:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002718:	f04f 0101 	mov.w	r1, #1
 800271c:	f002 fc12 	bl	8004f44 <DMA_Cmd>
}
 8002720:	f107 0740 	add.w	r7, r7, #64	; 0x40
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <ADC_Configuration>:

void ADC_Configuration(void){
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
  ADC_InitTypeDef ADC_InitStructure;

  

  //ADC Sturcture configuration
  ADC_DeInit(); // Reset all parameters to their default values
 800272e:	f002 f89b 	bl	8004868 <ADC_DeInit>
  ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	603b      	str	r3, [r7, #0]
  ADC_InitStructure.ADC_ScanConvMode = ENABLE; // No scan?
 8002738:	f04f 0301 	mov.w	r3, #1
 800273c:	713b      	strb	r3, [r7, #4]
  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE; //continuous conversion
 800273e:	f04f 0301 	mov.w	r3, #1
 8002742:	717b      	strb	r3, [r7, #5]
  ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None; // no external trigger for conversion
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right; // converted data will be shifted to the right
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	613b      	str	r3, [r7, #16]
  ADC_InitStructure.ADC_NbrOfConversion = 1; // Number of used ADC channels
 8002750:	f04f 0301 	mov.w	r3, #1
 8002754:	753b      	strb	r3, [r7, #20]
  ADC_Init(ADC1, &ADC_InitStructure);  
 8002756:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800275a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800275e:	463b      	mov	r3, r7
 8002760:	4619      	mov	r1, r3
 8002762:	f002 f891 	bl	8004888 <ADC_Init>

  // use channel 10 from ADC1, with sample time 15 cycles
  ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1, ADC_SampleTime_15Cycles);
 8002766:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800276a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800276e:	f04f 010a 	mov.w	r1, #10
 8002772:	f04f 0201 	mov.w	r2, #1
 8002776:	f04f 0301 	mov.w	r3, #1
 800277a:	f002 f8fd 	bl	8004978 <ADC_RegularChannelConfig>
  
  ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
 800277e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002782:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8002786:	f04f 0101 	mov.w	r1, #1
 800278a:	f002 f9ff 	bl	8004b8c <ADC_DMARequestAfterLastTransferCmd>
  
  //Enable ADC1 use DMA
  ADC_DMACmd(ADC1, ENABLE);
 800278e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002792:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8002796:	f04f 0101 	mov.w	r1, #1
 800279a:	f002 f9db 	bl	8004b54 <ADC_DMACmd>
  //Enable ADC1
  ADC_Cmd(ADC1, ENABLE);
 800279e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80027a2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80027a6:	f04f 0101 	mov.w	r1, #1
 80027aa:	f002 f8c9 	bl	8004940 <ADC_Cmd>
  ADC_ResetCalibration(ADC1);
  while(ADC_GetResetCalibrationStatus(ADC1));
  ADC_StartCalibration(ADC1);
  while(ADC_GetCalibrationStatus(ADC1));
*/
}
 80027ae:	f107 0718 	add.w	r7, r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop

080027b8 <USART_Configuration>:
  * @brief  configure the USART
  * @param  None
  * @retval None
  */
void USART_Configuration(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
  //Structure With Data For USART Configuration
  USART_InitTypeDef USART_InitStructure;
  
  //USART Parameters
  USART_InitStructure.USART_BaudRate = 19200;
 80027be:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 80027c2:	60bb      	str	r3, [r7, #8]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	81bb      	strh	r3, [r7, #12]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	81fb      	strh	r3, [r7, #14]
  USART_InitStructure.USART_Parity = USART_Parity_No ;
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	823b      	strh	r3, [r7, #16]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	82bb      	strh	r3, [r7, #20]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx ;
 80027dc:	f04f 030c 	mov.w	r3, #12
 80027e0:	827b      	strh	r3, [r7, #18]

  //Configuring And Enabling USART2
  USART_Init(USART2, &USART_InitStructure);
 80027e2:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 80027e6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80027ea:	f107 0308 	add.w	r3, r7, #8
 80027ee:	4619      	mov	r1, r3
 80027f0:	f002 fe66 	bl	80054c0 <USART_Init>
  

  //Enable USART Interrupt ----
  NVIC_InitTypeDef NVIC_InitStructure;

  USART_ClearFlag(USART2, USART_FLAG_TC);
 80027f4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 80027f8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80027fc:	f04f 0140 	mov.w	r1, #64	; 0x40
 8002800:	f002 ffec 	bl	80057dc <USART_ClearFlag>
  /* Enable transmit and receive interrupts for the USART2. */
  USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 8002804:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8002808:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800280c:	f240 7127 	movw	r1, #1831	; 0x727
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f002 ff70 	bl	80056f8 <USART_ITConfig>
  USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8002818:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800281c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002820:	f240 5125 	movw	r1, #1317	; 0x525
 8002824:	f04f 0201 	mov.w	r2, #1
 8002828:	f002 ff66 	bl	80056f8 <USART_ITConfig>
  /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
   * handler is enabled). */
  NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 800282c:	f04f 0326 	mov.w	r3, #38	; 0x26
 8002830:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY + 0x10;
 8002832:	f04f 03cf 	mov.w	r3, #207	; 0xcf
 8002836:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800283e:	f04f 0301 	mov.w	r3, #1
 8002842:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8002844:	f107 0304 	add.w	r3, r7, #4
 8002848:	4618      	mov	r0, r3
 800284a:	f001 ff85 	bl	8004758 <NVIC_Init>

  USART_Cmd(USART2, ENABLE);
 800284e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8002852:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002856:	f04f 0101 	mov.w	r1, #1
 800285a:	f002 ff07 	bl	800566c <USART_Cmd>
}
 800285e:	f107 0718 	add.w	r7, r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop

08002868 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002874:	f000 fabc 	bl	8002df0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002878:	f240 63e8 	movw	r3, #1768	; 0x6e8
 800287c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d01a      	beq.n	80028bc <xTimerCreateTimerTask+0x54>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY, &xTimerTaskHandle );	
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY, NULL);
 8002886:	f04f 0301 	mov.w	r3, #1
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	9302      	str	r3, [sp, #8]
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	9303      	str	r3, [sp, #12]
 800289e:	f642 204d 	movw	r0, #10829	; 0x2a4d
 80028a2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80028a6:	f645 1184 	movw	r1, #22916	; 0x5984
 80028aa:	f6c0 0100 	movt	r1, #2048	; 0x800
 80028ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	f000 faeb 	bl	8002e90 <xTaskGenericCreate>
 80028ba:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
	return xReturn;
 80028bc:	687b      	ldr	r3, [r7, #4]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	f107 0708 	add.w	r7, r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <xTimerCreate>:
/*-----------------------------------------------------------*/

xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d103      	bne.n	80028e4 <xTimerCreate+0x1c>
	{
		pxNewTimer = NULL;
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	e01f      	b.n	8002924 <xTimerCreate+0x5c>
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
	}
	else
	{
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
 80028e4:	f04f 0028 	mov.w	r0, #40	; 0x28
 80028e8:	f7fe f894 	bl	8000a14 <malloc>
 80028ec:	4603      	mov	r3, r0
 80028ee:	617b      	str	r3, [r7, #20]
		if( pxNewTimer != NULL )
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d016      	beq.n	8002924 <xTimerCreate+0x5c>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
 80028f6:	f000 fa7b 	bl	8002df0 <prvCheckForValidListAndQueue>
	
			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	6a3a      	ldr	r2, [r7, #32]
 8002916:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f103 0304 	add.w	r3, r3, #4
 800291e:	4618      	mov	r0, r3
 8002920:	f001 fd38 	bl	8004394 <vListInitialiseItem>
		{
			traceTIMER_CREATE_FAILED();
		}
	}
	
	return ( xTimerHandle ) pxNewTimer;
 8002924:	697b      	ldr	r3, [r7, #20]
}
 8002926:	4618      	mov	r0, r3
 8002928:	f107 0718 	add.w	r7, r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002944:	f240 63e8 	movw	r3, #1768	; 0x6e8
 8002948:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d03d      	beq.n	80029ce <xTimerGenericCommand+0x9e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d125      	bne.n	80029b0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002964:	f001 f8e2 	bl	8003b2c <xTaskGetSchedulerState>
 8002968:	4603      	mov	r3, r0
 800296a:	2b01      	cmp	r3, #1
 800296c:	d10f      	bne.n	800298e <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 800296e:	f240 63e8 	movw	r3, #1768	; 0x6e8
 8002972:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f107 0310 	add.w	r3, r7, #16
 800297e:	4619      	mov	r1, r3
 8002980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	f001 fa11 	bl	8003dac <xQueueGenericSend>
 800298a:	61f8      	str	r0, [r7, #28]
 800298c:	e01f      	b.n	80029ce <xTimerGenericCommand+0x9e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800298e:	f240 63e8 	movw	r3, #1768	; 0x6e8
 8002992:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f107 0310 	add.w	r3, r7, #16
 800299e:	4619      	mov	r1, r3
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	f001 fa00 	bl	8003dac <xQueueGenericSend>
 80029ac:	61f8      	str	r0, [r7, #28]
 80029ae:	e00e      	b.n	80029ce <xTimerGenericCommand+0x9e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80029b0:	f240 63e8 	movw	r3, #1768	; 0x6e8
 80029b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f107 0310 	add.w	r3, r7, #16
 80029c0:	4619      	mov	r1, r3
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	f001 fa80 	bl	8003ecc <xQueueGenericSendFromISR>
 80029cc:	61f8      	str	r0, [r7, #28]
		}
		
		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}
	
	return xReturn;
 80029ce:	69fb      	ldr	r3, [r7, #28]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	f107 0720 	add.w	r7, r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop

080029dc <prvProcessExpiredTimer>:
	
#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80029e6:	f240 63e0 	movw	r3, #1760	; 0x6e0
 80029ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	60fb      	str	r3, [r7, #12]
	vListRemove( &( pxTimer->xTimerListItem ) );
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f103 0304 	add.w	r3, r3, #4
 80029fc:	4618      	mov	r0, r3
 80029fe:	f001 fd39 	bl	8004474 <vListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d118      	bne.n	8002a3c <prvProcessExpiredTimer+0x60>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	18d3      	adds	r3, r2, r3
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	4619      	mov	r1, r3
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f000 f8b7 	bl	8002b8c <prvInsertTimerInActiveList>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d10b      	bne.n	8002a3c <prvProcessExpiredTimer+0x60>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f04f 0100 	mov.w	r1, #0
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	f7ff ff7b 	bl	8002930 <xTimerGenericCommand>
 8002a3a:	60b8      	str	r0, [r7, #8]
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	4798      	blx	r3
}
 8002a44:	f107 0710 	add.w	r7, r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002a54:	f107 0308 	add.w	r3, r7, #8
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 f843 	bl	8002ae4 <prvGetNextExpireTime>
 8002a5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	4619      	mov	r1, r3
 8002a66:	f000 f803 	bl	8002a70 <prvProcessTimerOrBlockTask>
		
		/* Empty the command queue. */
		prvProcessReceivedCommands();		
 8002a6a:	f000 f8d9 	bl	8002c20 <prvProcessReceivedCommands>
	}
 8002a6e:	e7f1      	b.n	8002a54 <prvTimerTask+0x8>

08002a70 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002a7a:	f000 fb51 	bl	8003120 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002a7e:	f107 0308 	add.w	r3, r7, #8
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f856 	bl	8002b34 <prvSampleTimeNow>
 8002a88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d121      	bne.n	8002ad4 <prvProcessTimerOrBlockTask+0x64>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10a      	bne.n	8002aac <prvProcessTimerOrBlockTask+0x3c>
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d806      	bhi.n	8002aac <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
 8002a9e:	f000 fb51 	bl	8003144 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	68f9      	ldr	r1, [r7, #12]
 8002aa6:	f7ff ff99 	bl	80029dc <prvProcessExpiredTimer>
 8002aaa:	e017      	b.n	8002adc <prvProcessTimerOrBlockTask+0x6c>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8002aac:	f240 63e8 	movw	r3, #1768	; 0x6e8
 8002ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1acb      	subs	r3, r1, r3
 8002abc:	4610      	mov	r0, r2
 8002abe:	4619      	mov	r1, r3
 8002ac0:	f001 fc1a 	bl	80042f8 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8002ac4:	f000 fb3e 	bl	8003144 <xTaskResumeAll>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d105      	bne.n	8002ada <prvProcessTimerOrBlockTask+0x6a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8002ace:	f001 fd83 	bl	80045d8 <vPortYieldFromISR>
 8002ad2:	e002      	b.n	8002ada <prvProcessTimerOrBlockTask+0x6a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
 8002ad4:	f000 fb36 	bl	8003144 <xTaskResumeAll>
 8002ad8:	e000      	b.n	8002adc <prvProcessTimerOrBlockTask+0x6c>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8002ada:	bf00      	nop
		else
		{
			xTaskResumeAll();
		}
	}
}
 8002adc:	f107 0710 	add.w	r7, r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002aec:	f240 63e0 	movw	r3, #1760	; 0x6e0
 8002af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf14      	ite	ne
 8002afc:	2200      	movne	r2, #0
 8002afe:	2201      	moveq	r2, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d108      	bne.n	8002b1e <prvGetNextExpireTime+0x3a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002b0c:	f240 63e0 	movw	r3, #1760	; 0x6e0
 8002b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	e002      	b.n	8002b24 <prvGetNextExpireTime+0x40>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002b24:	68fb      	ldr	r3, [r7, #12]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	f107 0714 	add.w	r7, r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop

08002b34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
 8002b3c:	f000 fbac 	bl	8003298 <xTaskGetTickCount>
 8002b40:	60f8      	str	r0, [r7, #12]
	
	if( xTimeNow < xLastTime )
 8002b42:	f240 63ec 	movw	r3, #1772	; 0x6ec
 8002b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d20c      	bcs.n	8002b6c <prvSampleTimeNow+0x38>
	{
		prvSwitchTimerLists( xLastTime );
 8002b52:	f240 63ec 	movw	r3, #1772	; 0x6ec
 8002b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 f8d9 	bl	8002d14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f04f 0201 	mov.w	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e003      	b.n	8002b74 <prvSampleTimeNow+0x40>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
	}
	
	xLastTime = xTimeNow;
 8002b74:	f240 63ec 	movw	r3, #1772	; 0x6ec
 8002b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	601a      	str	r2, [r3, #0]
	
	return xTimeNow;
 8002b80:	68fb      	ldr	r3, [r7, #12]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	f107 0710 	add.w	r7, r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
 8002b98:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	611a      	str	r2, [r3, #16]
	
	if( xNextExpiryTime <= xTimeNow )
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d817      	bhi.n	8002be4 <prvInsertTimerInActiveList+0x58>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	1ad2      	subs	r2, r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d303      	bcc.n	8002bca <prvInsertTimerInActiveList+0x3e>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002bc2:	f04f 0301 	mov.w	r3, #1
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	e024      	b.n	8002c14 <prvInsertTimerInActiveList+0x88>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002bca:	f240 63e4 	movw	r3, #1764	; 0x6e4
 8002bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f103 0304 	add.w	r3, r3, #4
 8002bda:	4610      	mov	r0, r2
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f001 fc0f 	bl	8004400 <vListInsert>
 8002be2:	e017      	b.n	8002c14 <prvInsertTimerInActiveList+0x88>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d207      	bcs.n	8002bfc <prvInsertTimerInActiveList+0x70>
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d303      	bcc.n	8002bfc <prvInsertTimerInActiveList+0x70>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002bf4:	f04f 0301 	mov.w	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
 8002bfa:	e00b      	b.n	8002c14 <prvInsertTimerInActiveList+0x88>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002bfc:	f240 63e0 	movw	r3, #1760	; 0x6e0
 8002c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f103 0304 	add.w	r3, r3, #4
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	f001 fbf6 	bl	8004400 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002c14:	697b      	ldr	r3, [r7, #20]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	f107 0718 	add.w	r7, r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	; 0x28
 8002c24:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002c26:	f107 0304 	add.w	r3, r7, #4
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff ff82 	bl	8002b34 <prvSampleTimeNow>
 8002c30:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002c32:	e058      	b.n	8002ce6 <prvProcessReceivedCommands+0xc6>
	{
		pxTimer = xMessage.pxTimer;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <prvProcessReceivedCommands+0x32>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <prvProcessReceivedCommands+0x32>
			{
				/* The timer is in a list, remove it. */
				vListRemove( &( pxTimer->xTimerListItem ) );
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	f103 0304 	add.w	r3, r3, #4
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f001 fc11 	bl	8004474 <vListRemove>
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );
		
		switch( xMessage.xMessageID )
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d843      	bhi.n	8002ce0 <prvProcessReceivedCommands+0xc0>
 8002c58:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <prvProcessReceivedCommands+0x40>)
 8002c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5e:	bf00      	nop
 8002c60:	08002c71 	.word	0x08002c71
 8002c64:	08002ce1 	.word	0x08002ce1
 8002c68:	08002cbd 	.word	0x08002cbd
 8002c6c:	08002cd9 	.word	0x08002cd9
		{
			case tmrCOMMAND_START :	
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	18d2      	adds	r2, r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	69b8      	ldr	r0, [r7, #24]
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	69fa      	ldr	r2, [r7, #28]
 8002c80:	f7ff ff84 	bl	8002b8c <prvInsertTimerInActiveList>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d12c      	bne.n	8002ce4 <prvProcessReceivedCommands+0xc4>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	69b8      	ldr	r0, [r7, #24]
 8002c90:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d124      	bne.n	8002ce4 <prvProcessReceivedCommands+0xc4>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	18d3      	adds	r3, r2, r3
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	9200      	str	r2, [sp, #0]
 8002ca8:	69b8      	ldr	r0, [r7, #24]
 8002caa:	f04f 0100 	mov.w	r1, #0
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	f7ff fe3c 	bl	8002930 <xTimerGenericCommand>
 8002cb8:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
						( void ) xResult;
					}
				}
				break;
 8002cba:	e013      	b.n	8002ce4 <prvProcessReceivedCommands+0xc4>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	699a      	ldr	r2, [r3, #24]
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	18d3      	adds	r3, r2, r3
 8002cca:	69b8      	ldr	r0, [r7, #24]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f7ff ff5b 	bl	8002b8c <prvInsertTimerInActiveList>
				break;
 8002cd6:	e006      	b.n	8002ce6 <prvProcessReceivedCommands+0xc6>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 8002cd8:	69b8      	ldr	r0, [r7, #24]
 8002cda:	f7fd fea3 	bl	8000a24 <free>
				break;
 8002cde:	e002      	b.n	8002ce6 <prvProcessReceivedCommands+0xc6>

			default	:			
				/* Don't expect to get here. */
				break;
 8002ce0:	bf00      	nop
 8002ce2:	e000      	b.n	8002ce6 <prvProcessReceivedCommands+0xc6>
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
						configASSERT( xResult );
						( void ) xResult;
					}
				}
				break;
 8002ce4:	bf00      	nop

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002ce6:	f240 63e8 	movw	r3, #1768	; 0x6e8
 8002cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f107 0308 	add.w	r3, r7, #8
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	f001 f92c 	bl	8003f5c <xQueueGenericReceive>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d194      	bne.n	8002c34 <prvProcessReceivedCommands+0x14>
			default	:			
				/* Don't expect to get here. */
				break;
		}
	}
}
 8002d0a:	f107 0720 	add.w	r7, r7, #32
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop

08002d14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	; 0x28
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	6078      	str	r0, [r7, #4]
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d1c:	e045      	b.n	8002daa <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d1e:	f240 63e0 	movw	r3, #1760	; 0x6e0
 8002d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d2e:	f240 63e0 	movw	r3, #1760	; 0x6e0
 8002d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	61bb      	str	r3, [r7, #24]
		vListRemove( &( pxTimer->xTimerListItem ) );
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	f103 0304 	add.w	r3, r3, #4
 8002d44:	4618      	mov	r0, r3
 8002d46:	f001 fb95 	bl	8004474 <vListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	69b8      	ldr	r0, [r7, #24]
 8002d50:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d127      	bne.n	8002daa <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	18d3      	adds	r3, r2, r3
 8002d62:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d912      	bls.n	8002d92 <prvSwitchTimerLists+0x7e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002d78:	f240 63e0 	movw	r3, #1760	; 0x6e0
 8002d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f103 0304 	add.w	r3, r3, #4
 8002d88:	4610      	mov	r0, r2
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f001 fb38 	bl	8004400 <vListInsert>
 8002d90:	e00b      	b.n	8002daa <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	69b8      	ldr	r0, [r7, #24]
 8002d9a:	f04f 0100 	mov.w	r1, #0
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	f7ff fdc4 	bl	8002930 <xTimerGenericCommand>
 8002da8:	6138      	str	r0, [r7, #16]
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002daa:	f240 63e0 	movw	r3, #1760	; 0x6e0
 8002dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1b1      	bne.n	8002d1e <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 8002dba:	f240 63e0 	movw	r3, #1760	; 0x6e0
 8002dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 8002dc6:	f240 63e4 	movw	r3, #1764	; 0x6e4
 8002dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	f240 63e0 	movw	r3, #1760	; 0x6e0
 8002dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dd8:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8002dda:	f240 63e4 	movw	r3, #1764	; 0x6e4
 8002dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	601a      	str	r2, [r3, #0]
}
 8002de6:	f107 0720 	add.w	r7, r7, #32
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop

08002df0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002df4:	f001 fbfc 	bl	80045f0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002df8:	f240 63e8 	movw	r3, #1768	; 0x6e8
 8002dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d129      	bne.n	8002e5a <prvCheckForValidListAndQueue+0x6a>
		{
			vListInitialise( &xActiveTimerList1 );
 8002e06:	f240 60b8 	movw	r0, #1720	; 0x6b8
 8002e0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e0e:	f001 faa1 	bl	8004354 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002e12:	f240 60cc 	movw	r0, #1740	; 0x6cc
 8002e16:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e1a:	f001 fa9b 	bl	8004354 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002e1e:	f240 63e0 	movw	r3, #1760	; 0x6e0
 8002e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e26:	f240 62b8 	movw	r2, #1720	; 0x6b8
 8002e2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002e2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002e30:	f240 63e4 	movw	r3, #1764	; 0x6e4
 8002e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e38:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8002e3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002e40:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 8002e42:	f04f 000a 	mov.w	r0, #10
 8002e46:	f04f 010c 	mov.w	r1, #12
 8002e4a:	f000 ff47 	bl	8003cdc <xQueueCreate>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	f240 63e8 	movw	r3, #1768	; 0x6e8
 8002e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e58:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 8002e5a:	f001 fbdf 	bl	800461c <vPortExitCritical>
}
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerIsTimerActive( xTimerHandle xTimer )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
portBASE_TYPE xTimerIsInActiveList;
xTIMER *pxTimer = ( xTIMER * ) xTimer;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	60fb      	str	r3, [r7, #12]

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8002e6c:	f001 fbc0 	bl	80045f0 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf0c      	ite	eq
 8002e78:	2300      	moveq	r3, #0
 8002e7a:	2301      	movne	r3, #1
 8002e7c:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8002e7e:	f001 fbcd 	bl	800461c <vPortExitCritical>

	return xTimerIsInActiveList;
 8002e82:	68bb      	ldr	r3, [r7, #8]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	f107 0710 	add.w	r7, r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop

08002e90 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08a      	sub	sp, #40	; 0x28
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ea6:	f000 fde7 	bl	8003a78 <prvAllocateTCBAndStack>
 8002eaa:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 80a5 	beq.w	8002ffe <xTaskGenericCreate+0x16e>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb8:	88fb      	ldrh	r3, [r7, #6]
 8002eba:	f103 33ff 	add.w	r3, r3, #4294967295
 8002ebe:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002ec2:	18d3      	adds	r3, r2, r3
 8002ec4:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f023 0307 	bic.w	r3, r3, #7
 8002ecc:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	69b8      	ldr	r0, [r7, #24]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eda:	f000 fca5 	bl	8003828 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ede:	6978      	ldr	r0, [r7, #20]
 8002ee0:	68f9      	ldr	r1, [r7, #12]
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	f001 faf0 	bl	80044c8 <pxPortInitialiseStack>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
 8002eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8002ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 8002efa:	f001 fb79 	bl	80045f0 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8002efe:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8002f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f103 0201 	add.w	r2, r3, #1
 8002f0c:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8002f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f14:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8002f16:	f240 63f0 	movw	r3, #1776	; 0x6f0
 8002f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10f      	bne.n	8002f44 <xTaskGenericCreate+0xb4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8002f24:	f240 63f0 	movw	r3, #1776	; 0x6f0
 8002f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 8002f30:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8002f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d118      	bne.n	8002f70 <xTaskGenericCreate+0xe0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8002f3e:	f000 fcb7 	bl	80038b0 <prvInitialiseTaskLists>
 8002f42:	e015      	b.n	8002f70 <xTaskGenericCreate+0xe0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8002f44:	f240 73dc 	movw	r3, #2012	; 0x7dc
 8002f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10e      	bne.n	8002f70 <xTaskGenericCreate+0xe0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8002f52:	f240 63f0 	movw	r3, #1776	; 0x6f0
 8002f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d805      	bhi.n	8002f70 <xTaskGenericCreate+0xe0>
					{
						pxCurrentTCB = pxNewTCB;
 8002f64:	f240 63f0 	movw	r3, #1776	; 0x6f0
 8002f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f74:	f240 73d4 	movw	r3, #2004	; 0x7d4
 8002f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d906      	bls.n	8002f90 <xTaskGenericCreate+0x100>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f86:	f240 73d4 	movw	r3, #2004	; 0x7d4
 8002f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f8e:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
 8002f90:	f240 73f0 	movw	r3, #2032	; 0x7f0
 8002f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f103 0201 	add.w	r2, r3, #1
 8002f9e:	f240 73f0 	movw	r3, #2032	; 0x7f0
 8002fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fa6:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fac:	f240 73d8 	movw	r3, #2008	; 0x7d8
 8002fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d906      	bls.n	8002fc8 <xTaskGenericCreate+0x138>
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fbe:	f240 73d8 	movw	r3, #2008	; 0x7d8
 8002fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fcc:	4613      	mov	r3, r2
 8002fce:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002fd2:	189b      	adds	r3, r3, r2
 8002fd4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002fd8:	461a      	mov	r2, r3
 8002fda:	f240 63f4 	movw	r3, #1780	; 0x6f4
 8002fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fe2:	18d2      	adds	r2, r2, r3
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	f103 0304 	add.w	r3, r3, #4
 8002fea:	4610      	mov	r0, r2
 8002fec:	4619      	mov	r1, r3
 8002fee:	f001 f9df 	bl	80043b0 <vListInsertEnd>

			xReturn = pdPASS;
 8002ff2:	f04f 0301 	mov.w	r3, #1
 8002ff6:	61fb      	str	r3, [r7, #28]
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8002ff8:	f001 fb10 	bl	800461c <vPortExitCritical>
 8002ffc:	e002      	b.n	8003004 <xTaskGenericCreate+0x174>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8003002:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d111      	bne.n	800302e <xTaskGenericCreate+0x19e>
	{
		if( xSchedulerRunning != pdFALSE )
 800300a:	f240 73dc 	movw	r3, #2012	; 0x7dc
 800300e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <xTaskGenericCreate+0x19e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8003018:	f240 63f0 	movw	r3, #1776	; 0x6f0
 800301c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003026:	429a      	cmp	r2, r3
 8003028:	d201      	bcs.n	800302e <xTaskGenericCreate+0x19e>
			{
				portYIELD_WITHIN_API();
 800302a:	f001 fad5 	bl	80045d8 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 800302e:	69fb      	ldr	r3, [r7, #28]
}
 8003030:	4618      	mov	r0, r3
 8003032:	f107 0720 	add.w	r7, r7, #32
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop

0800303c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d019      	beq.n	8003084 <vTaskDelay+0x48>
		{
			vTaskSuspendAll();
 8003050:	f000 f866 	bl	8003120 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8003054:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8003058:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	18d3      	adds	r3, r2, r3
 8003062:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8003064:	f240 63f0 	movw	r3, #1776	; 0x6f0
 8003068:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f103 0304 	add.w	r3, r3, #4
 8003072:	4618      	mov	r0, r3
 8003074:	f001 f9fe 	bl	8004474 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003078:	68b8      	ldr	r0, [r7, #8]
 800307a:	f000 fcb7 	bl	80039ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800307e:	f000 f861 	bl	8003144 <xTaskResumeAll>
 8003082:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
 800308a:	f001 faa5 	bl	80045d8 <vPortYieldFromISR>
		}
	}
 800308e:	f107 0710 	add.w	r7, r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop

08003098 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af04      	add	r7, sp, #16
	/* Add the idle task at the lowest priority. */
	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
	{
		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
		be returned by the xTaskGetIdleTaskHandle() function. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	f240 73c8 	movw	r3, #1992	; 0x7c8
 80030a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	9302      	str	r3, [sp, #8]
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	9303      	str	r3, [sp, #12]
 80030ba:	f643 0005 	movw	r0, #14341	; 0x3805
 80030be:	f6c0 0000 	movt	r0, #2048	; 0x800
 80030c2:	f645 118c 	movw	r1, #22924	; 0x598c
 80030c6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80030ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	f7ff fedd 	bl	8002e90 <xTaskGenericCreate>
 80030d6:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d102      	bne.n	80030e4 <vTaskStartScheduler+0x4c>
		{
			xReturn = xTimerCreateTimerTask();
 80030de:	f7ff fbc3 	bl	8002868 <xTimerCreateTimerTask>
 80030e2:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d115      	bne.n	8003116 <vTaskStartScheduler+0x7e>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 80030ea:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80030ee:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
 80030f2:	f240 73dc 	movw	r3, #2012	; 0x7dc
 80030f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030fa:	f04f 0201 	mov.w	r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8003100:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8003104:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800310e:	f7fe fa1d 	bl	800154c <init_us_timer>
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003112:	f001 fa29 	bl	8004568 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
 8003116:	f107 0708 	add.w	r7, r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop

08003120 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8003124:	f240 73e0 	movw	r3, #2016	; 0x7e0
 8003128:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f103 0201 	add.w	r2, r3, #1
 8003132:	f240 73e0 	movw	r3, #2016	; 0x7e0
 8003136:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800313a:	601a      	str	r2, [r3, #0]
}
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop

08003144 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003150:	f001 fa4e 	bl	80045f0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003154:	f240 73e0 	movw	r3, #2016	; 0x7e0
 8003158:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f103 32ff 	add.w	r2, r3, #4294967295
 8003162:	f240 73e0 	movw	r3, #2016	; 0x7e0
 8003166:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800316a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 800316c:	f240 73e0 	movw	r3, #2016	; 0x7e0
 8003170:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	f040 8085 	bne.w	8003286 <xTaskResumeAll+0x142>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 800317c:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8003180:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d07d      	beq.n	8003286 <xTaskResumeAll+0x142>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8003190:	e03c      	b.n	800320c <xTaskResumeAll+0xc8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8003192:	f240 7388 	movw	r3, #1928	; 0x788
 8003196:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
 800319e:	f104 0318 	add.w	r3, r4, #24
 80031a2:	4618      	mov	r0, r3
 80031a4:	f001 f966 	bl	8004474 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 80031a8:	f104 0304 	add.w	r3, r4, #4
 80031ac:	4618      	mov	r0, r3
 80031ae:	f001 f961 	bl	8004474 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 80031b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80031b4:	f240 73d8 	movw	r3, #2008	; 0x7d8
 80031b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d905      	bls.n	80031ce <xTaskResumeAll+0x8a>
 80031c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80031c4:	f240 73d8 	movw	r3, #2008	; 0x7d8
 80031c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80031d0:	4613      	mov	r3, r2
 80031d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80031d6:	189b      	adds	r3, r3, r2
 80031d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80031dc:	461a      	mov	r2, r3
 80031de:	f240 63f4 	movw	r3, #1780	; 0x6f4
 80031e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031e6:	18d2      	adds	r2, r2, r3
 80031e8:	f104 0304 	add.w	r3, r4, #4
 80031ec:	4610      	mov	r0, r2
 80031ee:	4619      	mov	r1, r3
 80031f0:	f001 f8de 	bl	80043b0 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80031f6:	f240 63f0 	movw	r3, #1776	; 0x6f0
 80031fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	429a      	cmp	r2, r3
 8003204:	d302      	bcc.n	800320c <xTaskResumeAll+0xc8>
					{
						xYieldRequired = pdTRUE;
 8003206:	f04f 0301 	mov.w	r3, #1
 800320a:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 800320c:	f240 7388 	movw	r3, #1928	; 0x788
 8003210:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1bb      	bne.n	8003192 <xTaskResumeAll+0x4e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 800321a:	f240 73e4 	movw	r3, #2020	; 0x7e4
 800321e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d018      	beq.n	800325a <xTaskResumeAll+0x116>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8003228:	e00d      	b.n	8003246 <xTaskResumeAll+0x102>
					{
						vTaskIncrementTick();
 800322a:	f000 f849 	bl	80032c0 <vTaskIncrementTick>
						--uxMissedTicks;
 800322e:	f240 73e4 	movw	r3, #2020	; 0x7e4
 8003232:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f103 32ff 	add.w	r2, r3, #4294967295
 800323c:	f240 73e4 	movw	r3, #2020	; 0x7e4
 8003240:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003244:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8003246:	f240 73e4 	movw	r3, #2020	; 0x7e4
 800324a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ea      	bne.n	800322a <xTaskResumeAll+0xe6>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 8003254:	f04f 0301 	mov.w	r3, #1
 8003258:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d006      	beq.n	800326e <xTaskResumeAll+0x12a>
 8003260:	f240 73e8 	movw	r3, #2024	; 0x7e8
 8003264:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d10b      	bne.n	8003286 <xTaskResumeAll+0x142>
				{
					xAlreadyYielded = pdTRUE;
 800326e:	f04f 0301 	mov.w	r3, #1
 8003272:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 8003274:	f240 73e8 	movw	r3, #2024	; 0x7e8
 8003278:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 8003282:	f001 f9a9 	bl	80045d8 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8003286:	f001 f9c9 	bl	800461c <vPortExitCritical>

	return xAlreadyYielded;
 800328a:	687b      	ldr	r3, [r7, #4]
}
 800328c:	4618      	mov	r0, r3
 800328e:	f107 070c 	add.w	r7, r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	bd90      	pop	{r4, r7, pc}
 8003296:	bf00      	nop

08003298 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 800329e:	f001 f9a7 	bl	80045f0 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 80032a2:	f240 73d0 	movw	r3, #2000	; 0x7d0
 80032a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 80032ae:	f001 f9b5 	bl	800461c <vPortExitCritical>

	return xTicks;
 80032b2:	687b      	ldr	r3, [r7, #4]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	f107 0708 	add.w	r7, r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop

080032c0 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80032c6:	f240 73e0 	movw	r3, #2016	; 0x7e0
 80032ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f040 80c0 	bne.w	8003456 <vTaskIncrementTick+0x196>
	{
		++xTickCount;
 80032d6:	f240 73d0 	movw	r3, #2000	; 0x7d0
 80032da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f103 0201 	add.w	r2, r3, #1
 80032e4:	f240 73d0 	movw	r3, #2000	; 0x7d0
 80032e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032ec:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 80032ee:	f240 73d0 	movw	r3, #2000	; 0x7d0
 80032f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d140      	bne.n	800337e <vTaskIncrementTick+0xbe>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
 80032fc:	f240 7380 	movw	r3, #1920	; 0x780
 8003300:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8003308:	f240 7384 	movw	r3, #1924	; 0x784
 800330c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	f240 7380 	movw	r3, #1920	; 0x780
 8003316:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800331a:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 800331c:	f240 7384 	movw	r3, #1924	; 0x784
 8003320:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
 8003328:	f240 73ec 	movw	r3, #2028	; 0x7ec
 800332c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f103 0201 	add.w	r2, r3, #1
 8003336:	f240 73ec 	movw	r3, #2028	; 0x7ec
 800333a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800333e:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003340:	f240 7380 	movw	r3, #1920	; 0x780
 8003344:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d107      	bne.n	8003360 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8003350:	f240 532c 	movw	r3, #1324	; 0x52c
 8003354:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003358:	f04f 32ff 	mov.w	r2, #4294967295
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	e00e      	b.n	800337e <vTaskIncrementTick+0xbe>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003360:	f240 7380 	movw	r3, #1920	; 0x780
 8003364:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	f240 532c 	movw	r3, #1324	; 0x52c
 8003378:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800337c:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 800337e:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8003382:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	f240 532c 	movw	r3, #1324	; 0x52c
 800338c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d36b      	bcc.n	800346e <vTaskIncrementTick+0x1ae>
 8003396:	f240 7380 	movw	r3, #1920	; 0x780
 800339a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d107      	bne.n	80033b6 <vTaskIncrementTick+0xf6>
 80033a6:	f240 532c 	movw	r3, #1324	; 0x52c
 80033aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033ae:	f04f 32ff 	mov.w	r2, #4294967295
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	e05b      	b.n	800346e <vTaskIncrementTick+0x1ae>
 80033b6:	f240 7380 	movw	r3, #1920	; 0x780
 80033ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	607b      	str	r3, [r7, #4]
 80033cc:	f240 73d0 	movw	r3, #2000	; 0x7d0
 80033d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d206      	bcs.n	80033ea <vTaskIncrementTick+0x12a>
 80033dc:	f240 532c 	movw	r3, #1324	; 0x52c
 80033e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	e041      	b.n	800346e <vTaskIncrementTick+0x1ae>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f103 0304 	add.w	r3, r3, #4
 80033f0:	4618      	mov	r0, r3
 80033f2:	f001 f83f 	bl	8004474 <vListRemove>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <vTaskIncrementTick+0x14a>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f103 0318 	add.w	r3, r3, #24
 8003404:	4618      	mov	r0, r3
 8003406:	f001 f835 	bl	8004474 <vListRemove>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340e:	f240 73d8 	movw	r3, #2008	; 0x7d8
 8003412:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d906      	bls.n	800342a <vTaskIncrementTick+0x16a>
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003420:	f240 73d8 	movw	r3, #2008	; 0x7d8
 8003424:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342e:	4613      	mov	r3, r2
 8003430:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003434:	189b      	adds	r3, r3, r2
 8003436:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800343a:	461a      	mov	r2, r3
 800343c:	f240 63f4 	movw	r3, #1780	; 0x6f4
 8003440:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003444:	18d2      	adds	r2, r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	f103 0304 	add.w	r3, r3, #4
 800344c:	4610      	mov	r0, r2
 800344e:	4619      	mov	r1, r3
 8003450:	f000 ffae 	bl	80043b0 <vListInsertEnd>
 8003454:	e79f      	b.n	8003396 <vTaskIncrementTick+0xd6>
	}
	else
	{
		++uxMissedTicks;
 8003456:	f240 73e4 	movw	r3, #2020	; 0x7e4
 800345a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f103 0201 	add.w	r2, r3, #1
 8003464:	f240 73e4 	movw	r3, #2020	; 0x7e4
 8003468:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800346c:	601a      	str	r2, [r3, #0]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
 800346e:	f107 0710 	add.w	r7, r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop

08003478 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 800347e:	f240 73e0 	movw	r3, #2016	; 0x7e0
 8003482:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 800348c:	f240 73e8 	movw	r3, #2024	; 0x7e8
 8003490:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003494:	f04f 0201 	mov.w	r2, #1
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e071      	b.n	8003580 <vTaskSwitchContext+0x108>
			unsigned long ulTempCounter;
			
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
				#else
					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
 800349c:	f7fe f810 	bl	80014c0 <get_us_time>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4613      	mov	r3, r2
 80034a6:	607b      	str	r3, [r7, #4]
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
 80034a8:	f240 63f0 	movw	r3, #1776	; 0x6f0
 80034ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80034b4:	f240 73f4 	movw	r3, #2036	; 0x7f4
 80034b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	1ac3      	subs	r3, r0, r3
 80034c2:	18cb      	adds	r3, r1, r3
 80034c4:	64d3      	str	r3, [r2, #76]	; 0x4c
				ulTaskSwitchedInTime = ulTempCounter;
 80034c6:	f240 73f4 	movw	r3, #2036	; 0x7f4
 80034ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 80034d2:	e00b      	b.n	80034ec <vTaskSwitchContext+0x74>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 80034d4:	f240 73d8 	movw	r3, #2008	; 0x7d8
 80034d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f103 32ff 	add.w	r2, r3, #4294967295
 80034e2:	f240 73d8 	movw	r3, #2008	; 0x7d8
 80034e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034ea:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 80034ec:	f240 73d8 	movw	r3, #2008	; 0x7d8
 80034f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4613      	mov	r3, r2
 80034f8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80034fc:	189b      	adds	r3, r3, r2
 80034fe:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003502:	461a      	mov	r2, r3
 8003504:	f240 63f4 	movw	r3, #1780	; 0x6f4
 8003508:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800350c:	18d3      	adds	r3, r2, r3
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0df      	beq.n	80034d4 <vTaskSwitchContext+0x5c>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 8003514:	f240 73d8 	movw	r3, #2008	; 0x7d8
 8003518:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4613      	mov	r3, r2
 8003520:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003524:	189b      	adds	r3, r3, r2
 8003526:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800352a:	461a      	mov	r2, r3
 800352c:	f240 63f4 	movw	r3, #1780	; 0x6f4
 8003530:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003534:	18d3      	adds	r3, r2, r3
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	f103 0308 	add.w	r3, r3, #8
 800354c:	429a      	cmp	r2, r3
 800354e:	d104      	bne.n	800355a <vTaskSwitchContext+0xe2>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	f240 63f0 	movw	r3, #1776	; 0x6f0
 8003564:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003568:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
 800356a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800356e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003572:	f240 62f0 	movw	r2, #1776	; 0x6f0
 8003576:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800357e:	60da      	str	r2, [r3, #12]
		vWriteTraceToBuffer();
	}
}
 8003580:	f107 0708 	add.w	r7, r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8003592:	f240 63f0 	movw	r3, #1776	; 0x6f0
 8003596:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f103 0318 	add.w	r3, r3, #24
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4619      	mov	r1, r3
 80035a4:	f000 ff2c 	bl	8004400 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80035a8:	f240 63f0 	movw	r3, #1776	; 0x6f0
 80035ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f103 0304 	add.w	r3, r3, #4
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 ff5c 	bl	8004474 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	d10e      	bne.n	80035e2 <vTaskPlaceOnEventList+0x5a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80035c4:	f240 63f0 	movw	r3, #1776	; 0x6f0
 80035c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f103 0304 	add.w	r3, r3, #4
 80035d2:	f240 70b4 	movw	r0, #1972	; 0x7b4
 80035d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80035da:	4619      	mov	r1, r3
 80035dc:	f000 fee8 	bl	80043b0 <vListInsertEnd>
 80035e0:	e00a      	b.n	80035f8 <vTaskPlaceOnEventList+0x70>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 80035e2:	f240 73d0 	movw	r3, #2000	; 0x7d0
 80035e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	18d3      	adds	r3, r2, r3
 80035f0:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f9fa 	bl	80039ec <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 80035f8:	f107 0710 	add.w	r7, r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
	
		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 800360a:	f240 63f0 	movw	r3, #1776	; 0x6f0
 800360e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f103 0318 	add.w	r3, r3, #24
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	4619      	mov	r1, r3
 800361c:	f000 fec8 	bl	80043b0 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8003620:	f240 63f0 	movw	r3, #1776	; 0x6f0
 8003624:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f103 0304 	add.w	r3, r3, #4
 800362e:	4618      	mov	r0, r3
 8003630:	f000 ff20 	bl	8004474 <vListRemove>

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8003634:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8003638:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	18d3      	adds	r3, r2, r3
 8003642:	60fb      	str	r3, [r7, #12]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f9d1 	bl	80039ec <prvAddCurrentTaskToDelayedList>
	}
 800364a:	f107 0710 	add.w	r7, r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop

08003654 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f103 0318 	add.w	r3, r3, #24
 800366a:	4618      	mov	r0, r3
 800366c:	f000 ff02 	bl	8004474 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8003670:	f240 73e0 	movw	r3, #2016	; 0x7e0
 8003674:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d12b      	bne.n	80036d6 <xTaskRemoveFromEventList+0x82>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f103 0304 	add.w	r3, r3, #4
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fef5 	bl	8004474 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368e:	f240 73d8 	movw	r3, #2008	; 0x7d8
 8003692:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d906      	bls.n	80036aa <xTaskRemoveFromEventList+0x56>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a0:	f240 73d8 	movw	r3, #2008	; 0x7d8
 80036a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ae:	4613      	mov	r3, r2
 80036b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80036b4:	189b      	adds	r3, r3, r2
 80036b6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80036ba:	461a      	mov	r2, r3
 80036bc:	f240 63f4 	movw	r3, #1780	; 0x6f4
 80036c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036c4:	18d2      	adds	r2, r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f103 0304 	add.w	r3, r3, #4
 80036cc:	4610      	mov	r0, r2
 80036ce:	4619      	mov	r1, r3
 80036d0:	f000 fe6e 	bl	80043b0 <vListInsertEnd>
 80036d4:	e009      	b.n	80036ea <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f103 0318 	add.w	r3, r3, #24
 80036dc:	f240 7088 	movw	r0, #1928	; 0x788
 80036e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80036e4:	4619      	mov	r1, r3
 80036e6:	f000 fe63 	bl	80043b0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ee:	f240 63f0 	movw	r3, #1776	; 0x6f0
 80036f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d303      	bcc.n	8003706 <xTaskRemoveFromEventList+0xb2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 80036fe:	f04f 0301 	mov.w	r3, #1
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e002      	b.n	800370c <xTaskRemoveFromEventList+0xb8>
	}
	else
	{
		xReturn = pdFALSE;
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800370c:	68fb      	ldr	r3, [r7, #12]
}
 800370e:	4618      	mov	r0, r3
 8003710:	f107 0710 	add.w	r7, r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003720:	f240 73ec 	movw	r3, #2028	; 0x7ec
 8003724:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800372e:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8003732:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	605a      	str	r2, [r3, #4]
}
 800373c:	f107 070c 	add.w	r7, r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop

08003748 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8003752:	f000 ff4d 	bl	80045f0 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375e:	d103      	bne.n	8003768 <xTaskCheckForTimeOut+0x20>
			{
				xReturn = pdFALSE;
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	e038      	b.n	80037da <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	f240 73ec 	movw	r3, #2028	; 0x7ec
 8003770:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d00c      	beq.n	8003794 <xTaskCheckForTimeOut+0x4c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8003782:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d803      	bhi.n	8003794 <xTaskCheckForTimeOut+0x4c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 800378c:	f04f 0301 	mov.w	r3, #1
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	e022      	b.n	80037da <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 8003794:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8003798:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	1ad2      	subs	r2, r2, r3
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d213      	bcs.n	80037d4 <xTaskCheckForTimeOut+0x8c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	f240 73d0 	movw	r3, #2000	; 0x7d0
 80037b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	1acb      	subs	r3, r1, r3
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff ffa6 	bl	8003718 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	e002      	b.n	80037da <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 80037d4:	f04f 0301 	mov.w	r3, #1
 80037d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037da:	f000 ff1f 	bl	800461c <vPortExitCritical>

	return xReturn;
 80037de:	68fb      	ldr	r3, [r7, #12]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	f107 0710 	add.w	r7, r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop

080037ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
 80037f0:	f240 73e8 	movw	r3, #2024	; 0x7e8
 80037f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037f8:	f04f 0201 	mov.w	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
}
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr

08003804 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	e000      	b.n	8003810 <prvIdleTask+0xc>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
 800380e:	bf00      	nop
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8003810:	f000 f8a0 	bl	8003954 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8003814:	f240 63f4 	movw	r3, #1780	; 0x6f4
 8003818:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d9f5      	bls.n	800380e <prvIdleTask+0xa>
			{
				taskYIELD();
 8003822:	f000 fed9 	bl	80045d8 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
 8003826:	e7f2      	b.n	800380e <prvIdleTask+0xa>

08003828 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800383c:	4618      	mov	r0, r3
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	f04f 0210 	mov.w	r2, #16
 8003844:	f7fd ff72 	bl	800172c <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b04      	cmp	r3, #4
 8003856:	d902      	bls.n	800385e <prvInitialiseTCBVariables+0x36>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8003858:	f04f 0304 	mov.w	r3, #4
 800385c:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f103 0304 	add.w	r3, r3, #4
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fd8f 	bl	8004394 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f103 0318 	add.w	r3, r3, #24
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fd89 	bl	8004394 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f1c3 0205 	rsb	r2, r3, #5
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxTCB->ulRunTimeCounter = 0UL;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	64da      	str	r2, [r3, #76]	; 0x4c
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
 80038a8:	f107 0710 	add.w	r7, r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	607b      	str	r3, [r7, #4]
 80038bc:	e013      	b.n	80038e6 <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80038c6:	189b      	adds	r3, r3, r2
 80038c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80038cc:	461a      	mov	r2, r3
 80038ce:	f240 63f4 	movw	r3, #1780	; 0x6f4
 80038d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038d6:	18d3      	adds	r3, r2, r3
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fd3b 	bl	8004354 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f103 0301 	add.w	r3, r3, #1
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b04      	cmp	r3, #4
 80038ea:	d9e8      	bls.n	80038be <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 80038ec:	f240 7058 	movw	r0, #1880	; 0x758
 80038f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80038f4:	f000 fd2e 	bl	8004354 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 80038f8:	f240 706c 	movw	r0, #1900	; 0x76c
 80038fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003900:	f000 fd28 	bl	8004354 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 8003904:	f240 7088 	movw	r0, #1928	; 0x788
 8003908:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800390c:	f000 fd22 	bl	8004354 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 8003910:	f240 709c 	movw	r0, #1948	; 0x79c
 8003914:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003918:	f000 fd1c 	bl	8004354 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 800391c:	f240 70b4 	movw	r0, #1972	; 0x7b4
 8003920:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003924:	f000 fd16 	bl	8004354 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003928:	f240 7380 	movw	r3, #1920	; 0x780
 800392c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003930:	f240 7258 	movw	r2, #1880	; 0x758
 8003934:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003938:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800393a:	f240 7384 	movw	r3, #1924	; 0x784
 800393e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003942:	f240 726c 	movw	r2, #1900	; 0x76c
 8003946:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800394a:	601a      	str	r2, [r3, #0]
}
 800394c:	f107 0708 	add.w	r7, r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 800395a:	f240 73b0 	movw	r3, #1968	; 0x7b0
 800395e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d03c      	beq.n	80039e2 <prvCheckTasksWaitingTermination+0x8e>
		{
			vTaskSuspendAll();
 8003968:	f7ff fbda 	bl	8003120 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800396c:	f240 739c 	movw	r3, #1948	; 0x79c
 8003970:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	bf14      	ite	ne
 800397a:	2300      	movne	r3, #0
 800397c:	2301      	moveq	r3, #1
 800397e:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 8003980:	f7ff fbe0 	bl	8003144 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d12b      	bne.n	80039e2 <prvCheckTasksWaitingTermination+0x8e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 800398a:	f000 fe31 	bl	80045f0 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 800398e:	f240 739c 	movw	r3, #1948	; 0x79c
 8003992:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	f103 0304 	add.w	r3, r3, #4
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fd66 	bl	8004474 <vListRemove>
					--uxCurrentNumberOfTasks;
 80039a8:	f240 73cc 	movw	r3, #1996	; 0x7cc
 80039ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f103 32ff 	add.w	r2, r3, #4294967295
 80039b6:	f240 73cc 	movw	r3, #1996	; 0x7cc
 80039ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039be:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 80039c0:	f240 73b0 	movw	r3, #1968	; 0x7b0
 80039c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f103 32ff 	add.w	r2, r3, #4294967295
 80039ce:	f240 73b0 	movw	r3, #1968	; 0x7b0
 80039d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039d6:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 80039d8:	f000 fe20 	bl	800461c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80039dc:	6838      	ldr	r0, [r7, #0]
 80039de:	f000 f885 	bl	8003aec <prvDeleteTCB>
			}
		}
	}
	#endif
}
 80039e2:	f107 0708 	add.w	r7, r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop

080039ec <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80039f4:	f240 63f0 	movw	r3, #1776	; 0x6f0
 80039f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8003a02:	f240 73d0 	movw	r3, #2000	; 0x7d0
 8003a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d210      	bcs.n	8003a34 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8003a12:	f240 7384 	movw	r3, #1924	; 0x784
 8003a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	f240 63f0 	movw	r3, #1776	; 0x6f0
 8003a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f103 0304 	add.w	r3, r3, #4
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f000 fce7 	bl	8004400 <vListInsert>
 8003a32:	e01d      	b.n	8003a70 <prvAddCurrentTaskToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8003a34:	f240 7380 	movw	r3, #1920	; 0x780
 8003a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	f240 63f0 	movw	r3, #1776	; 0x6f0
 8003a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f103 0304 	add.w	r3, r3, #4
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	4619      	mov	r1, r3
 8003a50:	f000 fcd6 	bl	8004400 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8003a54:	f240 532c 	movw	r3, #1324	; 0x52c
 8003a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d205      	bcs.n	8003a70 <prvAddCurrentTaskToDelayedList+0x84>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8003a64:	f240 532c 	movw	r3, #1324	; 0x52c
 8003a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8003a70:	f107 0708 	add.w	r7, r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	6039      	str	r1, [r7, #0]
 8003a82:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8003a84:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a88:	f7fc ffc4 	bl	8000a14 <malloc>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	60fb      	str	r3, [r7, #12]

	if( pxNewTCB != NULL )
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d023      	beq.n	8003ade <prvAllocateTCBAndStack+0x66>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d107      	bne.n	8003aac <prvAllocateTCBAndStack+0x34>
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fc ffb6 	bl	8000a14 <malloc>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	e000      	b.n	8003aae <prvAllocateTCBAndStack+0x36>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <prvAllocateTCBAndStack+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f7fc ffb2 	bl	8000a24 <free>
			pxNewTCB = NULL;
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	e00a      	b.n	8003ade <prvAllocateTCBAndStack+0x66>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f04f 01a5 	mov.w	r1, #165	; 0xa5
 8003ad8:	461a      	mov	r2, r3
 8003ada:	f7fd fd6f 	bl	80015bc <memset>
		}
	}

	return pxNewTCB;
 8003ade:	68fb      	ldr	r3, [r7, #12]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f107 0710 	add.w	r7, r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop

08003aec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fc ff93 	bl	8000a24 <free>
		vPortFree( pxTCB );
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fc ff90 	bl	8000a24 <free>
	}
 8003b04:	f107 0708 	add.w	r7, r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8003b12:	f240 63f0 	movw	r3, #1776	; 0x6f0
 8003b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	607b      	str	r3, [r7, #4]

		return xReturn;
 8003b1e:	687b      	ldr	r3, [r7, #4]
	}
 8003b20:	4618      	mov	r0, r3
 8003b22:	f107 070c 	add.w	r7, r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b32:	f240 73dc 	movw	r3, #2012	; 0x7dc
 8003b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d103      	bne.n	8003b48 <xTaskGetSchedulerState+0x1c>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	607b      	str	r3, [r7, #4]
 8003b46:	e00d      	b.n	8003b64 <xTaskGetSchedulerState+0x38>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8003b48:	f240 73e0 	movw	r3, #2016	; 0x7e0
 8003b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d103      	bne.n	8003b5e <xTaskGetSchedulerState+0x32>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b56:	f04f 0301 	mov.w	r3, #1
 8003b5a:	607b      	str	r3, [r7, #4]
 8003b5c:	e002      	b.n	8003b64 <xTaskGetSchedulerState+0x38>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b5e:	f04f 0302 	mov.w	r3, #2
 8003b62:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b64:	687b      	ldr	r3, [r7, #4]
	}
 8003b66:	4618      	mov	r0, r3
 8003b68:	f107 070c 	add.w	r7, r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop

08003b74 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b84:	f240 63f0 	movw	r3, #1776	; 0x6f0
 8003b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d257      	bcs.n	8003c44 <vTaskPriorityInherit+0xd0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 8003b94:	f240 63f0 	movw	r3, #1776	; 0x6f0
 8003b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	f1c3 0205 	rsb	r2, r3, #5
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6959      	ldr	r1, [r3, #20]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003bb6:	189b      	adds	r3, r3, r2
 8003bb8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f240 63f4 	movw	r3, #1780	; 0x6f4
 8003bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003bc6:	18d3      	adds	r3, r2, r3
 8003bc8:	4299      	cmp	r1, r3
 8003bca:	d133      	bne.n	8003c34 <vTaskPriorityInherit+0xc0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f103 0304 	add.w	r3, r3, #4
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fc4e 	bl	8004474 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003bd8:	f240 63f0 	movw	r3, #1776	; 0x6f0
 8003bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bec:	f240 73d8 	movw	r3, #2008	; 0x7d8
 8003bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d906      	bls.n	8003c08 <vTaskPriorityInherit+0x94>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfe:	f240 73d8 	movw	r3, #2008	; 0x7d8
 8003c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003c12:	189b      	adds	r3, r3, r2
 8003c14:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f240 63f4 	movw	r3, #1780	; 0x6f4
 8003c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c22:	18d2      	adds	r2, r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f103 0304 	add.w	r3, r3, #4
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f000 fbbf 	bl	80043b0 <vListInsertEnd>
 8003c32:	e007      	b.n	8003c44 <vTaskPriorityInherit+0xd0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c34:	f240 63f0 	movw	r3, #1776	; 0x6f0
 8003c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}
 8003c44:	f107 0710 	add.w	r7, r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d03a      	beq.n	8003cd4 <vTaskPriorityDisinherit+0x88>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d034      	beq.n	8003cd4 <vTaskPriorityDisinherit+0x88>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f103 0304 	add.w	r3, r3, #4
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fbff 	bl	8004474 <vListRemove>

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	f1c3 0205 	rsb	r2, r3, #5
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8e:	f240 73d8 	movw	r3, #2008	; 0x7d8
 8003c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d906      	bls.n	8003caa <vTaskPriorityDisinherit+0x5e>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca0:	f240 73d8 	movw	r3, #2008	; 0x7d8
 8003ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cae:	4613      	mov	r3, r2
 8003cb0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003cb4:	189b      	adds	r3, r3, r2
 8003cb6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f240 63f4 	movw	r3, #1780	; 0x6f4
 8003cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003cc4:	18d2      	adds	r2, r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f103 0304 	add.w	r3, r3, #4
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	f000 fb6e 	bl	80043b0 <vListInsertEnd>
			}
		}
	}
 8003cd4:	f107 0710 	add.w	r7, r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d056      	beq.n	8003da0 <xQueueCreate+0xc4>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8003cf2:	f04f 004c 	mov.w	r0, #76	; 0x4c
 8003cf6:	f7fc fe8d 	bl	8000a14 <malloc>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	613b      	str	r3, [r7, #16]
		if( pxNewQueue != NULL )
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d04d      	beq.n	8003da0 <xQueueCreate+0xc4>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	fb02 f303 	mul.w	r3, r2, r3
 8003d0c:	f103 0301 	add.w	r3, r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f7fc fe7e 	bl	8000a14 <malloc>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d038      	beq.n	8003d9a <xQueueCreate+0xbe>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6839      	ldr	r1, [r7, #0]
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	18d2      	adds	r2, r2, r3
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	605a      	str	r2, [r3, #4]
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	639a      	str	r2, [r3, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	609a      	str	r2, [r3, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f103 33ff 	add.w	r3, r3, #4294967295
 8003d54:	6839      	ldr	r1, [r7, #0]
 8003d56:	fb01 f303 	mul.w	r3, r1, r3
 8003d5a:	18d2      	adds	r2, r2, r3
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	60da      	str	r2, [r3, #12]
				pxNewQueue->uxLength = uxQueueLength;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	641a      	str	r2, [r3, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d72:	645a      	str	r2, [r3, #68]	; 0x44
				pxNewQueue->xTxLock = queueUNLOCKED;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7a:	649a      	str	r2, [r3, #72]	; 0x48

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f103 0310 	add.w	r3, r3, #16
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fae6 	bl	8004354 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fae0 	bl	8004354 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	e002      	b.n	8003da0 <xQueueCreate+0xc4>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
 8003d9a:	6938      	ldr	r0, [r7, #16]
 8003d9c:	f7fc fe42 	bl	8000a24 <free>
		}
	}

	configASSERT( xReturn );

	return xReturn;
 8003da0:	697b      	ldr	r3, [r7, #20]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	f107 0718 	add.w	r7, r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
 8003db8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	e000      	b.n	8003dc4 <xQueueGenericSend+0x18>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8003dc2:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dc4:	f000 fc14 	bl	80045f0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d218      	bcs.n	8003e06 <xQueueGenericSend+0x5a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	f000 f983 	bl	80040e4 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <xQueueGenericSend+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff fc31 	bl	8003654 <xTaskRemoveFromEventList>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <xQueueGenericSend+0x50>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
 8003df8:	f000 fbee 	bl	80045d8 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
 8003dfc:	f000 fc0e 	bl	800461c <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8003e00:	f04f 0301 	mov.w	r3, #1
 8003e04:	e05d      	b.n	8003ec2 <xQueueGenericSend+0x116>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d104      	bne.n	8003e16 <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e0c:	f000 fc06 	bl	800461c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	e055      	b.n	8003ec2 <xQueueGenericSend+0x116>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d107      	bne.n	8003e2c <xQueueGenericSend+0x80>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003e1c:	f107 0314 	add.w	r3, r7, #20
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff fc79 	bl	8003718 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e26:	f04f 0301 	mov.w	r3, #1
 8003e2a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e2c:	f000 fbf6 	bl	800461c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e30:	f7ff f976 	bl	8003120 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e34:	f000 fbdc 	bl	80045f0 <vPortEnterCritical>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e40:	d103      	bne.n	8003e4a <xQueueGenericSend+0x9e>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	645a      	str	r2, [r3, #68]	; 0x44
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e52:	d103      	bne.n	8003e5c <xQueueGenericSend+0xb0>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f04f 0200 	mov.w	r2, #0
 8003e5a:	649a      	str	r2, [r3, #72]	; 0x48
 8003e5c:	f000 fbde 	bl	800461c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e60:	f107 0314 	add.w	r3, r7, #20
 8003e64:	4618      	mov	r0, r3
 8003e66:	f107 0304 	add.w	r3, r7, #4
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	f7ff fc6c 	bl	8003748 <xTaskCheckForTimeOut>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d11e      	bne.n	8003eb4 <xQueueGenericSend+0x108>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 fa26 	bl	80042c8 <prvIsQueueFull>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d012      	beq.n	8003ea8 <xQueueGenericSend+0xfc>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f103 0210 	add.w	r2, r3, #16
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	f7ff fb7b 	bl	8003588 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 f9b2 	bl	80041fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e98:	f7ff f954 	bl	8003144 <xTaskResumeAll>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d18f      	bne.n	8003dc2 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8003ea2:	f000 fb99 	bl	80045d8 <vPortYieldFromISR>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8003ea6:	e78c      	b.n	8003dc2 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 f9a7 	bl	80041fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003eae:	f7ff f949 	bl	8003144 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8003eb2:	e786      	b.n	8003dc2 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f9a1 	bl	80041fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003eba:	f7ff f943 	bl	8003144 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ebe:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f107 0720 	add.w	r7, r7, #32
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8003ee4:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d225      	bcs.n	8003f40 <xQueueGenericSendFromISR+0x74>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	f000 f8f3 	bl	80040e4 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f06:	d111      	bne.n	8003f2c <xQueueGenericSendFromISR+0x60>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d013      	beq.n	8003f38 <xQueueGenericSendFromISR+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff fb9c 	bl	8003654 <xTaskRemoveFromEventList>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f04f 0201 	mov.w	r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	e005      	b.n	8003f38 <xQueueGenericSendFromISR+0x6c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f30:	f103 0201 	add.w	r2, r3, #1
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8003f38:	f04f 0301 	mov.w	r3, #1
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	e002      	b.n	8003f46 <xQueueGenericSendFromISR+0x7a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003f46:	f04f 0000 	mov.w	r0, #0
 8003f4a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
 8003f4e:	697b      	ldr	r3, [r7, #20]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	f107 0718 	add.w	r7, r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop

08003f5c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	61fb      	str	r3, [r7, #28]
 8003f70:	e000      	b.n	8003f74 <xQueueGenericReceive+0x18>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8003f72:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f74:	f000 fb3c 	bl	80045f0 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d03f      	beq.n	8004000 <xQueueGenericReceive+0xa4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	f000 f90f 	bl	80041ac <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d11e      	bne.n	8003fd2 <xQueueGenericReceive+0x76>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	f103 32ff 	add.w	r2, r3, #4294967295
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d104      	bne.n	8003fb2 <xQueueGenericReceive+0x56>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 8003fa8:	f7ff fdb0 	bl	8003b0c <xTaskGetCurrentTaskHandle>
 8003fac:	4602      	mov	r2, r0
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01d      	beq.n	8003ff6 <xQueueGenericReceive+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f103 0310 	add.w	r3, r3, #16
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fb47 	bl	8003654 <xTaskRemoveFromEventList>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d114      	bne.n	8003ff6 <xQueueGenericReceive+0x9a>
						{
							portYIELD_WITHIN_API();
 8003fcc:	f000 fb04 	bl	80045d8 <vPortYieldFromISR>
 8003fd0:	e011      	b.n	8003ff6 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <xQueueGenericReceive+0x9a>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff fb34 	bl	8003654 <xTaskRemoveFromEventList>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <xQueueGenericReceive+0x9a>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8003ff2:	f000 faf1 	bl	80045d8 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
 8003ff6:	f000 fb11 	bl	800461c <vPortExitCritical>
				return pdPASS;
 8003ffa:	f04f 0301 	mov.w	r3, #1
 8003ffe:	e06b      	b.n	80040d8 <xQueueGenericReceive+0x17c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d104      	bne.n	8004010 <xQueueGenericReceive+0xb4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004006:	f000 fb09 	bl	800461c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800400a:	f04f 0300 	mov.w	r3, #0
 800400e:	e063      	b.n	80040d8 <xQueueGenericReceive+0x17c>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d107      	bne.n	8004026 <xQueueGenericReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8004016:	f107 0310 	add.w	r3, r7, #16
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff fb7c 	bl	8003718 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004020:	f04f 0301 	mov.w	r3, #1
 8004024:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 8004026:	f000 faf9 	bl	800461c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800402a:	f7ff f879 	bl	8003120 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800402e:	f000 fadf 	bl	80045f0 <vPortEnterCritical>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403a:	d103      	bne.n	8004044 <xQueueGenericReceive+0xe8>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	645a      	str	r2, [r3, #68]	; 0x44
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404c:	d103      	bne.n	8004056 <xQueueGenericReceive+0xfa>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	649a      	str	r2, [r3, #72]	; 0x48
 8004056:	f000 fae1 	bl	800461c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800405a:	f107 0310 	add.w	r3, r7, #16
 800405e:	4618      	mov	r0, r3
 8004060:	f107 0304 	add.w	r3, r7, #4
 8004064:	4619      	mov	r1, r3
 8004066:	f7ff fb6f 	bl	8003748 <xTaskCheckForTimeOut>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d12c      	bne.n	80040ca <xQueueGenericReceive+0x16e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f913 	bl	800429c <prvIsQueueEmpty>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d020      	beq.n	80040be <xQueueGenericReceive+0x162>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d108      	bne.n	8004096 <xQueueGenericReceive+0x13a>
					{
						portENTER_CRITICAL();
 8004084:	f000 fab4 	bl	80045f0 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff fd71 	bl	8003b74 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8004092:	f000 fac3 	bl	800461c <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4610      	mov	r0, r2
 80040a0:	4619      	mov	r1, r3
 80040a2:	f7ff fa71 	bl	8003588 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 f8a8 	bl	80041fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80040ac:	f7ff f84a 	bl	8003144 <xTaskResumeAll>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f47f af5d 	bne.w	8003f72 <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
 80040b8:	f000 fa8e 	bl	80045d8 <vPortYieldFromISR>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 80040bc:	e759      	b.n	8003f72 <xQueueGenericReceive+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f89c 	bl	80041fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040c4:	f7ff f83e 	bl	8003144 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 80040c8:	e753      	b.n	8003f72 <xQueueGenericReceive+0x16>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f896 	bl	80041fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040d0:	f7ff f838 	bl	8003144 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 80040d4:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 80040d8:	4618      	mov	r0, r3
 80040da:	f107 0720 	add.w	r7, r7, #32
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop

080040e4 <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10d      	bne.n	8004114 <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d14a      	bne.n	8004196 <prvCopyDataToQueue+0xb2>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff fda1 	bl	8003c4c <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	605a      	str	r2, [r3, #4]
 8004112:	e040      	b.n	8004196 <prvCopyDataToQueue+0xb2>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d11b      	bne.n	8004152 <prvCopyDataToQueue+0x6e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6899      	ldr	r1, [r3, #8]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	4608      	mov	r0, r1
 8004126:	4611      	mov	r1, r2
 8004128:	461a      	mov	r2, r3
 800412a:	f7fd fa9d 	bl	8001668 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	18d2      	adds	r2, r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	429a      	cmp	r2, r3
 8004146:	d326      	bcc.n	8004196 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	609a      	str	r2, [r3, #8]
 8004150:	e021      	b.n	8004196 <prvCopyDataToQueue+0xb2>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	68d9      	ldr	r1, [r3, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	4608      	mov	r0, r1
 800415e:	4611      	mov	r1, r2
 8004160:	461a      	mov	r2, r3
 8004162:	f7fd fa81 	bl	8001668 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f1c3 0300 	rsb	r3, r3, #0
 8004172:	18d2      	adds	r2, r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d208      	bcs.n	8004196 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	f1c3 0300 	rsb	r3, r3, #0
 8004190:	18d2      	adds	r2, r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	f103 0201 	add.w	r2, r3, #1
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80041a2:	f107 0710 	add.w	r7, r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop

080041ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d01a      	beq.n	80041f4 <prvCopyDataFromQueue+0x48>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	18d2      	adds	r2, r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d303      	bcc.n	80041e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	6839      	ldr	r1, [r7, #0]
 80041ea:	4608      	mov	r0, r1
 80041ec:	4611      	mov	r1, r2
 80041ee:	461a      	mov	r2, r3
 80041f0:	f7fd fa3a 	bl	8001668 <memcpy>
	}
}
 80041f4:	f107 0708 	add.w	r7, r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004204:	f000 f9f4 	bl	80045f0 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8004208:	e014      	b.n	8004234 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	2b00      	cmp	r3, #0
 8004210:	d015      	beq.n	800423e <prvUnlockQueue+0x42>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff fa1b 	bl	8003654 <xTaskRemoveFromEventList>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 8004224:	f7ff fae2 	bl	80037ec <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422c:	f103 32ff 	add.w	r2, r3, #4294967295
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004238:	2b00      	cmp	r3, #0
 800423a:	dce6      	bgt.n	800420a <prvUnlockQueue+0xe>
 800423c:	e000      	b.n	8004240 <prvUnlockQueue+0x44>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
 800423e:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f04f 32ff 	mov.w	r2, #4294967295
 8004246:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8004248:	f000 f9e8 	bl	800461c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800424c:	f000 f9d0 	bl	80045f0 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8004250:	e014      	b.n	800427c <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d015      	beq.n	8004286 <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f103 0310 	add.w	r3, r3, #16
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff f9f7 	bl	8003654 <xTaskRemoveFromEventList>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
 800426c:	f7ff fabe 	bl	80037ec <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004274:	f103 32ff 	add.w	r2, r3, #4294967295
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004280:	2b00      	cmp	r3, #0
 8004282:	dce6      	bgt.n	8004252 <prvUnlockQueue+0x56>
 8004284:	e000      	b.n	8004288 <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
 8004286:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f04f 32ff 	mov.w	r2, #4294967295
 800428e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004290:	f000 f9c4 	bl	800461c <vPortExitCritical>
}
 8004294:	f107 0708 	add.w	r7, r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 80042a4:	f000 f9a4 	bl	80045f0 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	bf14      	ite	ne
 80042b0:	2300      	movne	r3, #0
 80042b2:	2301      	moveq	r3, #1
 80042b4:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 80042b6:	f000 f9b1 	bl	800461c <vPortExitCritical>

	return xReturn;
 80042ba:	68fb      	ldr	r3, [r7, #12]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	f107 0710 	add.w	r7, r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop

080042c8 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 80042d0:	f000 f98e 	bl	80045f0 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042dc:	429a      	cmp	r2, r3
 80042de:	bf14      	ite	ne
 80042e0:	2300      	movne	r3, #0
 80042e2:	2301      	moveq	r3, #1
 80042e4:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 80042e6:	f000 f999 	bl	800461c <vPortExitCritical>

	return xReturn;
 80042ea:	68fb      	ldr	r3, [r7, #12]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	f107 0710 	add.w	r7, r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop

080042f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004302:	f000 f975 	bl	80045f0 <vPortEnterCritical>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430e:	d103      	bne.n	8004318 <vQueueWaitForMessageRestricted+0x20>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	645a      	str	r2, [r3, #68]	; 0x44
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d103      	bne.n	800432a <vQueueWaitForMessageRestricted+0x32>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	649a      	str	r2, [r3, #72]	; 0x48
 800432a:	f000 f977 	bl	800461c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <vQueueWaitForMessageRestricted+0x4c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800433c:	4618      	mov	r0, r3
 800433e:	6839      	ldr	r1, [r7, #0]
 8004340:	f7ff f95e 	bl	8003600 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7ff ff59 	bl	80041fc <prvUnlockQueue>
	}
 800434a:	f107 0708 	add.w	r7, r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop

08004354 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f103 0208 	add.w	r2, r3, #8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f04f 32ff 	mov.w	r2, #4294967295
 800436c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f103 0208 	add.w	r2, r3, #8
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f103 0208 	add.w	r2, r3, #8
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
}
 800438a:	f107 070c 	add.w	r7, r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	611a      	str	r2, [r3, #16]
}
 80043a4:	f107 070c 	add.w	r7, r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop

080043b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f103 0201 	add.w	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	601a      	str	r2, [r3, #0]
}
 80043f6:	f107 0714 	add.w	r7, r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr

08004400 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004416:	d103      	bne.n	8004420 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	e00d      	b.n	800443c <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f103 0308 	add.w	r3, r3, #8
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	e002      	b.n	8004430 <vListInsert+0x30>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	429a      	cmp	r2, r3
 800443a:	d9f6      	bls.n	800442a <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f103 0201 	add.w	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	601a      	str	r2, [r3, #0]
}
 800446a:	f107 0714 	add.w	r7, r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6892      	ldr	r2, [r2, #8]
 8004484:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6852      	ldr	r2, [r2, #4]
 800448e:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	429a      	cmp	r2, r3
 800449e:	d103      	bne.n	80044a8 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f103 32ff 	add.w	r2, r3, #4294967295
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	601a      	str	r2, [r3, #0]
}
 80044bc:	f107 0714 	add.w	r7, r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop

080044c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f1a3 0304 	sub.w	r3, r3, #4
 80044da:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044e2:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f1a3 0304 	sub.w	r3, r3, #4
 80044ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f1a3 0304 	sub.w	r3, r3, #4
 80044f8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f1a3 0314 	sub.w	r3, r3, #20
 8004508:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f1a3 0304 	sub.w	r3, r3, #4
 8004516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f06f 0202 	mvn.w	r2, #2
 800451e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f1a3 0320 	sub.w	r3, r3, #32
 8004526:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004528:	68fb      	ldr	r3, [r7, #12]
}
 800452a:	4618      	mov	r0, r3
 800452c:	f107 0714 	add.w	r7, r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	bc80      	pop	{r7}
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop

08004538 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004538:	4b05      	ldr	r3, [pc, #20]	; (8004550 <pxCurrentTCBConst2>)
 800453a:	6819      	ldr	r1, [r3, #0]
 800453c:	6808      	ldr	r0, [r1, #0]
 800453e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004542:	f380 8809 	msr	PSP, r0
 8004546:	f04f 0000 	mov.w	r0, #0
 800454a:	f380 8811 	msr	BASEPRI, r0
 800454e:	4770      	bx	lr

08004550 <pxCurrentTCBConst2>:
 8004550:	200006f0 	.word	0x200006f0

08004554 <vPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void vPortStartFirstTask( void )
{
	__asm volatile(
 8004554:	4803      	ldr	r0, [pc, #12]	; (8004564 <vPortStartFirstTask+0x10>)
 8004556:	6800      	ldr	r0, [r0, #0]
 8004558:	6800      	ldr	r0, [r0, #0]
 800455a:	f380 8808 	msr	MSP, r0
 800455e:	b662      	cpsie	i
 8004560:	df00      	svc	0
 8004562:	bf00      	nop
 8004564:	e000ed08 	.word	0xe000ed08

08004568 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
	/* Make PendSV and SysTick the lowest priority interrupts. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800456c:	f64e 5320 	movw	r3, #60704	; 0xed20
 8004570:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8004574:	f64e 5220 	movw	r2, #60704	; 0xed20
 8004578:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800457c:	6812      	ldr	r2, [r2, #0]
 800457e:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
 8004582:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8004584:	f64e 5320 	movw	r3, #60704	; 0xed20
 8004588:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800458c:	f64e 5220 	movw	r2, #60704	; 0xed20
 8004590:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 800459a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 800459c:	f000 f89e 	bl	80046dc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045a0:	f240 5330 	movw	r3, #1328	; 0x530
 80045a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80045ae:	f000 f8b5 	bl	800471c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045b2:	f64e 7334 	movw	r3, #61236	; 0xef34
 80045b6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80045ba:	f64e 7234 	movw	r2, #61236	; 0xef34
 80045be:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80045c8:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80045ca:	f7ff ffc3 	bl	8004554 <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
 80045ce:	f04f 0300 	mov.w	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop

080045d8 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80045dc:	f64e 5304 	movw	r3, #60676	; 0xed04
 80045e0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80045e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e8:	601a      	str	r2, [r3, #0]
}
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr

080045f0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80045f4:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80045f8:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 80045fc:	f240 5330 	movw	r3, #1328	; 0x530
 8004600:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f103 0201 	add.w	r2, r3, #1
 800460a:	f240 5330 	movw	r3, #1328	; 0x530
 800460e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004612:	601a      	str	r2, [r3, #0]
}
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop

0800461c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8004620:	f240 5330 	movw	r3, #1328	; 0x530
 8004624:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f103 32ff 	add.w	r2, r3, #4294967295
 800462e:	f240 5330 	movw	r3, #1328	; 0x530
 8004632:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004636:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8004638:	f240 5330 	movw	r3, #1328	; 0x530
 800463c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d103      	bne.n	800464e <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
 8004646:	f04f 0000 	mov.w	r0, #0
 800464a:	f380 8811 	msr	BASEPRI, r0
	}
}
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004654:	f3ef 8009 	mrs	r0, PSP
 8004658:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <pxCurrentTCBConst>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	f01e 0f10 	tst.w	lr, #16
 8004660:	bf08      	it	eq
 8004662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466a:	6010      	str	r0, [r2, #0]
 800466c:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004670:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8004674:	f380 8811 	msr	BASEPRI, r0
 8004678:	f7fe fefe 	bl	8003478 <vTaskSwitchContext>
 800467c:	f04f 0000 	mov.w	r0, #0
 8004680:	f380 8811 	msr	BASEPRI, r0
 8004684:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004688:	6819      	ldr	r1, [r3, #0]
 800468a:	6808      	ldr	r0, [r1, #0]
 800468c:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004690:	f01e 0f10 	tst.w	lr, #16
 8004694:	bf08      	it	eq
 8004696:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800469a:	f380 8809 	msr	PSP, r0
 800469e:	4770      	bx	lr

080046a0 <pxCurrentTCBConst>:
 80046a0:	200006f0 	.word	0x200006f0

080046a4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80046aa:	f64e 5304 	movw	r3, #60676	; 0xed04
 80046ae:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80046b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b6:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	607b      	str	r3, [r7, #4]
 80046be:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80046c2:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 80046c6:	f7fe fdfb 	bl	80032c0 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 80046ca:	f04f 0000 	mov.w	r0, #0
 80046ce:	f380 8811 	msr	BASEPRI, r0
}
 80046d2:	f107 0708 	add.w	r7, r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop

080046dc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046e0:	f24e 0314 	movw	r3, #57364	; 0xe014
 80046e4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80046e8:	f240 5224 	movw	r2, #1316	; 0x524
 80046ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80046f0:	6811      	ldr	r1, [r2, #0]
 80046f2:	f644 52d3 	movw	r2, #19923	; 0x4dd3
 80046f6:	f2c1 0262 	movt	r2, #4194	; 0x1062
 80046fa:	fba2 0201 	umull	r0, r2, r2, r1
 80046fe:	ea4f 1292 	mov.w	r2, r2, lsr #6
 8004702:	f102 32ff 	add.w	r2, r2, #4294967295
 8004706:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004708:	f24e 0310 	movw	r3, #57360	; 0xe010
 800470c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8004710:	f04f 0207 	mov.w	r2, #7
 8004714:	601a      	str	r2, [r3, #0]
}
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr

0800471c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800471c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800472c <vPortEnableVFP+0x10>
 8004720:	6801      	ldr	r1, [r0, #0]
 8004722:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004726:	6001      	str	r1, [r0, #0]
 8004728:	4770      	bx	lr
 800472a:	0000      	.short	0x0000
 800472c:	e000ed88 	.word	0xe000ed88

08004730 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8004738:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800473c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
 8004746:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 800474a:	60da      	str	r2, [r3, #12]
}
 800474c:	f107 070c 	add.w	r7, r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop

08004758 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	73fb      	strb	r3, [r7, #15]
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	73bb      	strb	r3, [r7, #14]
 800476c:	f04f 030f 	mov.w	r3, #15
 8004770:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	78db      	ldrb	r3, [r3, #3]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d045      	beq.n	8004806 <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800477a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800477e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	ea6f 0303 	mvn.w	r3, r3
 8004788:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800478c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8004790:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8004792:	7bfb      	ldrb	r3, [r7, #15]
 8004794:	f1c3 0304 	rsb	r3, r3, #4
 8004798:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800479a:	7b7a      	ldrb	r2, [r7, #13]
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	fa42 f303 	asr.w	r3, r2, r3
 80047a2:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	785b      	ldrb	r3, [r3, #1]
 80047a8:	461a      	mov	r2, r3
 80047aa:	7bbb      	ldrb	r3, [r7, #14]
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	789a      	ldrb	r2, [r3, #2]
 80047b6:	7b7b      	ldrb	r3, [r7, #13]
 80047b8:	4013      	ands	r3, r2
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	4313      	orrs	r3, r2
 80047c0:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80047c8:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80047ca:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80047ce:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	7812      	ldrb	r2, [r2, #0]
 80047d6:	189b      	adds	r3, r3, r2
 80047d8:	7bfa      	ldrb	r2, [r7, #15]
 80047da:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80047de:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80047e2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	7812      	ldrb	r2, [r2, #0]
 80047ea:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80047ee:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	7809      	ldrb	r1, [r1, #0]
 80047f4:	f001 011f 	and.w	r1, r1, #31
 80047f8:	f04f 0001 	mov.w	r0, #1
 80047fc:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004804:	e014      	b.n	8004830 <NVIC_Init+0xd8>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004806:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800480a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	7812      	ldrb	r2, [r2, #0]
 8004812:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8004816:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	7809      	ldrb	r1, [r1, #0]
 800481c:	f001 011f 	and.w	r1, r1, #31
 8004820:	f04f 0001 	mov.w	r0, #1
 8004824:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004828:	f102 0220 	add.w	r2, r2, #32
 800482c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8004830:	f107 0714 	add.w	r7, r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop

0800483c <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8004846:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800484a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8004854:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	430a      	orrs	r2, r1
 800485c:	609a      	str	r2, [r3, #8]
}
 800485e:	f107 070c 	add.w	r7, r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 800486c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004870:	f04f 0101 	mov.w	r1, #1
 8004874:	f000 fdfa 	bl	800546c <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8004878:	f44f 7080 	mov.w	r0, #256	; 0x100
 800487c:	f04f 0100 	mov.w	r1, #0
 8004880:	f000 fdf4 	bl	800546c <RCC_APB2PeriphResetCmd>
}
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop

08004888 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80048aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048ae:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	791b      	ldrb	r3, [r3, #4]
 80048b4:	ea4f 2203 	mov.w	r2, r3, lsl #8
                                   ADC_InitStruct->ADC_Resolution);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80048bc:	4313      	orrs	r3, r2
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	f24f 73fd 	movw	r3, #63485	; 0xf7fd
 80048d6:	f2cc 03ff 	movt	r3, #49407	; 0xc0ff
 80048da:	4013      	ands	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80048e6:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80048ec:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	795b      	ldrb	r3, [r3, #5]
 80048f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80048f6:	4313      	orrs	r3, r2
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004910:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	7d1b      	ldrb	r3, [r3, #20]
 8004916:	f103 33ff 	add.w	r3, r3, #4294967295
 800491a:	b2da      	uxtb	r2, r3
 800491c:	7afb      	ldrb	r3, [r7, #11]
 800491e:	4313      	orrs	r3, r2
 8004920:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8004922:	7afb      	ldrb	r3, [r7, #11]
 8004924:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004934:	f107 0714 	add.w	r7, r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	bc80      	pop	{r7}
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop

08004940 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d006      	beq.n	8004960 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f043 0201 	orr.w	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	609a      	str	r2, [r3, #8]
 800495e:	e005      	b.n	800496c <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f023 0201 	bic.w	r2, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	609a      	str	r2, [r3, #8]
  }
}
 800496c:	f107 070c 	add.w	r7, r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop

08004978 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	70f9      	strb	r1, [r7, #3]
 8004982:	70ba      	strb	r2, [r7, #2]
 8004984:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8004992:	78fb      	ldrb	r3, [r7, #3]
 8004994:	2b09      	cmp	r3, #9
 8004996:	d927      	bls.n	80049e8 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800499e:	78fa      	ldrb	r2, [r7, #3]
 80049a0:	4613      	mov	r3, r2
 80049a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80049a6:	189b      	adds	r3, r3, r2
 80049a8:	f1a3 031e 	sub.w	r3, r3, #30
 80049ac:	f04f 0207 	mov.w	r2, #7
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	ea6f 0303 	mvn.w	r3, r3
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4013      	ands	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80049c2:	7879      	ldrb	r1, [r7, #1]
 80049c4:	78fa      	ldrb	r2, [r7, #3]
 80049c6:	4613      	mov	r3, r2
 80049c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80049cc:	189b      	adds	r3, r3, r2
 80049ce:	f1a3 031e 	sub.w	r3, r3, #30
 80049d2:	fa01 f303 	lsl.w	r3, r1, r3
 80049d6:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	60da      	str	r2, [r3, #12]
 80049e6:	e022      	b.n	8004a2e <ADC_RegularChannelConfig+0xb6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80049ee:	78fa      	ldrb	r2, [r7, #3]
 80049f0:	4613      	mov	r3, r2
 80049f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80049f6:	189b      	adds	r3, r3, r2
 80049f8:	f04f 0207 	mov.w	r2, #7
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	ea6f 0303 	mvn.w	r3, r3
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8004a0e:	7879      	ldrb	r1, [r7, #1]
 8004a10:	78fa      	ldrb	r2, [r7, #3]
 8004a12:	4613      	mov	r3, r2
 8004a14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004a18:	189b      	adds	r3, r3, r2
 8004a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8004a2e:	78bb      	ldrb	r3, [r7, #2]
 8004a30:	2b06      	cmp	r3, #6
 8004a32:	d827      	bhi.n	8004a84 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a38:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8004a3a:	78bb      	ldrb	r3, [r7, #2]
 8004a3c:	f103 32ff 	add.w	r2, r3, #4294967295
 8004a40:	4613      	mov	r3, r2
 8004a42:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004a46:	189b      	adds	r3, r3, r2
 8004a48:	f04f 021f 	mov.w	r2, #31
 8004a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a50:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	ea6f 0303 	mvn.w	r3, r3
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8004a5e:	78f9      	ldrb	r1, [r7, #3]
 8004a60:	78bb      	ldrb	r3, [r7, #2]
 8004a62:	f103 32ff 	add.w	r2, r3, #4294967295
 8004a66:	4613      	mov	r3, r2
 8004a68:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004a6c:	189b      	adds	r3, r3, r2
 8004a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a72:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	635a      	str	r2, [r3, #52]	; 0x34
 8004a82:	e051      	b.n	8004b28 <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8004a84:	78bb      	ldrb	r3, [r7, #2]
 8004a86:	2b0c      	cmp	r3, #12
 8004a88:	d827      	bhi.n	8004ada <ADC_RegularChannelConfig+0x162>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8004a90:	78ba      	ldrb	r2, [r7, #2]
 8004a92:	4613      	mov	r3, r2
 8004a94:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004a98:	189b      	adds	r3, r3, r2
 8004a9a:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 8004a9e:	f04f 021f 	mov.w	r2, #31
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	ea6f 0303 	mvn.w	r3, r3
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8004ab4:	78f9      	ldrb	r1, [r7, #3]
 8004ab6:	78ba      	ldrb	r2, [r7, #2]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004abe:	189b      	adds	r3, r3, r2
 8004ac0:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 8004ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac8:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ad8:	e026      	b.n	8004b28 <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8004ae0:	78ba      	ldrb	r2, [r7, #2]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004ae8:	189b      	adds	r3, r3, r2
 8004aea:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 8004aee:	f04f 021f 	mov.w	r2, #31
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	ea6f 0303 	mvn.w	r3, r3
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4013      	ands	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8004b04:	78f9      	ldrb	r1, [r7, #3]
 8004b06:	78ba      	ldrb	r2, [r7, #2]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004b0e:	189b      	adds	r3, r3, r2
 8004b10:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 8004b14:	fa01 f303 	lsl.w	r3, r1, r3
 8004b18:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004b28:	f107 0714 	add.w	r7, r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop

08004b34 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	609a      	str	r2, [r3, #8]
}
 8004b48:	f107 070c 	add.w	r7, r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop

08004b54 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d006      	beq.n	8004b74 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	609a      	str	r2, [r3, #8]
 8004b72:	e005      	b.n	8004b80 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	609a      	str	r2, [r3, #8]
  }
}
 8004b80:	f107 070c 	add.w	r7, r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc80      	pop	{r7}
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop

08004b8c <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d006      	beq.n	8004bac <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	609a      	str	r2, [r3, #8]
 8004baa:	e005      	b.n	8004bb8 <ADC_DMARequestAfterLastTransferCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	609a      	str	r2, [r3, #8]
  }
}
 8004bb8:	f107 070c 	add.w	r7, r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop

08004bc4 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f023 0201 	bic.w	r2, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f04f 0221 	mov.w	r2, #33	; 0x21
 8004c06:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	f246 0310 	movw	r3, #24592	; 0x6010
 8004c0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d107      	bne.n	8004c26 <DMA_DeInit+0x62>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8004c16:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c1e:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8004c22:	609a      	str	r2, [r3, #8]
 8004c24:	e0eb      	b.n	8004dfe <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	f246 0328 	movw	r3, #24616	; 0x6028
 8004c2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d107      	bne.n	8004c44 <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8004c34:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004c38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c3c:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8004c40:	609a      	str	r2, [r3, #8]
 8004c42:	e0dc      	b.n	8004dfe <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	f246 0340 	movw	r3, #24640	; 0x6040
 8004c4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d107      	bne.n	8004c62 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8004c52:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004c56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c5a:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8004c5e:	609a      	str	r2, [r3, #8]
 8004c60:	e0cd      	b.n	8004dfe <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	f246 0358 	movw	r3, #24664	; 0x6058
 8004c68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d107      	bne.n	8004c80 <DMA_DeInit+0xbc>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8004c70:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004c74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c78:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8004c7c:	609a      	str	r2, [r3, #8]
 8004c7e:	e0be      	b.n	8004dfe <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	f246 0370 	movw	r3, #24688	; 0x6070
 8004c86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d109      	bne.n	8004ca2 <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8004c8e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004c92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c96:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8004c9a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004c9e:	60da      	str	r2, [r3, #12]
 8004ca0:	e0ad      	b.n	8004dfe <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	f246 0388 	movw	r3, #24712	; 0x6088
 8004ca8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d109      	bne.n	8004cc4 <DMA_DeInit+0x100>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8004cb0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004cb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004cb8:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8004cbc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004cc0:	60da      	str	r2, [r3, #12]
 8004cc2:	e09c      	b.n	8004dfe <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	f246 03a0 	movw	r3, #24736	; 0x60a0
 8004cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d109      	bne.n	8004ce6 <DMA_DeInit+0x122>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8004cd2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004cd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f2c2 023d 	movt	r2, #8253	; 0x203d
 8004ce2:	60da      	str	r2, [r3, #12]
 8004ce4:	e08b      	b.n	8004dfe <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	f246 03b8 	movw	r3, #24760	; 0x60b8
 8004cec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d107      	bne.n	8004d04 <DMA_DeInit+0x140>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8004cf4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004cf8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004cfc:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8004d00:	60da      	str	r2, [r3, #12]
 8004d02:	e07c      	b.n	8004dfe <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	f246 4310 	movw	r3, #25616	; 0x6410
 8004d0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d107      	bne.n	8004d22 <DMA_DeInit+0x15e>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8004d12:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004d16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d1a:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8004d1e:	609a      	str	r2, [r3, #8]
 8004d20:	e06d      	b.n	8004dfe <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	f246 4328 	movw	r3, #25640	; 0x6428
 8004d28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d107      	bne.n	8004d40 <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8004d30:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004d34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d38:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8004d3c:	609a      	str	r2, [r3, #8]
 8004d3e:	e05e      	b.n	8004dfe <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	f246 4340 	movw	r3, #25664	; 0x6440
 8004d46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d107      	bne.n	8004d5e <DMA_DeInit+0x19a>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8004d4e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004d52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d56:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8004d5a:	609a      	str	r2, [r3, #8]
 8004d5c:	e04f      	b.n	8004dfe <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	f246 4358 	movw	r3, #25688	; 0x6458
 8004d64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d107      	bne.n	8004d7c <DMA_DeInit+0x1b8>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8004d6c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004d70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d74:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8004d78:	609a      	str	r2, [r3, #8]
 8004d7a:	e040      	b.n	8004dfe <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	f246 4370 	movw	r3, #25712	; 0x6470
 8004d82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d109      	bne.n	8004d9e <DMA_DeInit+0x1da>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8004d8a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004d8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d92:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8004d96:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004d9a:	60da      	str	r2, [r3, #12]
 8004d9c:	e02f      	b.n	8004dfe <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	f246 4388 	movw	r3, #25736	; 0x6488
 8004da4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d109      	bne.n	8004dc0 <DMA_DeInit+0x1fc>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8004dac:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004db0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004db4:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8004db8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004dbc:	60da      	str	r2, [r3, #12]
 8004dbe:	e01e      	b.n	8004dfe <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	f246 43a0 	movw	r3, #25760	; 0x64a0
 8004dc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d109      	bne.n	8004de2 <DMA_DeInit+0x21e>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8004dce:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004dd2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	f2c2 023d 	movt	r2, #8253	; 0x203d
 8004dde:	60da      	str	r2, [r3, #12]
 8004de0:	e00d      	b.n	8004dfe <DMA_DeInit+0x23a>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	f246 43b8 	movw	r3, #25784	; 0x64b8
 8004de8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d106      	bne.n	8004dfe <DMA_DeInit+0x23a>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8004df0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004df4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004df8:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8004dfc:	60da      	str	r2, [r3, #12]
    }
  }
}
 8004dfe:	f107 070c 	add.w	r7, r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr

08004e08 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	f248 033f 	movw	r3, #32831	; 0x803f
 8004e24:	f2cf 031c 	movt	r3, #61468	; 0xf01c
 8004e28:	4013      	ands	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8004e3a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004e46:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8004e52:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e58:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8004e5e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e64:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 0307 	bic.w	r3, r3, #7
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	691a      	ldr	r2, [r3, #16]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	60da      	str	r2, [r3, #12]
}
 8004eae:	f107 0714 	add.w	r7, r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bc80      	pop	{r7}
 8004eb6:	4770      	bx	lr

08004eb8 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f04f 0200 	mov.w	r2, #0
 8004ede:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f04f 0200 	mov.w	r2, #0
 8004efe:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004f38:	f107 070c 	add.w	r7, r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bc80      	pop	{r7}
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop

08004f44 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d006      	beq.n	8004f64 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f043 0201 	orr.w	r2, r3, #1
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	e005      	b.n	8004f70 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f023 0201 	bic.w	r2, r3, #1
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	601a      	str	r2, [r3, #0]
  }
}
 8004f70:	f107 070c 	add.w	r7, r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop

08004f7c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	f04f 0300 	mov.w	r3, #0
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	f04f 0300 	mov.w	r3, #0
 8004f96:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004f98:	f04f 0300 	mov.w	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	e086      	b.n	80050ae <GPIO_Init+0x132>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f04f 0201 	mov.w	r2, #1
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d173      	bne.n	80050a6 <GPIO_Init+0x12a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004fc8:	f04f 0103 	mov.w	r1, #3
 8004fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd0:	ea6f 0303 	mvn.w	r3, r3
 8004fd4:	401a      	ands	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	791b      	ldrb	r3, [r3, #4]
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004fea:	fa01 f303 	lsl.w	r3, r1, r3
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	791b      	ldrb	r3, [r3, #4]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d003      	beq.n	8005004 <GPIO_Init+0x88>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	791b      	ldrb	r3, [r3, #4]
 8005000:	2b02      	cmp	r3, #2
 8005002:	d134      	bne.n	800506e <GPIO_Init+0xf2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800500e:	f04f 0103 	mov.w	r1, #3
 8005012:	fa01 f303 	lsl.w	r3, r1, r3
 8005016:	ea6f 0303 	mvn.w	r3, r3
 800501a:	401a      	ands	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	795b      	ldrb	r3, [r3, #5]
 8005028:	4619      	mov	r1, r3
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005030:	fa01 f303 	lsl.w	r3, r1, r3
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	b29b      	uxth	r3, r3
 8005042:	f04f 0101 	mov.w	r1, #1
 8005046:	fa01 f303 	lsl.w	r3, r1, r3
 800504a:	ea6f 0303 	mvn.w	r3, r3
 800504e:	401a      	ands	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	799b      	ldrb	r3, [r3, #6]
 800505c:	4619      	mov	r1, r3
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	b29b      	uxth	r3, r3
 8005062:	fa01 f303 	lsl.w	r3, r1, r3
 8005066:	b29b      	uxth	r3, r3
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	b29b      	uxth	r3, r3
 8005076:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800507a:	f04f 0103 	mov.w	r1, #3
 800507e:	fa01 f303 	lsl.w	r3, r1, r3
 8005082:	ea6f 0303 	mvn.w	r3, r3
 8005086:	401a      	ands	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	79db      	ldrb	r3, [r3, #7]
 8005094:	4619      	mov	r1, r3
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800509c:	fa01 f303 	lsl.w	r3, r1, r3
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f103 0301 	add.w	r3, r3, #1
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b0f      	cmp	r3, #15
 80050b2:	f67f af75 	bls.w	8004fa0 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80050b6:	f107 071c 	add.w	r7, r7, #28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bc80      	pop	{r7}
 80050be:	4770      	bx	lr

080050c0 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f04f 0200 	mov.w	r2, #0
 80050ee:	71da      	strb	r2, [r3, #7]
}
 80050f0:	f107 070c 	add.w	r7, r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bc80      	pop	{r7}
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop

080050fc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	4613      	mov	r3, r2
 8005106:	460a      	mov	r2, r1
 8005108:	807a      	strh	r2, [r7, #2]
 800510a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8005112:	f04f 0300 	mov.w	r3, #0
 8005116:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8005118:	787a      	ldrb	r2, [r7, #1]
 800511a:	887b      	ldrh	r3, [r7, #2]
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800512a:	887b      	ldrh	r3, [r7, #2]
 800512c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8005130:	b29b      	uxth	r3, r3
 8005132:	461a      	mov	r2, r3
 8005134:	887b      	ldrh	r3, [r7, #2]
 8005136:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800513a:	b29b      	uxth	r3, r3
 800513c:	4619      	mov	r1, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f101 0108 	add.w	r1, r1, #8
 8005144:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8005148:	887b      	ldrh	r3, [r7, #2]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005152:	f04f 000f 	mov.w	r0, #15
 8005156:	fa00 f303 	lsl.w	r3, r0, r3
 800515a:	ea6f 0303 	mvn.w	r3, r3
 800515e:	4019      	ands	r1, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f102 0208 	add.w	r2, r2, #8
 8005166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800516a:	887b      	ldrh	r3, [r7, #2]
 800516c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8005170:	b29b      	uxth	r3, r3
 8005172:	461a      	mov	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f102 0208 	add.w	r2, r2, #8
 800517a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8005184:	887b      	ldrh	r3, [r7, #2]
 8005186:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800518a:	b29b      	uxth	r3, r3
 800518c:	461a      	mov	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f102 0208 	add.w	r2, r2, #8
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800519a:	f107 0714 	add.w	r7, r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr

080051a4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b089      	sub	sp, #36	; 0x24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	61bb      	str	r3, [r7, #24]
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	f04f 0302 	mov.w	r3, #2
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	f04f 0300 	mov.w	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	f04f 0302 	mov.w	r3, #2
 80051ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80051d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80051d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 030c 	and.w	r3, r3, #12
 80051de:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d00a      	beq.n	80051fc <RCC_GetClocksFreq+0x58>
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d00f      	beq.n	800520a <RCC_GetClocksFreq+0x66>
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d160      	bne.n	80052b0 <RCC_GetClocksFreq+0x10c>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80051f4:	f2c0 03f4 	movt	r3, #244	; 0xf4
 80051f8:	6013      	str	r3, [r2, #0]
      break;
 80051fa:	e060      	b.n	80052be <RCC_GetClocksFreq+0x11a>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8005202:	f2c0 037a 	movt	r3, #122	; 0x7a
 8005206:	6013      	str	r3, [r2, #0]
      break;
 8005208:	e059      	b.n	80052be <RCC_GetClocksFreq+0x11a>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800520a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800520e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005218:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800521c:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800521e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005222:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800522c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d014      	beq.n	800525e <RCC_GetClocksFreq+0xba>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005234:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8005238:	f2c0 037a 	movt	r3, #122	; 0x7a
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005242:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005246:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800524a:	6859      	ldr	r1, [r3, #4]
 800524c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005250:	400b      	ands	r3, r1
 8005252:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8005256:	fb03 f302 	mul.w	r3, r3, r2
 800525a:	61fb      	str	r3, [r7, #28]
 800525c:	e013      	b.n	8005286 <RCC_GetClocksFreq+0xe2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800525e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8005262:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	fbb3 f2f2 	udiv	r2, r3, r2
 800526c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005270:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005274:	6859      	ldr	r1, [r3, #4]
 8005276:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800527a:	400b      	ands	r3, r1
 800527c:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8005280:	fb03 f302 	mul.w	r3, r3, r2
 8005284:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8005286:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800528a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005294:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8005298:	f103 0301 	add.w	r3, r3, #1
 800529c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80052a0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80052a2:	69fa      	ldr	r2, [r7, #28]
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	601a      	str	r2, [r3, #0]
      break;
 80052ae:	e006      	b.n	80052be <RCC_GetClocksFreq+0x11a>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80052b6:	f2c0 03f4 	movt	r3, #244	; 0xf4
 80052ba:	6013      	str	r3, [r2, #0]
      break;
 80052bc:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80052be:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80052c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052cc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80052d4:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80052d6:	f240 5334 	movw	r3, #1332	; 0x534
 80052da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	189b      	adds	r3, r3, r2
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	fa22 f203 	lsr.w	r2, r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80052f6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80052fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005304:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	ea4f 2393 	mov.w	r3, r3, lsr #10
 800530c:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800530e:	f240 5334 	movw	r3, #1332	; 0x534
 8005312:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	189b      	adds	r3, r3, r2
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	fa22 f203 	lsr.w	r2, r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800532e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005332:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800533c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	ea4f 3353 	mov.w	r3, r3, lsr #13
 8005344:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8005346:	f240 5334 	movw	r3, #1332	; 0x534
 800534a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	189b      	adds	r3, r3, r2
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	fa22 f203 	lsr.w	r2, r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60da      	str	r2, [r3, #12]
}
 8005366:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800536a:	46bd      	mov	sp, r7
 800536c:	bc80      	pop	{r7}
 800536e:	4770      	bx	lr

08005370 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	460b      	mov	r3, r1
 800537a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00c      	beq.n	800539c <RCC_AHB1PeriphClockCmd+0x2c>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8005382:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005386:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800538a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800538e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005392:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	430a      	orrs	r2, r1
 8005398:	631a      	str	r2, [r3, #48]	; 0x30
 800539a:	e00d      	b.n	80053b8 <RCC_AHB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800539c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80053a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80053a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80053ac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	ea6f 0202 	mvn.w	r2, r2
 80053b4:	400a      	ands	r2, r1
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80053b8:	f107 070c 	add.w	r7, r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop

080053c4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00c      	beq.n	80053f0 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80053d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80053da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053de:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80053e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80053e6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	641a      	str	r2, [r3, #64]	; 0x40
 80053ee:	e00d      	b.n	800540c <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80053f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80053f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80053fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005400:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	ea6f 0202 	mvn.w	r2, r2
 8005408:	400a      	ands	r2, r1
 800540a:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800540c:	f107 070c 	add.w	r7, r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	bc80      	pop	{r7}
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop

08005418 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00c      	beq.n	8005444 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800542a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800542e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005432:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005436:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800543a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	430a      	orrs	r2, r1
 8005440:	645a      	str	r2, [r3, #68]	; 0x44
 8005442:	e00d      	b.n	8005460 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8005444:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005448:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800544c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005450:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005454:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	ea6f 0202 	mvn.w	r2, r2
 800545c:	400a      	ands	r2, r1
 800545e:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8005460:	f107 070c 	add.w	r7, r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop

0800546c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	460b      	mov	r3, r1
 8005476:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00c      	beq.n	8005498 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800547e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005482:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005486:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800548a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800548e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	430a      	orrs	r2, r1
 8005494:	625a      	str	r2, [r3, #36]	; 0x24
 8005496:	e00d      	b.n	80054b4 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8005498:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800549c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80054a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80054a4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80054a8:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	ea6f 0202 	mvn.w	r2, r2
 80054b0:	400a      	ands	r2, r1
 80054b2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80054b4:	f107 070c 	add.w	r7, r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bc80      	pop	{r7}
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop

080054c0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b08a      	sub	sp, #40	; 0x28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80054ca:	f04f 0300 	mov.w	r3, #0
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
 80054d0:	f04f 0300 	mov.w	r3, #0
 80054d4:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80054d6:	f04f 0300 	mov.w	r3, #0
 80054da:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80054dc:	f04f 0300 	mov.w	r3, #0
 80054e0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	8a1b      	ldrh	r3, [r3, #16]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	88db      	ldrh	r3, [r3, #6]
 80054f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f8:	4313      	orrs	r3, r2
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	b29a      	uxth	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	899b      	ldrh	r3, [r3, #12]
 8005508:	b29b      	uxth	r3, r3
 800550a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005512:	f023 030c 	bic.w	r3, r3, #12
 8005516:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	889a      	ldrh	r2, [r3, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	891b      	ldrh	r3, [r3, #8]
 8005520:	4313      	orrs	r3, r2
 8005522:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005528:	4313      	orrs	r3, r2
 800552a:	b29b      	uxth	r3, r3
 800552c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552e:	4313      	orrs	r3, r2
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	b29a      	uxth	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	8a9b      	ldrh	r3, [r3, #20]
 800553e:	b29b      	uxth	r3, r3
 8005540:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005548:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	899b      	ldrh	r3, [r3, #12]
 800554e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005550:	4313      	orrs	r3, r2
 8005552:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	b29a      	uxth	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800555c:	f107 0308 	add.w	r3, r7, #8
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff fe1f 	bl	80051a4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800556c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005570:	429a      	cmp	r2, r3
 8005572:	d006      	beq.n	8005582 <USART_Init+0xc2>
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800557a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800557e:	429a      	cmp	r2, r3
 8005580:	d102      	bne.n	8005588 <USART_Init+0xc8>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	623b      	str	r3, [r7, #32]
 8005586:	e001      	b.n	800558c <USART_Init+0xcc>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	899b      	ldrh	r3, [r3, #12]
 8005590:	b29b      	uxth	r3, r3
 8005592:	b29b      	uxth	r3, r3
 8005594:	b21b      	sxth	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	da0f      	bge.n	80055ba <USART_Init+0xfa>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800559a:	6a3a      	ldr	r2, [r7, #32]
 800559c:	4613      	mov	r3, r2
 800559e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80055a2:	189b      	adds	r3, r3, r2
 80055a4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80055a8:	189a      	adds	r2, r3, r2
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80055b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	e00e      	b.n	80055d8 <USART_Init+0x118>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80055ba:	6a3a      	ldr	r2, [r7, #32]
 80055bc:	4613      	mov	r3, r2
 80055be:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80055c2:	189b      	adds	r3, r3, r2
 80055c4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80055c8:	189a      	adds	r2, r3, r2
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80055d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d6:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80055d8:	69fa      	ldr	r2, [r7, #28]
 80055da:	f248 531f 	movw	r3, #34079	; 0x851f
 80055de:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80055e2:	fba3 1302 	umull	r1, r3, r3, r2
 80055e6:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80055ea:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80055f6:	f04f 0264 	mov.w	r2, #100	; 0x64
 80055fa:	fb02 f303 	mul.w	r3, r2, r3
 80055fe:	69fa      	ldr	r2, [r7, #28]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	899b      	ldrh	r3, [r3, #12]
 8005608:	b29b      	uxth	r3, r3
 800560a:	b29b      	uxth	r3, r3
 800560c:	b21b      	sxth	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	da12      	bge.n	8005638 <USART_Init+0x178>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005618:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800561c:	f248 531f 	movw	r3, #34079	; 0x851f
 8005620:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8005624:	fba3 1302 	umull	r1, r3, r3, r2
 8005628:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005632:	4313      	orrs	r3, r2
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
 8005636:	e011      	b.n	800565c <USART_Init+0x19c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800563e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005642:	f248 531f 	movw	r3, #34079	; 0x851f
 8005646:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800564a:	fba3 1302 	umull	r1, r3, r3, r2
 800564e:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005658:	4313      	orrs	r3, r2
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	b29a      	uxth	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	811a      	strh	r2, [r3, #8]
}
 8005664:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d008      	beq.n	8005690 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	899b      	ldrh	r3, [r3, #12]
 8005682:	b29b      	uxth	r3, r3
 8005684:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005688:	b29a      	uxth	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	819a      	strh	r2, [r3, #12]
 800568e:	e007      	b.n	80056a0 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	899b      	ldrh	r3, [r3, #12]
 8005694:	b29b      	uxth	r3, r3
 8005696:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800569a:	b29a      	uxth	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	819a      	strh	r2, [r3, #12]
  }
}
 80056a0:	f107 070c 	add.w	r7, r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop

080056ac <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	460b      	mov	r3, r1
 80056b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80056b8:	887b      	ldrh	r3, [r7, #2]
 80056ba:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80056be:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	809a      	strh	r2, [r3, #4]
}
 80056c8:	f107 070c 	add.w	r7, r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop

080056d4 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	889b      	ldrh	r3, [r3, #4]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80056e6:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80056ea:	b29b      	uxth	r3, r3
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	f107 070c 	add.w	r7, r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bc80      	pop	{r7}
 80056f6:	4770      	bx	lr

080056f8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	4613      	mov	r3, r2
 8005702:	460a      	mov	r2, r1
 8005704:	807a      	strh	r2, [r7, #2]
 8005706:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8005708:	f04f 0300 	mov.w	r3, #0
 800570c:	613b      	str	r3, [r7, #16]
 800570e:	f04f 0300 	mov.w	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800571a:	f04f 0300 	mov.w	r3, #0
 800571e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8005724:	887b      	ldrh	r3, [r7, #2]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800572c:	b2db      	uxtb	r3, r3
 800572e:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8005730:	887b      	ldrh	r3, [r7, #2]
 8005732:	f003 031f 	and.w	r3, r3, #31
 8005736:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f04f 0201 	mov.w	r2, #1
 800573e:	fa02 f303 	lsl.w	r3, r2, r3
 8005742:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d104      	bne.n	8005754 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f103 030c 	add.w	r3, r3, #12
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	e00b      	b.n	800576c <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d104      	bne.n	8005764 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f103 0310 	add.w	r3, r3, #16
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	e003      	b.n	800576c <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f103 0314 	add.w	r3, r3, #20
 800576a:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800576c:	787b      	ldrb	r3, [r7, #1]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d006      	beq.n	8005780 <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	6811      	ldr	r1, [r2, #0]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	430a      	orrs	r2, r1
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	e007      	b.n	8005790 <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	6811      	ldr	r1, [r2, #0]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	ea6f 0202 	mvn.w	r2, r2
 800578c:	400a      	ands	r2, r1
 800578e:	601a      	str	r2, [r3, #0]
  }
}
 8005790:	f107 071c 	add.w	r7, r7, #28
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop

0800579c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	460b      	mov	r3, r1
 80057a6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80057a8:	f04f 0300 	mov.w	r3, #0
 80057ac:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	887b      	ldrh	r3, [r7, #2]
 80057b6:	4013      	ands	r3, r2
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 80057be:	f04f 0301 	mov.w	r3, #1
 80057c2:	73fb      	strb	r3, [r7, #15]
 80057c4:	e002      	b.n	80057cc <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 80057c6:	f04f 0300 	mov.w	r3, #0
 80057ca:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	f107 0714 	add.w	r7, r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop

080057dc <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 80057e8:	887b      	ldrh	r3, [r7, #2]
 80057ea:	ea6f 0303 	mvn.w	r3, r3
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	801a      	strh	r2, [r3, #0]
}
 80057f4:	f107 070c 	add.w	r7, r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bc80      	pop	{r7}
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop

08005800 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 800580c:	f04f 0300 	mov.w	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800581e:	f04f 0300 	mov.w	r3, #0
 8005822:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8005824:	887b      	ldrh	r3, [r7, #2]
 8005826:	b2db      	uxtb	r3, r3
 8005828:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800582c:	b2db      	uxtb	r3, r3
 800582e:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8005830:	887b      	ldrh	r3, [r7, #2]
 8005832:	f003 031f 	and.w	r3, r3, #31
 8005836:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f04f 0201 	mov.w	r2, #1
 800583e:	fa02 f303 	lsl.w	r3, r2, r3
 8005842:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d106      	bne.n	8005858 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	899b      	ldrh	r3, [r3, #12]
 800584e:	b29b      	uxth	r3, r3
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	4013      	ands	r3, r2
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	e00f      	b.n	8005878 <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d106      	bne.n	800586c <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	8a1b      	ldrh	r3, [r3, #16]
 8005862:	b29b      	uxth	r3, r3
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4013      	ands	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	e005      	b.n	8005878 <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	8a9b      	ldrh	r3, [r3, #20]
 8005870:	b29b      	uxth	r3, r3
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	4013      	ands	r3, r2
 8005876:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8005878:	887b      	ldrh	r3, [r7, #2]
 800587a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800587e:	b29b      	uxth	r3, r3
 8005880:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f04f 0201 	mov.w	r2, #1
 8005888:	fa02 f303 	lsl.w	r3, r2, r3
 800588c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	b29b      	uxth	r3, r3
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4013      	ands	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d006      	beq.n	80058ae <USART_GetITStatus+0xae>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
 80058a6:	f04f 0301 	mov.w	r3, #1
 80058aa:	74fb      	strb	r3, [r7, #19]
 80058ac:	e002      	b.n	80058b4 <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
 80058ae:	f04f 0300 	mov.w	r3, #0
 80058b2:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80058b4:	7cfb      	ldrb	r3, [r7, #19]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	f107 071c 	add.w	r7, r7, #28
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop

080058c4 <register_fini>:
 80058c4:	f240 0300 	movw	r3, #0
 80058c8:	f2c0 0300 	movt	r3, #0
 80058cc:	b12b      	cbz	r3, 80058da <register_fini+0x16>
 80058ce:	f640 70c1 	movw	r0, #4033	; 0xfc1
 80058d2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80058d6:	f7fb bb6d 	b.w	8000fb4 <atexit>
 80058da:	4770      	bx	lr
 80058dc:	00000d0a 	.word	0x00000d0a
 80058e0:	72617453 	.word	0x72617453
 80058e4:	61532074 	.word	0x61532074
 80058e8:	696c706d 	.word	0x696c706d
 80058ec:	2e2e676e 	.word	0x2e2e676e
 80058f0:	00000a2e 	.word	0x00000a2e
 80058f4:	78614d0a 	.word	0x78614d0a
 80058f8:	6d756d69 	.word	0x6d756d69
 80058fc:	3a736920 	.word	0x3a736920
 8005900:	2e642520 	.word	0x2e642520
 8005904:	76206425 	.word	0x76206425
 8005908:	0000000a 	.word	0x0000000a
 800590c:	2020200d 	.word	0x2020200d
 8005910:	20202020 	.word	0x20202020
 8005914:	20202020 	.word	0x20202020
 8005918:	20202020 	.word	0x20202020
 800591c:	20202020 	.word	0x20202020
 8005920:	000d2020 	.word	0x000d2020
 8005924:	72616548 	.word	0x72616548
 8005928:	65422074 	.word	0x65422074
 800592c:	203a7461 	.word	0x203a7461
 8005930:	00006425 	.word	0x00006425
 8005934:	73203031 	.word	0x73203031
 8005938:	2e2e6365 	.word	0x2e2e6365
 800593c:	000d0a2e 	.word	0x000d0a2e
 8005940:	6e727554 	.word	0x6e727554
 8005944:	5466664f 	.word	0x5466664f
 8005948:	00656d69 	.word	0x00656d69
 800594c:	63657331 	.word	0x63657331
 8005950:	63697420 	.word	0x63697420
 8005954:	0000006b 	.word	0x0000006b
 8005958:	20303031 	.word	0x20303031
 800595c:	74207a48 	.word	0x74207a48
 8005960:	006b6369 	.word	0x006b6369
 8005964:	52415355 	.word	0x52415355
 8005968:	00000054 	.word	0x00000054
 800596c:	72616548 	.word	0x72616548
 8005970:	61654274 	.word	0x61654274
 8005974:	00000074 	.word	0x00000074
 8005978:	00000000 	.word	0x00000000
 800597c:	00000001 	.word	0x00000001
 8005980:	00000002 	.word	0x00000002
 8005984:	20726d54 	.word	0x20726d54
 8005988:	00637653 	.word	0x00637653
 800598c:	454c4449 	.word	0x454c4449
 8005990:	00000000 	.word	0x00000000
 8005994:	00000a0d 	.word	0x00000a0d
 8005998:	20207525 	.word	0x20207525
 800599c:	20206325 	.word	0x20206325
 80059a0:	36312d25 	.word	0x36312d25
 80059a4:	20202073 	.word	0x20202073
 80059a8:	20202020 	.word	0x20202020
 80059ac:	30202020 	.word	0x30202020
 80059b0:	30202020 	.word	0x30202020
 80059b4:	20202525 	.word	0x20202525
 80059b8:	0d753525 	.word	0x0d753525
 80059bc:	0000000a 	.word	0x0000000a
 80059c0:	20207525 	.word	0x20207525
 80059c4:	20206325 	.word	0x20206325
 80059c8:	36312d25 	.word	0x36312d25
 80059cc:	31252073 	.word	0x31252073
 80059d0:	25207530 	.word	0x25207530
 80059d4:	25257533 	.word	0x25257533
 80059d8:	35252020 	.word	0x35252020
 80059dc:	000a0d75 	.word	0x000a0d75
 80059e0:	20207525 	.word	0x20207525
 80059e4:	20206325 	.word	0x20206325
 80059e8:	36312d25 	.word	0x36312d25
 80059ec:	31252073 	.word	0x31252073
 80059f0:	20207530 	.word	0x20207530
 80059f4:	2525313c 	.word	0x2525313c
 80059f8:	35252020 	.word	0x35252020
 80059fc:	000a0d75 	.word	0x000a0d75

08005a00 <_global_impure_ptr>:
 8005a00:	20000004                                ... 

08005a04 <__sf_fake_stderr>:
 8005a04:	00000000 00000000 00000000 00000000     ................
 8005a14:	00000000 00000000 00000000 00000000     ................

08005a24 <__sf_fake_stdout>:
 8005a24:	00000000 00000000 00000000 00000000     ................
 8005a34:	00000000 00000000 00000000 00000000     ................

08005a44 <__sf_fake_stdin>:
 8005a44:	00000000 00000000 00000000 00000000     ................
 8005a54:	00000000 00000000 00000000 00000000     ................
 8005a64:	00000043                                C...

08005a68 <_init>:
 8005a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6a:	bf00      	nop
 8005a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6e:	bc08      	pop	{r3}
 8005a70:	469e      	mov	lr, r3
 8005a72:	4770      	bx	lr

08005a74 <_fini>:
 8005a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a76:	bf00      	nop
 8005a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a7a:	bc08      	pop	{r3}
 8005a7c:	469e      	mov	lr, r3
 8005a7e:	4770      	bx	lr
